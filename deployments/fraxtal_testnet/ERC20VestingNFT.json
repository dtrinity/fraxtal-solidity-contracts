{
  "address": "0x17E44D2c40FC9a625eE4ddF5F06F450c115D1144",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_dstakeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_vestingPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxTotalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minDepositAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepositBelowMinimum",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepositsDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721EnumerableForbiddenBatchMint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721IncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721InsufficientApproval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721NonexistentToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "ERC721OutOfBoundsIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxSupplyExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTokenOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenAlreadyMatured",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenNotExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferOfMaturedToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VestingAlreadyComplete",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VestingNotComplete",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "DepositsToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxSupply",
          "type": "uint256"
        }
      ],
      "name": "MaxTotalSupplyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinDepositAmount",
          "type": "uint256"
        }
      ],
      "name": "MinDepositAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RedeemedEarly",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawnMatured",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositsEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dstakeToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRemainingVestingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getVestingPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "matured",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "vestingComplete",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isVestingComplete",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "redeemEarly",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setDepositsEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMaxSupply",
          "type": "uint256"
        }
      ],
      "name": "setMaxTotalSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinDepositAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinDepositAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposited",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vestingPositions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "depositTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "matured",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawMatured",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x462b34446280a52ee72f09c36570eecb076c75df7febc8f7e9ad266e4d84ac3c",
  "receipt": {
    "to": null,
    "from": "0x53Ae1433Ab4563d7D5a84d27524784837259f105",
    "contractAddress": "0x17E44D2c40FC9a625eE4ddF5F06F450c115D1144",
    "transactionIndex": 1,
    "gasUsed": "2785842",
    "logsBloom": "0x
    "blockHash": "0x27fed136f3e2dc67dc8d706be069c8109d8e98c9ef2e1fbf49498ab3fe8fc691",
    "transactionHash": "0x462b34446280a52ee72f09c36570eecb076c75df7febc8f7e9ad266e4d84ac3c",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 26600536,
        "transactionHash": "0x462b34446280a52ee72f09c36570eecb076c75df7febc8f7e9ad266e4d84ac3c",
        "address": "0x17E44D2c40FC9a625eE4ddF5F06F450c115D1144",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000053ae1433ab4563d7d5a84d27524784837259f105"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x27fed136f3e2dc67dc8d706be069c8109d8e98c9ef2e1fbf49498ab3fe8fc691"
      }
    ],
    "blockNumber": 26600536,
    "cumulativeGasUsed": "2831823",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "dBOOST sdUSD Season 1",
    "sdUSD-S1",
    "0x0aC5Ec7aF3861807185C5b54B75107b70511A308",
    15552000,
    "20000000000000000000000000",
    "250000000000000000000000",
    "0x53Ae1433Ab4563d7D5a84d27524784837259f105"
  ],
  "numDeployments": 1,
  "solcInputHash": "ad5d8cb6d85c1e685986b758c866de4e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_dstakeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minDepositAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositBelowMinimum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositsDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721EnumerableForbiddenBatchMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ERC721OutOfBoundsIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxSupplyExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTokenOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenAlreadyMatured\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferOfMaturedToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VestingAlreadyComplete\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VestingNotComplete\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"DepositsToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"MaxTotalSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinDepositAmount\",\"type\":\"uint256\"}],\"name\":\"MinDepositAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedeemedEarly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawnMatured\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dstakeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRemainingVestingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getVestingPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"matured\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"vestingComplete\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isVestingComplete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"redeemEarly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setDepositsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMaxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxTotalSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinDepositAmount\",\"type\":\"uint256\"}],\"name\":\"setMinDepositAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vestingPositions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"matured\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawMatured\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Users deposit dSTAKE tokens and receive NFTs representing their vesting positions.      NFTs can be burned for early exit or become soul-bound after matured withdrawal.\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC721EnumerableForbiddenBatchMint()\":[{\"details\":\"Batch mint is not allowed.\"}],\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721OutOfBoundsIndex(address,uint256)\":[{\"details\":\"An `owner`'s token query was out of bounds for `index`. NOTE: The owner being `address(0)` indicates a global out of bounds index.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"params\":{\"_dstakeToken\":\"Address of the dSTAKE token\",\"_initialOwner\":\"Initial owner of the contract\",\"_maxTotalSupply\":\"Maximum total dSTAKE that can be deposited\",\"_minDepositAmount\":\"Minimum deposit amount threshold\",\"_name\":\"Name of the NFT collection\",\"_symbol\":\"Symbol of the NFT collection\",\"_vestingPeriod\":\"Vesting period in seconds (6 months)\"}},\"deposit(uint256)\":{\"params\":{\"amount\":\"Amount of dSTAKE tokens to deposit\"},\"returns\":{\"tokenId\":\"The ID of the minted NFT\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRemainingVestingTime(uint256)\":{\"params\":{\"tokenId\":\"The NFT token ID\"},\"returns\":{\"_0\":\"Remaining time in seconds (0 if vesting complete)\"}},\"getVestingPosition(uint256)\":{\"params\":{\"tokenId\":\"The NFT token ID\"},\"returns\":{\"amount\":\"Amount of dSTAKE deposited\",\"depositTime\":\"Timestamp of deposit\",\"matured\":\"Whether the NFT is soul-bound\",\"vestingComplete\":\"Whether vesting period has ended\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isVestingComplete(uint256)\":{\"params\":{\"tokenId\":\"The NFT token ID\"},\"returns\":{\"_0\":\"Whether the vesting period has completed\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"redeemEarly(uint256)\":{\"params\":{\"tokenId\":\"The ID of the NFT to redeem\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setDepositsEnabled(bool)\":{\"params\":{\"enabled\":\"Whether deposits should be enabled\"}},\"setMaxTotalSupply(uint256)\":{\"details\":\"Can be set below current totalDeposited to allow withdrawals until cap is reached\",\"params\":{\"newMaxSupply\":\"New maximum total supply\"}},\"setMinDepositAmount(uint256)\":{\"params\":{\"newMinDepositAmount\":\"New minimum deposit amount\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawMatured(uint256)\":{\"params\":{\"tokenId\":\"The ID of the NFT to withdraw from\"}}},\"title\":\"ERC20VestingNFT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initialize the vesting NFT contract\"},\"deposit(uint256)\":{\"notice\":\"Deposit dSTAKE tokens and receive a vesting NFT\"},\"depositsEnabled()\":{\"notice\":\"Whether new deposits are enabled\"},\"dstakeToken()\":{\"notice\":\"The dSTAKE token contract\"},\"getRemainingVestingTime(uint256)\":{\"notice\":\"Get the remaining vesting time for a position\"},\"getVestingPosition(uint256)\":{\"notice\":\"Get vesting position details\"},\"isVestingComplete(uint256)\":{\"notice\":\"Check if a vesting position is ready for matured withdrawal\"},\"maxTotalSupply()\":{\"notice\":\"Maximum total dSTAKE supply that can be deposited\"},\"minDepositAmount()\":{\"notice\":\"Minimum deposit amount threshold\"},\"redeemEarly(uint256)\":{\"notice\":\"Redeem dSTAKE tokens early by burning the NFT (before vesting period)\"},\"setDepositsEnabled(bool)\":{\"notice\":\"Toggle whether new deposits are enabled\"},\"setMaxTotalSupply(uint256)\":{\"notice\":\"Update the maximum total supply of dSTAKE that can be deposited\"},\"setMinDepositAmount(uint256)\":{\"notice\":\"Set minimum deposit amount threshold\"},\"supportsInterface(bytes4)\":{\"notice\":\"Override required by Solidity for multiple inheritance\"},\"totalDeposited()\":{\"notice\":\"Current total dSTAKE deposited\"},\"vestingPeriod()\":{\"notice\":\"The vesting period duration (6 months, set at deployment)\"},\"vestingPositions(uint256)\":{\"notice\":\"Mapping from token ID to vesting position\"},\"withdrawMatured(uint256)\":{\"notice\":\"Withdraw dSTAKE tokens after vesting period and make NFT soul-bound\"}},\"notice\":\"A soft locker contract for dSTAKE tokens with 6-month vesting period\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/vesting/ERC20VestingNFT.sol\":\"ERC20VestingNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-5/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {IERC721Enumerable} from \\\"./IERC721Enumerable.sol\\\";\\nimport {IERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds enumerability\\n * of all the token ids in the contract as well as all token ids owned by each account.\\n *\\n * CAUTION: `ERC721` extensions that implement custom `balanceOf` logic, such as `ERC721Consecutive`,\\n * interfere with enumerability and should not be used together with `ERC721Enumerable`.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    mapping(address owner => mapping(uint256 index => uint256)) private _ownedTokens;\\n    mapping(uint256 tokenId => uint256) private _ownedTokensIndex;\\n\\n    uint256[] private _allTokens;\\n    mapping(uint256 tokenId => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev An `owner`'s token query was out of bounds for `index`.\\n     *\\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\\n     */\\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\\n\\n    /**\\n     * @dev Batch mint is not allowed.\\n     */\\n    error ERC721EnumerableForbiddenBatchMint();\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\\n        if (index >= balanceOf(owner)) {\\n            revert ERC721OutOfBoundsIndex(owner, index);\\n        }\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\\n        if (index >= totalSupply()) {\\n            revert ERC721OutOfBoundsIndex(address(0), index);\\n        }\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_update}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\\n        address previousOwner = super._update(to, tokenId, auth);\\n\\n        if (previousOwner == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n\\n        return previousOwner;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = balanceOf(to) - 1;\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = balanceOf(from);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\\n     */\\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\\n        if (amount > 0) {\\n            revert ERC721EnumerableForbiddenBatchMint();\\n        }\\n        super._increaseBalance(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x36797469c391ea5ba27408e6ca8adf0824ba6f3adea9c139be18bd6f63232c16\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.2) (utils/Base64.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 0x20)\\n            let dataPtr := data\\n            let endPtr := add(data, mload(data))\\n\\n            // In some cases, the last iteration will read bytes after the end of the data. We cache the value, and\\n            // set it to zero to make sure no dirty bytes are read in that section.\\n            let afterPtr := add(endPtr, 0x20)\\n            let afterCache := mload(afterPtr)\\n            mstore(afterPtr, 0x00)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 byte (24 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F to bitmask the least significant 6 bits.\\n                // Use this as an index into the lookup table, mload an entire word\\n                // so the desired character is in the least significant byte, and\\n                // mstore8 this least significant byte into the result and continue.\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // Reset the value that was cached\\n            mstore(afterPtr, afterCache)\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x09000342b85b1a06fa1f5b71bdeef7c449cd25799aac14fa9053d8abd18219aa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/vaults/vesting/ERC20VestingNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-5/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/utils/Base64.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @title ERC20VestingNFT\\n * @notice A soft locker contract for dSTAKE tokens with 6-month vesting period\\n * @dev Users deposit dSTAKE tokens and receive NFTs representing their vesting positions.\\n *      NFTs can be burned for early exit or become soul-bound after matured withdrawal.\\n */\\ncontract ERC20VestingNFT is ERC721, ERC721Enumerable, Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // ============ State Variables ============\\n\\n    /// @notice The dSTAKE token contract\\n    IERC20 public immutable dstakeToken;\\n\\n    /// @notice The vesting period duration (6 months, set at deployment)\\n    uint256 public immutable vestingPeriod;\\n\\n    /// @notice Whether new deposits are enabled\\n    bool public depositsEnabled;\\n\\n    /// @notice Maximum total dSTAKE supply that can be deposited\\n    uint256 public maxTotalSupply;\\n\\n    /// @notice Minimum deposit amount threshold\\n    uint256 public minDepositAmount;\\n\\n    /// @notice Current total dSTAKE deposited\\n    uint256 public totalDeposited;\\n\\n    /// @notice Token ID counter\\n    uint256 private _tokenIdCounter;\\n\\n    /// @notice Vesting position data for each NFT\\n    struct VestingPosition {\\n        uint256 amount; // Amount of dSTAKE deposited\\n        uint256 depositTime; // Timestamp when deposit was made\\n        bool matured; // Whether the NFT has been matured (soul-bound)\\n    }\\n\\n    /// @notice Mapping from token ID to vesting position\\n    mapping(uint256 => VestingPosition) public vestingPositions;\\n\\n    // ============ Events ============\\n\\n    event Deposited(\\n        address indexed user,\\n        uint256 indexed tokenId,\\n        uint256 amount\\n    );\\n    event RedeemedEarly(\\n        address indexed user,\\n        uint256 indexed tokenId,\\n        uint256 amount\\n    );\\n    event WithdrawnMatured(\\n        address indexed user,\\n        uint256 indexed tokenId,\\n        uint256 amount\\n    );\\n    event DepositsToggled(bool enabled);\\n    event MaxTotalSupplyUpdated(uint256 newMaxSupply);\\n    event MinDepositAmountUpdated(uint256 newMinDepositAmount);\\n    event MetadataUpdate(uint256 indexed tokenId);\\n\\n    // ============ Errors ============\\n\\n    error ZeroAmount();\\n    error ZeroAddress();\\n    error DepositsDisabled();\\n    error MaxSupplyExceeded();\\n    error TokenNotExists();\\n    error NotTokenOwner();\\n    error VestingNotComplete();\\n    error VestingAlreadyComplete();\\n    error TokenAlreadyMatured();\\n    error TransferOfMaturedToken();\\n    error DepositBelowMinimum();\\n\\n    // ============ Constructor ============\\n\\n    /**\\n     * @notice Initialize the vesting NFT contract\\n     * @param _name Name of the NFT collection\\n     * @param _symbol Symbol of the NFT collection\\n     * @param _dstakeToken Address of the dSTAKE token\\n     * @param _vestingPeriod Vesting period in seconds (6 months)\\n     * @param _maxTotalSupply Maximum total dSTAKE that can be deposited\\n     * @param _minDepositAmount Minimum deposit amount threshold\\n     * @param _initialOwner Initial owner of the contract\\n     */\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _dstakeToken,\\n        uint256 _vestingPeriod,\\n        uint256 _maxTotalSupply,\\n        uint256 _minDepositAmount,\\n        address _initialOwner\\n    ) ERC721(_name, _symbol) Ownable(_initialOwner) {\\n        if (_dstakeToken == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        if (_vestingPeriod == 0 || _maxTotalSupply == 0) {\\n            revert ZeroAmount();\\n        }\\n\\n        dstakeToken = IERC20(_dstakeToken);\\n        vestingPeriod = _vestingPeriod;\\n        maxTotalSupply = _maxTotalSupply;\\n        minDepositAmount = _minDepositAmount;\\n        depositsEnabled = true;\\n\\n        // Start token IDs from 1\\n        _tokenIdCounter = 1;\\n    }\\n\\n    // ============ External Functions ============\\n\\n    /**\\n     * @notice Deposit dSTAKE tokens and receive a vesting NFT\\n     * @param amount Amount of dSTAKE tokens to deposit\\n     * @return tokenId The ID of the minted NFT\\n     */\\n    function deposit(\\n        uint256 amount\\n    ) external nonReentrant returns (uint256 tokenId) {\\n        if (amount == 0) revert ZeroAmount();\\n        if (!depositsEnabled) revert DepositsDisabled();\\n        if (amount < minDepositAmount) revert DepositBelowMinimum();\\n        if (totalDeposited + amount > maxTotalSupply)\\n            revert MaxSupplyExceeded();\\n\\n        // Transfer dSTAKE tokens from user\\n        dstakeToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // Mint NFT\\n        tokenId = _tokenIdCounter;\\n        _tokenIdCounter++;\\n        _safeMint(msg.sender, tokenId);\\n\\n        // Store vesting position\\n        vestingPositions[tokenId] = VestingPosition({\\n            amount: amount,\\n            depositTime: block.timestamp,\\n            matured: false\\n        });\\n\\n        // Update total deposited\\n        totalDeposited += amount;\\n\\n        emit Deposited(msg.sender, tokenId, amount);\\n    }\\n\\n    /**\\n     * @notice Redeem dSTAKE tokens early by burning the NFT (before vesting period)\\n     * @param tokenId The ID of the NFT to redeem\\n     */\\n    function redeemEarly(uint256 tokenId) external nonReentrant {\\n        if (!_tokenExists(tokenId)) revert TokenNotExists();\\n        if (ownerOf(tokenId) != msg.sender) revert NotTokenOwner();\\n\\n        VestingPosition memory position = vestingPositions[tokenId];\\n        if (position.matured) revert TokenAlreadyMatured();\\n        if (block.timestamp >= position.depositTime + vestingPeriod) {\\n            revert VestingAlreadyComplete();\\n        }\\n\\n        uint256 amount = position.amount;\\n\\n        // Delete vesting position and burn NFT\\n        delete vestingPositions[tokenId];\\n        _burn(tokenId);\\n\\n        // Update total deposited\\n        totalDeposited -= amount;\\n\\n        // Transfer dSTAKE tokens back to user\\n        dstakeToken.safeTransfer(msg.sender, amount);\\n\\n        emit RedeemedEarly(msg.sender, tokenId, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw dSTAKE tokens after vesting period and make NFT soul-bound\\n     * @param tokenId The ID of the NFT to withdraw from\\n     */\\n    function withdrawMatured(uint256 tokenId) external nonReentrant {\\n        if (!_tokenExists(tokenId)) revert TokenNotExists();\\n        if (ownerOf(tokenId) != msg.sender) revert NotTokenOwner();\\n\\n        VestingPosition storage position = vestingPositions[tokenId];\\n        if (position.matured) revert TokenAlreadyMatured();\\n        if (block.timestamp < position.depositTime + vestingPeriod) {\\n            revert VestingNotComplete();\\n        }\\n\\n        uint256 amount = position.amount;\\n\\n        // Mark as matured (soul-bound)\\n        position.matured = true;\\n\\n        // Update total deposited\\n        totalDeposited -= amount;\\n\\n        // Transfer dSTAKE tokens back to user\\n        dstakeToken.safeTransfer(msg.sender, amount);\\n\\n        emit WithdrawnMatured(msg.sender, tokenId, amount);\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    // ============ Owner Functions ============\\n\\n    /**\\n     * @notice Toggle whether new deposits are enabled\\n     * @param enabled Whether deposits should be enabled\\n     */\\n    function setDepositsEnabled(bool enabled) external onlyOwner {\\n        depositsEnabled = enabled;\\n        emit DepositsToggled(enabled);\\n    }\\n\\n    /**\\n     * @notice Update the maximum total supply of dSTAKE that can be deposited\\n     * @param newMaxSupply New maximum total supply\\n     * @dev Can be set below current totalDeposited to allow withdrawals until cap is reached\\n     */\\n    function setMaxTotalSupply(uint256 newMaxSupply) external onlyOwner {\\n        maxTotalSupply = newMaxSupply;\\n        emit MaxTotalSupplyUpdated(newMaxSupply);\\n    }\\n\\n    /**\\n     * @notice Set minimum deposit amount threshold\\n     * @param newMinDepositAmount New minimum deposit amount\\n     */\\n    function setMinDepositAmount(\\n        uint256 newMinDepositAmount\\n    ) external onlyOwner {\\n        minDepositAmount = newMinDepositAmount;\\n        emit MinDepositAmountUpdated(newMinDepositAmount);\\n    }\\n\\n    // ============ View Functions ============\\n\\n    /**\\n     * @notice Check if a vesting position is ready for matured withdrawal\\n     * @param tokenId The NFT token ID\\n     * @return Whether the vesting period has completed\\n     */\\n    function isVestingComplete(uint256 tokenId) external view returns (bool) {\\n        if (!_tokenExists(tokenId)) return false;\\n        VestingPosition memory position = vestingPositions[tokenId];\\n        return block.timestamp >= position.depositTime + vestingPeriod;\\n    }\\n\\n    /**\\n     * @notice Get the remaining vesting time for a position\\n     * @param tokenId The NFT token ID\\n     * @return Remaining time in seconds (0 if vesting complete)\\n     */\\n    function getRemainingVestingTime(\\n        uint256 tokenId\\n    ) external view returns (uint256) {\\n        if (!_tokenExists(tokenId)) revert TokenNotExists();\\n        VestingPosition memory position = vestingPositions[tokenId];\\n        uint256 vestingEndTime = position.depositTime + vestingPeriod;\\n        if (block.timestamp >= vestingEndTime) return 0;\\n        return vestingEndTime - block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Get vesting position details\\n     * @param tokenId The NFT token ID\\n     * @return amount Amount of dSTAKE deposited\\n     * @return depositTime Timestamp of deposit\\n     * @return matured Whether the NFT is soul-bound\\n     * @return vestingComplete Whether vesting period has ended\\n     */\\n    function getVestingPosition(\\n        uint256 tokenId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 amount,\\n            uint256 depositTime,\\n            bool matured,\\n            bool vestingComplete\\n        )\\n    {\\n        if (!_tokenExists(tokenId)) {\\n            return (0, 0, false, false);\\n        }\\n\\n        VestingPosition memory position = vestingPositions[tokenId];\\n        return (\\n            position.amount,\\n            position.depositTime,\\n            position.matured,\\n            block.timestamp >= position.depositTime + vestingPeriod\\n        );\\n    }\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view override returns (string memory) {\\n        if (!_tokenExists(tokenId)) revert TokenNotExists();\\n\\n        VestingPosition memory position = vestingPositions[tokenId];\\n\\n        // remaining seconds until vesting complete or 0\\n        uint256 remainingSeconds = 0;\\n        uint256 vestingEndTime = position.depositTime + vestingPeriod;\\n        if (block.timestamp < vestingEndTime) {\\n            remainingSeconds = vestingEndTime - block.timestamp;\\n        }\\n\\n        string memory symbol = IERC20Metadata(address(dstakeToken)).symbol();\\n        uint8 decimalsToken = IERC20Metadata(address(dstakeToken)).decimals();\\n\\n        uint256 displayAmount = position.amount /\\n            (10 ** uint256(decimalsToken));\\n        string memory amountStr = Strings.toString(displayAmount);\\n\\n        string memory image = _buildSVG(\\n            position,\\n            remainingSeconds,\\n            tokenId,\\n            symbol,\\n            amountStr\\n        );\\n\\n        string memory json = Base64.encode(\\n            bytes(\\n                string.concat(\\n                    '{\\\"name\\\":\\\"',\\n                    name(),\\n                    \\\" #\\\",\\n                    Strings.toString(tokenId),\\n                    '\\\",\\\"description\\\":\\\"Contains ',\\n                    symbol,\\n                    \\\" with a \\\",\\n                    Strings.toString(vestingPeriod),\\n                    ' second vesting period.\\\",',\\n                    '\\\"attributes\\\":[',\\n                    '{\\\"trait_type\\\":\\\"Amount\\\",\\\"value\\\":\\\"',\\n                    amountStr,\\n                    \\\" \\\",\\n                    symbol,\\n                    '\\\"}',\\n                    ',{\\\"trait_type\\\":\\\"Matured\\\",\\\"value\\\":\\\"',\\n                    position.matured ? \\\"true\\\" : \\\"false\\\",\\n                    '\\\"}',\\n                    ',{\\\"trait_type\\\":\\\"Remaining Seconds\\\",\\\"value\\\":\\\"',\\n                    Strings.toString(remainingSeconds),\\n                    '\\\"}',\\n                    \\\"],\\\",\\n                    '\\\"image\\\":\\\"',\\n                    image,\\n                    '\\\"}'\\n                )\\n            )\\n        );\\n\\n        return string.concat(\\\"data:application/json;base64,\\\", json);\\n    }\\n\\n    /// @dev Builds a very small SVG showing vesting progress and encodes it as base64 data URI.\\n    function _buildSVG(\\n        VestingPosition memory position,\\n        uint256 remainingSeconds,\\n        uint256 tokenId,\\n        string memory symbol,\\n        string memory displayAmount\\n    ) internal view returns (string memory) {\\n        // Simple progress bar width percentage\\n        uint256 progressPercent = 0;\\n        if (position.amount > 0) {\\n            uint256 elapsed = vestingPeriod - remainingSeconds;\\n            progressPercent = (elapsed * 100) / vestingPeriod;\\n        }\\n\\n        string memory svg = string.concat(\\n            '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"350\\\" height=\\\"200\\\" viewBox=\\\"0 0 350 200\\\">',\\n            \\\"<style>.base { fill: white; font-family: monospace; font-size: 14px; }</style>\\\",\\n            '<rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#1a237e\\\"/>',\\n            '<text x=\\\"10\\\" y=\\\"30\\\" class=\\\"base\\\">',\\n            name(),\\n            \\\" #\\\",\\n            Strings.toString(tokenId),\\n            \\\"</text>\\\",\\n            '<text x=\\\"10\\\" y=\\\"55\\\" class=\\\"base\\\">Amount: ',\\n            displayAmount,\\n            \\\" \\\",\\n            symbol,\\n            \\\"</text>\\\",\\n            '<text x=\\\"10\\\" y=\\\"80\\\" class=\\\"base\\\">Progress: ',\\n            Strings.toString(progressPercent),\\n            \\\"%</text>\\\",\\n            '<rect x=\\\"10\\\" y=\\\"100\\\" width=\\\"330\\\" height=\\\"20\\\" fill=\\\"#3949ab\\\"/>',\\n            '<rect x=\\\"10\\\" y=\\\"100\\\" width=\\\"',\\n            Strings.toString((progressPercent * 330) / 100),\\n            '\\\" height=\\\"20\\\" fill=\\\"#7e57c2\\\"/>',\\n            \\\"</svg>\\\"\\n        );\\n\\n        return\\n            string.concat(\\n                \\\"data:image/svg+xml;base64,\\\",\\n                Base64.encode(bytes(svg))\\n            );\\n    }\\n\\n    // ============ Internal Functions ============\\n\\n    /**\\n     * @notice Check if a token exists\\n     * @param tokenId The token ID to check\\n     * @return Whether the token exists\\n     */\\n    function _tokenExists(uint256 tokenId) internal view returns (bool) {\\n        return vestingPositions[tokenId].amount > 0;\\n    }\\n\\n    /**\\n     * @notice Override to prevent transfers of matured (soul-bound) NFTs\\n     */\\n    function _update(\\n        address to,\\n        uint256 tokenId,\\n        address auth\\n    ) internal override(ERC721, ERC721Enumerable) returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Allow minting and burning\\n        if (from != address(0) && to != address(0)) {\\n            // Prevent transfer of matured NFTs\\n            if (vestingPositions[tokenId].matured) {\\n                revert TransferOfMaturedToken();\\n            }\\n        }\\n\\n        return super._update(to, tokenId, auth);\\n    }\\n\\n    /**\\n     * @notice Override to handle balance updates\\n     */\\n    function _increaseBalance(\\n        address account,\\n        uint128 value\\n    ) internal override(ERC721, ERC721Enumerable) {\\n        super._increaseBalance(account, value);\\n    }\\n\\n    /**\\n     * @notice Override required by Solidity for multiple inheritance\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view override(ERC721, ERC721Enumerable) returns (bool) {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x98d62ac104f1d75570f27f87f85183e91d50351f378f54bb2655276dbe09d520\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x604060c0815234620004c85762003389803803806200001e81620004cd565b928339810160e082820312620004c85781516001600160401b038111620004c857816200004d918401620004f3565b602083015190916001600160401b038211620004c85762000070918401620004f3565b906200007e84840162000565565b6060840151916080850151936200009d60c060a0880151970162000565565b825190926001600160401b038211620003c05760005490600182811c92168015620004bd575b60208310146200039f5781601f8493116200045a575b50602090601f8311600114620003e257600092620003d6575b50508160011b916000199060031b1c1916176000555b8051906001600160401b038211620003c05760015490600182811c92168015620003b5575b60208310146200039f5781601f8493116200033b575b50602090601f8311600114620002c157600092620002b5575b50508160011b916000199060031b1c1916176001555b6001600160a01b039081169182156200029d57600a80546001600160a01b0319811685179091558751939083167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001600b55169081156200028e57508115801562000285575b620002745760805260a052600d55600e55600160ff19600c541617600c55600160105551612dce90816200057b823960805181818161035101528181610e1b0152818161172c015281816118f20152611cd8015260a0518181816103130152818161081701528181610b7201528181610baf015281816115c8015281816118a401528181611b2c0152818161265701526127260152f35b8451631f2a200560e01b8152600490fd5b508215620001dd565b63d92e233d60e01b8152600490fd5b8651631e4fbdf760e01b815260006004820152602490fd5b0151905038806200015c565b60016000908152600080516020620033698339815191529350601f198516905b81811062000322575090846001959493921062000308575b505050811b0160015562000172565b015160001960f88460031b161c19169055388080620002f9565b92936020600181928786015181550195019301620002e1565b600160005290915060008051602062003369833981519152601f840160051c8101916020851062000394575b90601f859493920160051c01905b81811062000384575062000143565b6000815584935060010162000375565b909150819062000367565b634e487b7160e01b600052602260045260246000fd5b91607f16916200012d565b634e487b7160e01b600052604160045260246000fd5b015190503880620000f2565b6000808052600080516020620033498339815191529350601f198516905b81811062000441575090846001959493921062000427575b505050811b0160005562000108565b015160001960f88460031b161c1916905538808062000418565b9293602060018192878601518155019501930162000400565b6000805290915060008051602062003349833981519152601f840160051c81019160208510620004b2575b90601f859493920160051c01905b818110620004a25750620000d9565b6000815584935060010162000493565b909150819062000485565b91607f1691620000c3565b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620003c057604052565b919080601f84011215620004c85782516001600160401b038111620003c05760209062000529601f8201601f19168301620004cd565b92818452828287010111620004c85760005b8181106200055157508260009394955001015290565b85810183015184820184015282016200053b565b51906001600160a01b0382168203620004c85756fe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a714611fea5750806306fdde0314611fba578063081812fc14611f7c578063095ea7b314611e9557806318160ddd14611e7757806323b872dd14611e605780632706cab414611a925780632a80cda314611a465780632ab4d05214611a285780632f745c59146119a45780633cd636051461182b5780633f3e4c11146117df57806342842e0e146117b15780634f6ccce71461175b5780635133a8d1146117165780635392fd1c146116f357806362325b40146116b95780636352211e14611689578063645006ca1461166b57806370a0823114611648578063715018a6146115eb5780637313ee5a146115b05780637f09d23e146115685780638da5cb5b1461153f57806395d89b411461142e5780639f04586c146113cc578063a22cb4651461131e578063adfde251146112f6578063b6b55f2514610d86578063b88d4fde14610cf0578063bfe455fb14610cca578063c87b56dd146102a2578063e985e9c51461024c578063f2fde38b146101c35763ff50abdc146101a057600080fd5b346101be5760003660031901126101be576020600f54604051908152f35b600080fd5b346101be5760203660031901126101be576101dc6120b7565b6101e4612864565b6001600160a01b0390811690811561023357600a54826001600160601b0360a01b821617600a55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b346101be5760403660031901126101be576102656120b7565b61026d6120cd565b9060018060a01b03809116600052600560205260406000209116600052602052602060ff604060002054166040519015158152f35b346101be5760203660031901126101be576102cc6004356000526011602052604060002054151590565b15610cb957600435600052601160205260406000206040516102ed81612118565b8154815260ff6002600184015493846020850152015416151560408201526103386000927f000000000000000000000000000000000000000000000000000000000000000090612594565b804210610ca5575b506040516395d89b4160e01b8152917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316600084600481845afa938415610c1657600094610c22575b5060206004916040519283809263313ce56760e01b82525afa908115610c1657600091610bda575b5060ff83519116604d8111610b54576103de916103d991600a0a906127a5565b612a12565b926000908351610b6a575b6103f16121aa565b936103fd600435612a12565b9261040781612a12565b9061014a81029080820461014a1490151715610b54576064900461042a90612a12565b604080517f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f32306020808301919091527f30302f737667222077696474683d2233353022206865696768743d2232303022928201929092527f2076696577426f783d223020302033353020323030223e00000000000000000060608201527f3c7374796c653e2e62617365207b2066696c6c3a2077686974653b20666f6e7460778201527f2d66616d696c793a206d6f6e6f73706163653b20666f6e742d73697a653a203160978201526d1a383c1d903e9e17b9ba3cb6329f60911b60b78201527f3c726563742077696474683d223130302522206865696768743d22313030252260c582015270103334b6361e911198b099199bb291179f60791b60e58201527f3c7465787420783d2231302220793d2233302220636c6173733d22626173652260f6820152601f60f91b610116820152885198929690928392610595918b916101178601910161206f565b8882016101170161202360f01b905261011998815191828b8386010191602001916105bf9261206f565b82010197661e17ba32bc3a1f60c91b80918a015261012089017f3c7465787420783d2231302220793d2235352220636c6173733d226261736522905261014089016801f20b6b7bab73a1d160bd1b9052610149968a5160208c019a8b828b83016106289261206f565b0194600160fd1b8099870152875160208901968161014a82019061064c918a61206f565b019261014a84015261015183017f3c7465787420783d2231302220793d2238302220636c6173733d226261736522905261017183016a01f283937b3b932b9b99d160ad1b905261017c928151918285830191602001916106ab9261206f565b67129e17ba32bc3a1f60c11b9101928301527f3c7265637420783d2231302220793d22313030222077696474683d22333330226101848301527f206865696768743d223230222066696c6c3d2223333934396162222f3e0000006101a48301527f3c7265637420783d2231302220793d22313030222077696474683d22000000006101c183015280516101dd92909161074c9083908584019060200161206f565b019081017f22206865696768743d223230222066696c6c3d2223376535376332222f3e000090526101fb8101651e17b9bb339f60d11b9052036101e1810182526102010161079a908261216c565b6107a390612b56565b93604051938460208101967f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000885280519081603a840191602001916107e79261206f565b810103601a81018652603a016107fd908661216c565b6108056121aa565b97610811600435612a12565b9961083b7f0000000000000000000000000000000000000000000000000000000000000000612a12565b60409096015115610b2d5761086c60405161085581612150565b60048152637472756560e01b602082015299612a12565b956040519b8c809c683d913730b6b2911d1160b91b602083015280516029819301916020019161089b9261206f565b8c016029810161202360f01b905281519182602b830191602001916108bf9261206f565b01602b81017f222c226465736372697074696f6e223a22436f6e7461696e732000000000000090528451908160458201906108fa918a61206f565b0160458101670103bb4ba341030960c51b905281519182604d830191602001916109239261206f565b0190604d82017f207365636f6e642076657374696e6720706572696f642e222c0000000000000090526d2261747472696275746573223a5b60901b6066830152607482017f7b2274726169745f74797065223a22416d6f756e74222c2276616c7565223a2290525191826094830161099a9261206f565b01916094830152519182609583016109b19261206f565b019361227d60f01b94856095820152609781017f2c7b2274726169745f74797065223a224d617475726564222c2276616c7565229052611d1160f11b60b78201528151918260b983019160200191610a089261206f565b018460b982015260bb81017f2c7b2274726169745f74797065223a2252656d61696e696e67205365636f6e6490526b399116113b30b63ab2911d1160a11b60db8201528151918260e783019160200191610a619261206f565b01908360e783015260e9820161174b60f21b9052681134b6b0b3b2911d1160b91b60eb83015251918260f48301610a979261206f565b019060f48201520360d68101825260f601610ab2908261216c565b610abb90612b56565b6040518091602082017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000905280519081603d84019160200191610afd9261206f565b810103601d81018252603d01610b13908261216c565b60405180916020825260208201610b2991612092565b0390f35b61086c604051610b3c81612150565b600581526466616c736560d81b602082015299612a12565b634e487b7160e01b600052601160045260246000fd5b9050610b96827f00000000000000000000000000000000000000000000000000000000000000006125a1565b606481029080820460641490151715610b5457610bd4907f0000000000000000000000000000000000000000000000000000000000000000906127a5565b906103e9565b90506020813d602011610c0e575b81610bf56020938361216c565b810103126101be575160ff811681036101be57846103b9565b3d9150610be8565b6040513d6000823e3d90fd5b9093503d806000833e610c35818361216c565b8101906020818303126101be5780519067ffffffffffffffff82116101be57019080601f830112156101be57815190610c6d8261218e565b90610c7b604051928361216c565b828252602083850101116101be57610c9d60209260049484808501910161206f565b949150610391565b610cb291925042906125a1565b9082610340565b604051626f708760e21b8152600490fd5b346101be5760203660031901126101be576020610ce8600435612757565b604051908152f35b346101be5760803660031901126101be57610d096120b7565b610d116120cd565b906044356064359267ffffffffffffffff84116101be57366023850112156101be57836004013592610d428461218e565b93610d50604051958661216c565b80855236602482880101116101be576020816000926024610d8499018389013786010152610d7f838383612293565b6128c0565b005b346101be576020806003193601126101be5760043590610da4612800565b81156112e45760ff600c5416156112d257600e5482106112c057610dca82600f54612594565b600d54106112ae57604051916323b872dd60e01b8284015260249233848201523060448201528160648201526064815260a081019080821067ffffffffffffffff83111761129957610e3f916040527f0000000000000000000000000000000000000000000000000000000000000000612cb3565b60105490600019908183146112845760019182840160105560405190610e6482612134565b60008252331561126c5760008581526002875260409020546001600160a01b03908116151580611265575b61123e575b856000526002875260406000205416908115918215928361120a575b3360005260038952604060002087815401905587600052600289526040600020336001600160601b0360a01b8254161790558733837fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a41561117357600854876000526009895280604060002055600160401b81101561115e5787610f408289610f5994016008556125ae565b90919082549060031b91821b91600019901b1916179055565b3303611108575b506110f057333b611003575b508290610fbe604051610f7e81612118565b82815260028782014281526040830190600082528660005260118a52604060002093518455518784015551151591019060ff801983541691151516179055565b610fca81600f54612594565b600f556040519081527f73a19dd210f1a7f902193214c0ee91dd35ee5b4d920cba8d519eca65a7b488ca853392a3600b55604051908152f35b60405185818061103b630a85bd0160e11b9586835233600484015260008c840152896044840152608060648401526084830190612092565b03816000335af1600091816110b0575b5061107c57868661105a612890565b8051918261107957604051633250574960e11b81523360048201528490fd5b01fd5b63ffffffff60e09793949596971b160361109b57508392919082610f6c565b604051633250574960e11b8152336004820152fd5b9091508681813d83116110e9575b6110c8818361216c565b810103126101be57516001600160e01b0319811681036101be57908861104b565b503d6110be565b6040516339e3563760e11b8152600060048201528690fd5b61111133612695565b908101908111611149573360005260068752604060002081600052875285604060002055856000526007875260406000205587610f60565b87634e487b7160e01b60005260116004526000fd5b89634e487b7160e01b60005260416004526000fd5b338114610f595761118381612695565b87600052600789526040600020548181036111c4575b5087600052600060408120558160005260068952604060002090600052885260006040812055610f59565b8260005260068a526040600020826000528a526040600020548360005260068b526040600020826000528b528060406000205560005260078a526040600020558a611199565b600088815260046020526040902080546001600160a01b031916905581600052600389526040600020838154019055610eb0565b6011875260ff6002604060002001541615610e945760405163917640c160e01b8152600490fd5b5084610e8f565b604051633250574960e11b8152600060048201528790fd5b84634e487b7160e01b60005260116004526000fd5b84634e487b7160e01b60005260416004526000fd5b604051638a164f6360e01b8152600490fd5b60405163c24b1b6160e01b8152600490fd5b604051630e2f42c960e31b8152600490fd5b604051631f2a200560e01b8152600490fd5b346101be5760203660031901126101be5760206113146004356126ce565b6040519015158152f35b346101be5760403660031901126101be576113376120b7565b60243590811515908183036101be576001600160a01b03169182156113b3576113859033600052600560205260406000208460005260205260406000209060ff801983541691151516179055565b6040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b604051630b61174360e31b815260048101849052602490fd5b346101be5760203660031901126101be576004358015158091036101be5760207f79a0d73b50e293c1e17b973f07d567c5a14399afb5e2373c44a82e9f9109d71691611416612864565b60ff19600c541660ff821617600c55604051908152a1005b346101be5760003660031901126101be576040516000600190600154918260011c9160018416918215611535575b602094858510841461151f5785879486865291826000146114ff5750506001146114a2575b5061148e9250038361216c565b610b29604051928284938452830190612092565b84915060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6906000915b8583106114e757505061148e935082010185611481565b805483890185015287945086939092019181016114d0565b60ff19168582015261148e95151560051b85010192508791506114819050565b634e487b7160e01b600052602260045260246000fd5b92607f169261145c565b346101be5760003660031901126101be57600a546040516001600160a01b039091168152602090f35b346101be5760203660031901126101be5760043560005260116020526060604060002080549060ff600260018301549201541690604051928352602083015215156040820152f35b346101be5760003660031901126101be5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b346101be5760003660031901126101be57611604612864565b600a80546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346101be5760203660031901126101be576020610ce86116666120b7565b612695565b346101be5760003660031901126101be576020600e54604051908152f35b346101be5760203660031901126101be5760206116a76004356127c5565b6040516001600160a01b039091168152f35b346101be5760203660031901126101be5760806116d76004356125fb565b9160405193845260208401521515604083015215156060820152f35b346101be5760003660031901126101be57602060ff600c54166040519015158152f35b346101be5760003660031901126101be576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346101be5760203660031901126101be57600435600854811015611792576117846020916125ae565b90546040519160031b1c8152f35b6044906040519063295f44f760e21b8252600060048301526024820152fd5b346101be57610d846117c2366120e3565b90604051926117d084612134565b60008452610d7f838383612293565b346101be5760203660031901126101be577ff2672935fc79f5237559e2e2999dbe743bf65430894ac2b37666890e7c69e1af602060043561181e612864565b80600d55604051908152a1005b346101be5760203660031901126101be57600435611847612800565b61185e816000526011602052604060002054151590565b15610cb95761186c816127c5565b336001600160a01b03909116036119925780600052601160205260406000206002810180549060ff8216611980576118c960018401547f000000000000000000000000000000000000000000000000000000000000000090612594565b421061196e5760018493549260ff19161790556118e881600f546125a1565b600f5561191681337f0000000000000000000000000000000000000000000000000000000000000000612823565b6040519081527fde14d3a993ebba9de27f7a134bdd279ee01d1183b8ec5cf2f39f217ea2ed41ee60203392a37ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7600080a26001600b55005b604051631393ba7760e31b8152600490fd5b6040516316d2aca560e11b8152600490fd5b6040516359dc379f60e01b8152600490fd5b346101be5760403660031901126101be576119bd6120b7565b602435906119ca81612695565b8210156119fd5760018060a01b031660005260066020526040600020906000526020526020604060002054604051908152f35b60405163295f44f760e21b81526001600160a01b039190911660048201526024810191909152604490fd5b346101be5760003660031901126101be576020600d54604051908152f35b346101be5760203660031901126101be577fb443c8bd39a1b60d415144f9148c6f90c2b68a553eb90c62cef5e44979db009d6020600435611a85612864565b80600e55604051908152a1005b346101be576020806003193601126101be5760043590611ab0612800565b611ac7826000526011602052604060002054151590565b15610cb957611ad5826127c5565b6001600160a01b03919033908316036119925782600052601181526040600020604051611b0181612118565b81548152600182015483820190815260ff60028094015416151580604084015261198057611b5190517f000000000000000000000000000000000000000000000000000000000000000090612594565b421015611e4e57519284600052601183526000826040822082815582600182015501558183528060406000205416151580611e46575b611e20575b846000528183526040600020541680159182159081611ded575b86600052845260406000206001600160601b0360a01b8154169055856000837fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8280a48215611d51575050600854846000526009835280604060002055600160401b811015611d3b5784610f40826001611c2394016008556125ae565b60085460001990818101908111610b54578560005260098452611c4b604060002054916125ae565b90549060031b1c611c5f81610f40846125ae565b6000526009845260406000205584600052600060408120556008548015611d2557810190611c8c826125ae565b909182549160031b1b19169055600855611d0c577febf47017a067c68a7c7762b292827c94b5b6b769078ef61648a51e7c9535b28c90611cce83600f546125a1565b600f55611cfc83337f0000000000000000000000000000000000000000000000000000000000000000612823565b6040519283523392a36001600b55005b604051637e27328960e01b815260048101849052602490fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b611d5c575b50611c23565b611d6581612695565b908560005260078452604060002054828103611da7575b5085600052600060408120556000526006835260406000209060005282526000604081205584611d56565b8160005260068552604060002083600052855260406000205482600052600686526040600020826000528652806040600020556000526007855260406000205586611d7c565b60008781526004602052604080822080546001600160a01b03191690558482526003875290208054600019019055611ba6565b6011835260ff82604060002001541615611b8c5760405163917640c160e01b8152600490fd5b506000611b87565b60405163239debe960e21b8152600490fd5b346101be57610d84611e71366120e3565b91612293565b346101be5760003660031901126101be576020600854604051908152f35b346101be5760403660031901126101be57611eae6120b7565b602435611eba816127c5565b33151580611f69575b80611f3c575b611f24576001600160a01b039283169282918491167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600080a4600090815260046020526040902080546001600160a01b0319169091179055005b60405163a9fbf51f60e01b8152336004820152602490fd5b5060018060a01b038116600052600560205260406000203360005260205260ff6040600020541615611ec9565b506001600160a01b038116331415611ec3565b346101be5760203660031901126101be57600435611f99816127c5565b506000526004602052602060018060a01b0360406000205416604051908152f35b346101be5760003660031901126101be57610b29611fd66121aa565b604051918291602083526020830190612092565b346101be5760203660031901126101be576004359063ffffffff60e01b82168092036101be5760209163780e9d6360e01b811490811561202c575b5015158152f35b6380ac58cd60e01b81149150811561205e575b811561204d575b5083612025565b6301ffc9a760e01b14905083612046565b635b5e139f60e01b8114915061203f565b60005b8381106120825750506000910152565b8181015183820152602001612072565b906020916120ab8151809281855285808601910161206f565b601f01601f1916010190565b600435906001600160a01b03821682036101be57565b602435906001600160a01b03821682036101be57565b60609060031901126101be576001600160a01b039060043582811681036101be579160243590811681036101be579060443590565b6060810190811067ffffffffffffffff821117611d3b57604052565b6020810190811067ffffffffffffffff821117611d3b57604052565b6040810190811067ffffffffffffffff821117611d3b57604052565b90601f8019910116810190811067ffffffffffffffff821117611d3b57604052565b67ffffffffffffffff8111611d3b57601f01601f191660200190565b60405190600080549060018260011c9060018416938415612289575b6020948584108114612275578388528794939291811561225557506001146121f9575b50506121f79250038361216c565b565b60008080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56395935091905b81831061223d5750506121f7935082010138806121e9565b85548884018501529485019487945091830191612225565b9150506121f794925060ff191682840152151560051b82010138806121e9565b634e487b7160e01b85526022600452602485fd5b91607f16916121c6565b6001600160a01b038281169391841561257b5760009483865260209560028752604096848883205416151580612573575b61254f575b8582526002815284888320541696331515806124c1575b508715801561248e575b84845260038352898420805460010190558784526002835289842080546001600160a01b0319168617905587858a7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8780a4156124125760085487845260098352808a852055600160401b8110156123fe5787610f4082600161237094016008556125ae565b8388036123ac575b50505050169283830361238b5750505050565b6064945051926364283d7b60e01b8452600484015260248301526044820152fd5b6123b590612695565b6000198101939084116123ea5782916007918a9452600681528383208584528152878484205587835252205538808080612378565b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b84526041600452602484fd5b8784146123705761242288612695565b8784526007835289842054818103612457575b50878452838a8120558884526006835289842090845282528289812055612370565b898552600684528a852082865284528a8520548a8652600685528b86208287528552808c8720558552600784528a85205538612435565b600088815260046020526040902080546001600160a01b03191690558884526003835289842080546000190190556122ea565b8061250e575b156124d257386122e0565b8887896124ef576024915190637e27328960e01b82526004820152fd5b905163177e802f60e01b81523360048201526024810191909152604490fd5b503388148015612533575b806124c757508683526004825233868a85205416146124c7565b5087835260058252888320338452825260ff8984205416612519565b6011815260ff6002898420015416156122c957875163917640c160e01b8152600490fd5b5060016122c4565b604051633250574960e11b815260006004820152602490fd5b91908201809211610b5457565b91908203918211610b5457565b6008548110156125e55760086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30190600090565b634e487b7160e01b600052603260045260246000fd5b612612816000526011602052604060002054151590565b156126865760005260116020526040806000209181519061263282612118565b83549182815260ff60026001870154968760208501520154161515938491015261267c7f000000000000000000000000000000000000000000000000000000000000000085612594565b4210159193929190565b50600090600090600090600090565b6001600160a01b031680156126b557600052600360205260406000205490565b6040516322718ad960e21b815260006004820152602490fd5b6126e5816000526011602052604060002054151590565b1561275157600052601160205261274b604060002060405161270681612118565b81548152604060ff600260018501549485602086015201541615159101527f000000000000000000000000000000000000000000000000000000000000000090612594565b42101590565b50600090565b61276e816000526011602052604060002054151590565b15610cb957600052601160205261278f604060002060405161270681612118565b80421015612751576127a29042906125a1565b90565b81156127af570490565b634e487b7160e01b600052601260045260246000fd5b6000818152600260205260409020546001600160a01b03169081156127e8575090565b60249060405190637e27328960e01b82526004820152fd5b6002600b5414612811576002600b55565b604051633ee5aeb560e01b8152600490fd5b60405163a9059cbb60e01b60208201526001600160a01b039290921660248301526044808301939093529181526121f79161285f60648361216c565b612cb3565b600a546001600160a01b0316330361287857565b60405163118cdaa760e01b8152336004820152602490fd5b3d156128bb573d906128a18261218e565b916128af604051938461216c565b82523d6000602084013e565b606090565b9190803b6128cf575b50505050565b61291160018060a01b0380921694604051938493630a85bd0160e11b968786523360048701521660248501526044840152608060648401526084830190612092565b03906020816000938185885af190829082612990575b505061295f5782612936612890565b805191908261295857604051633250574960e11b815260048101839052602490fd5b9050602001fd5b6001600160e01b031916036129785750388080806128c9565b60249060405190633250574960e11b82526004820152fd5b909192506020813d6020116129d8575b816129ad6020938361216c565b810103126129d45751906001600160e01b0319821682036129d15750903880612927565b80fd5b5080fd5b3d91506129a0565b906129ea8261218e565b6129f7604051918261216c565b8281528092612a08601f199161218e565b0190602036910137565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015612b48575b506d04ee2d6d415b85acef810000000080831015612b39575b50662386f26fc1000080831015612b2a575b506305f5e10080831015612b1b575b5061271080831015612b0c575b506064821015612afc575b600a80921015612af2575b600190816021612aaa600187016129e0565b95860101905b612abc575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215612aed57919082612ab0565b612ab5565b9160010191612a98565b9190606460029104910191612a8d565b60049193920491019138612a82565b60089193920491019138612a75565b60109193920491019138612a66565b60209193920491019138612a54565b604093508104915038612a3b565b90815115612c9e5760405191612b6b83612118565b604083527f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208401527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f604084015280519260029160028501809511610b54576003948590046001600160fe1b0381168103610b5457612bf19060029694961b6129e0565b926020840192829183518401976020890192835194600085525b8a8110612c5157505050506003939495965052510680600114612c3e57600214612c33575090565b603d90600019015390565b50603d9081600019820153600119015390565b836004919b989b019a8b51600190603f9082828260121c16870101518453828282600c1c16870101518385015382828260061c168701015187850153168401015185820153019699612c0b565b9050604051612cac81612134565b6000815290565b60018060a01b031690612cdd600080836020829551910182875af1612cd6612890565b9084612d35565b908151918215159283612d0d575b505050612cf55750565b60249060405190635274afe760e01b82526004820152fd5b8192935090602091810103126129d45760200151908115918215036129d15750388080612ceb565b90612d5c5750805115612d4a57805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580612d8f575b612d6d575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15612d6556fea264697066735822122079f4394830bd84b723426361590b2c53c0fa7df5588b9151632d1398d08d40dd64736f6c63430008180033290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563b10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a714611fea5750806306fdde0314611fba578063081812fc14611f7c578063095ea7b314611e9557806318160ddd14611e7757806323b872dd14611e605780632706cab414611a925780632a80cda314611a465780632ab4d05214611a285780632f745c59146119a45780633cd636051461182b5780633f3e4c11146117df57806342842e0e146117b15780634f6ccce71461175b5780635133a8d1146117165780635392fd1c146116f357806362325b40146116b95780636352211e14611689578063645006ca1461166b57806370a0823114611648578063715018a6146115eb5780637313ee5a146115b05780637f09d23e146115685780638da5cb5b1461153f57806395d89b411461142e5780639f04586c146113cc578063a22cb4651461131e578063adfde251146112f6578063b6b55f2514610d86578063b88d4fde14610cf0578063bfe455fb14610cca578063c87b56dd146102a2578063e985e9c51461024c578063f2fde38b146101c35763ff50abdc146101a057600080fd5b346101be5760003660031901126101be576020600f54604051908152f35b600080fd5b346101be5760203660031901126101be576101dc6120b7565b6101e4612864565b6001600160a01b0390811690811561023357600a54826001600160601b0360a01b821617600a55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b346101be5760403660031901126101be576102656120b7565b61026d6120cd565b9060018060a01b03809116600052600560205260406000209116600052602052602060ff604060002054166040519015158152f35b346101be5760203660031901126101be576102cc6004356000526011602052604060002054151590565b15610cb957600435600052601160205260406000206040516102ed81612118565b8154815260ff6002600184015493846020850152015416151560408201526103386000927f000000000000000000000000000000000000000000000000000000000000000090612594565b804210610ca5575b506040516395d89b4160e01b8152917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316600084600481845afa938415610c1657600094610c22575b5060206004916040519283809263313ce56760e01b82525afa908115610c1657600091610bda575b5060ff83519116604d8111610b54576103de916103d991600a0a906127a5565b612a12565b926000908351610b6a575b6103f16121aa565b936103fd600435612a12565b9261040781612a12565b9061014a81029080820461014a1490151715610b54576064900461042a90612a12565b604080517f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f32306020808301919091527f30302f737667222077696474683d2233353022206865696768743d2232303022928201929092527f2076696577426f783d223020302033353020323030223e00000000000000000060608201527f3c7374796c653e2e62617365207b2066696c6c3a2077686974653b20666f6e7460778201527f2d66616d696c793a206d6f6e6f73706163653b20666f6e742d73697a653a203160978201526d1a383c1d903e9e17b9ba3cb6329f60911b60b78201527f3c726563742077696474683d223130302522206865696768743d22313030252260c582015270103334b6361e911198b099199bb291179f60791b60e58201527f3c7465787420783d2231302220793d2233302220636c6173733d22626173652260f6820152601f60f91b610116820152885198929690928392610595918b916101178601910161206f565b8882016101170161202360f01b905261011998815191828b8386010191602001916105bf9261206f565b82010197661e17ba32bc3a1f60c91b80918a015261012089017f3c7465787420783d2231302220793d2235352220636c6173733d226261736522905261014089016801f20b6b7bab73a1d160bd1b9052610149968a5160208c019a8b828b83016106289261206f565b0194600160fd1b8099870152875160208901968161014a82019061064c918a61206f565b019261014a84015261015183017f3c7465787420783d2231302220793d2238302220636c6173733d226261736522905261017183016a01f283937b3b932b9b99d160ad1b905261017c928151918285830191602001916106ab9261206f565b67129e17ba32bc3a1f60c11b9101928301527f3c7265637420783d2231302220793d22313030222077696474683d22333330226101848301527f206865696768743d223230222066696c6c3d2223333934396162222f3e0000006101a48301527f3c7265637420783d2231302220793d22313030222077696474683d22000000006101c183015280516101dd92909161074c9083908584019060200161206f565b019081017f22206865696768743d223230222066696c6c3d2223376535376332222f3e000090526101fb8101651e17b9bb339f60d11b9052036101e1810182526102010161079a908261216c565b6107a390612b56565b93604051938460208101967f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000885280519081603a840191602001916107e79261206f565b810103601a81018652603a016107fd908661216c565b6108056121aa565b97610811600435612a12565b9961083b7f0000000000000000000000000000000000000000000000000000000000000000612a12565b60409096015115610b2d5761086c60405161085581612150565b60048152637472756560e01b602082015299612a12565b956040519b8c809c683d913730b6b2911d1160b91b602083015280516029819301916020019161089b9261206f565b8c016029810161202360f01b905281519182602b830191602001916108bf9261206f565b01602b81017f222c226465736372697074696f6e223a22436f6e7461696e732000000000000090528451908160458201906108fa918a61206f565b0160458101670103bb4ba341030960c51b905281519182604d830191602001916109239261206f565b0190604d82017f207365636f6e642076657374696e6720706572696f642e222c0000000000000090526d2261747472696275746573223a5b60901b6066830152607482017f7b2274726169745f74797065223a22416d6f756e74222c2276616c7565223a2290525191826094830161099a9261206f565b01916094830152519182609583016109b19261206f565b019361227d60f01b94856095820152609781017f2c7b2274726169745f74797065223a224d617475726564222c2276616c7565229052611d1160f11b60b78201528151918260b983019160200191610a089261206f565b018460b982015260bb81017f2c7b2274726169745f74797065223a2252656d61696e696e67205365636f6e6490526b399116113b30b63ab2911d1160a11b60db8201528151918260e783019160200191610a619261206f565b01908360e783015260e9820161174b60f21b9052681134b6b0b3b2911d1160b91b60eb83015251918260f48301610a979261206f565b019060f48201520360d68101825260f601610ab2908261216c565b610abb90612b56565b6040518091602082017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000905280519081603d84019160200191610afd9261206f565b810103601d81018252603d01610b13908261216c565b60405180916020825260208201610b2991612092565b0390f35b61086c604051610b3c81612150565b600581526466616c736560d81b602082015299612a12565b634e487b7160e01b600052601160045260246000fd5b9050610b96827f00000000000000000000000000000000000000000000000000000000000000006125a1565b606481029080820460641490151715610b5457610bd4907f0000000000000000000000000000000000000000000000000000000000000000906127a5565b906103e9565b90506020813d602011610c0e575b81610bf56020938361216c565b810103126101be575160ff811681036101be57846103b9565b3d9150610be8565b6040513d6000823e3d90fd5b9093503d806000833e610c35818361216c565b8101906020818303126101be5780519067ffffffffffffffff82116101be57019080601f830112156101be57815190610c6d8261218e565b90610c7b604051928361216c565b828252602083850101116101be57610c9d60209260049484808501910161206f565b949150610391565b610cb291925042906125a1565b9082610340565b604051626f708760e21b8152600490fd5b346101be5760203660031901126101be576020610ce8600435612757565b604051908152f35b346101be5760803660031901126101be57610d096120b7565b610d116120cd565b906044356064359267ffffffffffffffff84116101be57366023850112156101be57836004013592610d428461218e565b93610d50604051958661216c565b80855236602482880101116101be576020816000926024610d8499018389013786010152610d7f838383612293565b6128c0565b005b346101be576020806003193601126101be5760043590610da4612800565b81156112e45760ff600c5416156112d257600e5482106112c057610dca82600f54612594565b600d54106112ae57604051916323b872dd60e01b8284015260249233848201523060448201528160648201526064815260a081019080821067ffffffffffffffff83111761129957610e3f916040527f0000000000000000000000000000000000000000000000000000000000000000612cb3565b60105490600019908183146112845760019182840160105560405190610e6482612134565b60008252331561126c5760008581526002875260409020546001600160a01b03908116151580611265575b61123e575b856000526002875260406000205416908115918215928361120a575b3360005260038952604060002087815401905587600052600289526040600020336001600160601b0360a01b8254161790558733837fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a41561117357600854876000526009895280604060002055600160401b81101561115e5787610f408289610f5994016008556125ae565b90919082549060031b91821b91600019901b1916179055565b3303611108575b506110f057333b611003575b508290610fbe604051610f7e81612118565b82815260028782014281526040830190600082528660005260118a52604060002093518455518784015551151591019060ff801983541691151516179055565b610fca81600f54612594565b600f556040519081527f73a19dd210f1a7f902193214c0ee91dd35ee5b4d920cba8d519eca65a7b488ca853392a3600b55604051908152f35b60405185818061103b630a85bd0160e11b9586835233600484015260008c840152896044840152608060648401526084830190612092565b03816000335af1600091816110b0575b5061107c57868661105a612890565b8051918261107957604051633250574960e11b81523360048201528490fd5b01fd5b63ffffffff60e09793949596971b160361109b57508392919082610f6c565b604051633250574960e11b8152336004820152fd5b9091508681813d83116110e9575b6110c8818361216c565b810103126101be57516001600160e01b0319811681036101be57908861104b565b503d6110be565b6040516339e3563760e11b8152600060048201528690fd5b61111133612695565b908101908111611149573360005260068752604060002081600052875285604060002055856000526007875260406000205587610f60565b87634e487b7160e01b60005260116004526000fd5b89634e487b7160e01b60005260416004526000fd5b338114610f595761118381612695565b87600052600789526040600020548181036111c4575b5087600052600060408120558160005260068952604060002090600052885260006040812055610f59565b8260005260068a526040600020826000528a526040600020548360005260068b526040600020826000528b528060406000205560005260078a526040600020558a611199565b600088815260046020526040902080546001600160a01b031916905581600052600389526040600020838154019055610eb0565b6011875260ff6002604060002001541615610e945760405163917640c160e01b8152600490fd5b5084610e8f565b604051633250574960e11b8152600060048201528790fd5b84634e487b7160e01b60005260116004526000fd5b84634e487b7160e01b60005260416004526000fd5b604051638a164f6360e01b8152600490fd5b60405163c24b1b6160e01b8152600490fd5b604051630e2f42c960e31b8152600490fd5b604051631f2a200560e01b8152600490fd5b346101be5760203660031901126101be5760206113146004356126ce565b6040519015158152f35b346101be5760403660031901126101be576113376120b7565b60243590811515908183036101be576001600160a01b03169182156113b3576113859033600052600560205260406000208460005260205260406000209060ff801983541691151516179055565b6040519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a3005b604051630b61174360e31b815260048101849052602490fd5b346101be5760203660031901126101be576004358015158091036101be5760207f79a0d73b50e293c1e17b973f07d567c5a14399afb5e2373c44a82e9f9109d71691611416612864565b60ff19600c541660ff821617600c55604051908152a1005b346101be5760003660031901126101be576040516000600190600154918260011c9160018416918215611535575b602094858510841461151f5785879486865291826000146114ff5750506001146114a2575b5061148e9250038361216c565b610b29604051928284938452830190612092565b84915060016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6906000915b8583106114e757505061148e935082010185611481565b805483890185015287945086939092019181016114d0565b60ff19168582015261148e95151560051b85010192508791506114819050565b634e487b7160e01b600052602260045260246000fd5b92607f169261145c565b346101be5760003660031901126101be57600a546040516001600160a01b039091168152602090f35b346101be5760203660031901126101be5760043560005260116020526060604060002080549060ff600260018301549201541690604051928352602083015215156040820152f35b346101be5760003660031901126101be5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b346101be5760003660031901126101be57611604612864565b600a80546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346101be5760203660031901126101be576020610ce86116666120b7565b612695565b346101be5760003660031901126101be576020600e54604051908152f35b346101be5760203660031901126101be5760206116a76004356127c5565b6040516001600160a01b039091168152f35b346101be5760203660031901126101be5760806116d76004356125fb565b9160405193845260208401521515604083015215156060820152f35b346101be5760003660031901126101be57602060ff600c54166040519015158152f35b346101be5760003660031901126101be576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346101be5760203660031901126101be57600435600854811015611792576117846020916125ae565b90546040519160031b1c8152f35b6044906040519063295f44f760e21b8252600060048301526024820152fd5b346101be57610d846117c2366120e3565b90604051926117d084612134565b60008452610d7f838383612293565b346101be5760203660031901126101be577ff2672935fc79f5237559e2e2999dbe743bf65430894ac2b37666890e7c69e1af602060043561181e612864565b80600d55604051908152a1005b346101be5760203660031901126101be57600435611847612800565b61185e816000526011602052604060002054151590565b15610cb95761186c816127c5565b336001600160a01b03909116036119925780600052601160205260406000206002810180549060ff8216611980576118c960018401547f000000000000000000000000000000000000000000000000000000000000000090612594565b421061196e5760018493549260ff19161790556118e881600f546125a1565b600f5561191681337f0000000000000000000000000000000000000000000000000000000000000000612823565b6040519081527fde14d3a993ebba9de27f7a134bdd279ee01d1183b8ec5cf2f39f217ea2ed41ee60203392a37ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7600080a26001600b55005b604051631393ba7760e31b8152600490fd5b6040516316d2aca560e11b8152600490fd5b6040516359dc379f60e01b8152600490fd5b346101be5760403660031901126101be576119bd6120b7565b602435906119ca81612695565b8210156119fd5760018060a01b031660005260066020526040600020906000526020526020604060002054604051908152f35b60405163295f44f760e21b81526001600160a01b039190911660048201526024810191909152604490fd5b346101be5760003660031901126101be576020600d54604051908152f35b346101be5760203660031901126101be577fb443c8bd39a1b60d415144f9148c6f90c2b68a553eb90c62cef5e44979db009d6020600435611a85612864565b80600e55604051908152a1005b346101be576020806003193601126101be5760043590611ab0612800565b611ac7826000526011602052604060002054151590565b15610cb957611ad5826127c5565b6001600160a01b03919033908316036119925782600052601181526040600020604051611b0181612118565b81548152600182015483820190815260ff60028094015416151580604084015261198057611b5190517f000000000000000000000000000000000000000000000000000000000000000090612594565b421015611e4e57519284600052601183526000826040822082815582600182015501558183528060406000205416151580611e46575b611e20575b846000528183526040600020541680159182159081611ded575b86600052845260406000206001600160601b0360a01b8154169055856000837fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8280a48215611d51575050600854846000526009835280604060002055600160401b811015611d3b5784610f40826001611c2394016008556125ae565b60085460001990818101908111610b54578560005260098452611c4b604060002054916125ae565b90549060031b1c611c5f81610f40846125ae565b6000526009845260406000205584600052600060408120556008548015611d2557810190611c8c826125ae565b909182549160031b1b19169055600855611d0c577febf47017a067c68a7c7762b292827c94b5b6b769078ef61648a51e7c9535b28c90611cce83600f546125a1565b600f55611cfc83337f0000000000000000000000000000000000000000000000000000000000000000612823565b6040519283523392a36001600b55005b604051637e27328960e01b815260048101849052602490fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b611d5c575b50611c23565b611d6581612695565b908560005260078452604060002054828103611da7575b5085600052600060408120556000526006835260406000209060005282526000604081205584611d56565b8160005260068552604060002083600052855260406000205482600052600686526040600020826000528652806040600020556000526007855260406000205586611d7c565b60008781526004602052604080822080546001600160a01b03191690558482526003875290208054600019019055611ba6565b6011835260ff82604060002001541615611b8c5760405163917640c160e01b8152600490fd5b506000611b87565b60405163239debe960e21b8152600490fd5b346101be57610d84611e71366120e3565b91612293565b346101be5760003660031901126101be576020600854604051908152f35b346101be5760403660031901126101be57611eae6120b7565b602435611eba816127c5565b33151580611f69575b80611f3c575b611f24576001600160a01b039283169282918491167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600080a4600090815260046020526040902080546001600160a01b0319169091179055005b60405163a9fbf51f60e01b8152336004820152602490fd5b5060018060a01b038116600052600560205260406000203360005260205260ff6040600020541615611ec9565b506001600160a01b038116331415611ec3565b346101be5760203660031901126101be57600435611f99816127c5565b506000526004602052602060018060a01b0360406000205416604051908152f35b346101be5760003660031901126101be57610b29611fd66121aa565b604051918291602083526020830190612092565b346101be5760203660031901126101be576004359063ffffffff60e01b82168092036101be5760209163780e9d6360e01b811490811561202c575b5015158152f35b6380ac58cd60e01b81149150811561205e575b811561204d575b5083612025565b6301ffc9a760e01b14905083612046565b635b5e139f60e01b8114915061203f565b60005b8381106120825750506000910152565b8181015183820152602001612072565b906020916120ab8151809281855285808601910161206f565b601f01601f1916010190565b600435906001600160a01b03821682036101be57565b602435906001600160a01b03821682036101be57565b60609060031901126101be576001600160a01b039060043582811681036101be579160243590811681036101be579060443590565b6060810190811067ffffffffffffffff821117611d3b57604052565b6020810190811067ffffffffffffffff821117611d3b57604052565b6040810190811067ffffffffffffffff821117611d3b57604052565b90601f8019910116810190811067ffffffffffffffff821117611d3b57604052565b67ffffffffffffffff8111611d3b57601f01601f191660200190565b60405190600080549060018260011c9060018416938415612289575b6020948584108114612275578388528794939291811561225557506001146121f9575b50506121f79250038361216c565b565b60008080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56395935091905b81831061223d5750506121f7935082010138806121e9565b85548884018501529485019487945091830191612225565b9150506121f794925060ff191682840152151560051b82010138806121e9565b634e487b7160e01b85526022600452602485fd5b91607f16916121c6565b6001600160a01b038281169391841561257b5760009483865260209560028752604096848883205416151580612573575b61254f575b8582526002815284888320541696331515806124c1575b508715801561248e575b84845260038352898420805460010190558784526002835289842080546001600160a01b0319168617905587858a7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8780a4156124125760085487845260098352808a852055600160401b8110156123fe5787610f4082600161237094016008556125ae565b8388036123ac575b50505050169283830361238b5750505050565b6064945051926364283d7b60e01b8452600484015260248301526044820152fd5b6123b590612695565b6000198101939084116123ea5782916007918a9452600681528383208584528152878484205587835252205538808080612378565b634e487b7160e01b83526011600452602483fd5b634e487b7160e01b84526041600452602484fd5b8784146123705761242288612695565b8784526007835289842054818103612457575b50878452838a8120558884526006835289842090845282528289812055612370565b898552600684528a852082865284528a8520548a8652600685528b86208287528552808c8720558552600784528a85205538612435565b600088815260046020526040902080546001600160a01b03191690558884526003835289842080546000190190556122ea565b8061250e575b156124d257386122e0565b8887896124ef576024915190637e27328960e01b82526004820152fd5b905163177e802f60e01b81523360048201526024810191909152604490fd5b503388148015612533575b806124c757508683526004825233868a85205416146124c7565b5087835260058252888320338452825260ff8984205416612519565b6011815260ff6002898420015416156122c957875163917640c160e01b8152600490fd5b5060016122c4565b604051633250574960e11b815260006004820152602490fd5b91908201809211610b5457565b91908203918211610b5457565b6008548110156125e55760086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30190600090565b634e487b7160e01b600052603260045260246000fd5b612612816000526011602052604060002054151590565b156126865760005260116020526040806000209181519061263282612118565b83549182815260ff60026001870154968760208501520154161515938491015261267c7f000000000000000000000000000000000000000000000000000000000000000085612594565b4210159193929190565b50600090600090600090600090565b6001600160a01b031680156126b557600052600360205260406000205490565b6040516322718ad960e21b815260006004820152602490fd5b6126e5816000526011602052604060002054151590565b1561275157600052601160205261274b604060002060405161270681612118565b81548152604060ff600260018501549485602086015201541615159101527f000000000000000000000000000000000000000000000000000000000000000090612594565b42101590565b50600090565b61276e816000526011602052604060002054151590565b15610cb957600052601160205261278f604060002060405161270681612118565b80421015612751576127a29042906125a1565b90565b81156127af570490565b634e487b7160e01b600052601260045260246000fd5b6000818152600260205260409020546001600160a01b03169081156127e8575090565b60249060405190637e27328960e01b82526004820152fd5b6002600b5414612811576002600b55565b604051633ee5aeb560e01b8152600490fd5b60405163a9059cbb60e01b60208201526001600160a01b039290921660248301526044808301939093529181526121f79161285f60648361216c565b612cb3565b600a546001600160a01b0316330361287857565b60405163118cdaa760e01b8152336004820152602490fd5b3d156128bb573d906128a18261218e565b916128af604051938461216c565b82523d6000602084013e565b606090565b9190803b6128cf575b50505050565b61291160018060a01b0380921694604051938493630a85bd0160e11b968786523360048701521660248501526044840152608060648401526084830190612092565b03906020816000938185885af190829082612990575b505061295f5782612936612890565b805191908261295857604051633250574960e11b815260048101839052602490fd5b9050602001fd5b6001600160e01b031916036129785750388080806128c9565b60249060405190633250574960e11b82526004820152fd5b909192506020813d6020116129d8575b816129ad6020938361216c565b810103126129d45751906001600160e01b0319821682036129d15750903880612927565b80fd5b5080fd5b3d91506129a0565b906129ea8261218e565b6129f7604051918261216c565b8281528092612a08601f199161218e565b0190602036910137565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015612b48575b506d04ee2d6d415b85acef810000000080831015612b39575b50662386f26fc1000080831015612b2a575b506305f5e10080831015612b1b575b5061271080831015612b0c575b506064821015612afc575b600a80921015612af2575b600190816021612aaa600187016129e0565b95860101905b612abc575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a835304918215612aed57919082612ab0565b612ab5565b9160010191612a98565b9190606460029104910191612a8d565b60049193920491019138612a82565b60089193920491019138612a75565b60109193920491019138612a66565b60209193920491019138612a54565b604093508104915038612a3b565b90815115612c9e5760405191612b6b83612118565b604083527f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208401527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f604084015280519260029160028501809511610b54576003948590046001600160fe1b0381168103610b5457612bf19060029694961b6129e0565b926020840192829183518401976020890192835194600085525b8a8110612c5157505050506003939495965052510680600114612c3e57600214612c33575090565b603d90600019015390565b50603d9081600019820153600119015390565b836004919b989b019a8b51600190603f9082828260121c16870101518453828282600c1c16870101518385015382828260061c168701015187850153168401015185820153019699612c0b565b9050604051612cac81612134565b6000815290565b60018060a01b031690612cdd600080836020829551910182875af1612cd6612890565b9084612d35565b908151918215159283612d0d575b505050612cf55750565b60249060405190635274afe760e01b82526004820152fd5b8192935090602091810103126129d45760200151908115918215036129d15750388080612ceb565b90612d5c5750805115612d4a57805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580612d8f575b612d6d575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15612d6556fea264697066735822122079f4394830bd84b723426361590b2c53c0fa7df5588b9151632d1398d08d40dd64736f6c63430008180033",
  "devdoc": {
    "details": "Users deposit dSTAKE tokens and receive NFTs representing their vesting positions.      NFTs can be burned for early exit or become soul-bound after matured withdrawal.",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "ERC721EnumerableForbiddenBatchMint()": [
        {
          "details": "Batch mint is not allowed."
        }
      ],
      "ERC721IncorrectOwner(address,uint256,address)": [
        {
          "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
          "params": {
            "owner": "Address of the current owner of a token.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InsufficientApproval(address,uint256)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC721InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC721InvalidOwner(address)": [
        {
          "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
          "params": {
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ERC721InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC721InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC721NonexistentToken(uint256)": [
        {
          "details": "Indicates a `tokenId` whose `owner` is the zero address.",
          "params": {
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721OutOfBoundsIndex(address,uint256)": [
        {
          "details": "An `owner`'s token query was out of bounds for `index`. NOTE: The owner being `address(0)` indicates a global out of bounds index."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "params": {
          "_dstakeToken": "Address of the dSTAKE token",
          "_initialOwner": "Initial owner of the contract",
          "_maxTotalSupply": "Maximum total dSTAKE that can be deposited",
          "_minDepositAmount": "Minimum deposit amount threshold",
          "_name": "Name of the NFT collection",
          "_symbol": "Symbol of the NFT collection",
          "_vestingPeriod": "Vesting period in seconds (6 months)"
        }
      },
      "deposit(uint256)": {
        "params": {
          "amount": "Amount of dSTAKE tokens to deposit"
        },
        "returns": {
          "tokenId": "The ID of the minted NFT"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRemainingVestingTime(uint256)": {
        "params": {
          "tokenId": "The NFT token ID"
        },
        "returns": {
          "_0": "Remaining time in seconds (0 if vesting complete)"
        }
      },
      "getVestingPosition(uint256)": {
        "params": {
          "tokenId": "The NFT token ID"
        },
        "returns": {
          "amount": "Amount of dSTAKE deposited",
          "depositTime": "Timestamp of deposit",
          "matured": "Whether the NFT is soul-bound",
          "vestingComplete": "Whether vesting period has ended"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "isVestingComplete(uint256)": {
        "params": {
          "tokenId": "The NFT token ID"
        },
        "returns": {
          "_0": "Whether the vesting period has completed"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "redeemEarly(uint256)": {
        "params": {
          "tokenId": "The ID of the NFT to redeem"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setDepositsEnabled(bool)": {
        "params": {
          "enabled": "Whether deposits should be enabled"
        }
      },
      "setMaxTotalSupply(uint256)": {
        "details": "Can be set below current totalDeposited to allow withdrawals until cap is reached",
        "params": {
          "newMaxSupply": "New maximum total supply"
        }
      },
      "setMinDepositAmount(uint256)": {
        "params": {
          "newMinDepositAmount": "New minimum deposit amount"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawMatured(uint256)": {
        "params": {
          "tokenId": "The ID of the NFT to withdraw from"
        }
      }
    },
    "title": "ERC20VestingNFT",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Initialize the vesting NFT contract"
      },
      "deposit(uint256)": {
        "notice": "Deposit dSTAKE tokens and receive a vesting NFT"
      },
      "depositsEnabled()": {
        "notice": "Whether new deposits are enabled"
      },
      "dstakeToken()": {
        "notice": "The dSTAKE token contract"
      },
      "getRemainingVestingTime(uint256)": {
        "notice": "Get the remaining vesting time for a position"
      },
      "getVestingPosition(uint256)": {
        "notice": "Get vesting position details"
      },
      "isVestingComplete(uint256)": {
        "notice": "Check if a vesting position is ready for matured withdrawal"
      },
      "maxTotalSupply()": {
        "notice": "Maximum total dSTAKE supply that can be deposited"
      },
      "minDepositAmount()": {
        "notice": "Minimum deposit amount threshold"
      },
      "redeemEarly(uint256)": {
        "notice": "Redeem dSTAKE tokens early by burning the NFT (before vesting period)"
      },
      "setDepositsEnabled(bool)": {
        "notice": "Toggle whether new deposits are enabled"
      },
      "setMaxTotalSupply(uint256)": {
        "notice": "Update the maximum total supply of dSTAKE that can be deposited"
      },
      "setMinDepositAmount(uint256)": {
        "notice": "Set minimum deposit amount threshold"
      },
      "supportsInterface(bytes4)": {
        "notice": "Override required by Solidity for multiple inheritance"
      },
      "totalDeposited()": {
        "notice": "Current total dSTAKE deposited"
      },
      "vestingPeriod()": {
        "notice": "The vesting period duration (6 months, set at deployment)"
      },
      "vestingPositions(uint256)": {
        "notice": "Mapping from token ID to vesting position"
      },
      "withdrawMatured(uint256)": {
        "notice": "Withdraw dSTAKE tokens after vesting period and make NFT soul-bound"
      }
    },
    "notice": "A soft locker contract for dSTAKE tokens with 6-month vesting period",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3599,
        "contract": "contracts/vaults/vesting/ERC20VestingNFT.sol:ERC20VestingNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 3601,
        "contract": "contracts/vaults/vesting/ERC20VestingNFT.sol:ERC20VestingNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3605,
        "contract": "contracts/vaults/vesting/ERC20VestingNFT.sol:ERC20VestingNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3609,
        "contract": "contracts/vaults/vesting/ERC20VestingNFT.sol:ERC20VestingNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3613,
        "contract": "contracts/vaults/vesting/ERC20VestingNFT.sol:ERC20VestingNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3619,
        "contract": "contracts/vaults/vesting/ERC20VestingNFT.sol:ERC20VestingNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4729,
        "contract": "contracts/vaults/vesting/ERC20VestingNFT.sol:ERC20VestingNFT",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 4733,
        "contract": "contracts/vaults/vesting/ERC20VestingNFT.sol:ERC20VestingNFT",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4736,
        "contract": "contracts/vaults/vesting/ERC20VestingNFT.sol:ERC20VestingNFT",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 4740,
        "contract": "contracts/vaults/vesting/ERC20VestingNFT.sol:ERC20VestingNFT",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 554,
        "contract": "contracts/vaults/vesting/ERC20VestingNFT.sol:ERC20VestingNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 5495,
        "contract": "contracts/vaults/vesting/ERC20VestingNFT.sol:ERC20VestingNFT",
        "label": "_status",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 97012,
        "contract": "contracts/vaults/vesting/ERC20VestingNFT.sol:ERC20VestingNFT",
        "label": "depositsEnabled",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 97015,
        "contract": "contracts/vaults/vesting/ERC20VestingNFT.sol:ERC20VestingNFT",
        "label": "maxTotalSupply",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 97018,
        "contract": "contracts/vaults/vesting/ERC20VestingNFT.sol:ERC20VestingNFT",
        "label": "minDepositAmount",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 97021,
        "contract": "contracts/vaults/vesting/ERC20VestingNFT.sol:ERC20VestingNFT",
        "label": "totalDeposited",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 97024,
        "contract": "contracts/vaults/vesting/ERC20VestingNFT.sol:ERC20VestingNFT",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 97038,
        "contract": "contracts/vaults/vesting/ERC20VestingNFT.sol:ERC20VestingNFT",
        "label": "vestingPositions",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_struct(VestingPosition)97032_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(VestingPosition)97032_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ERC20VestingNFT.VestingPosition)",
        "numberOfBytes": "32",
        "value": "t_struct(VestingPosition)97032_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(VestingPosition)97032_storage": {
        "encoding": "inplace",
        "label": "struct ERC20VestingNFT.VestingPosition",
        "members": [
          {
            "astId": 97027,
            "contract": "contracts/vaults/vesting/ERC20VestingNFT.sol:ERC20VestingNFT",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 97029,
            "contract": "contracts/vaults/vesting/ERC20VestingNFT.sol:ERC20VestingNFT",
            "label": "depositTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 97031,
            "contract": "contracts/vaults/vesting/ERC20VestingNFT.sol:ERC20VestingNFT",
            "label": "matured",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}