{
  "address": "0xC952CFBBA956f69Da5aDcb817d9B915C7202a403",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ATokenUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldBorrowCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBorrowCap",
          "type": "uint256"
        }
      ],
      "name": "BorrowCapChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "borrowable",
          "type": "bool"
        }
      ],
      "name": "BorrowableInIsolationChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldBridgeProtocolFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBridgeProtocolFee",
          "type": "uint256"
        }
      ],
      "name": "BridgeProtocolFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ltv",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationBonus",
          "type": "uint256"
        }
      ],
      "name": "CollateralConfigurationChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDebtCeiling",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDebtCeiling",
          "type": "uint256"
        }
      ],
      "name": "DebtCeilingChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "oldCategoryId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "newCategoryId",
          "type": "uint8"
        }
      ],
      "name": "EModeAssetCategoryChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "categoryId",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ltv",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationBonus",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "label",
          "type": "string"
        }
      ],
      "name": "EModeCategoryAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "oldFlashloanPremiumToProtocol",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "newFlashloanPremiumToProtocol",
          "type": "uint128"
        }
      ],
      "name": "FlashloanPremiumToProtocolUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "oldFlashloanPremiumTotal",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "newFlashloanPremiumTotal",
          "type": "uint128"
        }
      ],
      "name": "FlashloanPremiumTotalUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "LiquidationProtocolFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "ReserveActive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "ReserveBorrowing",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "ReserveDropped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldReserveFactor",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newReserveFactor",
          "type": "uint256"
        }
      ],
      "name": "ReserveFactorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "ReserveFlashLoaning",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "frozen",
          "type": "bool"
        }
      ],
      "name": "ReserveFrozen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "aToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "stableDebtToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "variableDebtToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "interestRateStrategyAddress",
          "type": "address"
        }
      ],
      "name": "ReserveInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldStrategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newStrategy",
          "type": "address"
        }
      ],
      "name": "ReserveInterestRateStrategyChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "ReservePaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "ReserveStableRateBorrowing",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "oldState",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newState",
          "type": "bool"
        }
      ],
      "name": "SiloedBorrowingChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "StableDebtTokenUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSupplyCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSupplyCap",
          "type": "uint256"
        }
      ],
      "name": "SupplyCapChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldUnbackedMintCap",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newUnbackedMintCap",
          "type": "uint256"
        }
      ],
      "name": "UnbackedMintCapChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "VariableDebtTokenUpgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CONFIGURATOR_REVISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ltv",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationBonus",
          "type": "uint256"
        }
      ],
      "name": "configureReserveAsCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "dropReserve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "aTokenImpl",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "stableDebtTokenImpl",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "variableDebtTokenImpl",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "underlyingAssetDecimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "interestRateStrategyAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "treasury",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "incentivesController",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "aTokenName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "aTokenSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "variableDebtTokenName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "variableDebtTokenSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "stableDebtTokenName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "stableDebtTokenSymbol",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "internalType": "struct ConfiguratorInputTypes.InitReserveInput[]",
          "name": "input",
          "type": "tuple[]"
        }
      ],
      "name": "initReserves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPoolAddressesProvider",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "newCategoryId",
          "type": "uint8"
        }
      ],
      "name": "setAssetEModeCategory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newBorrowCap",
          "type": "uint256"
        }
      ],
      "name": "setBorrowCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "borrowable",
          "type": "bool"
        }
      ],
      "name": "setBorrowableInIsolation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newDebtCeiling",
          "type": "uint256"
        }
      ],
      "name": "setDebtCeiling",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "categoryId",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "ltv",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "liquidationThreshold",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "liquidationBonus",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "label",
          "type": "string"
        }
      ],
      "name": "setEModeCategory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "setPoolPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "setReserveActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setReserveBorrowing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newReserveFactor",
          "type": "uint256"
        }
      ],
      "name": "setReserveFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setReserveFlashLoaning",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "freeze",
          "type": "bool"
        }
      ],
      "name": "setReserveFreeze",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newRateStrategyAddress",
          "type": "address"
        }
      ],
      "name": "setReserveInterestRateStrategyAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "setReservePause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setReserveStableRateBorrowing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "newSiloed",
          "type": "bool"
        }
      ],
      "name": "setSiloedBorrowing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newSupplyCap",
          "type": "uint256"
        }
      ],
      "name": "setSupplyCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newUnbackedMintCap",
          "type": "uint256"
        }
      ],
      "name": "setUnbackedMintCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "treasury",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "incentivesController",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "implementation",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "internalType": "struct ConfiguratorInputTypes.UpdateATokenInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "updateAToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newBridgeProtocolFee",
          "type": "uint256"
        }
      ],
      "name": "updateBridgeProtocolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "newFlashloanPremiumToProtocol",
          "type": "uint128"
        }
      ],
      "name": "updateFlashloanPremiumToProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "newFlashloanPremiumTotal",
          "type": "uint128"
        }
      ],
      "name": "updateFlashloanPremiumTotal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "incentivesController",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "implementation",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "internalType": "struct ConfiguratorInputTypes.UpdateDebtTokenInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "updateStableDebtToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "incentivesController",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "implementation",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "internalType": "struct ConfiguratorInputTypes.UpdateDebtTokenInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "updateVariableDebtToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x12b46cb19886e4530774b9657ba4a15da8ffaba43935aab867e45c6f73096ccc",
  "receipt": {
    "to": null,
    "from": "0x53Ae1433Ab4563d7D5a84d27524784837259f105",
    "contractAddress": "0xC952CFBBA956f69Da5aDcb817d9B915C7202a403",
    "transactionIndex": 1,
    "gasUsed": "3494941",
    "logsBloom": "0x
    "blockHash": "0x467e335d96b8aeb3f31c53322e07fcf0854fd7e5981d34926a06527f42683591",
    "transactionHash": "0x12b46cb19886e4530774b9657ba4a15da8ffaba43935aab867e45c6f73096ccc",
    "logs": [],
    "blockNumber": 10337643,
    "cumulativeGasUsed": "3540907",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1cd9cfd68071fb9d0e3b7e5c91bb726a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ATokenUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBorrowCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBorrowCap\",\"type\":\"uint256\"}],\"name\":\"BorrowCapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"borrowable\",\"type\":\"bool\"}],\"name\":\"BorrowableInIsolationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBridgeProtocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBridgeProtocolFee\",\"type\":\"uint256\"}],\"name\":\"BridgeProtocolFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\"}],\"name\":\"CollateralConfigurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDebtCeiling\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebtCeiling\",\"type\":\"uint256\"}],\"name\":\"DebtCeilingChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"oldCategoryId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"newCategoryId\",\"type\":\"uint8\"}],\"name\":\"EModeAssetCategoryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"categoryId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"EModeCategoryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"oldFlashloanPremiumToProtocol\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newFlashloanPremiumToProtocol\",\"type\":\"uint128\"}],\"name\":\"FlashloanPremiumToProtocolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"oldFlashloanPremiumTotal\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newFlashloanPremiumTotal\",\"type\":\"uint128\"}],\"name\":\"FlashloanPremiumTotalUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"LiquidationProtocolFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"ReserveActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ReserveBorrowing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"ReserveDropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldReserveFactor\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReserveFactor\",\"type\":\"uint256\"}],\"name\":\"ReserveFactorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ReserveFlashLoaning\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"frozen\",\"type\":\"bool\"}],\"name\":\"ReserveFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"aToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stableDebtToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"variableDebtToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"}],\"name\":\"ReserveInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldStrategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newStrategy\",\"type\":\"address\"}],\"name\":\"ReserveInterestRateStrategyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"ReservePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ReserveStableRateBorrowing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldState\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newState\",\"type\":\"bool\"}],\"name\":\"SiloedBorrowingChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"StableDebtTokenUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSupplyCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSupplyCap\",\"type\":\"uint256\"}],\"name\":\"SupplyCapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldUnbackedMintCap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newUnbackedMintCap\",\"type\":\"uint256\"}],\"name\":\"UnbackedMintCapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"VariableDebtTokenUpgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONFIGURATOR_REVISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationBonus\",\"type\":\"uint256\"}],\"name\":\"configureReserveAsCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"dropReserve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"aTokenImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtTokenImpl\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtTokenImpl\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"underlyingAssetDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentivesController\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"aTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"aTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"variableDebtTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"variableDebtTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stableDebtTokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"stableDebtTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct ConfiguratorInputTypes.InitReserveInput[]\",\"name\":\"input\",\"type\":\"tuple[]\"}],\"name\":\"initReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"newCategoryId\",\"type\":\"uint8\"}],\"name\":\"setAssetEModeCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newBorrowCap\",\"type\":\"uint256\"}],\"name\":\"setBorrowCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"borrowable\",\"type\":\"bool\"}],\"name\":\"setBorrowableInIsolation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newDebtCeiling\",\"type\":\"uint256\"}],\"name\":\"setDebtCeiling\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"categoryId\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"ltv\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidationThreshold\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidationBonus\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"setEModeCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"setLiquidationProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setPoolPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setReserveActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setReserveBorrowing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newReserveFactor\",\"type\":\"uint256\"}],\"name\":\"setReserveFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setReserveFlashLoaning\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"freeze\",\"type\":\"bool\"}],\"name\":\"setReserveFreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newRateStrategyAddress\",\"type\":\"address\"}],\"name\":\"setReserveInterestRateStrategyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"setReservePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setReserveStableRateBorrowing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"newSiloed\",\"type\":\"bool\"}],\"name\":\"setSiloedBorrowing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newSupplyCap\",\"type\":\"uint256\"}],\"name\":\"setSupplyCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newUnbackedMintCap\",\"type\":\"uint256\"}],\"name\":\"setUnbackedMintCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentivesController\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct ConfiguratorInputTypes.UpdateATokenInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"updateAToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBridgeProtocolFee\",\"type\":\"uint256\"}],\"name\":\"updateBridgeProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newFlashloanPremiumToProtocol\",\"type\":\"uint128\"}],\"name\":\"updateFlashloanPremiumToProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"newFlashloanPremiumTotal\",\"type\":\"uint128\"}],\"name\":\"updateFlashloanPremiumTotal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentivesController\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct ConfiguratorInputTypes.UpdateDebtTokenInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"updateStableDebtToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentivesController\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct ConfiguratorInputTypes.UpdateDebtTokenInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"updateVariableDebtToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aave\",\"details\":\"Implements the configuration methods for the Aave protocol\",\"events\":{\"ATokenUpgraded(address,address,address)\":{\"details\":\"Emitted when an aToken implementation is upgraded.\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"implementation\":\"The new aToken implementation\",\"proxy\":\"The aToken proxy address\"}},\"BorrowCapChanged(address,uint256,uint256)\":{\"details\":\"Emitted when the borrow cap of a reserve is updated.\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"newBorrowCap\":\"The new borrow cap\",\"oldBorrowCap\":\"The old borrow cap\"}},\"BorrowableInIsolationChanged(address,bool)\":{\"details\":\"Emitted when the reserve is set as borrowable/non borrowable in isolation mode.\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"borrowable\":\"True if the reserve is borrowable in isolation, false otherwise\"}},\"BridgeProtocolFeeUpdated(uint256,uint256)\":{\"details\":\"Emitted when the bridge protocol fee is updated.\",\"params\":{\"newBridgeProtocolFee\":\"The new protocol fee, expressed in bps\",\"oldBridgeProtocolFee\":\"The old protocol fee, expressed in bps\"}},\"CollateralConfigurationChanged(address,uint256,uint256,uint256)\":{\"details\":\"Emitted when the collateralization risk parameters for the specified asset are updated.\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"liquidationBonus\":\"The bonus liquidators receive to liquidate this asset\",\"liquidationThreshold\":\"The threshold at which loans using this asset as collateral will be considered undercollateralized\",\"ltv\":\"The loan to value of the asset when used as collateral\"}},\"DebtCeilingChanged(address,uint256,uint256)\":{\"details\":\"Emitted when the debt ceiling of an asset is set.\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"newDebtCeiling\":\"The new debt ceiling\",\"oldDebtCeiling\":\"The old debt ceiling\"}},\"EModeAssetCategoryChanged(address,uint8,uint8)\":{\"details\":\"Emitted when the category of an asset in eMode is changed.\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"newCategoryId\":\"The new eMode asset category\",\"oldCategoryId\":\"The old eMode asset category\"}},\"EModeCategoryAdded(uint8,uint256,uint256,uint256,address,string)\":{\"details\":\"Emitted when a new eMode category is added.\",\"params\":{\"categoryId\":\"The new eMode category id\",\"label\":\"A human readable identifier for the category\",\"liquidationBonus\":\"The liquidationBonus for the asset category in eMode\",\"liquidationThreshold\":\"The liquidationThreshold for the asset category in eMode\",\"ltv\":\"The ltv for the asset category in eMode\",\"oracle\":\"The optional address of the price oracle specific for this category\"}},\"FlashloanPremiumToProtocolUpdated(uint128,uint128)\":{\"details\":\"Emitted when the part of the premium that goes to protocol is updated.\",\"params\":{\"newFlashloanPremiumToProtocol\":\"The new premium, expressed in bps\",\"oldFlashloanPremiumToProtocol\":\"The old premium, expressed in bps\"}},\"FlashloanPremiumTotalUpdated(uint128,uint128)\":{\"details\":\"Emitted when the total premium on flashloans is updated.\",\"params\":{\"newFlashloanPremiumTotal\":\"The new premium, expressed in bps\",\"oldFlashloanPremiumTotal\":\"The old premium, expressed in bps\"}},\"LiquidationProtocolFeeChanged(address,uint256,uint256)\":{\"details\":\"Emitted when the liquidation protocol fee of a reserve is updated.\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"newFee\":\"The new liquidation protocol fee, expressed in bps\",\"oldFee\":\"The old liquidation protocol fee, expressed in bps\"}},\"ReserveActive(address,bool)\":{\"details\":\"Emitted when a reserve is activated or deactivated\",\"params\":{\"active\":\"True if reserve is active, false otherwise\",\"asset\":\"The address of the underlying asset of the reserve\"}},\"ReserveBorrowing(address,bool)\":{\"details\":\"Emitted when borrowing is enabled or disabled on a reserve.\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"enabled\":\"True if borrowing is enabled, false otherwise\"}},\"ReserveDropped(address)\":{\"details\":\"Emitted when a reserve is dropped.\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\"}},\"ReserveFactorChanged(address,uint256,uint256)\":{\"details\":\"Emitted when a reserve factor is updated.\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"newReserveFactor\":\"The new reserve factor, expressed in bps\",\"oldReserveFactor\":\"The old reserve factor, expressed in bps\"}},\"ReserveFlashLoaning(address,bool)\":{\"details\":\"Emitted when flashloans are enabled or disabled on a reserve.\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"enabled\":\"True if flashloans are enabled, false otherwise\"}},\"ReserveFrozen(address,bool)\":{\"details\":\"Emitted when a reserve is frozen or unfrozen\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"frozen\":\"True if reserve is frozen, false otherwise\"}},\"ReserveInitialized(address,address,address,address,address)\":{\"details\":\"Emitted when a reserve is initialized.\",\"params\":{\"aToken\":\"The address of the associated aToken contract\",\"asset\":\"The address of the underlying asset of the reserve\",\"interestRateStrategyAddress\":\"The address of the interest rate strategy for the reserve\",\"stableDebtToken\":\"The address of the associated stable rate debt token\",\"variableDebtToken\":\"The address of the associated variable rate debt token\"}},\"ReserveInterestRateStrategyChanged(address,address,address)\":{\"details\":\"Emitted when a reserve interest strategy contract is updated.\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"newStrategy\":\"The address of the new interest strategy contract\",\"oldStrategy\":\"The address of the old interest strategy contract\"}},\"ReservePaused(address,bool)\":{\"details\":\"Emitted when a reserve is paused or unpaused\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"paused\":\"True if reserve is paused, false otherwise\"}},\"ReserveStableRateBorrowing(address,bool)\":{\"details\":\"Emitted when stable rate borrowing is enabled or disabled on a reserve\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"enabled\":\"True if stable rate borrowing is enabled, false otherwise\"}},\"SiloedBorrowingChanged(address,bool,bool)\":{\"details\":\"Emitted when the the siloed borrowing state for an asset is changed.\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"newState\":\"The new siloed borrowing state\",\"oldState\":\"The old siloed borrowing state\"}},\"StableDebtTokenUpgraded(address,address,address)\":{\"details\":\"Emitted when the implementation of a stable debt token is upgraded.\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"implementation\":\"The new aToken implementation\",\"proxy\":\"The stable debt token proxy address\"}},\"SupplyCapChanged(address,uint256,uint256)\":{\"details\":\"Emitted when the supply cap of a reserve is updated.\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"newSupplyCap\":\"The new supply cap\",\"oldSupplyCap\":\"The old supply cap\"}},\"UnbackedMintCapChanged(address,uint256,uint256)\":{\"details\":\"Emitted when the unbacked mint cap of a reserve is updated.\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"newUnbackedMintCap\":\"The new unbacked mint cap\",\"oldUnbackedMintCap\":\"The old unbacked mint cap\"}},\"VariableDebtTokenUpgraded(address,address,address)\":{\"details\":\"Emitted when the implementation of a variable debt token is upgraded.\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"implementation\":\"The new aToken implementation\",\"proxy\":\"The variable debt token proxy address\"}}},\"kind\":\"dev\",\"methods\":{\"configureReserveAsCollateral(address,uint256,uint256,uint256)\":{\"details\":\"All the values are expressed in bps. A value of 10000, results in 100.00%The `liquidationBonus` is always above 100%. A value of 105% means the liquidator will receive a 5% bonus\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"liquidationBonus\":\"The bonus liquidators receive to liquidate this asset\",\"liquidationThreshold\":\"The threshold at which loans using this asset as collateral will be considered undercollateralized\",\"ltv\":\"The loan to value of the asset when used as collateral\"}},\"dropReserve(address)\":{\"params\":{\"asset\":\"The address of the reserve to drop\"}},\"initReserves((address,address,address,uint8,address,address,address,address,string,string,string,string,string,string,bytes)[])\":{\"params\":{\"input\":\"The array of initialization parameters\"}},\"setAssetEModeCategory(address,uint8)\":{\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"newCategoryId\":\"The new category id of the asset\"}},\"setBorrowCap(address,uint256)\":{\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"newBorrowCap\":\"The new borrow cap of the reserve\"}},\"setBorrowableInIsolation(address,bool)\":{\"details\":\"When this flag is set to true, the asset will be borrowable against isolated collaterals and the borrowed amount will be accumulated in the isolated collateral's total debt exposureOnly assets of the same family (e.g. USD stablecoins) should be borrowable in isolation mode to keep consistency in the debt ceiling calculations\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"borrowable\":\"True if the asset should be borrowable in isolation, false otherwise\"}},\"setDebtCeiling(address,uint256)\":{\"params\":{\"newDebtCeiling\":\"The new debt ceiling\"}},\"setEModeCategory(uint8,uint16,uint16,uint16,address,string)\":{\"details\":\"If zero is provided as oracle address, the default asset oracles will be used to compute the overall debt and overcollateralization of the users using this category.The new ltv and liquidation threshold must be greater than the base ltvs and liquidation thresholds of all assets within the eMode category\",\"params\":{\"categoryId\":\"The id of the category to be configured\",\"label\":\"A label identifying the category\",\"liquidationBonus\":\"The liquidation bonus associated with the category\",\"liquidationThreshold\":\"The liquidation threshold associated with the category\",\"ltv\":\"The ltv associated with the category\",\"oracle\":\"The oracle associated with the category\"}},\"setLiquidationProtocolFee(address,uint256)\":{\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"newFee\":\"The new liquidation protocol fee of the reserve, expressed in bps\"}},\"setPoolPause(bool)\":{\"params\":{\"paused\":\"True if protocol needs to be paused, false otherwise\"}},\"setReserveActive(address,bool)\":{\"params\":{\"active\":\"True if the reserve needs to be active, false otherwise\",\"asset\":\"The address of the underlying asset of the reserve\"}},\"setReserveBorrowing(address,bool)\":{\"details\":\"Can only be disabled (set to false) if stable borrowing is disabled\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"enabled\":\"True if borrowing needs to be enabled, false otherwise\"}},\"setReserveFactor(address,uint256)\":{\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"newReserveFactor\":\"The new reserve factor of the reserve\"}},\"setReserveFlashLoaning(address,bool)\":{\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"enabled\":\"True if flashloans need to be enabled, false otherwise\"}},\"setReserveFreeze(address,bool)\":{\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"freeze\":\"True if the reserve needs to be frozen, false otherwise\"}},\"setReserveInterestRateStrategyAddress(address,address)\":{\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"newRateStrategyAddress\":\"The address of the new interest strategy contract\"}},\"setReservePause(address,bool)\":{\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"paused\":\"True if pausing the reserve, false if unpausing\"}},\"setReserveStableRateBorrowing(address,bool)\":{\"details\":\"Can only be enabled (set to true) if borrowing is enabled\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"enabled\":\"True if stable rate borrowing needs to be enabled, false otherwise\"}},\"setSiloedBorrowing(address,bool)\":{\"params\":{\"siloed\":\"The new siloed borrowing state\"}},\"setSupplyCap(address,uint256)\":{\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"newSupplyCap\":\"The new supply cap of the reserve\"}},\"setUnbackedMintCap(address,uint256)\":{\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"newUnbackedMintCap\":\"The new unbacked mint cap of the reserve\"}},\"updateAToken((address,address,address,string,string,address,bytes))\":{\"details\":\"Updates the aToken implementation for the reserve.\",\"params\":{\"input\":\"The aToken update parameters\"}},\"updateBridgeProtocolFee(uint256)\":{\"params\":{\"newBridgeProtocolFee\":\"The part of the fee sent to the protocol treasury, expressed in bps\"}},\"updateFlashloanPremiumToProtocol(uint128)\":{\"details\":\"Expressed in bpsThe premium to protocol is calculated on the total flashloan premium\",\"params\":{\"newFlashloanPremiumToProtocol\":\"The part of the flashloan premium sent to the protocol treasury\"}},\"updateFlashloanPremiumTotal(uint128)\":{\"details\":\"Expressed in bpsThe premium is calculated on the total amount borrowed\",\"params\":{\"newFlashloanPremiumTotal\":\"The total flashloan premium\"}},\"updateStableDebtToken((address,address,string,string,address,bytes))\":{\"params\":{\"input\":\"The stableDebtToken update parameters\"}},\"updateVariableDebtToken((address,address,string,string,address,bytes))\":{\"params\":{\"input\":\"The variableDebtToken update parameters\"}}},\"title\":\"PoolConfigurator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"configureReserveAsCollateral(address,uint256,uint256,uint256)\":{\"notice\":\"Configures the reserve collateralization parameters.\"},\"dropReserve(address)\":{\"notice\":\"Drops a reserve entirely.\"},\"initReserves((address,address,address,uint8,address,address,address,address,string,string,string,string,string,string,bytes)[])\":{\"notice\":\"Initializes multiple reserves.\"},\"setAssetEModeCategory(address,uint8)\":{\"notice\":\"Assign an efficiency mode (eMode) category to asset.\"},\"setBorrowCap(address,uint256)\":{\"notice\":\"Updates the borrow cap of a reserve.\"},\"setBorrowableInIsolation(address,bool)\":{\"notice\":\"Sets the borrowable in isolation flag for the reserve.\"},\"setDebtCeiling(address,uint256)\":{\"notice\":\"Sets the debt ceiling for an asset.\"},\"setEModeCategory(uint8,uint16,uint16,uint16,address,string)\":{\"notice\":\"Adds a new efficiency mode (eMode) category.\"},\"setLiquidationProtocolFee(address,uint256)\":{\"notice\":\"Updates the liquidation protocol fee of reserve.\"},\"setPoolPause(bool)\":{\"notice\":\"Pauses or unpauses all the protocol reserves. In the paused state all the protocol interactions are suspended.\"},\"setReserveActive(address,bool)\":{\"notice\":\"Activate or deactivate a reserve\"},\"setReserveBorrowing(address,bool)\":{\"notice\":\"Configures borrowing on a reserve.\"},\"setReserveFactor(address,uint256)\":{\"notice\":\"Updates the reserve factor of a reserve.\"},\"setReserveFlashLoaning(address,bool)\":{\"notice\":\"Enable or disable flashloans on a reserve\"},\"setReserveFreeze(address,bool)\":{\"notice\":\"Freeze or unfreeze a reserve. A frozen reserve doesn't allow any new supply, borrow or rate swap but allows repayments, liquidations, rate rebalances and withdrawals.\"},\"setReserveInterestRateStrategyAddress(address,address)\":{\"notice\":\"Sets the interest rate strategy of a reserve.\"},\"setReservePause(address,bool)\":{\"notice\":\"Pauses a reserve. A paused reserve does not allow any interaction (supply, borrow, repay, swap interest rate, liquidate, atoken transfers).\"},\"setReserveStableRateBorrowing(address,bool)\":{\"notice\":\"Enable or disable stable rate borrowing on a reserve.\"},\"setSiloedBorrowing(address,bool)\":{\"notice\":\"Sets siloed borrowing for an asset\"},\"setSupplyCap(address,uint256)\":{\"notice\":\"Updates the supply cap of a reserve.\"},\"setUnbackedMintCap(address,uint256)\":{\"notice\":\"Updates the unbacked mint cap of reserve.\"},\"updateBridgeProtocolFee(uint256)\":{\"notice\":\"Updates the bridge fee collected by the protocol reserves.\"},\"updateFlashloanPremiumToProtocol(uint128)\":{\"notice\":\"Updates the flash loan premium collected by protocol reserves\"},\"updateFlashloanPremiumTotal(uint128)\":{\"notice\":\"Updates the total flash loan premium. Total flash loan premium consists of two parts: - A part is sent to aToken holders as extra balance - A part is collected by the protocol reserves\"},\"updateStableDebtToken((address,address,string,string,address,bytes))\":{\"notice\":\"Updates the stable debt token implementation for the reserve.\"},\"updateVariableDebtToken((address,address,string,string,address,bytes))\":{\"notice\":\"Updates the variable debt token implementation for the asset.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lending/core/protocol/pool/PoolConfigurator.sol\":\"PoolConfigurator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/lending/core/dependencies/openzeppelin/contracts/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data\\n    ) internal view returns (bytes memory) {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4ab8ca5064cf230337feaa22c261ac66e49ec5bb79e35297ffc21564efde5d86\",\"license\":\"MIT\"},\"contracts/lending/core/dependencies/openzeppelin/upgradeability/BaseUpgradeabilityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"../contracts/Address.sol\\\";\\n\\n/**\\n * @title BaseUpgradeabilityProxy\\n * @dev This contract implements a proxy that allows to change the\\n * implementation address to which it will delegate.\\n * Such a change is called an implementation upgrade.\\n */\\ncontract BaseUpgradeabilityProxy is Proxy {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     * @param implementation Address of the new implementation.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     * @return impl Address of the current implementation\\n     */\\n    function _implementation() internal view override returns (address impl) {\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\n        //solium-disable-next-line\\n        assembly {\\n            impl := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Upgrades the proxy to a new implementation.\\n     * @param newImplementation Address of the new implementation.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Sets the implementation address of the proxy.\\n     * @param newImplementation Address of the new implementation.\\n     */\\n    function _setImplementation(address newImplementation) internal {\\n        require(\\n            Address.isContract(newImplementation),\\n            \\\"Cannot set a proxy implementation to a non-contract address\\\"\\n        );\\n\\n        bytes32 slot = IMPLEMENTATION_SLOT;\\n\\n        //solium-disable-next-line\\n        assembly {\\n            sstore(slot, newImplementation)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x61de4a3d56658f3da2c0ca66b1c985c8862a16fa2478b63a09c9e715c124d795\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/dependencies/openzeppelin/upgradeability/InitializableUpgradeabilityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BaseUpgradeabilityProxy.sol\\\";\\n\\n/**\\n * @title InitializableUpgradeabilityProxy\\n * @dev Extends BaseUpgradeabilityProxy with an initializer for initializing\\n * implementation and init data.\\n */\\ncontract InitializableUpgradeabilityProxy is BaseUpgradeabilityProxy {\\n    /**\\n     * @dev Contract initializer.\\n     * @param _logic Address of the initial implementation.\\n     * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\\n     * It should include the signature and the parameters of the function to be called, as described in\\n     * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n     * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\\n     */\\n    function initialize(address _logic, bytes memory _data) public payable {\\n        require(_implementation() == address(0));\\n        assert(\\n            IMPLEMENTATION_SLOT ==\\n                bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1)\\n        );\\n        _setImplementation(_logic);\\n        if (_data.length > 0) {\\n            (bool success, ) = _logic.delegatecall(_data);\\n            require(success);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x41d0c8282dd1bc01743d1ef92f483832fed67d85bc8a40970024bfc4dde3cd00\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/dependencies/openzeppelin/upgradeability/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Proxy\\n * @dev Implements delegation of calls to other contracts, with proper\\n * forwarding of return values and bubbling of failures.\\n * It defines a fallback function that delegates all calls to the address\\n * returned by the abstract _implementation() internal function.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Fallback function.\\n     * Will run if no other function in the contract matches the call data.\\n     * Implemented entirely in `_fallback`.\\n     */\\n    fallback() external payable {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @return The Address of the implementation.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates execution to an implementation contract.\\n     * This is a low level function that doesn't return to its internal call site.\\n     * It will return to the external caller whatever the implementation returns.\\n     * @param implementation Address to delegate.\\n     */\\n    function _delegate(address implementation) internal {\\n        //solium-disable-next-line\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(\\n                gas(),\\n                implementation,\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that is run as the first thing in the fallback function.\\n     * Can be redefined in derived contracts to add functionality.\\n     * Redefinitions must call super._willFallback().\\n     */\\n    function _willFallback() internal virtual {}\\n\\n    /**\\n     * @dev fallback implementation.\\n     * Extracted to enable manual triggering.\\n     */\\n    function _fallback() internal {\\n        _willFallback();\\n        _delegate(_implementation());\\n    }\\n}\\n\",\"keccak256\":\"0x058d0eb2be787ef3c2d22fb689eab7244a54318e909fb298c25bd9934d6cd148\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\n\\n/**\\n * @title IACLManager\\n * @author Aave\\n * @notice Defines the basic interface for the ACL Manager\\n */\\ninterface IACLManager {\\n    /**\\n     * @notice Returns the contract address of the PoolAddressesProvider\\n     * @return The address of the PoolAddressesProvider\\n     */\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        returns (IPoolAddressesProvider);\\n\\n    /**\\n     * @notice Returns the identifier of the PoolAdmin role\\n     * @return The id of the PoolAdmin role\\n     */\\n    function POOL_ADMIN_ROLE() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the identifier of the EmergencyAdmin role\\n     * @return The id of the EmergencyAdmin role\\n     */\\n    function EMERGENCY_ADMIN_ROLE() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the identifier of the RiskAdmin role\\n     * @return The id of the RiskAdmin role\\n     */\\n    function RISK_ADMIN_ROLE() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the identifier of the FlashBorrower role\\n     * @return The id of the FlashBorrower role\\n     */\\n    function FLASH_BORROWER_ROLE() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the identifier of the Bridge role\\n     * @return The id of the Bridge role\\n     */\\n    function BRIDGE_ROLE() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the identifier of the AssetListingAdmin role\\n     * @return The id of the AssetListingAdmin role\\n     */\\n    function ASSET_LISTING_ADMIN_ROLE() external view returns (bytes32);\\n\\n    /**\\n     * @notice Set the role as admin of a specific role.\\n     * @dev By default the admin role for all roles is `DEFAULT_ADMIN_ROLE`.\\n     * @param role The role to be managed by the admin role\\n     * @param adminRole The admin role\\n     */\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n    /**\\n     * @notice Adds a new admin as PoolAdmin\\n     * @param admin The address of the new admin\\n     */\\n    function addPoolAdmin(address admin) external;\\n\\n    /**\\n     * @notice Removes an admin as PoolAdmin\\n     * @param admin The address of the admin to remove\\n     */\\n    function removePoolAdmin(address admin) external;\\n\\n    /**\\n     * @notice Returns true if the address is PoolAdmin, false otherwise\\n     * @param admin The address to check\\n     * @return True if the given address is PoolAdmin, false otherwise\\n     */\\n    function isPoolAdmin(address admin) external view returns (bool);\\n\\n    /**\\n     * @notice Adds a new admin as EmergencyAdmin\\n     * @param admin The address of the new admin\\n     */\\n    function addEmergencyAdmin(address admin) external;\\n\\n    /**\\n     * @notice Removes an admin as EmergencyAdmin\\n     * @param admin The address of the admin to remove\\n     */\\n    function removeEmergencyAdmin(address admin) external;\\n\\n    /**\\n     * @notice Returns true if the address is EmergencyAdmin, false otherwise\\n     * @param admin The address to check\\n     * @return True if the given address is EmergencyAdmin, false otherwise\\n     */\\n    function isEmergencyAdmin(address admin) external view returns (bool);\\n\\n    /**\\n     * @notice Adds a new admin as RiskAdmin\\n     * @param admin The address of the new admin\\n     */\\n    function addRiskAdmin(address admin) external;\\n\\n    /**\\n     * @notice Removes an admin as RiskAdmin\\n     * @param admin The address of the admin to remove\\n     */\\n    function removeRiskAdmin(address admin) external;\\n\\n    /**\\n     * @notice Returns true if the address is RiskAdmin, false otherwise\\n     * @param admin The address to check\\n     * @return True if the given address is RiskAdmin, false otherwise\\n     */\\n    function isRiskAdmin(address admin) external view returns (bool);\\n\\n    /**\\n     * @notice Adds a new address as FlashBorrower\\n     * @param borrower The address of the new FlashBorrower\\n     */\\n    function addFlashBorrower(address borrower) external;\\n\\n    /**\\n     * @notice Removes an address as FlashBorrower\\n     * @param borrower The address of the FlashBorrower to remove\\n     */\\n    function removeFlashBorrower(address borrower) external;\\n\\n    /**\\n     * @notice Returns true if the address is FlashBorrower, false otherwise\\n     * @param borrower The address to check\\n     * @return True if the given address is FlashBorrower, false otherwise\\n     */\\n    function isFlashBorrower(address borrower) external view returns (bool);\\n\\n    /**\\n     * @notice Adds a new address as Bridge\\n     * @param bridge The address of the new Bridge\\n     */\\n    function addBridge(address bridge) external;\\n\\n    /**\\n     * @notice Removes an address as Bridge\\n     * @param bridge The address of the bridge to remove\\n     */\\n    function removeBridge(address bridge) external;\\n\\n    /**\\n     * @notice Returns true if the address is Bridge, false otherwise\\n     * @param bridge The address to check\\n     * @return True if the given address is Bridge, false otherwise\\n     */\\n    function isBridge(address bridge) external view returns (bool);\\n\\n    /**\\n     * @notice Adds a new admin as AssetListingAdmin\\n     * @param admin The address of the new admin\\n     */\\n    function addAssetListingAdmin(address admin) external;\\n\\n    /**\\n     * @notice Removes an admin as AssetListingAdmin\\n     * @param admin The address of the admin to remove\\n     */\\n    function removeAssetListingAdmin(address admin) external;\\n\\n    /**\\n     * @notice Returns true if the address is AssetListingAdmin, false otherwise\\n     * @param admin The address to check\\n     * @return True if the given address is AssetListingAdmin, false otherwise\\n     */\\n    function isAssetListingAdmin(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x871b96585ca8d91f0a328dc0f4426589ec0713b675d05ef8fed90cac0646394e\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IAaveIncentivesController\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Incentives Controller.\\n * @dev It only contains one single function, needed as a hook on aToken and debtToken transfers.\\n */\\ninterface IAaveIncentivesController {\\n    /**\\n     * @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.\\n     * @dev The units of `totalSupply` and `userBalance` should be the same.\\n     * @param user The address of the user whose asset balance has changed\\n     * @param totalSupply The total supply of the asset prior to user balance change\\n     * @param userBalance The previous user balance prior to balance change\\n     */\\n    function handleAction(\\n        address user,\\n        uint256 totalSupply,\\n        uint256 userBalance\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc151038fc0fadac268bf9e71ed67d04c6217169f7c18edfea38f0f78edf3dbfd\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IInitializableAToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\nimport {IPool} from \\\"./IPool.sol\\\";\\n\\n/**\\n * @title IInitializableAToken\\n * @author Aave\\n * @notice Interface for the initialize function on AToken\\n */\\ninterface IInitializableAToken {\\n    /**\\n     * @dev Emitted when an aToken is initialized\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param pool The address of the associated pool\\n     * @param treasury The address of the treasury\\n     * @param incentivesController The address of the incentives controller for this aToken\\n     * @param aTokenDecimals The decimals of the underlying\\n     * @param aTokenName The name of the aToken\\n     * @param aTokenSymbol The symbol of the aToken\\n     * @param params A set of encoded parameters for additional initialization\\n     */\\n    event Initialized(\\n        address indexed underlyingAsset,\\n        address indexed pool,\\n        address treasury,\\n        address incentivesController,\\n        uint8 aTokenDecimals,\\n        string aTokenName,\\n        string aTokenSymbol,\\n        bytes params\\n    );\\n\\n    /**\\n     * @notice Initializes the aToken\\n     * @param pool The pool contract that is initializing this contract\\n     * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n     * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n     * @param incentivesController The smart contract managing potential incentives distribution\\n     * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n     * @param aTokenName The name of the aToken\\n     * @param aTokenSymbol The symbol of the aToken\\n     * @param params A set of encoded parameters for additional initialization\\n     */\\n    function initialize(\\n        IPool pool,\\n        address treasury,\\n        address underlyingAsset,\\n        IAaveIncentivesController incentivesController,\\n        uint8 aTokenDecimals,\\n        string calldata aTokenName,\\n        string calldata aTokenSymbol,\\n        bytes calldata params\\n    ) external;\\n}\\n\",\"keccak256\":\"0x83f88dddf1c55903a757d2c4d8d1e8d8c2f99ca2e59ecc974a5a90e1ec946cf1\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IInitializableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\nimport {IPool} from \\\"./IPool.sol\\\";\\n\\n/**\\n * @title IInitializableDebtToken\\n * @author Aave\\n * @notice Interface for the initialize function common between debt tokens\\n */\\ninterface IInitializableDebtToken {\\n    /**\\n     * @dev Emitted when a debt token is initialized\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param pool The address of the associated pool\\n     * @param incentivesController The address of the incentives controller for this aToken\\n     * @param debtTokenDecimals The decimals of the debt token\\n     * @param debtTokenName The name of the debt token\\n     * @param debtTokenSymbol The symbol of the debt token\\n     * @param params A set of encoded parameters for additional initialization\\n     */\\n    event Initialized(\\n        address indexed underlyingAsset,\\n        address indexed pool,\\n        address incentivesController,\\n        uint8 debtTokenDecimals,\\n        string debtTokenName,\\n        string debtTokenSymbol,\\n        bytes params\\n    );\\n\\n    /**\\n     * @notice Initializes the debt token.\\n     * @param pool The pool contract that is initializing this contract\\n     * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n     * @param incentivesController The smart contract managing potential incentives distribution\\n     * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\n     * @param debtTokenName The name of the token\\n     * @param debtTokenSymbol The symbol of the token\\n     * @param params A set of encoded parameters for additional initialization\\n     */\\n    function initialize(\\n        IPool pool,\\n        address underlyingAsset,\\n        IAaveIncentivesController incentivesController,\\n        uint8 debtTokenDecimals,\\n        string memory debtTokenName,\\n        string memory debtTokenSymbol,\\n        bytes calldata params\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3e5f03ac5eb5815c308466dccb5c04887ef15272be091382d8360e8c311577c1\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n */\\ninterface IPool {\\n    /**\\n     * @dev Emitted on mintUnbacked()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the supply\\n     * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n     * @param amount The amount of supplied assets\\n     * @param referralCode The referral code used\\n     */\\n    event MintUnbacked(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on backUnbacked()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param backer The address paying for the backing\\n     * @param amount The amount added as backing\\n     * @param fee The amount paid in fees\\n     */\\n    event BackUnbacked(\\n        address indexed reserve,\\n        address indexed backer,\\n        uint256 amount,\\n        uint256 fee\\n    );\\n\\n    /**\\n     * @dev Emitted on supply()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the supply\\n     * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n     * @param amount The amount supplied\\n     * @param referralCode The referral code used\\n     */\\n    event Supply(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlying asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of aTokens\\n     * @param to The address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     */\\n    event Withdraw(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n     * initiator of the transaction on flashLoan()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n     * @param referralCode The referral code used\\n     */\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n     */\\n    event Repay(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed repayer,\\n        uint256 amount,\\n        bool useATokens\\n    );\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user swapping his rate mode\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     */\\n    event SwapBorrowRateMode(\\n        address indexed reserve,\\n        address indexed user,\\n        DataTypes.InterestRateMode interestRateMode\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param totalDebt The total isolation mode debt for the reserve\\n     */\\n    event IsolationModeTotalDebtUpdated(\\n        address indexed asset,\\n        uint256 totalDebt\\n    );\\n\\n    /**\\n     * @dev Emitted when the user selects a certain asset category for eMode\\n     * @param user The address of the user\\n     * @param categoryId The category id\\n     */\\n    event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     */\\n    event ReserveUsedAsCollateralEnabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     */\\n    event ReserveUsedAsCollateralDisabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     */\\n    event RebalanceStableBorrowRate(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n     * @param premium The fee flash borrowed\\n     * @param referralCode The referral code used\\n     */\\n    event FlashLoan(\\n        address indexed target,\\n        address initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 premium,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated.\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n     * @param liquidator The address of the liquidator\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     */\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated.\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The next liquidity rate\\n     * @param stableBorrowRate The next stable borrow rate\\n     * @param variableBorrowRate The next variable borrow rate\\n     * @param liquidityIndex The next liquidity index\\n     * @param variableBorrowIndex The next variable borrow index\\n     */\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n     * @param reserve The address of the reserve\\n     * @param amountMinted The amount minted to the treasury\\n     */\\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n    /**\\n     * @notice Mints an `amount` of aTokens to the `onBehalfOf`\\n     * @param asset The address of the underlying asset to mint\\n     * @param amount The amount to mint\\n     * @param onBehalfOf The address that will receive the aTokens\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function mintUnbacked(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Back the current unbacked underlying with `amount` and pay `fee`.\\n     * @param asset The address of the underlying asset to back\\n     * @param amount The amount to back\\n     * @param fee The amount paid in fees\\n     * @return The backed amount\\n     */\\n    function backUnbacked(\\n        address asset,\\n        uint256 amount,\\n        uint256 fee\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     */\\n    function supplyWithPermit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     */\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     */\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     */\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     * @return The final amount repaid\\n     */\\n    function repayWithPermit(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n     * equivalent debt tokens\\n     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n     * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n     * balance is not enough to cover the whole debt\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @return The final amount repaid\\n     */\\n    function repayWithATokens(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     */\\n    function swapBorrowRateMode(\\n        address asset,\\n        uint256 interestRateMode\\n    ) external;\\n\\n    /**\\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n     *        much has been borrowed at a stable rate and suppliers are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     */\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n     * @param asset The address of the underlying asset supplied\\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n     */\\n    function setUserUseReserveAsCollateral(\\n        address asset,\\n        bool useAsCollateral\\n    ) external;\\n\\n    /**\\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     */\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://docs.aave.com/developers/\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts of the assets being flash-borrowed\\n     * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata interestRateModes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://docs.aave.com/developers/\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n     * @param asset The address of the asset being flash-borrowed\\n     * @param amount The amount of the asset being flash-borrowed\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function flashLoanSimple(\\n        address receiverAddress,\\n        address asset,\\n        uint256 amount,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n     * @return currentLiquidationThreshold The liquidation threshold of the user\\n     * @return ltv The loan to value of The user\\n     * @return healthFactor The current health factor of the user\\n     */\\n    function getUserAccountData(\\n        address user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralBase,\\n            uint256 totalDebtBase,\\n            uint256 availableBorrowsBase,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    /**\\n     * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n     * interest rate strategy\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n     * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n     * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n     */\\n    function initReserve(\\n        address asset,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Drop a reserve\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     */\\n    function dropReserve(address asset) external;\\n\\n    /**\\n     * @notice Updates the address of the interest rate strategy contract\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param rateStrategyAddress The address of the interest rate strategy contract\\n     */\\n    function setReserveInterestRateStrategyAddress(\\n        address asset,\\n        address rateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Sets the configuration bitmap of the reserve as a whole\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param configuration The new configuration bitmap\\n     */\\n    function setConfiguration(\\n        address asset,\\n        DataTypes.ReserveConfigurationMap calldata configuration\\n    ) external;\\n\\n    /**\\n     * @notice Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     */\\n    function getConfiguration(\\n        address asset\\n    ) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the configuration of the user across all the reserves\\n     * @param user The user address\\n     * @return The configuration of the user\\n     */\\n    function getUserConfiguration(\\n        address user\\n    ) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(\\n        address asset\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the normalized variable debt per unit of asset\\n     * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n     * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n     * moment (approx. a borrower would get if opening a position). This means that is always used in\\n     * combination with variable debt supply/balances.\\n     * If using this function externally, consider that is possible to have an increasing normalized\\n     * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n     * (e.g. only updates with non-zero variable debt supply)\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(\\n        address asset\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state and configuration data of the reserve\\n     */\\n    function getReserveData(\\n        address asset\\n    ) external view returns (DataTypes.ReserveData memory);\\n\\n    /**\\n     * @notice Validates and finalizes an aToken transfer\\n     * @dev Only callable by the overlying aToken of the `asset`\\n     * @param asset The address of the underlying asset of the aToken\\n     * @param from The user from which the aTokens are transferred\\n     * @param to The user receiving the aTokens\\n     * @param amount The amount being transferred/withdrawn\\n     * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n     * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n     */\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromBefore,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    /**\\n     * @notice Returns the list of the underlying assets of all the initialized reserves\\n     * @dev It does not include dropped reserves\\n     * @return The addresses of the underlying assets of the initialized reserves\\n     */\\n    function getReservesList() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n     * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n     * @return The address of the reserve associated with id\\n     */\\n    function getReserveAddressById(uint16 id) external view returns (address);\\n\\n    /**\\n     * @notice Returns the PoolAddressesProvider connected to this contract\\n     * @return The address of the PoolAddressesProvider\\n     */\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        returns (IPoolAddressesProvider);\\n\\n    /**\\n     * @notice Updates the protocol fee on the bridging\\n     * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n     */\\n    function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n    /**\\n     * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n     * - A part is sent to aToken holders as extra, one time accumulated interest\\n     * - A part is collected by the protocol treasury\\n     * @dev The total premium is calculated on the total borrowed amount\\n     * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param flashLoanPremiumTotal The total premium, expressed in bps\\n     * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n     */\\n    function updateFlashloanPremiums(\\n        uint128 flashLoanPremiumTotal,\\n        uint128 flashLoanPremiumToProtocol\\n    ) external;\\n\\n    /**\\n     * @notice Configures a new category for the eMode.\\n     * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n     * The category 0 is reserved as it's the default for volatile assets\\n     * @param id The id of the category\\n     * @param config The configuration of the category\\n     */\\n    function configureEModeCategory(\\n        uint8 id,\\n        DataTypes.EModeCategory memory config\\n    ) external;\\n\\n    /**\\n     * @notice Returns the data of an eMode category\\n     * @param id The id of the category\\n     * @return The configuration data of the category\\n     */\\n    function getEModeCategoryData(\\n        uint8 id\\n    ) external view returns (DataTypes.EModeCategory memory);\\n\\n    /**\\n     * @notice Allows a user to use the protocol in eMode\\n     * @param categoryId The id of the category\\n     */\\n    function setUserEMode(uint8 categoryId) external;\\n\\n    /**\\n     * @notice Returns the eMode the user is using\\n     * @param user The address of the user\\n     * @return The eMode id\\n     */\\n    function getUserEMode(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Resets the isolation mode total debt of the given asset to zero\\n     * @dev It requires the given asset has zero debt ceiling\\n     * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n     */\\n    function resetIsolationModeTotalDebt(address asset) external;\\n\\n    /**\\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n     * @return The percentage of available liquidity to borrow, expressed in bps\\n     */\\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the total fee on flash loans\\n     * @return The total fee on flashloans\\n     */\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the part of the bridge fees sent to protocol\\n     * @return The bridge fee sent to the protocol treasury\\n     */\\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the part of the flashloan fees sent to protocol\\n     * @return The flashloan fee sent to the protocol treasury\\n     */\\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n     * @return The maximum number of reserves supported\\n     */\\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n    /**\\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n     * @param assets The list of reserves for which the minting needs to be executed\\n     */\\n    function mintToTreasury(address[] calldata assets) external;\\n\\n    /**\\n     * @notice Rescue and transfer tokens locked in this contract\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param amount The amount of token to transfer\\n     */\\n    function rescueTokens(address token, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @dev Deprecated: Use the `supply` function instead\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n}\\n\",\"keccak256\":\"0x787841314e105aa11156c6d7e9e01d935ecaaa496150c86409f037d0654f54ac\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n */\\ninterface IPoolAddressesProvider {\\n    /**\\n     * @dev Emitted when the market identifier is updated.\\n     * @param oldMarketId The old id of the market\\n     * @param newMarketId The new id of the market\\n     */\\n    event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n    /**\\n     * @dev Emitted when the pool is updated.\\n     * @param oldAddress The old address of the Pool\\n     * @param newAddress The new address of the Pool\\n     */\\n    event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the pool configurator is updated.\\n     * @param oldAddress The old address of the PoolConfigurator\\n     * @param newAddress The new address of the PoolConfigurator\\n     */\\n    event PoolConfiguratorUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the price oracle is updated.\\n     * @param oldAddress The old address of the PriceOracle\\n     * @param newAddress The new address of the PriceOracle\\n     */\\n    event PriceOracleUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the ACL manager is updated.\\n     * @param oldAddress The old address of the ACLManager\\n     * @param newAddress The new address of the ACLManager\\n     */\\n    event ACLManagerUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the ACL admin is updated.\\n     * @param oldAddress The old address of the ACLAdmin\\n     * @param newAddress The new address of the ACLAdmin\\n     */\\n    event ACLAdminUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the price oracle sentinel is updated.\\n     * @param oldAddress The old address of the PriceOracleSentinel\\n     * @param newAddress The new address of the PriceOracleSentinel\\n     */\\n    event PriceOracleSentinelUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the pool data provider is updated.\\n     * @param oldAddress The old address of the PoolDataProvider\\n     * @param newAddress The new address of the PoolDataProvider\\n     */\\n    event PoolDataProviderUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a new proxy is created.\\n     * @param id The identifier of the proxy\\n     * @param proxyAddress The address of the created proxy contract\\n     * @param implementationAddress The address of the implementation contract\\n     */\\n    event ProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a new non-proxied contract address is registered.\\n     * @param id The identifier of the contract\\n     * @param oldAddress The address of the old contract\\n     * @param newAddress The address of the new contract\\n     */\\n    event AddressSet(\\n        bytes32 indexed id,\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the implementation of the proxy registered with id is updated\\n     * @param id The identifier of the contract\\n     * @param proxyAddress The address of the proxy contract\\n     * @param oldImplementationAddress The address of the old implementation contract\\n     * @param newImplementationAddress The address of the new implementation contract\\n     */\\n    event AddressSetAsProxy(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address oldImplementationAddress,\\n        address indexed newImplementationAddress\\n    );\\n\\n    /**\\n     * @notice Returns the id of the Aave market to which this contract points to.\\n     * @return The market id\\n     */\\n    function getMarketId() external view returns (string memory);\\n\\n    /**\\n     * @notice Associates an id with a specific PoolAddressesProvider.\\n     * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n     * identify and validate multiple Aave markets.\\n     * @param newMarketId The market id\\n     */\\n    function setMarketId(string calldata newMarketId) external;\\n\\n    /**\\n     * @notice Returns an address by its identifier.\\n     * @dev The returned address might be an EOA or a contract, potentially proxied\\n     * @dev It returns ZERO if there is no registered address with the given id\\n     * @param id The id\\n     * @return The address of the registered for the specified id\\n     */\\n    function getAddressFromID(bytes32 id) external view returns (address);\\n\\n    /**\\n     * @notice General function to update the implementation of a proxy registered with\\n     * certain `id`. If there is no proxy registered, it will instantiate one and\\n     * set as implementation the `newImplementationAddress`.\\n     * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n     * setter function, in order to avoid unexpected consequences\\n     * @param id The id\\n     * @param newImplementationAddress The address of the new implementation\\n     */\\n    function setAddressAsProxy(\\n        bytes32 id,\\n        address newImplementationAddress\\n    ) external;\\n\\n    /**\\n     * @notice Sets an address for an id replacing the address saved in the addresses map.\\n     * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n     * @param id The id\\n     * @param newAddress The address to set\\n     */\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    /**\\n     * @notice Returns the address of the Pool proxy.\\n     * @return The Pool proxy address\\n     */\\n    function getPool() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the Pool, or creates a proxy\\n     * setting the new `pool` implementation when the function is called for the first time.\\n     * @param newPoolImpl The new Pool implementation\\n     */\\n    function setPoolImpl(address newPoolImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the PoolConfigurator proxy.\\n     * @return The PoolConfigurator proxy address\\n     */\\n    function getPoolConfigurator() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n     * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n     * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n     */\\n    function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle.\\n     * @return The address of the PriceOracle\\n     */\\n    function getPriceOracle() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle.\\n     * @param newPriceOracle The address of the new PriceOracle\\n     */\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL manager.\\n     * @return The address of the ACLManager\\n     */\\n    function getACLManager() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL manager.\\n     * @param newAclManager The address of the new ACLManager\\n     */\\n    function setACLManager(address newAclManager) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL admin.\\n     * @return The address of the ACL admin\\n     */\\n    function getACLAdmin() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL admin.\\n     * @param newAclAdmin The address of the new ACL admin\\n     */\\n    function setACLAdmin(address newAclAdmin) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle sentinel.\\n     * @return The address of the PriceOracleSentinel\\n     */\\n    function getPriceOracleSentinel() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle sentinel.\\n     * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n     */\\n    function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n    /**\\n     * @notice Returns the address of the data provider.\\n     * @return The address of the DataProvider\\n     */\\n    function getPoolDataProvider() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the data provider.\\n     * @param newDataProvider The address of the new DataProvider\\n     */\\n    function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0xe77d8d5059b52bb94bf1c3cd9a7a1da1e10ace934ce1ff18b4322206f7dc592a\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IPoolConfigurator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {ConfiguratorInputTypes} from \\\"../protocol/libraries/types/ConfiguratorInputTypes.sol\\\";\\n\\n/**\\n * @title IPoolConfigurator\\n * @author Aave\\n * @notice Defines the basic interface for a Pool configurator.\\n */\\ninterface IPoolConfigurator {\\n    /**\\n     * @dev Emitted when a reserve is initialized.\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param aToken The address of the associated aToken contract\\n     * @param stableDebtToken The address of the associated stable rate debt token\\n     * @param variableDebtToken The address of the associated variable rate debt token\\n     * @param interestRateStrategyAddress The address of the interest rate strategy for the reserve\\n     */\\n    event ReserveInitialized(\\n        address indexed asset,\\n        address indexed aToken,\\n        address stableDebtToken,\\n        address variableDebtToken,\\n        address interestRateStrategyAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when borrowing is enabled or disabled on a reserve.\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param enabled True if borrowing is enabled, false otherwise\\n     */\\n    event ReserveBorrowing(address indexed asset, bool enabled);\\n\\n    /**\\n     * @dev Emitted when flashloans are enabled or disabled on a reserve.\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param enabled True if flashloans are enabled, false otherwise\\n     */\\n    event ReserveFlashLoaning(address indexed asset, bool enabled);\\n\\n    /**\\n     * @dev Emitted when the collateralization risk parameters for the specified asset are updated.\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param ltv The loan to value of the asset when used as collateral\\n     * @param liquidationThreshold The threshold at which loans using this asset as collateral will be considered undercollateralized\\n     * @param liquidationBonus The bonus liquidators receive to liquidate this asset\\n     */\\n    event CollateralConfigurationChanged(\\n        address indexed asset,\\n        uint256 ltv,\\n        uint256 liquidationThreshold,\\n        uint256 liquidationBonus\\n    );\\n\\n    /**\\n     * @dev Emitted when stable rate borrowing is enabled or disabled on a reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param enabled True if stable rate borrowing is enabled, false otherwise\\n     */\\n    event ReserveStableRateBorrowing(address indexed asset, bool enabled);\\n\\n    /**\\n     * @dev Emitted when a reserve is activated or deactivated\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param active True if reserve is active, false otherwise\\n     */\\n    event ReserveActive(address indexed asset, bool active);\\n\\n    /**\\n     * @dev Emitted when a reserve is frozen or unfrozen\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param frozen True if reserve is frozen, false otherwise\\n     */\\n    event ReserveFrozen(address indexed asset, bool frozen);\\n\\n    /**\\n     * @dev Emitted when a reserve is paused or unpaused\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param paused True if reserve is paused, false otherwise\\n     */\\n    event ReservePaused(address indexed asset, bool paused);\\n\\n    /**\\n     * @dev Emitted when a reserve is dropped.\\n     * @param asset The address of the underlying asset of the reserve\\n     */\\n    event ReserveDropped(address indexed asset);\\n\\n    /**\\n     * @dev Emitted when a reserve factor is updated.\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param oldReserveFactor The old reserve factor, expressed in bps\\n     * @param newReserveFactor The new reserve factor, expressed in bps\\n     */\\n    event ReserveFactorChanged(\\n        address indexed asset,\\n        uint256 oldReserveFactor,\\n        uint256 newReserveFactor\\n    );\\n\\n    /**\\n     * @dev Emitted when the borrow cap of a reserve is updated.\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param oldBorrowCap The old borrow cap\\n     * @param newBorrowCap The new borrow cap\\n     */\\n    event BorrowCapChanged(\\n        address indexed asset,\\n        uint256 oldBorrowCap,\\n        uint256 newBorrowCap\\n    );\\n\\n    /**\\n     * @dev Emitted when the supply cap of a reserve is updated.\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param oldSupplyCap The old supply cap\\n     * @param newSupplyCap The new supply cap\\n     */\\n    event SupplyCapChanged(\\n        address indexed asset,\\n        uint256 oldSupplyCap,\\n        uint256 newSupplyCap\\n    );\\n\\n    /**\\n     * @dev Emitted when the liquidation protocol fee of a reserve is updated.\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param oldFee The old liquidation protocol fee, expressed in bps\\n     * @param newFee The new liquidation protocol fee, expressed in bps\\n     */\\n    event LiquidationProtocolFeeChanged(\\n        address indexed asset,\\n        uint256 oldFee,\\n        uint256 newFee\\n    );\\n\\n    /**\\n     * @dev Emitted when the unbacked mint cap of a reserve is updated.\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param oldUnbackedMintCap The old unbacked mint cap\\n     * @param newUnbackedMintCap The new unbacked mint cap\\n     */\\n    event UnbackedMintCapChanged(\\n        address indexed asset,\\n        uint256 oldUnbackedMintCap,\\n        uint256 newUnbackedMintCap\\n    );\\n\\n    /**\\n     * @dev Emitted when the category of an asset in eMode is changed.\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param oldCategoryId The old eMode asset category\\n     * @param newCategoryId The new eMode asset category\\n     */\\n    event EModeAssetCategoryChanged(\\n        address indexed asset,\\n        uint8 oldCategoryId,\\n        uint8 newCategoryId\\n    );\\n\\n    /**\\n     * @dev Emitted when a new eMode category is added.\\n     * @param categoryId The new eMode category id\\n     * @param ltv The ltv for the asset category in eMode\\n     * @param liquidationThreshold The liquidationThreshold for the asset category in eMode\\n     * @param liquidationBonus The liquidationBonus for the asset category in eMode\\n     * @param oracle The optional address of the price oracle specific for this category\\n     * @param label A human readable identifier for the category\\n     */\\n    event EModeCategoryAdded(\\n        uint8 indexed categoryId,\\n        uint256 ltv,\\n        uint256 liquidationThreshold,\\n        uint256 liquidationBonus,\\n        address oracle,\\n        string label\\n    );\\n\\n    /**\\n     * @dev Emitted when a reserve interest strategy contract is updated.\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param oldStrategy The address of the old interest strategy contract\\n     * @param newStrategy The address of the new interest strategy contract\\n     */\\n    event ReserveInterestRateStrategyChanged(\\n        address indexed asset,\\n        address oldStrategy,\\n        address newStrategy\\n    );\\n\\n    /**\\n     * @dev Emitted when an aToken implementation is upgraded.\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param proxy The aToken proxy address\\n     * @param implementation The new aToken implementation\\n     */\\n    event ATokenUpgraded(\\n        address indexed asset,\\n        address indexed proxy,\\n        address indexed implementation\\n    );\\n\\n    /**\\n     * @dev Emitted when the implementation of a stable debt token is upgraded.\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param proxy The stable debt token proxy address\\n     * @param implementation The new aToken implementation\\n     */\\n    event StableDebtTokenUpgraded(\\n        address indexed asset,\\n        address indexed proxy,\\n        address indexed implementation\\n    );\\n\\n    /**\\n     * @dev Emitted when the implementation of a variable debt token is upgraded.\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param proxy The variable debt token proxy address\\n     * @param implementation The new aToken implementation\\n     */\\n    event VariableDebtTokenUpgraded(\\n        address indexed asset,\\n        address indexed proxy,\\n        address indexed implementation\\n    );\\n\\n    /**\\n     * @dev Emitted when the debt ceiling of an asset is set.\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param oldDebtCeiling The old debt ceiling\\n     * @param newDebtCeiling The new debt ceiling\\n     */\\n    event DebtCeilingChanged(\\n        address indexed asset,\\n        uint256 oldDebtCeiling,\\n        uint256 newDebtCeiling\\n    );\\n\\n    /**\\n     * @dev Emitted when the the siloed borrowing state for an asset is changed.\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param oldState The old siloed borrowing state\\n     * @param newState The new siloed borrowing state\\n     */\\n    event SiloedBorrowingChanged(\\n        address indexed asset,\\n        bool oldState,\\n        bool newState\\n    );\\n\\n    /**\\n     * @dev Emitted when the bridge protocol fee is updated.\\n     * @param oldBridgeProtocolFee The old protocol fee, expressed in bps\\n     * @param newBridgeProtocolFee The new protocol fee, expressed in bps\\n     */\\n    event BridgeProtocolFeeUpdated(\\n        uint256 oldBridgeProtocolFee,\\n        uint256 newBridgeProtocolFee\\n    );\\n\\n    /**\\n     * @dev Emitted when the total premium on flashloans is updated.\\n     * @param oldFlashloanPremiumTotal The old premium, expressed in bps\\n     * @param newFlashloanPremiumTotal The new premium, expressed in bps\\n     */\\n    event FlashloanPremiumTotalUpdated(\\n        uint128 oldFlashloanPremiumTotal,\\n        uint128 newFlashloanPremiumTotal\\n    );\\n\\n    /**\\n     * @dev Emitted when the part of the premium that goes to protocol is updated.\\n     * @param oldFlashloanPremiumToProtocol The old premium, expressed in bps\\n     * @param newFlashloanPremiumToProtocol The new premium, expressed in bps\\n     */\\n    event FlashloanPremiumToProtocolUpdated(\\n        uint128 oldFlashloanPremiumToProtocol,\\n        uint128 newFlashloanPremiumToProtocol\\n    );\\n\\n    /**\\n     * @dev Emitted when the reserve is set as borrowable/non borrowable in isolation mode.\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param borrowable True if the reserve is borrowable in isolation, false otherwise\\n     */\\n    event BorrowableInIsolationChanged(address asset, bool borrowable);\\n\\n    /**\\n     * @notice Initializes multiple reserves.\\n     * @param input The array of initialization parameters\\n     */\\n    function initReserves(\\n        ConfiguratorInputTypes.InitReserveInput[] calldata input\\n    ) external;\\n\\n    /**\\n     * @dev Updates the aToken implementation for the reserve.\\n     * @param input The aToken update parameters\\n     */\\n    function updateAToken(\\n        ConfiguratorInputTypes.UpdateATokenInput calldata input\\n    ) external;\\n\\n    /**\\n     * @notice Updates the stable debt token implementation for the reserve.\\n     * @param input The stableDebtToken update parameters\\n     */\\n    function updateStableDebtToken(\\n        ConfiguratorInputTypes.UpdateDebtTokenInput calldata input\\n    ) external;\\n\\n    /**\\n     * @notice Updates the variable debt token implementation for the asset.\\n     * @param input The variableDebtToken update parameters\\n     */\\n    function updateVariableDebtToken(\\n        ConfiguratorInputTypes.UpdateDebtTokenInput calldata input\\n    ) external;\\n\\n    /**\\n     * @notice Configures borrowing on a reserve.\\n     * @dev Can only be disabled (set to false) if stable borrowing is disabled\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param enabled True if borrowing needs to be enabled, false otherwise\\n     */\\n    function setReserveBorrowing(address asset, bool enabled) external;\\n\\n    /**\\n     * @notice Configures the reserve collateralization parameters.\\n     * @dev All the values are expressed in bps. A value of 10000, results in 100.00%\\n     * @dev The `liquidationBonus` is always above 100%. A value of 105% means the liquidator will receive a 5% bonus\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param ltv The loan to value of the asset when used as collateral\\n     * @param liquidationThreshold The threshold at which loans using this asset as collateral will be considered undercollateralized\\n     * @param liquidationBonus The bonus liquidators receive to liquidate this asset\\n     */\\n    function configureReserveAsCollateral(\\n        address asset,\\n        uint256 ltv,\\n        uint256 liquidationThreshold,\\n        uint256 liquidationBonus\\n    ) external;\\n\\n    /**\\n     * @notice Enable or disable stable rate borrowing on a reserve.\\n     * @dev Can only be enabled (set to true) if borrowing is enabled\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param enabled True if stable rate borrowing needs to be enabled, false otherwise\\n     */\\n    function setReserveStableRateBorrowing(\\n        address asset,\\n        bool enabled\\n    ) external;\\n\\n    /**\\n     * @notice Enable or disable flashloans on a reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param enabled True if flashloans need to be enabled, false otherwise\\n     */\\n    function setReserveFlashLoaning(address asset, bool enabled) external;\\n\\n    /**\\n     * @notice Activate or deactivate a reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param active True if the reserve needs to be active, false otherwise\\n     */\\n    function setReserveActive(address asset, bool active) external;\\n\\n    /**\\n     * @notice Freeze or unfreeze a reserve. A frozen reserve doesn't allow any new supply, borrow\\n     * or rate swap but allows repayments, liquidations, rate rebalances and withdrawals.\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param freeze True if the reserve needs to be frozen, false otherwise\\n     */\\n    function setReserveFreeze(address asset, bool freeze) external;\\n\\n    /**\\n     * @notice Sets the borrowable in isolation flag for the reserve.\\n     * @dev When this flag is set to true, the asset will be borrowable against isolated collaterals and the\\n     * borrowed amount will be accumulated in the isolated collateral's total debt exposure\\n     * @dev Only assets of the same family (e.g. USD stablecoins) should be borrowable in isolation mode to keep\\n     * consistency in the debt ceiling calculations\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param borrowable True if the asset should be borrowable in isolation, false otherwise\\n     */\\n    function setBorrowableInIsolation(address asset, bool borrowable) external;\\n\\n    /**\\n     * @notice Pauses a reserve. A paused reserve does not allow any interaction (supply, borrow, repay,\\n     * swap interest rate, liquidate, atoken transfers).\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param paused True if pausing the reserve, false if unpausing\\n     */\\n    function setReservePause(address asset, bool paused) external;\\n\\n    /**\\n     * @notice Updates the reserve factor of a reserve.\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param newReserveFactor The new reserve factor of the reserve\\n     */\\n    function setReserveFactor(address asset, uint256 newReserveFactor) external;\\n\\n    /**\\n     * @notice Sets the interest rate strategy of a reserve.\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param newRateStrategyAddress The address of the new interest strategy contract\\n     */\\n    function setReserveInterestRateStrategyAddress(\\n        address asset,\\n        address newRateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Pauses or unpauses all the protocol reserves. In the paused state all the protocol interactions\\n     * are suspended.\\n     * @param paused True if protocol needs to be paused, false otherwise\\n     */\\n    function setPoolPause(bool paused) external;\\n\\n    /**\\n     * @notice Updates the borrow cap of a reserve.\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param newBorrowCap The new borrow cap of the reserve\\n     */\\n    function setBorrowCap(address asset, uint256 newBorrowCap) external;\\n\\n    /**\\n     * @notice Updates the supply cap of a reserve.\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param newSupplyCap The new supply cap of the reserve\\n     */\\n    function setSupplyCap(address asset, uint256 newSupplyCap) external;\\n\\n    /**\\n     * @notice Updates the liquidation protocol fee of reserve.\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param newFee The new liquidation protocol fee of the reserve, expressed in bps\\n     */\\n    function setLiquidationProtocolFee(address asset, uint256 newFee) external;\\n\\n    /**\\n     * @notice Updates the unbacked mint cap of reserve.\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param newUnbackedMintCap The new unbacked mint cap of the reserve\\n     */\\n    function setUnbackedMintCap(\\n        address asset,\\n        uint256 newUnbackedMintCap\\n    ) external;\\n\\n    /**\\n     * @notice Assign an efficiency mode (eMode) category to asset.\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param newCategoryId The new category id of the asset\\n     */\\n    function setAssetEModeCategory(address asset, uint8 newCategoryId) external;\\n\\n    /**\\n     * @notice Adds a new efficiency mode (eMode) category.\\n     * @dev If zero is provided as oracle address, the default asset oracles will be used to compute the overall debt and\\n     * overcollateralization of the users using this category.\\n     * @dev The new ltv and liquidation threshold must be greater than the base\\n     * ltvs and liquidation thresholds of all assets within the eMode category\\n     * @param categoryId The id of the category to be configured\\n     * @param ltv The ltv associated with the category\\n     * @param liquidationThreshold The liquidation threshold associated with the category\\n     * @param liquidationBonus The liquidation bonus associated with the category\\n     * @param oracle The oracle associated with the category\\n     * @param label A label identifying the category\\n     */\\n    function setEModeCategory(\\n        uint8 categoryId,\\n        uint16 ltv,\\n        uint16 liquidationThreshold,\\n        uint16 liquidationBonus,\\n        address oracle,\\n        string calldata label\\n    ) external;\\n\\n    /**\\n     * @notice Drops a reserve entirely.\\n     * @param asset The address of the reserve to drop\\n     */\\n    function dropReserve(address asset) external;\\n\\n    /**\\n     * @notice Updates the bridge fee collected by the protocol reserves.\\n     * @param newBridgeProtocolFee The part of the fee sent to the protocol treasury, expressed in bps\\n     */\\n    function updateBridgeProtocolFee(uint256 newBridgeProtocolFee) external;\\n\\n    /**\\n     * @notice Updates the total flash loan premium.\\n     * Total flash loan premium consists of two parts:\\n     * - A part is sent to aToken holders as extra balance\\n     * - A part is collected by the protocol reserves\\n     * @dev Expressed in bps\\n     * @dev The premium is calculated on the total amount borrowed\\n     * @param newFlashloanPremiumTotal The total flashloan premium\\n     */\\n    function updateFlashloanPremiumTotal(\\n        uint128 newFlashloanPremiumTotal\\n    ) external;\\n\\n    /**\\n     * @notice Updates the flash loan premium collected by protocol reserves\\n     * @dev Expressed in bps\\n     * @dev The premium to protocol is calculated on the total flashloan premium\\n     * @param newFlashloanPremiumToProtocol The part of the flashloan premium sent to the protocol treasury\\n     */\\n    function updateFlashloanPremiumToProtocol(\\n        uint128 newFlashloanPremiumToProtocol\\n    ) external;\\n\\n    /**\\n     * @notice Sets the debt ceiling for an asset.\\n     * @param newDebtCeiling The new debt ceiling\\n     */\\n    function setDebtCeiling(address asset, uint256 newDebtCeiling) external;\\n\\n    /**\\n     * @notice Sets siloed borrowing for an asset\\n     * @param siloed The new siloed borrowing state\\n     */\\n    function setSiloedBorrowing(address asset, bool siloed) external;\\n}\\n\",\"keccak256\":\"0x42c98067d11eb8230a9c6a9dca2eede2de1c39938de1e5864bc73a2be50ff0d6\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IPoolDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\n\\n/**\\n * @title IPoolDataProvider\\n * @author Aave\\n * @notice Defines the basic interface of a PoolDataProvider\\n */\\ninterface IPoolDataProvider {\\n    struct TokenData {\\n        string symbol;\\n        address tokenAddress;\\n    }\\n\\n    /**\\n     * @notice Returns the address for the PoolAddressesProvider contract.\\n     * @return The address for the PoolAddressesProvider contract\\n     */\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        returns (IPoolAddressesProvider);\\n\\n    /**\\n     * @notice Returns the list of the existing reserves in the pool.\\n     * @dev Handling MKR and ETH in a different way since they do not have standard `symbol` functions.\\n     * @return The list of reserves, pairs of symbols and addresses\\n     */\\n    function getAllReservesTokens() external view returns (TokenData[] memory);\\n\\n    /**\\n     * @notice Returns the list of the existing ATokens in the pool.\\n     * @return The list of ATokens, pairs of symbols and addresses\\n     */\\n    function getAllATokens() external view returns (TokenData[] memory);\\n\\n    /**\\n     * @notice Returns the configuration data of the reserve\\n     * @dev Not returning borrow and supply caps for compatibility, nor pause flag\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return decimals The number of decimals of the reserve\\n     * @return ltv The ltv of the reserve\\n     * @return liquidationThreshold The liquidationThreshold of the reserve\\n     * @return liquidationBonus The liquidationBonus of the reserve\\n     * @return reserveFactor The reserveFactor of the reserve\\n     * @return usageAsCollateralEnabled True if the usage as collateral is enabled, false otherwise\\n     * @return borrowingEnabled True if borrowing is enabled, false otherwise\\n     * @return stableBorrowRateEnabled True if stable rate borrowing is enabled, false otherwise\\n     * @return isActive True if it is active, false otherwise\\n     * @return isFrozen True if it is frozen, false otherwise\\n     */\\n    function getReserveConfigurationData(\\n        address asset\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n\\n    /**\\n     * @notice Returns the efficiency mode category of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The eMode id of the reserve\\n     */\\n    function getReserveEModeCategory(\\n        address asset\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the caps parameters of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return borrowCap The borrow cap of the reserve\\n     * @return supplyCap The supply cap of the reserve\\n     */\\n    function getReserveCaps(\\n        address asset\\n    ) external view returns (uint256 borrowCap, uint256 supplyCap);\\n\\n    /**\\n     * @notice Returns if the pool is paused\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return isPaused True if the pool is paused, false otherwise\\n     */\\n    function getPaused(address asset) external view returns (bool isPaused);\\n\\n    /**\\n     * @notice Returns the siloed borrowing flag\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return True if the asset is siloed for borrowing\\n     */\\n    function getSiloedBorrowing(address asset) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the protocol fee on the liquidation bonus\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The protocol fee on liquidation\\n     */\\n    function getLiquidationProtocolFee(\\n        address asset\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the unbacked mint cap of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The unbacked mint cap of the reserve\\n     */\\n    function getUnbackedMintCap(address asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the debt ceiling of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The debt ceiling of the reserve\\n     */\\n    function getDebtCeiling(address asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the debt ceiling decimals\\n     * @return The debt ceiling decimals\\n     */\\n    function getDebtCeilingDecimals() external pure returns (uint256);\\n\\n    /**\\n     * @notice Returns the reserve data\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return unbacked The amount of unbacked tokens\\n     * @return accruedToTreasuryScaled The scaled amount of tokens accrued to treasury that is to be minted\\n     * @return totalAToken The total supply of the aToken\\n     * @return totalStableDebt The total stable debt of the reserve\\n     * @return totalVariableDebt The total variable debt of the reserve\\n     * @return liquidityRate The liquidity rate of the reserve\\n     * @return variableBorrowRate The variable borrow rate of the reserve\\n     * @return stableBorrowRate The stable borrow rate of the reserve\\n     * @return averageStableBorrowRate The average stable borrow rate of the reserve\\n     * @return liquidityIndex The liquidity index of the reserve\\n     * @return variableBorrowIndex The variable borrow index of the reserve\\n     * @return lastUpdateTimestamp The timestamp of the last update of the reserve\\n     */\\n    function getReserveData(\\n        address asset\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 unbacked,\\n            uint256 accruedToTreasuryScaled,\\n            uint256 totalAToken,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n\\n    /**\\n     * @notice Returns the total supply of aTokens for a given asset\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The total supply of the aToken\\n     */\\n    function getATokenTotalSupply(\\n        address asset\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the total debt for a given asset\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The total debt for asset\\n     */\\n    function getTotalDebt(address asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the user data in a reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param user The address of the user\\n     * @return currentATokenBalance The current AToken balance of the user\\n     * @return currentStableDebt The current stable debt of the user\\n     * @return currentVariableDebt The current variable debt of the user\\n     * @return principalStableDebt The principal stable debt of the user\\n     * @return scaledVariableDebt The scaled variable debt of the user\\n     * @return stableBorrowRate The stable borrow rate of the user\\n     * @return liquidityRate The liquidity rate of the reserve\\n     * @return stableRateLastUpdated The timestamp of the last update of the user stable rate\\n     * @return usageAsCollateralEnabled True if the user is using the asset as collateral, false\\n     *         otherwise\\n     */\\n    function getUserReserveData(\\n        address asset,\\n        address user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 currentATokenBalance,\\n            uint256 currentStableDebt,\\n            uint256 currentVariableDebt,\\n            uint256 principalStableDebt,\\n            uint256 scaledVariableDebt,\\n            uint256 stableBorrowRate,\\n            uint256 liquidityRate,\\n            uint40 stableRateLastUpdated,\\n            bool usageAsCollateralEnabled\\n        );\\n\\n    /**\\n     * @notice Returns the token addresses of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return aTokenAddress The AToken address of the reserve\\n     * @return stableDebtTokenAddress The StableDebtToken address of the reserve\\n     * @return variableDebtTokenAddress The VariableDebtToken address of the reserve\\n     */\\n    function getReserveTokensAddresses(\\n        address asset\\n    )\\n        external\\n        view\\n        returns (\\n            address aTokenAddress,\\n            address stableDebtTokenAddress,\\n            address variableDebtTokenAddress\\n        );\\n\\n    /**\\n     * @notice Returns the address of the Interest Rate strategy\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return irStrategyAddress The address of the Interest Rate strategy\\n     */\\n    function getInterestRateStrategyAddress(\\n        address asset\\n    ) external view returns (address irStrategyAddress);\\n\\n    /**\\n     * @notice Returns whether the reserve has FlashLoans enabled or disabled\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return True if FlashLoans are enabled, false otherwise\\n     */\\n    function getFlashLoanEnabled(address asset) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xcba5bad975475015e6c323d3139840d5b644fd3ec3466f3d099230d1ec137218\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/protocol/libraries/aave-upgradeability/BaseImmutableAdminUpgradeabilityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {BaseUpgradeabilityProxy} from \\\"../../../dependencies/openzeppelin/upgradeability/BaseUpgradeabilityProxy.sol\\\";\\n\\n/**\\n * @title BaseImmutableAdminUpgradeabilityProxy\\n * @author Aave, inspired by the OpenZeppelin upgradeability proxy pattern\\n * @notice This contract combines an upgradeability proxy with an authorization\\n * mechanism for administrative tasks.\\n * @dev The admin role is stored in an immutable, which helps saving transactions costs\\n * All external functions in this contract must be guarded by the\\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\\n * feature proposal that would enable this to be done automatically.\\n */\\ncontract BaseImmutableAdminUpgradeabilityProxy is BaseUpgradeabilityProxy {\\n    address internal immutable _admin;\\n\\n    /**\\n     * @dev Constructor.\\n     * @param admin The address of the admin\\n     */\\n    constructor(address admin) {\\n        _admin = admin;\\n    }\\n\\n    modifier ifAdmin() {\\n        if (msg.sender == _admin) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @notice Return the admin address\\n     * @return The address of the proxy admin.\\n     */\\n    function admin() external ifAdmin returns (address) {\\n        return _admin;\\n    }\\n\\n    /**\\n     * @notice Return the implementation address\\n     * @return The address of the implementation.\\n     */\\n    function implementation() external ifAdmin returns (address) {\\n        return _implementation();\\n    }\\n\\n    /**\\n     * @notice Upgrade the backing implementation of the proxy.\\n     * @dev Only the admin can call this function.\\n     * @param newImplementation The address of the new implementation.\\n     */\\n    function upgradeTo(address newImplementation) external ifAdmin {\\n        _upgradeTo(newImplementation);\\n    }\\n\\n    /**\\n     * @notice Upgrade the backing implementation of the proxy and call a function\\n     * on the new implementation.\\n     * @dev This is useful to initialize the proxied contract.\\n     * @param newImplementation The address of the new implementation.\\n     * @param data Data to send as msg.data in the low level call.\\n     * It should include the signature and the parameters of the function to be called, as described in\\n     * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\\n     */\\n    function upgradeToAndCall(\\n        address newImplementation,\\n        bytes calldata data\\n    ) external payable ifAdmin {\\n        _upgradeTo(newImplementation);\\n        (bool success, ) = newImplementation.delegatecall(data);\\n        require(success);\\n    }\\n\\n    /**\\n     * @notice Only fall back when the sender is not the admin.\\n     */\\n    function _willFallback() internal virtual override {\\n        require(\\n            msg.sender != _admin,\\n            \\\"Cannot call fallback function from the proxy admin\\\"\\n        );\\n        super._willFallback();\\n    }\\n}\\n\",\"keccak256\":\"0x8d08b3e05d1864ab39f2e6e22e80408ae71aaea63b6f1ad27deddf88f307ece6\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/protocol/libraries/aave-upgradeability/InitializableImmutableAdminUpgradeabilityProxy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {InitializableUpgradeabilityProxy} from \\\"../../../dependencies/openzeppelin/upgradeability/InitializableUpgradeabilityProxy.sol\\\";\\nimport {Proxy} from \\\"../../../dependencies/openzeppelin/upgradeability/Proxy.sol\\\";\\nimport {BaseImmutableAdminUpgradeabilityProxy} from \\\"./BaseImmutableAdminUpgradeabilityProxy.sol\\\";\\n\\n/**\\n * @title InitializableAdminUpgradeabilityProxy\\n * @author Aave\\n * @dev Extends BaseAdminUpgradeabilityProxy with an initializer function\\n */\\ncontract InitializableImmutableAdminUpgradeabilityProxy is\\n    BaseImmutableAdminUpgradeabilityProxy,\\n    InitializableUpgradeabilityProxy\\n{\\n    /**\\n     * @dev Constructor.\\n     * @param admin The address of the admin\\n     */\\n    constructor(address admin) BaseImmutableAdminUpgradeabilityProxy(admin) {\\n        // Intentionally left blank\\n    }\\n\\n    /// @inheritdoc BaseImmutableAdminUpgradeabilityProxy\\n    function _willFallback()\\n        internal\\n        override(BaseImmutableAdminUpgradeabilityProxy, Proxy)\\n    {\\n        BaseImmutableAdminUpgradeabilityProxy._willFallback();\\n    }\\n}\\n\",\"keccak256\":\"0x3a5e85ce53c187b47f963c1a207636ee26a9885fb76b82b4e007e019dad7d010\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/protocol/libraries/aave-upgradeability/VersionedInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title VersionedInitializable\\n * @author Aave, inspired by the OpenZeppelin Initializable contract\\n * @notice Helper contract to implement initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * @dev WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\nabstract contract VersionedInitializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    uint256 private lastInitializedRevision = 0;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to use in the initializer function of a contract.\\n     */\\n    modifier initializer() {\\n        uint256 revision = getRevision();\\n        require(\\n            initializing ||\\n                isConstructor() ||\\n                revision > lastInitializedRevision,\\n            \\\"Contract instance has already been initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            lastInitializedRevision = revision;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the revision number of the contract\\n     * @dev Needs to be defined in the inherited class as a constant.\\n     * @return The revision number\\n     */\\n    function getRevision() internal pure virtual returns (uint256);\\n\\n    /**\\n     * @notice Returns true if and only if the function is running in the constructor\\n     * @return True if the function is running in the constructor\\n     */\\n    function isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        uint256 cs;\\n        //solium-disable-next-line\\n        assembly {\\n            cs := extcodesize(address())\\n        }\\n        return cs == 0;\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x26af01352943f03daa07976e1d1633bcf60df240c2737ae41e27b212796acf00\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/protocol/libraries/configuration/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Aave\\n * @notice Implements the bitmap logic to handle the reserve configuration\\n */\\nlibrary ReserveConfiguration {\\n    uint256 internal constant LTV_MASK =                       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n    uint256 internal constant LIQUIDATION_THRESHOLD_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\n    uint256 internal constant LIQUIDATION_BONUS_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\n    uint256 internal constant DECIMALS_MASK =                  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant ACTIVE_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant FROZEN_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant BORROWING_MASK =                 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant STABLE_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant PAUSED_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant SILOED_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant FLASHLOAN_ENABLED_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant RESERVE_FACTOR_MASK =            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant BORROW_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant SUPPLY_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =  0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant EMODE_CATEGORY_MASK =            0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant UNBACKED_MINT_CAP_MASK =         0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant DEBT_CEILING_MASK =              0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n    /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\n    uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\n    uint256 internal constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\n    uint256 internal constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\n    uint256 internal constant IS_ACTIVE_START_BIT_POSITION = 56;\\n    uint256 internal constant IS_FROZEN_START_BIT_POSITION = 57;\\n    uint256 internal constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\n    uint256 internal constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\n    uint256 internal constant IS_PAUSED_START_BIT_POSITION = 60;\\n    uint256 internal constant BORROWABLE_IN_ISOLATION_START_BIT_POSITION = 61;\\n    uint256 internal constant SILOED_BORROWING_START_BIT_POSITION = 62;\\n    uint256 internal constant FLASHLOAN_ENABLED_START_BIT_POSITION = 63;\\n    uint256 internal constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\n    uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;\\n    uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;\\n    uint256 internal constant LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION = 152;\\n    uint256 internal constant EMODE_CATEGORY_START_BIT_POSITION = 168;\\n    uint256 internal constant UNBACKED_MINT_CAP_START_BIT_POSITION = 176;\\n    uint256 internal constant DEBT_CEILING_START_BIT_POSITION = 212;\\n\\n    uint256 internal constant MAX_VALID_LTV = 65535;\\n    uint256 internal constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\n    uint256 internal constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\n    uint256 internal constant MAX_VALID_DECIMALS = 255;\\n    uint256 internal constant MAX_VALID_RESERVE_FACTOR = 65535;\\n    uint256 internal constant MAX_VALID_BORROW_CAP = 68719476735;\\n    uint256 internal constant MAX_VALID_SUPPLY_CAP = 68719476735;\\n    uint256 internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65535;\\n    uint256 internal constant MAX_VALID_EMODE_CATEGORY = 255;\\n    uint256 internal constant MAX_VALID_UNBACKED_MINT_CAP = 68719476735;\\n    uint256 internal constant MAX_VALID_DEBT_CEILING = 1099511627775;\\n\\n    uint256 public constant DEBT_CEILING_DECIMALS = 2;\\n    uint16 public constant MAX_RESERVES_COUNT = 128;\\n\\n    /**\\n     * @notice Sets the Loan to Value of the reserve\\n     * @param self The reserve configuration\\n     * @param ltv The new ltv\\n     */\\n    function setLtv(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 ltv\\n    ) internal pure {\\n        require(ltv <= MAX_VALID_LTV, Errors.INVALID_LTV);\\n\\n        self.data = (self.data & LTV_MASK) | ltv;\\n    }\\n\\n    /**\\n     * @notice Gets the Loan to Value of the reserve\\n     * @param self The reserve configuration\\n     * @return The loan to value\\n     */\\n    function getLtv(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return self.data & ~LTV_MASK;\\n    }\\n\\n    /**\\n     * @notice Sets the liquidation threshold of the reserve\\n     * @param self The reserve configuration\\n     * @param threshold The new liquidation threshold\\n     */\\n    function setLiquidationThreshold(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 threshold\\n    ) internal pure {\\n        require(\\n            threshold <= MAX_VALID_LIQUIDATION_THRESHOLD,\\n            Errors.INVALID_LIQ_THRESHOLD\\n        );\\n\\n        self.data =\\n            (self.data & LIQUIDATION_THRESHOLD_MASK) |\\n            (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the liquidation threshold of the reserve\\n     * @param self The reserve configuration\\n     * @return The liquidation threshold\\n     */\\n    function getLiquidationThreshold(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~LIQUIDATION_THRESHOLD_MASK) >>\\n            LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the liquidation bonus of the reserve\\n     * @param self The reserve configuration\\n     * @param bonus The new liquidation bonus\\n     */\\n    function setLiquidationBonus(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 bonus\\n    ) internal pure {\\n        require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.INVALID_LIQ_BONUS);\\n\\n        self.data =\\n            (self.data & LIQUIDATION_BONUS_MASK) |\\n            (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the liquidation bonus of the reserve\\n     * @param self The reserve configuration\\n     * @return The liquidation bonus\\n     */\\n    function getLiquidationBonus(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~LIQUIDATION_BONUS_MASK) >>\\n            LIQUIDATION_BONUS_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the decimals of the underlying asset of the reserve\\n     * @param self The reserve configuration\\n     * @param decimals The decimals\\n     */\\n    function setDecimals(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 decimals\\n    ) internal pure {\\n        require(decimals <= MAX_VALID_DECIMALS, Errors.INVALID_DECIMALS);\\n\\n        self.data =\\n            (self.data & DECIMALS_MASK) |\\n            (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the decimals of the underlying asset of the reserve\\n     * @param self The reserve configuration\\n     * @return The decimals of the asset\\n     */\\n    function getDecimals(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the active state of the reserve\\n     * @param self The reserve configuration\\n     * @param active The active state\\n     */\\n    function setActive(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool active\\n    ) internal pure {\\n        self.data =\\n            (self.data & ACTIVE_MASK) |\\n            (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the active state of the reserve\\n     * @param self The reserve configuration\\n     * @return The active state\\n     */\\n    function getActive(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~ACTIVE_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Sets the frozen state of the reserve\\n     * @param self The reserve configuration\\n     * @param frozen The frozen state\\n     */\\n    function setFrozen(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool frozen\\n    ) internal pure {\\n        self.data =\\n            (self.data & FROZEN_MASK) |\\n            (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the frozen state of the reserve\\n     * @param self The reserve configuration\\n     * @return The frozen state\\n     */\\n    function getFrozen(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~FROZEN_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Sets the paused state of the reserve\\n     * @param self The reserve configuration\\n     * @param paused The paused state\\n     */\\n    function setPaused(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool paused\\n    ) internal pure {\\n        self.data =\\n            (self.data & PAUSED_MASK) |\\n            (uint256(paused ? 1 : 0) << IS_PAUSED_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the paused state of the reserve\\n     * @param self The reserve configuration\\n     * @return The paused state\\n     */\\n    function getPaused(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~PAUSED_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Sets the borrowable in isolation flag for the reserve.\\n     * @dev When this flag is set to true, the asset will be borrowable against isolated collaterals and the borrowed\\n     * amount will be accumulated in the isolated collateral's total debt exposure.\\n     * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\n     * consistency in the debt ceiling calculations.\\n     * @param self The reserve configuration\\n     * @param borrowable True if the asset is borrowable\\n     */\\n    function setBorrowableInIsolation(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool borrowable\\n    ) internal pure {\\n        self.data =\\n            (self.data & BORROWABLE_IN_ISOLATION_MASK) |\\n            (uint256(borrowable ? 1 : 0) <<\\n                BORROWABLE_IN_ISOLATION_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the borrowable in isolation flag for the reserve.\\n     * @dev If the returned flag is true, the asset is borrowable against isolated collateral. Assets borrowed with\\n     * isolated collateral is accounted for in the isolated collateral's total debt exposure.\\n     * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\n     * consistency in the debt ceiling calculations.\\n     * @param self The reserve configuration\\n     * @return The borrowable in isolation flag\\n     */\\n    function getBorrowableInIsolation(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~BORROWABLE_IN_ISOLATION_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Sets the siloed borrowing flag for the reserve.\\n     * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\n     * @param self The reserve configuration\\n     * @param siloed True if the asset is siloed\\n     */\\n    function setSiloedBorrowing(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool siloed\\n    ) internal pure {\\n        self.data =\\n            (self.data & SILOED_BORROWING_MASK) |\\n            (uint256(siloed ? 1 : 0) << SILOED_BORROWING_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the siloed borrowing flag for the reserve.\\n     * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\n     * @param self The reserve configuration\\n     * @return The siloed borrowing flag\\n     */\\n    function getSiloedBorrowing(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~SILOED_BORROWING_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Enables or disables borrowing on the reserve\\n     * @param self The reserve configuration\\n     * @param enabled True if the borrowing needs to be enabled, false otherwise\\n     */\\n    function setBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool enabled\\n    ) internal pure {\\n        self.data =\\n            (self.data & BORROWING_MASK) |\\n            (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the borrowing state of the reserve\\n     * @param self The reserve configuration\\n     * @return The borrowing state\\n     */\\n    function getBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~BORROWING_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Enables or disables stable rate borrowing on the reserve\\n     * @param self The reserve configuration\\n     * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\n     */\\n    function setStableRateBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool enabled\\n    ) internal pure {\\n        self.data =\\n            (self.data & STABLE_BORROWING_MASK) |\\n            (uint256(enabled ? 1 : 0) <<\\n                STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the stable rate borrowing state of the reserve\\n     * @param self The reserve configuration\\n     * @return The stable rate borrowing state\\n     */\\n    function getStableRateBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~STABLE_BORROWING_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Sets the reserve factor of the reserve\\n     * @param self The reserve configuration\\n     * @param reserveFactor The reserve factor\\n     */\\n    function setReserveFactor(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 reserveFactor\\n    ) internal pure {\\n        require(\\n            reserveFactor <= MAX_VALID_RESERVE_FACTOR,\\n            Errors.INVALID_RESERVE_FACTOR\\n        );\\n\\n        self.data =\\n            (self.data & RESERVE_FACTOR_MASK) |\\n            (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the reserve factor of the reserve\\n     * @param self The reserve configuration\\n     * @return The reserve factor\\n     */\\n    function getReserveFactor(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~RESERVE_FACTOR_MASK) >>\\n            RESERVE_FACTOR_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the borrow cap of the reserve\\n     * @param self The reserve configuration\\n     * @param borrowCap The borrow cap\\n     */\\n    function setBorrowCap(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 borrowCap\\n    ) internal pure {\\n        require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.INVALID_BORROW_CAP);\\n\\n        self.data =\\n            (self.data & BORROW_CAP_MASK) |\\n            (borrowCap << BORROW_CAP_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the borrow cap of the reserve\\n     * @param self The reserve configuration\\n     * @return The borrow cap\\n     */\\n    function getBorrowCap(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the supply cap of the reserve\\n     * @param self The reserve configuration\\n     * @param supplyCap The supply cap\\n     */\\n    function setSupplyCap(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 supplyCap\\n    ) internal pure {\\n        require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.INVALID_SUPPLY_CAP);\\n\\n        self.data =\\n            (self.data & SUPPLY_CAP_MASK) |\\n            (supplyCap << SUPPLY_CAP_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the supply cap of the reserve\\n     * @param self The reserve configuration\\n     * @return The supply cap\\n     */\\n    function getSupplyCap(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the debt ceiling in isolation mode for the asset\\n     * @param self The reserve configuration\\n     * @param ceiling The maximum debt ceiling for the asset\\n     */\\n    function setDebtCeiling(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 ceiling\\n    ) internal pure {\\n        require(ceiling <= MAX_VALID_DEBT_CEILING, Errors.INVALID_DEBT_CEILING);\\n\\n        self.data =\\n            (self.data & DEBT_CEILING_MASK) |\\n            (ceiling << DEBT_CEILING_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the debt ceiling for the asset if the asset is in isolation mode\\n     * @param self The reserve configuration\\n     * @return The debt ceiling (0 = isolation mode disabled)\\n     */\\n    function getDebtCeiling(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the liquidation protocol fee of the reserve\\n     * @param self The reserve configuration\\n     * @param liquidationProtocolFee The liquidation protocol fee\\n     */\\n    function setLiquidationProtocolFee(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 liquidationProtocolFee\\n    ) internal pure {\\n        require(\\n            liquidationProtocolFee <= MAX_VALID_LIQUIDATION_PROTOCOL_FEE,\\n            Errors.INVALID_LIQUIDATION_PROTOCOL_FEE\\n        );\\n\\n        self.data =\\n            (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) |\\n            (liquidationProtocolFee <<\\n                LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the liquidation protocol fee\\n     * @param self The reserve configuration\\n     * @return The liquidation protocol fee\\n     */\\n    function getLiquidationProtocolFee(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) >>\\n            LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the unbacked mint cap of the reserve\\n     * @param self The reserve configuration\\n     * @param unbackedMintCap The unbacked mint cap\\n     */\\n    function setUnbackedMintCap(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 unbackedMintCap\\n    ) internal pure {\\n        require(\\n            unbackedMintCap <= MAX_VALID_UNBACKED_MINT_CAP,\\n            Errors.INVALID_UNBACKED_MINT_CAP\\n        );\\n\\n        self.data =\\n            (self.data & UNBACKED_MINT_CAP_MASK) |\\n            (unbackedMintCap << UNBACKED_MINT_CAP_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the unbacked mint cap of the reserve\\n     * @param self The reserve configuration\\n     * @return The unbacked mint cap\\n     */\\n    function getUnbackedMintCap(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~UNBACKED_MINT_CAP_MASK) >>\\n            UNBACKED_MINT_CAP_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the eMode asset category\\n     * @param self The reserve configuration\\n     * @param category The asset category when the user selects the eMode\\n     */\\n    function setEModeCategory(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 category\\n    ) internal pure {\\n        require(\\n            category <= MAX_VALID_EMODE_CATEGORY,\\n            Errors.INVALID_EMODE_CATEGORY\\n        );\\n\\n        self.data =\\n            (self.data & EMODE_CATEGORY_MASK) |\\n            (category << EMODE_CATEGORY_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the eMode asset category\\n     * @param self The reserve configuration\\n     * @return The eMode category for the asset\\n     */\\n    function getEModeCategory(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~EMODE_CATEGORY_MASK) >>\\n            EMODE_CATEGORY_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the flashloanable flag for the reserve\\n     * @param self The reserve configuration\\n     * @param flashLoanEnabled True if the asset is flashloanable, false otherwise\\n     */\\n    function setFlashLoanEnabled(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool flashLoanEnabled\\n    ) internal pure {\\n        self.data =\\n            (self.data & FLASHLOAN_ENABLED_MASK) |\\n            (uint256(flashLoanEnabled ? 1 : 0) <<\\n                FLASHLOAN_ENABLED_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the flashloanable flag for the reserve\\n     * @param self The reserve configuration\\n     * @return The flashloanable flag\\n     */\\n    function getFlashLoanEnabled(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~FLASHLOAN_ENABLED_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Gets the configuration flags of the reserve\\n     * @param self The reserve configuration\\n     * @return The state flag representing active\\n     * @return The state flag representing frozen\\n     * @return The state flag representing borrowing enabled\\n     * @return The state flag representing stableRateBorrowing enabled\\n     * @return The state flag representing paused\\n     */\\n    function getFlags(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool, bool, bool, bool, bool) {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            (dataLocal & ~ACTIVE_MASK) != 0,\\n            (dataLocal & ~FROZEN_MASK) != 0,\\n            (dataLocal & ~BORROWING_MASK) != 0,\\n            (dataLocal & ~STABLE_BORROWING_MASK) != 0,\\n            (dataLocal & ~PAUSED_MASK) != 0\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the configuration parameters of the reserve from storage\\n     * @param self The reserve configuration\\n     * @return The state param representing ltv\\n     * @return The state param representing liquidation threshold\\n     * @return The state param representing liquidation bonus\\n     * @return The state param representing reserve decimals\\n     * @return The state param representing reserve factor\\n     * @return The state param representing eMode category\\n     */\\n    function getParams(\\n        DataTypes.ReserveConfigurationMap memory self\\n    )\\n        internal\\n        pure\\n        returns (uint256, uint256, uint256, uint256, uint256, uint256)\\n    {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            dataLocal & ~LTV_MASK,\\n            (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >>\\n                LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n            (dataLocal & ~LIQUIDATION_BONUS_MASK) >>\\n                LIQUIDATION_BONUS_START_BIT_POSITION,\\n            (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n            (dataLocal & ~RESERVE_FACTOR_MASK) >>\\n                RESERVE_FACTOR_START_BIT_POSITION,\\n            (dataLocal & ~EMODE_CATEGORY_MASK) >>\\n                EMODE_CATEGORY_START_BIT_POSITION\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the caps parameters of the reserve from storage\\n     * @param self The reserve configuration\\n     * @return The state param representing borrow cap\\n     * @return The state param representing supply cap.\\n     */\\n    function getCaps(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256, uint256) {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            (dataLocal & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,\\n            (dataLocal & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x79cd0e516c67fa16ee19f026bee94ba510f14ac691b6c72c0623cdde5dfc0a43\",\"license\":\"BUSL-1.1\"},\"contracts/lending/core/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Errors library\\n * @author Aave\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n */\\nlibrary Errors {\\n    string public constant CALLER_NOT_POOL_ADMIN = \\\"1\\\"; // 'The caller of the function is not a pool admin'\\n    string public constant CALLER_NOT_EMERGENCY_ADMIN = \\\"2\\\"; // 'The caller of the function is not an emergency admin'\\n    string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = \\\"3\\\"; // 'The caller of the function is not a pool or emergency admin'\\n    string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = \\\"4\\\"; // 'The caller of the function is not a risk or pool admin'\\n    string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = \\\"5\\\"; // 'The caller of the function is not an asset listing or pool admin'\\n    string public constant CALLER_NOT_BRIDGE = \\\"6\\\"; // 'The caller of the function is not a bridge'\\n    string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = \\\"7\\\"; // 'Pool addresses provider is not registered'\\n    string public constant INVALID_ADDRESSES_PROVIDER_ID = \\\"8\\\"; // 'Invalid id for the pool addresses provider'\\n    string public constant NOT_CONTRACT = \\\"9\\\"; // 'Address is not a contract'\\n    string public constant CALLER_NOT_POOL_CONFIGURATOR = \\\"10\\\"; // 'The caller of the function is not the pool configurator'\\n    string public constant CALLER_NOT_ATOKEN = \\\"11\\\"; // 'The caller of the function is not an AToken'\\n    string public constant INVALID_ADDRESSES_PROVIDER = \\\"12\\\"; // 'The address of the pool addresses provider is invalid'\\n    string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = \\\"13\\\"; // 'Invalid return value of the flashloan executor function'\\n    string public constant RESERVE_ALREADY_ADDED = \\\"14\\\"; // 'Reserve has already been added to reserve list'\\n    string public constant NO_MORE_RESERVES_ALLOWED = \\\"15\\\"; // 'Maximum amount of reserves in the pool reached'\\n    string public constant EMODE_CATEGORY_RESERVED = \\\"16\\\"; // 'Zero eMode category is reserved for volatile heterogeneous assets'\\n    string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = \\\"17\\\"; // 'Invalid eMode category assignment to asset'\\n    string public constant RESERVE_LIQUIDITY_NOT_ZERO = \\\"18\\\"; // 'The liquidity of the reserve needs to be 0'\\n    string public constant FLASHLOAN_PREMIUM_INVALID = \\\"19\\\"; // 'Invalid flashloan premium'\\n    string public constant INVALID_RESERVE_PARAMS = \\\"20\\\"; // 'Invalid risk parameters for the reserve'\\n    string public constant INVALID_EMODE_CATEGORY_PARAMS = \\\"21\\\"; // 'Invalid risk parameters for the eMode category'\\n    string public constant BRIDGE_PROTOCOL_FEE_INVALID = \\\"22\\\"; // 'Invalid bridge protocol fee'\\n    string public constant CALLER_MUST_BE_POOL = \\\"23\\\"; // 'The caller of this function must be a pool'\\n    string public constant INVALID_MINT_AMOUNT = \\\"24\\\"; // 'Invalid amount to mint'\\n    string public constant INVALID_BURN_AMOUNT = \\\"25\\\"; // 'Invalid amount to burn'\\n    string public constant INVALID_AMOUNT = \\\"26\\\"; // 'Amount must be greater than 0'\\n    string public constant RESERVE_INACTIVE = \\\"27\\\"; // 'Action requires an active reserve'\\n    string public constant RESERVE_FROZEN = \\\"28\\\"; // 'Action cannot be performed because the reserve is frozen'\\n    string public constant RESERVE_PAUSED = \\\"29\\\"; // 'Action cannot be performed because the reserve is paused'\\n    string public constant BORROWING_NOT_ENABLED = \\\"30\\\"; // 'Borrowing is not enabled'\\n    string public constant STABLE_BORROWING_NOT_ENABLED = \\\"31\\\"; // 'Stable borrowing is not enabled'\\n    string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = \\\"32\\\"; // 'User cannot withdraw more than the available balance'\\n    string public constant INVALID_INTEREST_RATE_MODE_SELECTED = \\\"33\\\"; // 'Invalid interest rate mode selected'\\n    string public constant COLLATERAL_BALANCE_IS_ZERO = \\\"34\\\"; // 'The collateral balance is 0'\\n    string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD =\\n        \\\"35\\\"; // 'Health factor is lesser than the liquidation threshold'\\n    string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = \\\"36\\\"; // 'There is not enough collateral to cover a new borrow'\\n    string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = \\\"37\\\"; // 'Collateral is (mostly) the same currency that is being borrowed'\\n    string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = \\\"38\\\"; // 'The requested amount is greater than the max loan size in stable rate mode'\\n    string public constant NO_DEBT_OF_SELECTED_TYPE = \\\"39\\\"; // 'For repayment of a specific type of debt, the user needs to have debt that type'\\n    string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = \\\"40\\\"; // 'To repay on behalf of a user an explicit amount to repay is needed'\\n    string public constant NO_OUTSTANDING_STABLE_DEBT = \\\"41\\\"; // 'User does not have outstanding stable rate debt on this reserve'\\n    string public constant NO_OUTSTANDING_VARIABLE_DEBT = \\\"42\\\"; // 'User does not have outstanding variable rate debt on this reserve'\\n    string public constant UNDERLYING_BALANCE_ZERO = \\\"43\\\"; // 'The underlying balance needs to be greater than 0'\\n    string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = \\\"44\\\"; // 'Interest rate rebalance conditions were not met'\\n    string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = \\\"45\\\"; // 'Health factor is not below the threshold'\\n    string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = \\\"46\\\"; // 'The collateral chosen cannot be liquidated'\\n    string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \\\"47\\\"; // 'User did not borrow the specified currency'\\n    string public constant INCONSISTENT_FLASHLOAN_PARAMS = \\\"49\\\"; // 'Inconsistent flashloan parameters'\\n    string public constant BORROW_CAP_EXCEEDED = \\\"50\\\"; // 'Borrow cap is exceeded'\\n    string public constant SUPPLY_CAP_EXCEEDED = \\\"51\\\"; // 'Supply cap is exceeded'\\n    string public constant UNBACKED_MINT_CAP_EXCEEDED = \\\"52\\\"; // 'Unbacked mint cap is exceeded'\\n    string public constant DEBT_CEILING_EXCEEDED = \\\"53\\\"; // 'Debt ceiling is exceeded'\\n    string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = \\\"54\\\"; // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'\\n    string public constant STABLE_DEBT_NOT_ZERO = \\\"55\\\"; // 'Stable debt supply is not zero'\\n    string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = \\\"56\\\"; // 'Variable debt supply is not zero'\\n    string public constant LTV_VALIDATION_FAILED = \\\"57\\\"; // 'Ltv validation failed'\\n    string public constant INCONSISTENT_EMODE_CATEGORY = \\\"58\\\"; // 'Inconsistent eMode category'\\n    string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = \\\"59\\\"; // 'Price oracle sentinel validation failed'\\n    string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = \\\"60\\\"; // 'Asset is not borrowable in isolation mode'\\n    string public constant RESERVE_ALREADY_INITIALIZED = \\\"61\\\"; // 'Reserve has already been initialized'\\n    string public constant USER_IN_ISOLATION_MODE_OR_LTV_ZERO = \\\"62\\\"; // 'User is in isolation mode or ltv is zero'\\n    string public constant INVALID_LTV = \\\"63\\\"; // 'Invalid ltv parameter for the reserve'\\n    string public constant INVALID_LIQ_THRESHOLD = \\\"64\\\"; // 'Invalid liquidity threshold parameter for the reserve'\\n    string public constant INVALID_LIQ_BONUS = \\\"65\\\"; // 'Invalid liquidity bonus parameter for the reserve'\\n    string public constant INVALID_DECIMALS = \\\"66\\\"; // 'Invalid decimals parameter of the underlying asset of the reserve'\\n    string public constant INVALID_RESERVE_FACTOR = \\\"67\\\"; // 'Invalid reserve factor parameter for the reserve'\\n    string public constant INVALID_BORROW_CAP = \\\"68\\\"; // 'Invalid borrow cap for the reserve'\\n    string public constant INVALID_SUPPLY_CAP = \\\"69\\\"; // 'Invalid supply cap for the reserve'\\n    string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = \\\"70\\\"; // 'Invalid liquidation protocol fee for the reserve'\\n    string public constant INVALID_EMODE_CATEGORY = \\\"71\\\"; // 'Invalid eMode category for the reserve'\\n    string public constant INVALID_UNBACKED_MINT_CAP = \\\"72\\\"; // 'Invalid unbacked mint cap for the reserve'\\n    string public constant INVALID_DEBT_CEILING = \\\"73\\\"; // 'Invalid debt ceiling for the reserve\\n    string public constant INVALID_RESERVE_INDEX = \\\"74\\\"; // 'Invalid reserve index'\\n    string public constant ACL_ADMIN_CANNOT_BE_ZERO = \\\"75\\\"; // 'ACL admin cannot be set to the zero address'\\n    string public constant INCONSISTENT_PARAMS_LENGTH = \\\"76\\\"; // 'Array parameters that should be equal length are not'\\n    string public constant ZERO_ADDRESS_NOT_VALID = \\\"77\\\"; // 'Zero address not valid'\\n    string public constant INVALID_EXPIRATION = \\\"78\\\"; // 'Invalid expiration'\\n    string public constant INVALID_SIGNATURE = \\\"79\\\"; // 'Invalid signature'\\n    string public constant OPERATION_NOT_SUPPORTED = \\\"80\\\"; // 'Operation not supported'\\n    string public constant DEBT_CEILING_NOT_ZERO = \\\"81\\\"; // 'Debt ceiling is not zero'\\n    string public constant ASSET_NOT_LISTED = \\\"82\\\"; // 'Asset is not listed'\\n    string public constant INVALID_OPTIMAL_USAGE_RATIO = \\\"83\\\"; // 'Invalid optimal usage ratio'\\n    string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = \\\"84\\\"; // 'Invalid optimal stable to total debt ratio'\\n    string public constant UNDERLYING_CANNOT_BE_RESCUED = \\\"85\\\"; // 'The underlying asset cannot be rescued'\\n    string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = \\\"86\\\"; // 'Reserve has already been added to reserve list'\\n    string public constant POOL_ADDRESSES_DO_NOT_MATCH = \\\"87\\\"; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\\n    string public constant STABLE_BORROWING_ENABLED = \\\"88\\\"; // 'Stable borrowing is enabled'\\n    string public constant SILOED_BORROWING_VIOLATION = \\\"89\\\"; // 'User is trying to borrow multiple assets including a siloed one'\\n    string public constant RESERVE_DEBT_NOT_ZERO = \\\"90\\\"; // the total debt of the reserve needs to be 0\\n    string public constant FLASHLOAN_DISABLED = \\\"91\\\"; // FlashLoaning for this asset is disabled\\n}\\n\",\"keccak256\":\"0x4a73e341d689ab87c5944cbd8d13b2761454710a5c7fc71f26ca67fe605e9809\",\"license\":\"BUSL-1.1\"},\"contracts/lending/core/protocol/libraries/logic/ConfiguratorLogic.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.10;\\n\\nimport {IPool} from \\\"../../../interfaces/IPool.sol\\\";\\nimport {IInitializableAToken} from \\\"../../../interfaces/IInitializableAToken.sol\\\";\\nimport {IInitializableDebtToken} from \\\"../../../interfaces/IInitializableDebtToken.sol\\\";\\nimport {InitializableImmutableAdminUpgradeabilityProxy} from \\\"../aave-upgradeability/InitializableImmutableAdminUpgradeabilityProxy.sol\\\";\\nimport {ReserveConfiguration} from \\\"../configuration/ReserveConfiguration.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {ConfiguratorInputTypes} from \\\"../types/ConfiguratorInputTypes.sol\\\";\\n\\n/**\\n * @title ConfiguratorLogic library\\n * @author Aave\\n * @notice Implements the functions to initialize reserves and update aTokens and debtTokens\\n */\\nlibrary ConfiguratorLogic {\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n    // See `IPoolConfigurator` for descriptions\\n    event ReserveInitialized(\\n        address indexed asset,\\n        address indexed aToken,\\n        address stableDebtToken,\\n        address variableDebtToken,\\n        address interestRateStrategyAddress\\n    );\\n    event ATokenUpgraded(\\n        address indexed asset,\\n        address indexed proxy,\\n        address indexed implementation\\n    );\\n    event StableDebtTokenUpgraded(\\n        address indexed asset,\\n        address indexed proxy,\\n        address indexed implementation\\n    );\\n    event VariableDebtTokenUpgraded(\\n        address indexed asset,\\n        address indexed proxy,\\n        address indexed implementation\\n    );\\n\\n    /**\\n     * @notice Initialize a reserve by creating and initializing aToken, stable debt token and variable debt token\\n     * @dev Emits the `ReserveInitialized` event\\n     * @param pool The Pool in which the reserve will be initialized\\n     * @param input The needed parameters for the initialization\\n     */\\n    function executeInitReserve(\\n        IPool pool,\\n        ConfiguratorInputTypes.InitReserveInput calldata input\\n    ) public {\\n        address aTokenProxyAddress = _initTokenWithProxy(\\n            input.aTokenImpl,\\n            abi.encodeWithSelector(\\n                IInitializableAToken.initialize.selector,\\n                pool,\\n                input.treasury,\\n                input.underlyingAsset,\\n                input.incentivesController,\\n                input.underlyingAssetDecimals,\\n                input.aTokenName,\\n                input.aTokenSymbol,\\n                input.params\\n            )\\n        );\\n\\n        address stableDebtTokenProxyAddress = _initTokenWithProxy(\\n            input.stableDebtTokenImpl,\\n            abi.encodeWithSelector(\\n                IInitializableDebtToken.initialize.selector,\\n                pool,\\n                input.underlyingAsset,\\n                input.incentivesController,\\n                input.underlyingAssetDecimals,\\n                input.stableDebtTokenName,\\n                input.stableDebtTokenSymbol,\\n                input.params\\n            )\\n        );\\n\\n        address variableDebtTokenProxyAddress = _initTokenWithProxy(\\n            input.variableDebtTokenImpl,\\n            abi.encodeWithSelector(\\n                IInitializableDebtToken.initialize.selector,\\n                pool,\\n                input.underlyingAsset,\\n                input.incentivesController,\\n                input.underlyingAssetDecimals,\\n                input.variableDebtTokenName,\\n                input.variableDebtTokenSymbol,\\n                input.params\\n            )\\n        );\\n\\n        pool.initReserve(\\n            input.underlyingAsset,\\n            aTokenProxyAddress,\\n            stableDebtTokenProxyAddress,\\n            variableDebtTokenProxyAddress,\\n            input.interestRateStrategyAddress\\n        );\\n\\n        DataTypes.ReserveConfigurationMap memory currentConfig = DataTypes\\n            .ReserveConfigurationMap(0);\\n\\n        currentConfig.setDecimals(input.underlyingAssetDecimals);\\n\\n        currentConfig.setActive(true);\\n        currentConfig.setPaused(false);\\n        currentConfig.setFrozen(false);\\n\\n        pool.setConfiguration(input.underlyingAsset, currentConfig);\\n\\n        emit ReserveInitialized(\\n            input.underlyingAsset,\\n            aTokenProxyAddress,\\n            stableDebtTokenProxyAddress,\\n            variableDebtTokenProxyAddress,\\n            input.interestRateStrategyAddress\\n        );\\n    }\\n\\n    /**\\n     * @notice Updates the aToken implementation and initializes it\\n     * @dev Emits the `ATokenUpgraded` event\\n     * @param cachedPool The Pool containing the reserve with the aToken\\n     * @param input The parameters needed for the initialize call\\n     */\\n    function executeUpdateAToken(\\n        IPool cachedPool,\\n        ConfiguratorInputTypes.UpdateATokenInput calldata input\\n    ) public {\\n        DataTypes.ReserveData memory reserveData = cachedPool.getReserveData(\\n            input.asset\\n        );\\n\\n        (, , , uint256 decimals, , ) = cachedPool\\n            .getConfiguration(input.asset)\\n            .getParams();\\n\\n        bytes memory encodedCall = abi.encodeWithSelector(\\n            IInitializableAToken.initialize.selector,\\n            cachedPool,\\n            input.treasury,\\n            input.asset,\\n            input.incentivesController,\\n            decimals,\\n            input.name,\\n            input.symbol,\\n            input.params\\n        );\\n\\n        _upgradeTokenImplementation(\\n            reserveData.aTokenAddress,\\n            input.implementation,\\n            encodedCall\\n        );\\n\\n        emit ATokenUpgraded(\\n            input.asset,\\n            reserveData.aTokenAddress,\\n            input.implementation\\n        );\\n    }\\n\\n    /**\\n     * @notice Updates the stable debt token implementation and initializes it\\n     * @dev Emits the `StableDebtTokenUpgraded` event\\n     * @param cachedPool The Pool containing the reserve with the stable debt token\\n     * @param input The parameters needed for the initialize call\\n     */\\n    function executeUpdateStableDebtToken(\\n        IPool cachedPool,\\n        ConfiguratorInputTypes.UpdateDebtTokenInput calldata input\\n    ) public {\\n        DataTypes.ReserveData memory reserveData = cachedPool.getReserveData(\\n            input.asset\\n        );\\n\\n        (, , , uint256 decimals, , ) = cachedPool\\n            .getConfiguration(input.asset)\\n            .getParams();\\n\\n        bytes memory encodedCall = abi.encodeWithSelector(\\n            IInitializableDebtToken.initialize.selector,\\n            cachedPool,\\n            input.asset,\\n            input.incentivesController,\\n            decimals,\\n            input.name,\\n            input.symbol,\\n            input.params\\n        );\\n\\n        _upgradeTokenImplementation(\\n            reserveData.stableDebtTokenAddress,\\n            input.implementation,\\n            encodedCall\\n        );\\n\\n        emit StableDebtTokenUpgraded(\\n            input.asset,\\n            reserveData.stableDebtTokenAddress,\\n            input.implementation\\n        );\\n    }\\n\\n    /**\\n     * @notice Updates the variable debt token implementation and initializes it\\n     * @dev Emits the `VariableDebtTokenUpgraded` event\\n     * @param cachedPool The Pool containing the reserve with the variable debt token\\n     * @param input The parameters needed for the initialize call\\n     */\\n    function executeUpdateVariableDebtToken(\\n        IPool cachedPool,\\n        ConfiguratorInputTypes.UpdateDebtTokenInput calldata input\\n    ) public {\\n        DataTypes.ReserveData memory reserveData = cachedPool.getReserveData(\\n            input.asset\\n        );\\n\\n        (, , , uint256 decimals, , ) = cachedPool\\n            .getConfiguration(input.asset)\\n            .getParams();\\n\\n        bytes memory encodedCall = abi.encodeWithSelector(\\n            IInitializableDebtToken.initialize.selector,\\n            cachedPool,\\n            input.asset,\\n            input.incentivesController,\\n            decimals,\\n            input.name,\\n            input.symbol,\\n            input.params\\n        );\\n\\n        _upgradeTokenImplementation(\\n            reserveData.variableDebtTokenAddress,\\n            input.implementation,\\n            encodedCall\\n        );\\n\\n        emit VariableDebtTokenUpgraded(\\n            input.asset,\\n            reserveData.variableDebtTokenAddress,\\n            input.implementation\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates a new proxy and initializes the implementation\\n     * @param implementation The address of the implementation\\n     * @param initParams The parameters that is passed to the implementation to initialize\\n     * @return The address of initialized proxy\\n     */\\n    function _initTokenWithProxy(\\n        address implementation,\\n        bytes memory initParams\\n    ) internal returns (address) {\\n        InitializableImmutableAdminUpgradeabilityProxy proxy = new InitializableImmutableAdminUpgradeabilityProxy(\\n                address(this)\\n            );\\n\\n        proxy.initialize(implementation, initParams);\\n\\n        return address(proxy);\\n    }\\n\\n    /**\\n     * @notice Upgrades the implementation and makes call to the proxy\\n     * @dev The call is used to initialize the new implementation.\\n     * @param proxyAddress The address of the proxy\\n     * @param implementation The address of the new implementation\\n     * @param  initParams The parameters to the call after the upgrade\\n     */\\n    function _upgradeTokenImplementation(\\n        address proxyAddress,\\n        address implementation,\\n        bytes memory initParams\\n    ) internal {\\n        InitializableImmutableAdminUpgradeabilityProxy proxy = InitializableImmutableAdminUpgradeabilityProxy(\\n                payable(proxyAddress)\\n            );\\n\\n        proxy.upgradeToAndCall(implementation, initParams);\\n    }\\n}\\n\",\"keccak256\":\"0xc0fb4e02762cb020cb79f4d3ccaffb47b367bda37a4f99cc8e36f415b9e40b17\",\"license\":\"BUSL-1.1\"},\"contracts/lending/core/protocol/libraries/math/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n */\\nlibrary PercentageMath {\\n    // Maximum percentage factor (100.00%)\\n    uint256 internal constant PERCENTAGE_FACTOR = 1e4;\\n\\n    // Half percentage factor (50.00%)\\n    uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\\n\\n    /**\\n     * @notice Executes a percentage multiplication\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentmul percentage\\n     */\\n    function percentMul(\\n        uint256 value,\\n        uint256 percentage\\n    ) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\\n        assembly {\\n            if iszero(\\n                or(\\n                    iszero(percentage),\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, percentage), HALF_PERCENTAGE_FACTOR),\\n                PERCENTAGE_FACTOR\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a percentage division\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentdiv percentage\\n     */\\n    function percentDiv(\\n        uint256 value,\\n        uint256 percentage\\n    ) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\\n        assembly {\\n            if or(\\n                iszero(percentage),\\n                iszero(\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(\\n                                sub(not(0), div(percentage, 2)),\\n                                PERCENTAGE_FACTOR\\n                            )\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)),\\n                percentage\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xca74deb7d5b6cb30610f2c476c122c03b259a22e6a88ee30ed40bfd241d83d7a\",\"license\":\"BUSL-1.1\"},\"contracts/lending/core/protocol/libraries/types/ConfiguratorInputTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary ConfiguratorInputTypes {\\n    struct InitReserveInput {\\n        address aTokenImpl;\\n        address stableDebtTokenImpl;\\n        address variableDebtTokenImpl;\\n        uint8 underlyingAssetDecimals;\\n        address interestRateStrategyAddress;\\n        address underlyingAsset;\\n        address treasury;\\n        address incentivesController;\\n        string aTokenName;\\n        string aTokenSymbol;\\n        string variableDebtTokenName;\\n        string variableDebtTokenSymbol;\\n        string stableDebtTokenName;\\n        string stableDebtTokenSymbol;\\n        bytes params;\\n    }\\n\\n    struct UpdateATokenInput {\\n        address asset;\\n        address treasury;\\n        address incentivesController;\\n        string name;\\n        string symbol;\\n        address implementation;\\n        bytes params;\\n    }\\n\\n    struct UpdateDebtTokenInput {\\n        address asset;\\n        address incentivesController;\\n        string name;\\n        string symbol;\\n        address implementation;\\n        bytes params;\\n    }\\n}\\n\",\"keccak256\":\"0xd989c7149fba5e32261a1e8ae16b440e5411bd1b9bb4642a4cfe12a3b8cb8169\",\"license\":\"BUSL-1.1\"},\"contracts/lending/core/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        //timestamp of last update\\n        uint40 lastUpdateTimestamp;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint16 id;\\n        //aToken address\\n        address aTokenAddress;\\n        //stableDebtToken address\\n        address stableDebtTokenAddress;\\n        //variableDebtToken address\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the current treasury balance, scaled\\n        uint128 accruedToTreasury;\\n        //the outstanding unbacked aTokens minted through the bridging feature\\n        uint128 unbacked;\\n        //the outstanding debt borrowed against this asset in isolation mode\\n        uint128 isolationModeTotalDebt;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60: asset is paused\\n        //bit 61: borrowing in isolation mode is enabled\\n        //bit 62: siloed borrowing enabled\\n        //bit 63: flashloaning enabled\\n        //bit 64-79: reserve factor\\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n        //bit 152-167 liquidation protocol fee\\n        //bit 168-175 eMode category\\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n        //bit 252-255 unused\\n\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        /**\\n         * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n         * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n         * asset is borrowed by the user.\\n         */\\n        uint256 data;\\n    }\\n\\n    struct EModeCategory {\\n        // each eMode category has a custom ltv and liquidation threshold\\n        uint16 ltv;\\n        uint16 liquidationThreshold;\\n        uint16 liquidationBonus;\\n        // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n        address priceSource;\\n        string label;\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n\\n    struct ReserveCache {\\n        uint256 currScaledVariableDebt;\\n        uint256 nextScaledVariableDebt;\\n        uint256 currPrincipalStableDebt;\\n        uint256 currAvgStableBorrowRate;\\n        uint256 currTotalStableDebt;\\n        uint256 nextAvgStableBorrowRate;\\n        uint256 nextTotalStableDebt;\\n        uint256 currLiquidityIndex;\\n        uint256 nextLiquidityIndex;\\n        uint256 currVariableBorrowIndex;\\n        uint256 nextVariableBorrowIndex;\\n        uint256 currLiquidityRate;\\n        uint256 currVariableBorrowRate;\\n        uint256 reserveFactor;\\n        ReserveConfigurationMap reserveConfiguration;\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        uint40 reserveLastUpdateTimestamp;\\n        uint40 stableDebtLastUpdateTimestamp;\\n    }\\n\\n    struct ExecuteLiquidationCallParams {\\n        uint256 reservesCount;\\n        uint256 debtToCover;\\n        address collateralAsset;\\n        address debtAsset;\\n        address user;\\n        bool receiveAToken;\\n        address priceOracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteSupplyParams {\\n        address asset;\\n        uint256 amount;\\n        address onBehalfOf;\\n        uint16 referralCode;\\n    }\\n\\n    struct ExecuteBorrowParams {\\n        address asset;\\n        address user;\\n        address onBehalfOf;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint16 referralCode;\\n        bool releaseUnderlying;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteRepayParams {\\n        address asset;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        address onBehalfOf;\\n        bool useATokens;\\n    }\\n\\n    struct ExecuteWithdrawParams {\\n        address asset;\\n        uint256 amount;\\n        address to;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ExecuteSetUserEModeParams {\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 categoryId;\\n    }\\n\\n    struct FinalizeTransferParams {\\n        address asset;\\n        address from;\\n        address to;\\n        uint256 amount;\\n        uint256 balanceFromBefore;\\n        uint256 balanceToBefore;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 fromEModeCategory;\\n    }\\n\\n    struct FlashloanParams {\\n        address receiverAddress;\\n        address[] assets;\\n        uint256[] amounts;\\n        uint256[] interestRateModes;\\n        address onBehalfOf;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address addressesProvider;\\n        uint8 userEModeCategory;\\n        bool isAuthorizedFlashBorrower;\\n    }\\n\\n    struct FlashloanSimpleParams {\\n        address receiverAddress;\\n        address asset;\\n        uint256 amount;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n    }\\n\\n    struct FlashLoanRepaymentParams {\\n        uint256 amount;\\n        uint256 totalPremium;\\n        uint256 flashLoanPremiumToProtocol;\\n        address asset;\\n        address receiverAddress;\\n        uint16 referralCode;\\n    }\\n\\n    struct CalculateUserAccountDataParams {\\n        UserConfigurationMap userConfig;\\n        uint256 reservesCount;\\n        address user;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ValidateBorrowParams {\\n        ReserveCache reserveCache;\\n        UserConfigurationMap userConfig;\\n        address asset;\\n        address userAddress;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint256 maxStableLoanPercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n        bool isolationModeActive;\\n        address isolationModeCollateralAddress;\\n        uint256 isolationModeDebtCeiling;\\n    }\\n\\n    struct ValidateLiquidationCallParams {\\n        ReserveCache debtReserveCache;\\n        uint256 totalDebt;\\n        uint256 healthFactor;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct CalculateInterestRatesParams {\\n        uint256 unbacked;\\n        uint256 liquidityAdded;\\n        uint256 liquidityTaken;\\n        uint256 totalStableDebt;\\n        uint256 totalVariableDebt;\\n        uint256 averageStableBorrowRate;\\n        uint256 reserveFactor;\\n        address reserve;\\n        address aToken;\\n    }\\n\\n    struct InitReserveParams {\\n        address asset;\\n        address aTokenAddress;\\n        address stableDebtAddress;\\n        address variableDebtAddress;\\n        address interestRateStrategyAddress;\\n        uint16 reservesCount;\\n        uint16 maxNumberReserves;\\n    }\\n}\\n\",\"keccak256\":\"0xb93629c45e8479d3297ce5adf5efb5e8bddedf4caf5c66c3459d595004d56088\",\"license\":\"BUSL-1.1\"},\"contracts/lending/core/protocol/pool/PoolConfigurator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.10;\\n\\nimport {VersionedInitializable} from \\\"../libraries/aave-upgradeability/VersionedInitializable.sol\\\";\\nimport {ReserveConfiguration} from \\\"../libraries/configuration/ReserveConfiguration.sol\\\";\\nimport {IPoolAddressesProvider} from \\\"../../interfaces/IPoolAddressesProvider.sol\\\";\\nimport {Errors} from \\\"../libraries/helpers/Errors.sol\\\";\\nimport {PercentageMath} from \\\"../libraries/math/PercentageMath.sol\\\";\\nimport {DataTypes} from \\\"../libraries/types/DataTypes.sol\\\";\\nimport {ConfiguratorLogic} from \\\"../libraries/logic/ConfiguratorLogic.sol\\\";\\nimport {ConfiguratorInputTypes} from \\\"../libraries/types/ConfiguratorInputTypes.sol\\\";\\nimport {IPoolConfigurator} from \\\"../../interfaces/IPoolConfigurator.sol\\\";\\nimport {IPool} from \\\"../../interfaces/IPool.sol\\\";\\nimport {IACLManager} from \\\"../../interfaces/IACLManager.sol\\\";\\nimport {IPoolDataProvider} from \\\"../../interfaces/IPoolDataProvider.sol\\\";\\n\\n/**\\n * @title PoolConfigurator\\n * @author Aave\\n * @dev Implements the configuration methods for the Aave protocol\\n */\\ncontract PoolConfigurator is VersionedInitializable, IPoolConfigurator {\\n    using PercentageMath for uint256;\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n    IPoolAddressesProvider internal _addressesProvider;\\n    IPool internal _pool;\\n\\n    /**\\n     * @dev Only pool admin can call functions marked by this modifier.\\n     */\\n    modifier onlyPoolAdmin() {\\n        _onlyPoolAdmin();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only emergency admin can call functions marked by this modifier.\\n     */\\n    modifier onlyEmergencyAdmin() {\\n        _onlyEmergencyAdmin();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only emergency or pool admin can call functions marked by this modifier.\\n     */\\n    modifier onlyEmergencyOrPoolAdmin() {\\n        _onlyPoolOrEmergencyAdmin();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only asset listing or pool admin can call functions marked by this modifier.\\n     */\\n    modifier onlyAssetListingOrPoolAdmins() {\\n        _onlyAssetListingOrPoolAdmins();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only risk or pool admin can call functions marked by this modifier.\\n     */\\n    modifier onlyRiskOrPoolAdmins() {\\n        _onlyRiskOrPoolAdmins();\\n        _;\\n    }\\n\\n    uint256 public constant CONFIGURATOR_REVISION = 0x1;\\n\\n    /// @inheritdoc VersionedInitializable\\n    function getRevision() internal pure virtual override returns (uint256) {\\n        return CONFIGURATOR_REVISION;\\n    }\\n\\n    function initialize(IPoolAddressesProvider provider) public initializer {\\n        _addressesProvider = provider;\\n        _pool = IPool(_addressesProvider.getPool());\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function initReserves(\\n        ConfiguratorInputTypes.InitReserveInput[] calldata input\\n    ) external override onlyAssetListingOrPoolAdmins {\\n        IPool cachedPool = _pool;\\n        for (uint256 i = 0; i < input.length; i++) {\\n            ConfiguratorLogic.executeInitReserve(cachedPool, input[i]);\\n        }\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function dropReserve(address asset) external override onlyPoolAdmin {\\n        _pool.dropReserve(asset);\\n        emit ReserveDropped(asset);\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function updateAToken(\\n        ConfiguratorInputTypes.UpdateATokenInput calldata input\\n    ) external override onlyPoolAdmin {\\n        ConfiguratorLogic.executeUpdateAToken(_pool, input);\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function updateStableDebtToken(\\n        ConfiguratorInputTypes.UpdateDebtTokenInput calldata input\\n    ) external override onlyPoolAdmin {\\n        ConfiguratorLogic.executeUpdateStableDebtToken(_pool, input);\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function updateVariableDebtToken(\\n        ConfiguratorInputTypes.UpdateDebtTokenInput calldata input\\n    ) external override onlyPoolAdmin {\\n        ConfiguratorLogic.executeUpdateVariableDebtToken(_pool, input);\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function setReserveBorrowing(\\n        address asset,\\n        bool enabled\\n    ) external override onlyRiskOrPoolAdmins {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(asset);\\n        if (!enabled) {\\n            require(\\n                !currentConfig.getStableRateBorrowingEnabled(),\\n                Errors.STABLE_BORROWING_ENABLED\\n            );\\n        }\\n        currentConfig.setBorrowingEnabled(enabled);\\n        _pool.setConfiguration(asset, currentConfig);\\n        emit ReserveBorrowing(asset, enabled);\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function configureReserveAsCollateral(\\n        address asset,\\n        uint256 ltv,\\n        uint256 liquidationThreshold,\\n        uint256 liquidationBonus\\n    ) external override onlyRiskOrPoolAdmins {\\n        //validation of the parameters: the LTV can\\n        //only be lower or equal than the liquidation threshold\\n        //(otherwise a loan against the asset would cause instantaneous liquidation)\\n        require(ltv <= liquidationThreshold, Errors.INVALID_RESERVE_PARAMS);\\n\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(asset);\\n\\n        if (liquidationThreshold != 0) {\\n            //liquidation bonus must be bigger than 100.00%, otherwise the liquidator would receive less\\n            //collateral than needed to cover the debt\\n            require(\\n                liquidationBonus > PercentageMath.PERCENTAGE_FACTOR,\\n                Errors.INVALID_RESERVE_PARAMS\\n            );\\n\\n            //if threshold * bonus is less than PERCENTAGE_FACTOR, it's guaranteed that at the moment\\n            //a loan is taken there is enough collateral available to cover the liquidation bonus\\n            require(\\n                liquidationThreshold.percentMul(liquidationBonus) <=\\n                    PercentageMath.PERCENTAGE_FACTOR,\\n                Errors.INVALID_RESERVE_PARAMS\\n            );\\n        } else {\\n            require(liquidationBonus == 0, Errors.INVALID_RESERVE_PARAMS);\\n            //if the liquidation threshold is being set to 0,\\n            // the reserve is being disabled as collateral. To do so,\\n            //we need to ensure no liquidity is supplied\\n            _checkNoSuppliers(asset);\\n        }\\n\\n        currentConfig.setLtv(ltv);\\n        currentConfig.setLiquidationThreshold(liquidationThreshold);\\n        currentConfig.setLiquidationBonus(liquidationBonus);\\n\\n        _pool.setConfiguration(asset, currentConfig);\\n\\n        emit CollateralConfigurationChanged(\\n            asset,\\n            ltv,\\n            liquidationThreshold,\\n            liquidationBonus\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function setReserveStableRateBorrowing(\\n        address asset,\\n        bool enabled\\n    ) external override onlyRiskOrPoolAdmins {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(asset);\\n        if (enabled) {\\n            require(\\n                currentConfig.getBorrowingEnabled(),\\n                Errors.BORROWING_NOT_ENABLED\\n            );\\n        }\\n        currentConfig.setStableRateBorrowingEnabled(enabled);\\n        _pool.setConfiguration(asset, currentConfig);\\n        emit ReserveStableRateBorrowing(asset, enabled);\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function setReserveFlashLoaning(\\n        address asset,\\n        bool enabled\\n    ) external override onlyRiskOrPoolAdmins {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(asset);\\n\\n        currentConfig.setFlashLoanEnabled(enabled);\\n        _pool.setConfiguration(asset, currentConfig);\\n        emit ReserveFlashLoaning(asset, enabled);\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function setReserveActive(\\n        address asset,\\n        bool active\\n    ) external override onlyPoolAdmin {\\n        if (!active) _checkNoSuppliers(asset);\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(asset);\\n        currentConfig.setActive(active);\\n        _pool.setConfiguration(asset, currentConfig);\\n        emit ReserveActive(asset, active);\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function setReserveFreeze(\\n        address asset,\\n        bool freeze\\n    ) external override onlyRiskOrPoolAdmins {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(asset);\\n        currentConfig.setFrozen(freeze);\\n        _pool.setConfiguration(asset, currentConfig);\\n        emit ReserveFrozen(asset, freeze);\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function setBorrowableInIsolation(\\n        address asset,\\n        bool borrowable\\n    ) external override onlyRiskOrPoolAdmins {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(asset);\\n        currentConfig.setBorrowableInIsolation(borrowable);\\n        _pool.setConfiguration(asset, currentConfig);\\n        emit BorrowableInIsolationChanged(asset, borrowable);\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function setReservePause(\\n        address asset,\\n        bool paused\\n    ) public override onlyEmergencyOrPoolAdmin {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(asset);\\n        currentConfig.setPaused(paused);\\n        _pool.setConfiguration(asset, currentConfig);\\n        emit ReservePaused(asset, paused);\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function setReserveFactor(\\n        address asset,\\n        uint256 newReserveFactor\\n    ) external override onlyRiskOrPoolAdmins {\\n        require(\\n            newReserveFactor <= PercentageMath.PERCENTAGE_FACTOR,\\n            Errors.INVALID_RESERVE_FACTOR\\n        );\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(asset);\\n        uint256 oldReserveFactor = currentConfig.getReserveFactor();\\n        currentConfig.setReserveFactor(newReserveFactor);\\n        _pool.setConfiguration(asset, currentConfig);\\n        emit ReserveFactorChanged(asset, oldReserveFactor, newReserveFactor);\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function setDebtCeiling(\\n        address asset,\\n        uint256 newDebtCeiling\\n    ) external override onlyRiskOrPoolAdmins {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(asset);\\n\\n        uint256 oldDebtCeiling = currentConfig.getDebtCeiling();\\n        if (oldDebtCeiling == 0) {\\n            _checkNoSuppliers(asset);\\n        }\\n        currentConfig.setDebtCeiling(newDebtCeiling);\\n        _pool.setConfiguration(asset, currentConfig);\\n\\n        if (newDebtCeiling == 0) {\\n            _pool.resetIsolationModeTotalDebt(asset);\\n        }\\n\\n        emit DebtCeilingChanged(asset, oldDebtCeiling, newDebtCeiling);\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function setSiloedBorrowing(\\n        address asset,\\n        bool newSiloed\\n    ) external override onlyRiskOrPoolAdmins {\\n        if (newSiloed) {\\n            _checkNoBorrowers(asset);\\n        }\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(asset);\\n\\n        bool oldSiloed = currentConfig.getSiloedBorrowing();\\n\\n        currentConfig.setSiloedBorrowing(newSiloed);\\n\\n        _pool.setConfiguration(asset, currentConfig);\\n\\n        emit SiloedBorrowingChanged(asset, oldSiloed, newSiloed);\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function setBorrowCap(\\n        address asset,\\n        uint256 newBorrowCap\\n    ) external override onlyRiskOrPoolAdmins {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(asset);\\n        uint256 oldBorrowCap = currentConfig.getBorrowCap();\\n        currentConfig.setBorrowCap(newBorrowCap);\\n        _pool.setConfiguration(asset, currentConfig);\\n        emit BorrowCapChanged(asset, oldBorrowCap, newBorrowCap);\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function setSupplyCap(\\n        address asset,\\n        uint256 newSupplyCap\\n    ) external override onlyRiskOrPoolAdmins {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(asset);\\n        uint256 oldSupplyCap = currentConfig.getSupplyCap();\\n        currentConfig.setSupplyCap(newSupplyCap);\\n        _pool.setConfiguration(asset, currentConfig);\\n        emit SupplyCapChanged(asset, oldSupplyCap, newSupplyCap);\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function setLiquidationProtocolFee(\\n        address asset,\\n        uint256 newFee\\n    ) external override onlyRiskOrPoolAdmins {\\n        require(\\n            newFee <= PercentageMath.PERCENTAGE_FACTOR,\\n            Errors.INVALID_LIQUIDATION_PROTOCOL_FEE\\n        );\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(asset);\\n        uint256 oldFee = currentConfig.getLiquidationProtocolFee();\\n        currentConfig.setLiquidationProtocolFee(newFee);\\n        _pool.setConfiguration(asset, currentConfig);\\n        emit LiquidationProtocolFeeChanged(asset, oldFee, newFee);\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function setEModeCategory(\\n        uint8 categoryId,\\n        uint16 ltv,\\n        uint16 liquidationThreshold,\\n        uint16 liquidationBonus,\\n        address oracle,\\n        string calldata label\\n    ) external override onlyRiskOrPoolAdmins {\\n        require(ltv != 0, Errors.INVALID_EMODE_CATEGORY_PARAMS);\\n        require(\\n            liquidationThreshold != 0,\\n            Errors.INVALID_EMODE_CATEGORY_PARAMS\\n        );\\n\\n        // validation of the parameters: the LTV can\\n        // only be lower or equal than the liquidation threshold\\n        // (otherwise a loan against the asset would cause instantaneous liquidation)\\n        require(\\n            ltv <= liquidationThreshold,\\n            Errors.INVALID_EMODE_CATEGORY_PARAMS\\n        );\\n        require(\\n            liquidationBonus > PercentageMath.PERCENTAGE_FACTOR,\\n            Errors.INVALID_EMODE_CATEGORY_PARAMS\\n        );\\n\\n        // if threshold * bonus is less than PERCENTAGE_FACTOR, it's guaranteed that at the moment\\n        // a loan is taken there is enough collateral available to cover the liquidation bonus\\n        require(\\n            uint256(liquidationThreshold).percentMul(liquidationBonus) <=\\n                PercentageMath.PERCENTAGE_FACTOR,\\n            Errors.INVALID_EMODE_CATEGORY_PARAMS\\n        );\\n\\n        address[] memory reserves = _pool.getReservesList();\\n        for (uint256 i = 0; i < reserves.length; i++) {\\n            DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n                .getConfiguration(reserves[i]);\\n            if (categoryId == currentConfig.getEModeCategory()) {\\n                require(\\n                    ltv > currentConfig.getLtv(),\\n                    Errors.INVALID_EMODE_CATEGORY_PARAMS\\n                );\\n                require(\\n                    liquidationThreshold >\\n                        currentConfig.getLiquidationThreshold(),\\n                    Errors.INVALID_EMODE_CATEGORY_PARAMS\\n                );\\n            }\\n        }\\n\\n        _pool.configureEModeCategory(\\n            categoryId,\\n            DataTypes.EModeCategory({\\n                ltv: ltv,\\n                liquidationThreshold: liquidationThreshold,\\n                liquidationBonus: liquidationBonus,\\n                priceSource: oracle,\\n                label: label\\n            })\\n        );\\n        emit EModeCategoryAdded(\\n            categoryId,\\n            ltv,\\n            liquidationThreshold,\\n            liquidationBonus,\\n            oracle,\\n            label\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function setAssetEModeCategory(\\n        address asset,\\n        uint8 newCategoryId\\n    ) external override onlyRiskOrPoolAdmins {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(asset);\\n\\n        if (newCategoryId != 0) {\\n            DataTypes.EModeCategory memory categoryData = _pool\\n                .getEModeCategoryData(newCategoryId);\\n            require(\\n                categoryData.liquidationThreshold >\\n                    currentConfig.getLiquidationThreshold(),\\n                Errors.INVALID_EMODE_CATEGORY_ASSIGNMENT\\n            );\\n        }\\n        uint256 oldCategoryId = currentConfig.getEModeCategory();\\n        currentConfig.setEModeCategory(newCategoryId);\\n        _pool.setConfiguration(asset, currentConfig);\\n        emit EModeAssetCategoryChanged(\\n            asset,\\n            uint8(oldCategoryId),\\n            newCategoryId\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function setUnbackedMintCap(\\n        address asset,\\n        uint256 newUnbackedMintCap\\n    ) external override onlyRiskOrPoolAdmins {\\n        DataTypes.ReserveConfigurationMap memory currentConfig = _pool\\n            .getConfiguration(asset);\\n        uint256 oldUnbackedMintCap = currentConfig.getUnbackedMintCap();\\n        currentConfig.setUnbackedMintCap(newUnbackedMintCap);\\n        _pool.setConfiguration(asset, currentConfig);\\n        emit UnbackedMintCapChanged(\\n            asset,\\n            oldUnbackedMintCap,\\n            newUnbackedMintCap\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function setReserveInterestRateStrategyAddress(\\n        address asset,\\n        address newRateStrategyAddress\\n    ) external override onlyRiskOrPoolAdmins {\\n        DataTypes.ReserveData memory reserve = _pool.getReserveData(asset);\\n        address oldRateStrategyAddress = reserve.interestRateStrategyAddress;\\n        _pool.setReserveInterestRateStrategyAddress(\\n            asset,\\n            newRateStrategyAddress\\n        );\\n        emit ReserveInterestRateStrategyChanged(\\n            asset,\\n            oldRateStrategyAddress,\\n            newRateStrategyAddress\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function setPoolPause(bool paused) external override onlyEmergencyAdmin {\\n        address[] memory reserves = _pool.getReservesList();\\n\\n        for (uint256 i = 0; i < reserves.length; i++) {\\n            if (reserves[i] != address(0)) {\\n                setReservePause(reserves[i], paused);\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function updateBridgeProtocolFee(\\n        uint256 newBridgeProtocolFee\\n    ) external override onlyPoolAdmin {\\n        require(\\n            newBridgeProtocolFee <= PercentageMath.PERCENTAGE_FACTOR,\\n            Errors.BRIDGE_PROTOCOL_FEE_INVALID\\n        );\\n        uint256 oldBridgeProtocolFee = _pool.BRIDGE_PROTOCOL_FEE();\\n        _pool.updateBridgeProtocolFee(newBridgeProtocolFee);\\n        emit BridgeProtocolFeeUpdated(\\n            oldBridgeProtocolFee,\\n            newBridgeProtocolFee\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function updateFlashloanPremiumTotal(\\n        uint128 newFlashloanPremiumTotal\\n    ) external override onlyPoolAdmin {\\n        require(\\n            newFlashloanPremiumTotal <= PercentageMath.PERCENTAGE_FACTOR,\\n            Errors.FLASHLOAN_PREMIUM_INVALID\\n        );\\n        uint128 oldFlashloanPremiumTotal = _pool.FLASHLOAN_PREMIUM_TOTAL();\\n        _pool.updateFlashloanPremiums(\\n            newFlashloanPremiumTotal,\\n            _pool.FLASHLOAN_PREMIUM_TO_PROTOCOL()\\n        );\\n        emit FlashloanPremiumTotalUpdated(\\n            oldFlashloanPremiumTotal,\\n            newFlashloanPremiumTotal\\n        );\\n    }\\n\\n    /// @inheritdoc IPoolConfigurator\\n    function updateFlashloanPremiumToProtocol(\\n        uint128 newFlashloanPremiumToProtocol\\n    ) external override onlyPoolAdmin {\\n        require(\\n            newFlashloanPremiumToProtocol <= PercentageMath.PERCENTAGE_FACTOR,\\n            Errors.FLASHLOAN_PREMIUM_INVALID\\n        );\\n        uint128 oldFlashloanPremiumToProtocol = _pool\\n            .FLASHLOAN_PREMIUM_TO_PROTOCOL();\\n        _pool.updateFlashloanPremiums(\\n            _pool.FLASHLOAN_PREMIUM_TOTAL(),\\n            newFlashloanPremiumToProtocol\\n        );\\n        emit FlashloanPremiumToProtocolUpdated(\\n            oldFlashloanPremiumToProtocol,\\n            newFlashloanPremiumToProtocol\\n        );\\n    }\\n\\n    function _checkNoSuppliers(address asset) internal view {\\n        (\\n            ,\\n            uint256 accruedToTreasury,\\n            uint256 totalATokens,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n            ,\\n\\n        ) = IPoolDataProvider(_addressesProvider.getPoolDataProvider())\\n                .getReserveData(asset);\\n\\n        require(\\n            totalATokens == 0 && accruedToTreasury == 0,\\n            Errors.RESERVE_LIQUIDITY_NOT_ZERO\\n        );\\n    }\\n\\n    function _checkNoBorrowers(address asset) internal view {\\n        uint256 totalDebt = IPoolDataProvider(\\n            _addressesProvider.getPoolDataProvider()\\n        ).getTotalDebt(asset);\\n        require(totalDebt == 0, Errors.RESERVE_DEBT_NOT_ZERO);\\n    }\\n\\n    function _onlyPoolAdmin() internal view {\\n        IACLManager aclManager = IACLManager(\\n            _addressesProvider.getACLManager()\\n        );\\n        require(\\n            aclManager.isPoolAdmin(msg.sender),\\n            Errors.CALLER_NOT_POOL_ADMIN\\n        );\\n    }\\n\\n    function _onlyEmergencyAdmin() internal view {\\n        IACLManager aclManager = IACLManager(\\n            _addressesProvider.getACLManager()\\n        );\\n        require(\\n            aclManager.isEmergencyAdmin(msg.sender),\\n            Errors.CALLER_NOT_EMERGENCY_ADMIN\\n        );\\n    }\\n\\n    function _onlyPoolOrEmergencyAdmin() internal view {\\n        IACLManager aclManager = IACLManager(\\n            _addressesProvider.getACLManager()\\n        );\\n        require(\\n            aclManager.isPoolAdmin(msg.sender) ||\\n                aclManager.isEmergencyAdmin(msg.sender),\\n            Errors.CALLER_NOT_POOL_OR_EMERGENCY_ADMIN\\n        );\\n    }\\n\\n    function _onlyAssetListingOrPoolAdmins() internal view {\\n        IACLManager aclManager = IACLManager(\\n            _addressesProvider.getACLManager()\\n        );\\n        require(\\n            aclManager.isAssetListingAdmin(msg.sender) ||\\n                aclManager.isPoolAdmin(msg.sender),\\n            Errors.CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN\\n        );\\n    }\\n\\n    function _onlyRiskOrPoolAdmins() internal view {\\n        IACLManager aclManager = IACLManager(\\n            _addressesProvider.getACLManager()\\n        );\\n        require(\\n            aclManager.isRiskAdmin(msg.sender) ||\\n                aclManager.isPoolAdmin(msg.sender),\\n            Errors.CALLER_NOT_RISK_OR_POOL_ADMIN\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x15048813afb06126aa74a6d52df3b62a1d95b1df3540e8b02e7d370ee5dacdc6\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001a5760008055613e2890816100208239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806302fb45e6146101e7578063145f5892146101e25780631d2118f9146101dd5780631df970bd146101d857806326d2cec2146101d35780633036b439146101ce57806338ae0cc3146101c957806348d9fba9146101c45780634b4e6753146101bf578063571f03e5146101ba57806363c9b860146101b5578063682cf264146101b05780637626cde3146101ab5780637641f3d9146101a65780637af635a6146101a15780637c4e560b1461019c5780638a493676146101975780638a751a601461019257806396e957c41461018d578063a7fa83b714610188578063ad4e643214610183578063aeb4fcc11461017e578063b736aaeb14610179578063bb01c37c14610174578063c19d61e41461016f578063c4d66de81461016a578063d14a098314610165578063d4fe3f99146101605763f213ef0e1461015b57600080fd5b6123da565b612201565b6120c9565b611fdc565b611f4d565b611d96565b611c6d565b611a77565b611a13565b6118c5565b6117b1565b61167c565b611520565b61135a565b61133e565b61124e565b6111c8565b61104e565b610fa9565b610e71565b610d31565b610bf6565b610acc565b610978565b61082d565b610699565b610523565b6103c0565b3461039d5760208060031936011261039d57600435906001600160401b039081831161039d573660238401121561039d57826004013591821161039d573660248360051b8501011161039d576034546004908290610255906001600160a01b03165b6001600160a01b031690565b60405163383e6b8b60e11b815292839182905afa90811561034c57600091610370575b50604051629f719760e51b815233600482015291906001600160a01b03168183602481845afa92831561034c57600093610351575b5082156102d6575b6102d4846024876102ce876102c8613515565b90612a9b565b016127bd565b005b604051637be53ca160e01b815233600482015291949192508490839060249082905afa93841561034c576102d4946024936102ce9260009261031f575b505092508194506102b5565b61033e9250803d10610345575b6103368183612552565b810190613500565b3880610313565b503d61032c565b6127b1565b610369919350823d8411610345576103368183612552565b91386102ad565b6103909150823d8411610396575b6103888183612552565b81019061337a565b38610278565b503d61037e565b600080fd5b6001600160a01b0381160361039d57565b35906103be826103a2565b565b3461039d57604036600319011261039d576004356103dd816103a2565b602435906103e961354f565b6035546103fe906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b038316600482015290929091602083602481875afa92831561034c576000936104f2575b50640fffffffff835160b01c169361044e838561366b565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0383166004820152935160248501526000908490604490829084905af192831561034c577f09808b1fc5abde94edf02fdde393bea0d2e4795999ba31695472848638b5c29f936104d9575b506040805194855260208501929092526001600160a01b03169290819081015b0390a2005b806104e66104ec92612504565b80611333565b386104b4565b61051591935060203d60201161051c575b61050d8183612552565b8101906128bc565b9138610436565b503d610503565b3461039d57604036600319011261039d57600435610540816103a2565b60243561054c816103a2565b61055461354f565b603554610569906001600160a01b0316610249565b6040516335ea6a7560e01b81526001600160a01b03841660048201529091906101e08082602481875afa801561034c576105b9926101609260009261065b575b505001516001600160a01b031690565b92823b1561039d57604051631d2118f960e01b81526001600160a01b03828116600483015283166024820152926000908490604490829084905af192831561034c577fdb8dada53709ce4988154324196790c2e4a60c377e1256790946f83b87db3c3393610648575b50604080516001600160a01b0395861681529285166020840152931692819081016104d4565b806104e661065592612504565b38610622565b61067a9250803d10610681575b6106728183612552565b810190612903565b38806105a9565b503d610668565b6001600160801b0381160361039d57565b3461039d5760208060031936011261039d576004356106b781610688565b6106bf6136cb565b6106de6106ca612a35565b6127106001600160801b0384161115612a9b565b6035546106f3906001600160a01b0316610249565b60405163354ce01b60e11b8152908382600481845afa91821561034c5760009261080e575b5060405163074b2e4360e01b81528481600481855afa94851561034c576000956107df575b5050803b1561039d57604051635e5b729160e11b81526001600160801b03948516600482015293831660248501526000908490604490829084905af192831561034c577fe7e0c75e1fc2d0bd83dc85d59f085b3e763107c392fb368e85572b292f1f5576936107cc575b50604080516001600160801b039283168152929091166020830152819081015b0390a1005b806104e66107d992612504565b386107a7565b6107ff929550803d10610807575b6107f78183612552565b810190612acb565b92388061073d565b503d6107ed565b610826919250843d8611610807576107f78183612552565b9038610718565b3461039d57604036600319011261039d5760043561084a816103a2565b6024359061085661354f565b61086c610861612ae0565b612710841115612a9b565b603554610881906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b038316600482015290929091602083602481875afa92831561034c57600093610957575b5061ffff835160981c16936108ce8385613788565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0383166004820152935160248501526000908490604490829084905af192831561034c577fb5b0a963825337808b6e3154de8e98027595a5cad4219bb3a9bc55b192f4b391936104d957506040805194855260208501929092526001600160a01b03169290819081016104d4565b61097191935060203d60201161051c5761050d8183612552565b91386108b9565b3461039d57602036600319011261039d576004356109946136cb565b6109aa61099f612afe565b612710831115612a9b565b6035546109bf906001600160a01b0316610249565b90604051631396c83960e11b8152602081600481865afa90811561034c57600091610a6b575b50823b1561039d57604051633036b43960e01b815260048101839052926000908490602490829084905af192831561034c577f30b17cb587a89089d003457c432f73e22aeee93de425e92224ba01080260ecd993610a58575b5060408051918252602082019290925290819081016107c7565b806104e6610a6592612504565b38610a3e565b610a8d915060203d602011610a93575b610a858183612552565b810190612b1c565b386109e5565b503d610a7b565b8015150361039d57565b604090600319011261039d57600435610abc816103a2565b90602435610ac981610a9a565b90565b3461039d57610ada36610aa4565b610ae261354f565b603554610af7906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b03841660048201529290602084602481845afa93841561034c57600094610bd5575b50610b3883856137b2565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0383166004820152935160248501526000908490604490829084905af192831561034c577f74adf6aaf58c08bc4f993640385e136522375ea3d1589a10d02adbb906c67d1c93610bc2575b50604080516001600160a01b039092168252911515602082015290819081016107c7565b806104e6610bcf92612504565b38610b9e565b610bef91945060203d60201161051c5761050d8183612552565b9238610b2d565b3461039d57610c0436610aa4565b603454610c19906001600160a01b0316610249565b91604051809363383e6b8b60e11b825281600460209687935afa90811561034c57600091610d14575b50604051637be53ca160e01b8152336004820152936001600160a01b0391909116908085602481855afa94851561034c57600095610cf5575b508415610c99575b5050610c946102d4936102c86137e5565b612c56565b604051631280795b60e11b81523360048201529450908190859060249082905afa801561034c576102d494610c9492600092610cd8575b505093610c83565b610cee9250803d10610345576103368183612552565b3880610cd0565b81610d0d9296503d8711610345576103368183612552565b9338610c7b565b610d2b9150843d8611610396576103888183612552565b38610c42565b3461039d57604036600319011261039d57600435610d4e816103a2565b60243590610d5a61354f565b610d65610861612d58565b603554610d7a906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b038316600482015290929091602083602481875afa92831561034c57600093610e50575b5061ffff835160401c1693610dc78385613835565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0383166004820152935160248501526000908490604490829084905af192831561034c577fb46e2b82b0c2cf3d7d9dece53635e165c53e0eaa7a44f904d61a2b7174826aef936104d957506040805194855260208501929092526001600160a01b03169290819081016104d4565b610e6a91935060203d60201161051c5761050d8183612552565b9138610db2565b3461039d57604036600319011261039d57600435610e8e816103a2565b60243590610e9a61354f565b603554610eaf906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b038316600482015290929091602083602481875afa92831561034c57600093610f88575b50640fffffffff835160741c1693610eff8385613859565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0383166004820152935160248501526000908490604490829084905af192831561034c577f0263602682188540a2d633561c0b4453b7d8566285e99f9f6018b8ef2facef49936104d957506040805194855260208501929092526001600160a01b03169290819081016104d4565b610fa291935060203d60201161051c5761050d8183612552565b9138610ee7565b3461039d57602036600319011261039d57600435610fc6816103a2565b610fce6136cb565b6035546001600160a01b039190821690813b1561039d5760405192839163031e4dc360e51b835216918260048301528160246000958680945af1801561034c5761103b575b507feeec4c06f7adad215cbdb4d2960896c83c26aedce02dde76d36fa28588d62da48280a280f35b806104e661104892612504565b38611013565b3461039d5761105c36610aa4565b9061106561354f565b60355461107a906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b03831660048201529190602083602481845afa92831561034c57600093611176575b50831561115c575b6110c2848461389c565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0383166004820152925160248401526000908390604490829084905af190811561034c577f2443ba28e8d1d88d531a3d90b981816a4f3b3c7f1fd4085c6029e81d1b7a570d926104d492611149575b5060405193151584526001600160a01b0316929081906020820190565b806104e661115692612504565b3861112c565b8251611171906001603b1b16156102c8612d76565b6110b8565b61119091935060203d60201161051c5761050d8183612552565b91386110b0565b6003199060208183011261039d57600435916001600160401b03831161039d578260c09203011261039d5760040190565b3461039d576111d636611197565b6111de6136cb565b603554600091829073eeF0662c96022d3cAfDFab84fB6EBa2072a15dFd803b1561124a57604051630f5b50e760e41b81529384928391829161122c916001600160a01b031660048401612d94565b03915af4801561034c5761123e575080f35b61124790612504565b80f35b8280fd5b3461039d5760208060031936011261039d5760049081359061126f82610a9a565b6034548190611286906001600160a01b0316610249565b60405163383e6b8b60e11b815294859182905afa92831561034c57600093611314575b50604051631280795b60e11b8152336004820152928190849060249082906001600160a01b03165afa801561034c576102d4936112f2926000926112f7575b50506102c86138cb565b612f09565b61130d9250803d10610345576103368183612552565b38806112e8565b8161132c9294503d8511610396576103888183612552565b91386112a9565b600091031261039d57565b3461039d57600036600319011261039d57602060405160018152f35b3461039d57608036600319011261039d57600435611377816103a2565b602435906044356064359161138a61354f565b61139e611395612fb9565b83861115612a9b565b6035546113b3906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b03831660048201529390602085602481845afa94851561034c576000956114ff575b5083156114df5761141d612710611409611401612fb9565b828611612a9b565b6114138487613a6e565b11156102c8612fb9565b6114278686613a8c565b6114318486613ac2565b61143b8286613afe565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0384166004820152945160248601526000908590604490829084905af190811561034c577f637febbda9275aea2e85c0ff690444c8d87eb2e8339bbede9715abcc89cb0995946104d4926114cc575b5060405193849360018060a01b031696846040919493926060820195825260208201520152565b806104e66114d992612504565b386114a5565b6114f16114ea612fb9565b8315612a9b565b6114fa83613961565b61141d565b61151991955060203d60201161051c5761050d8183612552565b93386113e9565b3461039d5760208060031936011261039d5760043561153e81610688565b6115466136cb565b6115516106ca612a35565b603554611566906001600160a01b0316610249565b60405163074b2e4360e01b8152908382600481845afa91821561034c5760009261165d575b5060405163354ce01b60e11b81528481600481855afa94851561034c5760009561163e575b5050803b1561039d57604051635e5b729160e11b81526001600160801b0384811660048301529490941660248501526000908490604490829084905af192831561034c577f71aba182c9d0529b516de7a78bed74d49c207ef7e152f52f7ea5d8730138f643936107cc5750604080516001600160801b039283168152929091166020830152819081016107c7565b611655929550803d10610807576107f78183612552565b9238806115b0565b611675919250843d8611610807576107f78183612552565b903861158b565b3461039d5761168a36610aa4565b9061169361354f565b6035546116a8906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b03831660048201529190602083602481845afa92831561034c578490600094611790575b50611776575b6116f08484613b3c565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0383166004820152925160248401526000908390604490829084905af190811561034c577f0b64d0941719acd363f1a6be3d8525d8ec9d71738f7445aabcd88d7939b472e7926104d492611149575060405193151584526001600160a01b0316929081906020820190565b61178b6001603a1b84511615156102c8612fd7565b6116e6565b6117aa91945060203d60201161051c5761050d8183612552565b92386116e0565b3461039d576117bf36610aa4565b906117c861354f565b6035546117dd906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b03831660048201529190602083602481845afa92831561034c576000936118a4575b5061181e8484613b6b565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0383166004820152925160248401526000908390604490829084905af190811561034c577f0c4443d258a350d27dc50c378b2ebf165e6469725f786d21b30cab16823f5587926104d492611149575060405193151584526001600160a01b0316929081906020820190565b6118be91935060203d60201161051c5761050d8183612552565b9138611813565b3461039d576118d336610aa4565b90816118dd61354f565b611a05575b6035546118f7906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b038316600482015290929091602083602481875afa92831561034c576000936119e4575b506001603e1b8351161515936119458385613c99565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0383166004820152935160248501526000908490604490829084905af192831561034c577f842a280b07e8e502a9101f32a3b768ebaba3655556dd674f0831900861fc674b936119d1575b5060408051941515855291151560208501526001600160a01b03169290819081016104d4565b806104e66119de92612504565b386119ab565b6119fe91935060203d60201161051c5761050d8183612552565b913861192f565b611a0e81613bbc565b6118e2565b3461039d57611a2136611197565b611a296136cb565b603554600091829073eeF0662c96022d3cAfDFab84fB6EBa2072a15dFd803b1561124a5760405163b0f0935560e01b81529384928391829161122c916001600160a01b031660048401612d94565b3461039d57604036600319011261039d57600435611a94816103a2565b60243590611aa061354f565b603554611ab5906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b0383166004820152909290602081602481875afa90811561034c57600091611c4e575b5064ffffffffff815160d41c16938415611c40575b611b0b8383613cc8565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0385166004820152915160248301526000908290604490829084905af1801561034c57611c2d575b508015611b9c575b6040805193845260208401919091526001600160a01b03909116917f6824a6c7fbc10d2979b1f1ccf2dd4ed0436541679a661dedb5c10bd4be83068291819081016104d4565b603554611bb1906001600160a01b0316610249565b91823b1561039d5760405163e43e88a160e01b81526001600160a01b0382166004820152926000908490602490829084905af192831561034c577f6824a6c7fbc10d2979b1f1ccf2dd4ed0436541679a661dedb5c10bd4be83068293611c1a575b509150611b56565b806104e6611c2792612504565b38611c12565b806104e6611c3a92612504565b38611b4e565b611c4984613961565b611b01565b611c67915060203d60201161051c5761050d8183612552565b38611aec565b3461039d57611c7b36610aa4565b90611c846136cb565b8115611d88575b603554611ca0906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b03831660048201529190602083602481845afa92831561034c57600093611d67575b50611ce18484613d0e565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0383166004820152925160248401526000908390604490829084905af190811561034c577fc36c7d11ba01a5869d52aa4a3781939dab851cbc9ee6e7fdcedc7d58898a3f1e926104d492611149575060405193151584526001600160a01b0316929081906020820190565b611d8191935060203d60201161051c5761050d8183612552565b9138611cd6565b611d9181613961565b611c8b565b3461039d5760031960203682011261039d57600435906001600160401b03821161039d5760e08260040191833603011261039d57611dd26136cb565b6035546001600160a01b03908116919073eeF0662c96022d3cAfDFab84fB6EBa2072a15dFd90813b1561039d57600093611ef66040519687958694859463162792d560e31b86526004860152604060248601528135611e30816103a2565b166044850152611e55611e45602484016103b3565b6001600160a01b03166064860152565b611e74611e64604484016103b3565b6001600160a01b03166084860152565b611ee6611e99611e876064850184612573565b60e060a48901526101248801916125a4565b9160c4611ebf611eac6084870184612573565b6043198a88038101858c015296916125a4565b94611edf611ecf60a483016103b3565b6001600160a01b031660e48a0152565b0190612573565b91858403016101048601526125a4565b03915af4801561034c57611f0657005b806104e66102d492612504565b6004359060ff8216820361039d57565b6024359060ff8216820361039d57565b359060ff8216820361039d57565b61ffff81160361039d57565b3461039d5760c036600319011261039d57611f66611f13565b602435611f7281611f41565b60443591611f7f83611f41565b606435611f8b81611f41565b60843590611f98826103a2565b60a435946001600160401b039485871161039d573660238801121561039d57866004013595861161039d57366024878901011161039d5760246102d4970194612ff5565b3461039d57602036600319011261039d57600435611ff9816103a2565b60ff6001541690811591826120c0575b80156120b4575b156120585761202390826120385761338f565b61202957005b6102d460ff1960015416600155565b612049600160ff1981541617600155565b6120536001600055565b61338f565b60405162461bcd60e51b815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201526d195b881a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50600054600111612010565b50303b15612009565b3461039d57604036600319011261039d576004356120e6816103a2565b602435906120f261354f565b603554612107906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b038316600482015290929091602083602481875afa92831561034c576000936121e0575b50640fffffffff835160501c16936121578385613d41565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0383166004820152935160248501526000908490604490829084905af192831561034c577fc51aca575985d521c5072ad11549bad77013bb786d57f30f94b40ed8f8dc9bc4936104d957506040805194855260208501929092526001600160a01b03169290819081016104d4565b6121fa91935060203d60201161051c5761050d8183612552565b913861213f565b3461039d57604036600319011261039d5760043561221e816103a2565b612226611f23565b9061222f61354f565b603554612244906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b038316600482015290929091602083602481875afa92831561034c576000936123b9575b5060ff8216938461233b575b61229a60ff855160a81c169585613d84565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0383166004820152935160248501526000908490604490829084905af192831561034c577f5bb69795b6a2ea222d73a5f8939c23471a1f85a99c7ca43c207f1b71f10c626493612328575b506040805160ff95861681529290941660208301526001600160a01b031692819081016104d4565b806104e661233592612504565b38612300565b604051636c6f6ae160e01b815260ff84166004820152600081602481855afa801561034c57602061237c9161239193600091612396575b50015161ffff1690565b61ffff80875160101c169116116102c86134e2565b612288565b6123b391503d806000833e6123ab8183612552565b810190613448565b38612372565b6123d391935060203d60201161051c5761050d8183612552565b913861227c565b3461039d576123e836610aa4565b906123f161354f565b603554612406906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b03831660048201529190602083602481845afa92831561034c576000936124cd575b506124478484613dbf565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0383166004820152925160248401526000908390604490829084905af190811561034c577fc8ff3cc5b0fddaa3e6ebbbd7438f43393e4ea30e88b80ad016c1bc094655034d926104d492611149575060405193151584526001600160a01b0316929081906020820190565b6124e791935060203d60201161051c5761050d8183612552565b913861243c565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161251757604052565b6124ee565b60a081019081106001600160401b0382111761251757604052565b604081019081106001600160401b0382111761251757604052565b90601f801991011681019081106001600160401b0382111761251757604052565b9035601e198236030181121561039d5701602081359101916001600160401b03821161039d57813603831361039d57565b908060209392818452848401376000828201840152601f01601f1916010190565b6001600160a01b03909116815260406020820181905290919082016125e9826103b3565b6001600160a01b03169052612600602082016103b3565b6001600160a01b0316606083015261261a604082016103b3565b6001600160a01b0316608083015261263460608201611f33565b60ff1660a0830152612648608082016103b3565b6001600160a01b031660c083015261266260a082016103b3565b6001600160a01b031660e083015261267c60c082016103b3565b6001600160a01b0316610100808401919091529161269c60e083016103b3565b6001600160a01b0316610120828101919091529282016126bc9083612573565b92906101e0906101409482868601526102208501906126da926125a4565b9482016126e79083612573565b90603f199661016092888783030184880152612702926125a4565b94830161270f9084612573565b9561018096888783030188880152612726926125a4565b9083016127339084612573565b916101a09288878303018488015261274a926125a4565b9483016127579084612573565b956101c09688878303018888015261276e926125a4565b90830161277b9084612573565b909287868403019086015261278f926125a4565b92810161279b91612573565b91909381840301906102000152610ac9926125a4565b6040513d6000823e3d90fd5b60355473eeF0662c96022d3cAfDFab84fB6EBa2072a15dFd9291906001600160a01b031660005b8381106127f2575050505050565b8060051b830135906101de198436030182121561039d57853b1561039d5760006128339260405180948192636facdc5960e11b8352880187600484016125c5565b0381895af491821561034c5760019261284e575b50016127e4565b806104e661285b92612504565b38612847565b604051906101e082018281106001600160401b0382111761251757604052565b604051906103be8261251c565b919082602091031261039d57604051602081018181106001600160401b038211176125175760405291518252565b9060208282031261039d57610ac99161288e565b51906103be82610688565b519064ffffffffff8216820361039d57565b51906103be82611f41565b51906103be826103a2565b6101e08183031261039d57612920612919612861565b928261288e565b825261292e602082016128d0565b602083015261293f604082016128d0565b6040830152612950606082016128d0565b6060830152612961608082016128d0565b608083015261297260a082016128d0565b60a083015261298360c082016128db565b60c083015261299460e082016128ed565b60e08301526101006129a78183016128f8565b908301526101206129b98183016128f8565b908301526101406129cb8183016128f8565b908301526101606129dd8183016128f8565b908301526101806129ef8183016128d0565b908301526101a0612a018183016128d0565b90830152612a136101c08092016128d0565b9082015290565b6001600160401b03811161251757601f01601f191660200190565b60405190612a4282612537565b6002825261313960f01b6020830152565b60005b838110612a665750506000910152565b8181015183820152602001612a56565b90602091612a8f81518092818552858086019101612a53565b601f01601f1916010190565b15612aa35750565b60405162461bcd60e51b815260206004820152908190612ac7906024830190612a76565b0390fd5b9081602091031261039d5751610ac981610688565b60405190612aed82612537565b6002825261037360f41b6020830152565b60405190612b0b82612537565b6002825261191960f11b6020830152565b9081602091031261039d575190565b603454909190612b43906001600160a01b0316610249565b91604051809363383e6b8b60e11b825281600460209687935afa90811561034c57600091612c39575b50604051637be53ca160e01b8152336004820152936001600160a01b0391909116908085602481855afa94851561034c57600095612c1a575b508415612bbe575b5050610c946103be936102c86137e5565b604051631280795b60e11b81523360048201529450908190859060249082905afa801561034c576103be94610c9492600092612bfd575b505093612bad565b612c139250803d10610345576103368183612552565b3880612bf5565b81612c329296503d8711610345576103368183612552565b9338612ba5565b612c509150843d8611610396576103888183612552565b38612b6c565b603554612c6b906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b03831660048201529190602083602481845afa92831561034c57600093612d37575b50612cac8484613802565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0383166004820152925160248401526000908390604490829084905af190811561034c577fe188d542a5f11925d3a3af33703cdd30a43cb3e8066a3cf68b1b57f61a5a94b592612d3292611149575060405193151584526001600160a01b0316929081906020820190565b0390a2565b612d5191935060203d60201161051c5761050d8183612552565b9138612ca1565b60405190612d6582612537565b6002825261363760f01b6020830152565b60405190612d8382612537565b6002825261070760f31b6020830152565b6001600160a01b03918216815260406020820152610ac9929160e09190808435612dbd816103a2565b1660408301526020840135612dd1816103a2565b166060820152612df9612de76040850185612573565b60c060808501526101008401916125a4565b90612e4b612e21612e0d6060870187612573565b603f19858703810160a087015295916125a4565b94612e41612e31608083016103b3565b6001600160a01b031660c0850152565b60a0810190612573565b939092828603019101526125a4565b90602090818382031261039d5782516001600160401b039384821161039d570181601f8201121561039d578051938411612517578360051b9060405194612ea385840187612552565b8552838086019282010192831161039d578301905b828210612ec6575050505090565b8380918351612ed4816103a2565b815201910190612eb8565b8051821015612ef35760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b6035546004906000906001600160a01b03166040516334651b6f60e21b815292839182905afa90811561034c57600091612f96575b5060005b8151811015612f915780612f6b610249612f5e60019486612edf565b516001600160a01b031690565b612f76575b01612f42565b612f8c84612f87612f5e8487612edf565b612b2b565b612f70565b505050565b612fb391503d806000833e612fab8183612552565b810190612e5a565b38612f3e565b60405190612fc682612537565b6002825261032360f41b6020830152565b60405190612fe482612537565b6002825261033360f41b6020830152565b9193959496909261300461354f565b61301b61300f61328d565b61ffff86161515612a9b565b61303261302661328d565b61ffff87161515612a9b565b61304e61303d61328d565b61ffff871661ffff87161115612a9b565b61308361271061307961ffff841661306f61306761328d565b848311612a9b565b61ffff8916613a6e565b11156102c861328d565b603554613098906001600160a01b0316610249565b95604051986334651b6f60e21b8a5260008a6004818b5afa998a1561034c5760009a613270575b5060005b8a5181101561319857806130dd612f5e61310e938e612edf565b60405163c44b11f760e01b81526001600160a01b039091166004820152602092839082908d90829081906024820190565b03915afa90811561034c5760019360009261317b575b5050805160ff808260a81c16908a1614613141575b5050016130c3565b6131749161316161ffff928c848061315761328d565b9316911611612a9b565b5160101c1661ffff8b16116102c861328d565b3880613139565b6131919250803d1061051c5761050d8183612552565b3880613124565b5091939497909298509594956131ac612881565b61ffff891681529561ffff8816602088015261ffff851660408801526001600160a01b03821660608801526131e23685856132ab565b6080880152803b1561039d5760405163d579ea7d60e01b8152966000918891829084908290613215908c600484016132e2565b03925af193841561034c577f0acf8b4a3cace10779798a89a206a0ae73a71b63acdd3be2801d39c2ef7ab3cb9760ff97612d329661325d575b5060405197889716998761333d565b806104e661326a92612504565b3861324e565b613286919a503d806000833e612fab8183612552565b98386130bf565b6040519061329a82612537565b6002825261323160f01b6020830152565b9291926132b782612a1a565b916132c56040519384612552565b82948184528183011161039d578281602093846000960137010152565b906080610ac99360ff60e0931684526040602085015261ffff8082511660408601528060208301511660608601526040820151168285015260018060a01b0360608201511660a085015201519160a060c08201520190612a76565b61ffff9182168152918116602083015290911660408201526001600160a01b03909116606082015260a060808201819052610ac9939101916125a4565b9081602091031261039d5751610ac9816103a2565b603480546001600160a01b039283166001600160a01b0319918216811790925560405163026b1d5f60e01b8152909291602090829060049082905afa90811561034c576000916133e7575b5016906035541617603555565b613400915060203d602011610396576103888183612552565b386133da565b81601f8201121561039d57805161341c81612a1a565b9261342a6040519485612552565b8184526020828401011161039d57610ac99160208085019101612a53565b9060208282031261039d5781516001600160401b039283821161039d57019060a08282031261039d576040519261347e8461251c565b825161348981611f41565b8452602083015161349981611f41565b602085015260408301516134ac81611f41565b604085015260608301516134bf816103a2565b6060850152608083015190811161039d576134da9201613406565b608082015290565b604051906134ef82612537565b6002825261313760f01b6020830152565b9081602091031261039d5751610ac981610a9a565b6040519061352282612537565b60018252603560f81b6020830152565b6040519061353f82612537565b60018252600d60fa1b6020830152565b603454613564906001600160a01b0316610249565b604051809163383e6b8b60e11b825281600460209485935afa90811561034c5760009161364e575b5060405163674b5e4d60e01b8152336004820152906001600160a01b03168282602481845afa91821561034c5760009261362f575b5081156135d7575b506103be91506102c8613532565b604051637be53ca160e01b815233600482015291508290829060249082905afa90811561034c576103be92600092613612575b5050386135c9565b6136289250803d10610345576103368183612552565b388061360a565b613647919250833d8511610345576103368183612552565b90386135c1565b6136659150823d8411610396576103888183612552565b3861358c565b9061369860405161367b81612537565b60028152611b9960f11b6020820152640fffffffff831115612a9b565b640fffffffff60b01b198251169060b01b179052565b604051906136bb82612537565b60018252603160f81b6020830152565b6034546136e0906001600160a01b0316610249565b604051809163383e6b8b60e11b825281600460209485935afa90811561034c5760009161376b575b50604051637be53ca160e01b8152336004820152908290829060249082906001600160a01b03165afa90811561034c576103be9260009261374e575b50506102c86136ae565b6137649250803d10610345576103368183612552565b3880613744565b6137829150823d8411610396576103888183612552565b38613708565b9061379f613794612ae0565b61ffff831115612a9b565b61ffff60981b198251169060981b179052565b9067200000000000000019825116906000146137d95760ff603d1b60015b603d1b16179052565b60ff603d1b60006137d0565b604051906137f282612537565b60018252603360f81b6020830152565b9067100000000000000019825116906000146138295760ff603c1b60015b603c1b16179052565b60ff603c1b6000613820565b90613841613794612d58565b69ffff0000000000000000198251169060401b179052565b9061388660405161386981612537565b6002815261363960f01b6020820152640fffffffff831115612a9b565b640fffffffff60741b198251169060741b179052565b906001603a1b19825116906000146138bf5760ff603a1b60015b603a1b16179052565b60ff603a1b60006138b6565b604051906138d882612537565b60018252601960f91b6020830152565b91908261018091031261039d5781519160208101519160408201519160608101519160808201519160a08101519160c08201519160e0810151916101008201519161012081015191610ac961016061014084015193016128db565b6040519061395082612537565b6002825261062760f31b6020830152565b6034546004919060209061397d906001600160a01b0316610249565b60405163e860accb60e01b815293849182905afa91821561034c57600092613a49575b506040516335ea6a7560e01b81526001600160a01b0390911660048201529061018090819083908180602481015b03916001600160a01b03165afa801561034c576103be92600092600092613a0c575b5050159081613a03575b506102c8613943565b905015386139fa565b613a2f935080919250903d10613a42575b613a278183612552565b8101906138e8565b50505050505050505091509038806139f0565b503d613a1d565b6139ce919250613a679060203d602011610396576103888183612552565b91906139a0565b8161138819048111158215171561039d576127109102611388010490565b90613ab6604051613a9c81612537565b6002815261363360f01b602082015261ffff831115612a9b565b815161ffff1916179052565b90613aec604051613ad281612537565b60028152610d8d60f21b602082015261ffff831115612a9b565b63ffff0000198251169060101b179052565b90613b28604051613b0e81612537565b6002815261363560f01b602082015261ffff831115612a9b565b65ffff00000000198251169060201b179052565b906001603b1b1982511690600014613b5f5760ff603b1b60015b603b1b16179052565b60ff603b1b6000613b56565b906702000000000000001982511690600014613b925760ff60391b60015b60391b16179052565b60ff60391b6000613b89565b60405190613bab82612537565b6002825261039360f41b6020830152565b603454613bd1906001600160a01b0316610249565b90604051809263e860accb60e01b825281600460209586935afa91821561034c57613c2e928492600091613c7c575b50604051634d44ac4f60e01b81526001600160a01b0390921660048301529092839190829081906024820190565b03916001600160a01b03165afa90811561034c576103be92600092613c5f575b5050613c58613b9e565b9015612a9b565b613c759250803d10610a9357610a858183612552565b3880613c4e565b613c939150833d8511610396576103888183612552565b38613c00565b906001603e1b1982511690600014613cbc5760ff603e1b60015b603e1b16179052565b60ff603e1b6000613cb3565b90613cf5604051613cd881612537565b6002815261373360f01b602082015264ffffffffff831115612a9b565b6001650f000000000160d41b038251169060d41b179052565b906701000000000000001982511690600014613d355760ff60381b60015b60381b16179052565b60ff60381b6000613d2c565b90613d6e604051613d5181612537565b600281526106c760f31b6020820152640fffffffff831115612a9b565b640fffffffff60501b198251169060501b179052565b90613dad604051613d9481612537565b6002815261373160f01b602082015260ff831115612a9b565b60ff60a81b198251169060a81b179052565b906780000000000000001982511690600014613de65760ff603f1b60015b603f1b16179052565b60ff603f1b6000613ddd56fea26469706673582212203af5bce192c49b2b035069b7a6ab5693f1bf9561e6a004ef3fb981611d542ed964736f6c63430008180033",
  "deployedBytecode": "$da92b9d873c4c35978fd8b2518212a498f$__803b1561124a57604051630f5b50e760e41b81529384928391829161122c916001600160a01b031660048401612d94565b03915af4801561034c5761123e575080f35b61124790612504565b80f35b8280fd5b3461039d5760208060031936011261039d5760049081359061126f82610a9a565b6034548190611286906001600160a01b0316610249565b60405163383e6b8b60e11b815294859182905afa92831561034c57600093611314575b50604051631280795b60e11b8152336004820152928190849060249082906001600160a01b03165afa801561034c576102d4936112f2926000926112f7575b50506102c86138cb565b612f09565b61130d9250803d10610345576103368183612552565b38806112e8565b8161132c9294503d8511610396576103888183612552565b91386112a9565b600091031261039d57565b3461039d57600036600319011261039d57602060405160018152f35b3461039d57608036600319011261039d57600435611377816103a2565b602435906044356064359161138a61354f565b61139e611395612fb9565b83861115612a9b565b6035546113b3906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b03831660048201529390602085602481845afa94851561034c576000956114ff575b5083156114df5761141d612710611409611401612fb9565b828611612a9b565b6114138487613a6e565b11156102c8612fb9565b6114278686613a8c565b6114318486613ac2565b61143b8286613afe565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0384166004820152945160248601526000908590604490829084905af190811561034c577f637febbda9275aea2e85c0ff690444c8d87eb2e8339bbede9715abcc89cb0995946104d4926114cc575b5060405193849360018060a01b031696846040919493926060820195825260208201520152565b806104e66114d992612504565b386114a5565b6114f16114ea612fb9565b8315612a9b565b6114fa83613961565b61141d565b61151991955060203d60201161051c5761050d8183612552565b93386113e9565b3461039d5760208060031936011261039d5760043561153e81610688565b6115466136cb565b6115516106ca612a35565b603554611566906001600160a01b0316610249565b60405163074b2e4360e01b8152908382600481845afa91821561034c5760009261165d575b5060405163354ce01b60e11b81528481600481855afa94851561034c5760009561163e575b5050803b1561039d57604051635e5b729160e11b81526001600160801b0384811660048301529490941660248501526000908490604490829084905af192831561034c577f71aba182c9d0529b516de7a78bed74d49c207ef7e152f52f7ea5d8730138f643936107cc5750604080516001600160801b039283168152929091166020830152819081016107c7565b611655929550803d10610807576107f78183612552565b9238806115b0565b611675919250843d8611610807576107f78183612552565b903861158b565b3461039d5761168a36610aa4565b9061169361354f565b6035546116a8906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b03831660048201529190602083602481845afa92831561034c578490600094611790575b50611776575b6116f08484613b3c565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0383166004820152925160248401526000908390604490829084905af190811561034c577f0b64d0941719acd363f1a6be3d8525d8ec9d71738f7445aabcd88d7939b472e7926104d492611149575060405193151584526001600160a01b0316929081906020820190565b61178b6001603a1b84511615156102c8612fd7565b6116e6565b6117aa91945060203d60201161051c5761050d8183612552565b92386116e0565b3461039d576117bf36610aa4565b906117c861354f565b6035546117dd906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b03831660048201529190602083602481845afa92831561034c576000936118a4575b5061181e8484613b6b565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0383166004820152925160248401526000908390604490829084905af190811561034c577f0c4443d258a350d27dc50c378b2ebf165e6469725f786d21b30cab16823f5587926104d492611149575060405193151584526001600160a01b0316929081906020820190565b6118be91935060203d60201161051c5761050d8183612552565b9138611813565b3461039d576118d336610aa4565b90816118dd61354f565b611a05575b6035546118f7906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b038316600482015290929091602083602481875afa92831561034c576000936119e4575b506001603e1b8351161515936119458385613c99565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0383166004820152935160248501526000908490604490829084905af192831561034c577f842a280b07e8e502a9101f32a3b768ebaba3655556dd674f0831900861fc674b936119d1575b5060408051941515855291151560208501526001600160a01b03169290819081016104d4565b806104e66119de92612504565b386119ab565b6119fe91935060203d60201161051c5761050d8183612552565b913861192f565b611a0e81613bbc565b6118e2565b3461039d57611a2136611197565b611a296136cb565b603554600091829073__$da92b9d873c4c35978fd8b2518212a498f$__803b1561124a5760405163b0f0935560e01b81529384928391829161122c916001600160a01b031660048401612d94565b3461039d57604036600319011261039d57600435611a94816103a2565b60243590611aa061354f565b603554611ab5906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b0383166004820152909290602081602481875afa90811561034c57600091611c4e575b5064ffffffffff815160d41c16938415611c40575b611b0b8383613cc8565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0385166004820152915160248301526000908290604490829084905af1801561034c57611c2d575b508015611b9c575b6040805193845260208401919091526001600160a01b03909116917f6824a6c7fbc10d2979b1f1ccf2dd4ed0436541679a661dedb5c10bd4be83068291819081016104d4565b603554611bb1906001600160a01b0316610249565b91823b1561039d5760405163e43e88a160e01b81526001600160a01b0382166004820152926000908490602490829084905af192831561034c577f6824a6c7fbc10d2979b1f1ccf2dd4ed0436541679a661dedb5c10bd4be83068293611c1a575b509150611b56565b806104e6611c2792612504565b38611c12565b806104e6611c3a92612504565b38611b4e565b611c4984613961565b611b01565b611c67915060203d60201161051c5761050d8183612552565b38611aec565b3461039d57611c7b36610aa4565b90611c846136cb565b8115611d88575b603554611ca0906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b03831660048201529190602083602481845afa92831561034c57600093611d67575b50611ce18484613d0e565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0383166004820152925160248401526000908390604490829084905af190811561034c577fc36c7d11ba01a5869d52aa4a3781939dab851cbc9ee6e7fdcedc7d58898a3f1e926104d492611149575060405193151584526001600160a01b0316929081906020820190565b611d8191935060203d60201161051c5761050d8183612552565b9138611cd6565b611d9181613961565b611c8b565b3461039d5760031960203682011261039d57600435906001600160401b03821161039d5760e08260040191833603011261039d57611dd26136cb565b6035546001600160a01b03908116919073__$da92b9d873c4c35978fd8b2518212a498f$__90813b1561039d57600093611ef66040519687958694859463162792d560e31b86526004860152604060248601528135611e30816103a2565b166044850152611e55611e45602484016103b3565b6001600160a01b03166064860152565b611e74611e64604484016103b3565b6001600160a01b03166084860152565b611ee6611e99611e876064850184612573565b60e060a48901526101248801916125a4565b9160c4611ebf611eac6084870184612573565b6043198a88038101858c015296916125a4565b94611edf611ecf60a483016103b3565b6001600160a01b031660e48a0152565b0190612573565b91858403016101048601526125a4565b03915af4801561034c57611f0657005b806104e66102d492612504565b6004359060ff8216820361039d57565b6024359060ff8216820361039d57565b359060ff8216820361039d57565b61ffff81160361039d57565b3461039d5760c036600319011261039d57611f66611f13565b602435611f7281611f41565b60443591611f7f83611f41565b606435611f8b81611f41565b60843590611f98826103a2565b60a435946001600160401b039485871161039d573660238801121561039d57866004013595861161039d57366024878901011161039d5760246102d4970194612ff5565b3461039d57602036600319011261039d57600435611ff9816103a2565b60ff6001541690811591826120c0575b80156120b4575b156120585761202390826120385761338f565b61202957005b6102d460ff1960015416600155565b612049600160ff1981541617600155565b6120536001600055565b61338f565b60405162461bcd60e51b815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201526d195b881a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50600054600111612010565b50303b15612009565b3461039d57604036600319011261039d576004356120e6816103a2565b602435906120f261354f565b603554612107906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b038316600482015290929091602083602481875afa92831561034c576000936121e0575b50640fffffffff835160501c16936121578385613d41565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0383166004820152935160248501526000908490604490829084905af192831561034c577fc51aca575985d521c5072ad11549bad77013bb786d57f30f94b40ed8f8dc9bc4936104d957506040805194855260208501929092526001600160a01b03169290819081016104d4565b6121fa91935060203d60201161051c5761050d8183612552565b913861213f565b3461039d57604036600319011261039d5760043561221e816103a2565b612226611f23565b9061222f61354f565b603554612244906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b038316600482015290929091602083602481875afa92831561034c576000936123b9575b5060ff8216938461233b575b61229a60ff855160a81c169585613d84565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0383166004820152935160248501526000908490604490829084905af192831561034c577f5bb69795b6a2ea222d73a5f8939c23471a1f85a99c7ca43c207f1b71f10c626493612328575b506040805160ff95861681529290941660208301526001600160a01b031692819081016104d4565b806104e661233592612504565b38612300565b604051636c6f6ae160e01b815260ff84166004820152600081602481855afa801561034c57602061237c9161239193600091612396575b50015161ffff1690565b61ffff80875160101c169116116102c86134e2565b612288565b6123b391503d806000833e6123ab8183612552565b810190613448565b38612372565b6123d391935060203d60201161051c5761050d8183612552565b913861227c565b3461039d576123e836610aa4565b906123f161354f565b603554612406906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b03831660048201529190602083602481845afa92831561034c576000936124cd575b506124478484613dbf565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0383166004820152925160248401526000908390604490829084905af190811561034c577fc8ff3cc5b0fddaa3e6ebbbd7438f43393e4ea30e88b80ad016c1bc094655034d926104d492611149575060405193151584526001600160a01b0316929081906020820190565b6124e791935060203d60201161051c5761050d8183612552565b913861243c565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161251757604052565b6124ee565b60a081019081106001600160401b0382111761251757604052565b604081019081106001600160401b0382111761251757604052565b90601f801991011681019081106001600160401b0382111761251757604052565b9035601e198236030181121561039d5701602081359101916001600160401b03821161039d57813603831361039d57565b908060209392818452848401376000828201840152601f01601f1916010190565b6001600160a01b03909116815260406020820181905290919082016125e9826103b3565b6001600160a01b03169052612600602082016103b3565b6001600160a01b0316606083015261261a604082016103b3565b6001600160a01b0316608083015261263460608201611f33565b60ff1660a0830152612648608082016103b3565b6001600160a01b031660c083015261266260a082016103b3565b6001600160a01b031660e083015261267c60c082016103b3565b6001600160a01b0316610100808401919091529161269c60e083016103b3565b6001600160a01b0316610120828101919091529282016126bc9083612573565b92906101e0906101409482868601526102208501906126da926125a4565b9482016126e79083612573565b90603f199661016092888783030184880152612702926125a4565b94830161270f9084612573565b9561018096888783030188880152612726926125a4565b9083016127339084612573565b916101a09288878303018488015261274a926125a4565b9483016127579084612573565b956101c09688878303018888015261276e926125a4565b90830161277b9084612573565b909287868403019086015261278f926125a4565b92810161279b91612573565b91909381840301906102000152610ac9926125a4565b6040513d6000823e3d90fd5b60355473__$da92b9d873c4c35978fd8b2518212a498f$__9291906001600160a01b031660005b8381106127f2575050505050565b8060051b830135906101de198436030182121561039d57853b1561039d5760006128339260405180948192636facdc5960e11b8352880187600484016125c5565b0381895af491821561034c5760019261284e575b50016127e4565b806104e661285b92612504565b38612847565b604051906101e082018281106001600160401b0382111761251757604052565b604051906103be8261251c565b919082602091031261039d57604051602081018181106001600160401b038211176125175760405291518252565b9060208282031261039d57610ac99161288e565b51906103be82610688565b519064ffffffffff8216820361039d57565b51906103be82611f41565b51906103be826103a2565b6101e08183031261039d57612920612919612861565b928261288e565b825261292e602082016128d0565b602083015261293f604082016128d0565b6040830152612950606082016128d0565b6060830152612961608082016128d0565b608083015261297260a082016128d0565b60a083015261298360c082016128db565b60c083015261299460e082016128ed565b60e08301526101006129a78183016128f8565b908301526101206129b98183016128f8565b908301526101406129cb8183016128f8565b908301526101606129dd8183016128f8565b908301526101806129ef8183016128d0565b908301526101a0612a018183016128d0565b90830152612a136101c08092016128d0565b9082015290565b6001600160401b03811161251757601f01601f191660200190565b60405190612a4282612537565b6002825261313960f01b6020830152565b60005b838110612a665750506000910152565b8181015183820152602001612a56565b90602091612a8f81518092818552858086019101612a53565b601f01601f1916010190565b15612aa35750565b60405162461bcd60e51b815260206004820152908190612ac7906024830190612a76565b0390fd5b9081602091031261039d5751610ac981610688565b60405190612aed82612537565b6002825261037360f41b6020830152565b60405190612b0b82612537565b6002825261191960f11b6020830152565b9081602091031261039d575190565b603454909190612b43906001600160a01b0316610249565b91604051809363383e6b8b60e11b825281600460209687935afa90811561034c57600091612c39575b50604051637be53ca160e01b8152336004820152936001600160a01b0391909116908085602481855afa94851561034c57600095612c1a575b508415612bbe575b5050610c946103be936102c86137e5565b604051631280795b60e11b81523360048201529450908190859060249082905afa801561034c576103be94610c9492600092612bfd575b505093612bad565b612c139250803d10610345576103368183612552565b3880612bf5565b81612c329296503d8711610345576103368183612552565b9338612ba5565b612c509150843d8611610396576103888183612552565b38612b6c565b603554612c6b906001600160a01b0316610249565b60405163c44b11f760e01b81526001600160a01b03831660048201529190602083602481845afa92831561034c57600093612d37575b50612cac8484613802565b803b1561039d5760405163f51e435b60e01b81526001600160a01b0383166004820152925160248401526000908390604490829084905af190811561034c577fe188d542a5f11925d3a3af33703cdd30a43cb3e8066a3cf68b1b57f61a5a94b592612d3292611149575060405193151584526001600160a01b0316929081906020820190565b0390a2565b612d5191935060203d60201161051c5761050d8183612552565b9138612ca1565b60405190612d6582612537565b6002825261363760f01b6020830152565b60405190612d8382612537565b6002825261070760f31b6020830152565b6001600160a01b03918216815260406020820152610ac9929160e09190808435612dbd816103a2565b1660408301526020840135612dd1816103a2565b166060820152612df9612de76040850185612573565b60c060808501526101008401916125a4565b90612e4b612e21612e0d6060870187612573565b603f19858703810160a087015295916125a4565b94612e41612e31608083016103b3565b6001600160a01b031660c0850152565b60a0810190612573565b939092828603019101526125a4565b90602090818382031261039d5782516001600160401b039384821161039d570181601f8201121561039d578051938411612517578360051b9060405194612ea385840187612552565b8552838086019282010192831161039d578301905b828210612ec6575050505090565b8380918351612ed4816103a2565b815201910190612eb8565b8051821015612ef35760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b6035546004906000906001600160a01b03166040516334651b6f60e21b815292839182905afa90811561034c57600091612f96575b5060005b8151811015612f915780612f6b610249612f5e60019486612edf565b516001600160a01b031690565b612f76575b01612f42565b612f8c84612f87612f5e8487612edf565b612b2b565b612f70565b505050565b612fb391503d806000833e612fab8183612552565b810190612e5a565b38612f3e565b60405190612fc682612537565b6002825261032360f41b6020830152565b60405190612fe482612537565b6002825261033360f41b6020830152565b9193959496909261300461354f565b61301b61300f61328d565b61ffff86161515612a9b565b61303261302661328d565b61ffff87161515612a9b565b61304e61303d61328d565b61ffff871661ffff87161115612a9b565b61308361271061307961ffff841661306f61306761328d565b848311612a9b565b61ffff8916613a6e565b11156102c861328d565b603554613098906001600160a01b0316610249565b95604051986334651b6f60e21b8a5260008a6004818b5afa998a1561034c5760009a613270575b5060005b8a5181101561319857806130dd612f5e61310e938e612edf565b60405163c44b11f760e01b81526001600160a01b039091166004820152602092839082908d90829081906024820190565b03915afa90811561034c5760019360009261317b575b5050805160ff808260a81c16908a1614613141575b5050016130c3565b6131749161316161ffff928c848061315761328d565b9316911611612a9b565b5160101c1661ffff8b16116102c861328d565b3880613139565b6131919250803d1061051c5761050d8183612552565b3880613124565b5091939497909298509594956131ac612881565b61ffff891681529561ffff8816602088015261ffff851660408801526001600160a01b03821660608801526131e23685856132ab565b6080880152803b1561039d5760405163d579ea7d60e01b8152966000918891829084908290613215908c600484016132e2565b03925af193841561034c577f0acf8b4a3cace10779798a89a206a0ae73a71b63acdd3be2801d39c2ef7ab3cb9760ff97612d329661325d575b5060405197889716998761333d565b806104e661326a92612504565b3861324e565b613286919a503d806000833e612fab8183612552565b98386130bf565b6040519061329a82612537565b6002825261323160f01b6020830152565b9291926132b782612a1a565b916132c56040519384612552565b82948184528183011161039d578281602093846000960137010152565b906080610ac99360ff60e0931684526040602085015261ffff8082511660408601528060208301511660608601526040820151168285015260018060a01b0360608201511660a085015201519160a060c08201520190612a76565b61ffff9182168152918116602083015290911660408201526001600160a01b03909116606082015260a060808201819052610ac9939101916125a4565b9081602091031261039d5751610ac9816103a2565b603480546001600160a01b039283166001600160a01b0319918216811790925560405163026b1d5f60e01b8152909291602090829060049082905afa90811561034c576000916133e7575b5016906035541617603555565b613400915060203d602011610396576103888183612552565b386133da565b81601f8201121561039d57805161341c81612a1a565b9261342a6040519485612552565b8184526020828401011161039d57610ac99160208085019101612a53565b9060208282031261039d5781516001600160401b039283821161039d57019060a08282031261039d576040519261347e8461251c565b825161348981611f41565b8452602083015161349981611f41565b602085015260408301516134ac81611f41565b604085015260608301516134bf816103a2565b6060850152608083015190811161039d576134da9201613406565b608082015290565b604051906134ef82612537565b6002825261313760f01b6020830152565b9081602091031261039d5751610ac981610a9a565b6040519061352282612537565b60018252603560f81b6020830152565b6040519061353f82612537565b60018252600d60fa1b6020830152565b603454613564906001600160a01b0316610249565b604051809163383e6b8b60e11b825281600460209485935afa90811561034c5760009161364e575b5060405163674b5e4d60e01b8152336004820152906001600160a01b03168282602481845afa91821561034c5760009261362f575b5081156135d7575b506103be91506102c8613532565b604051637be53ca160e01b815233600482015291508290829060249082905afa90811561034c576103be92600092613612575b5050386135c9565b6136289250803d10610345576103368183612552565b388061360a565b613647919250833d8511610345576103368183612552565b90386135c1565b6136659150823d8411610396576103888183612552565b3861358c565b9061369860405161367b81612537565b60028152611b9960f11b6020820152640fffffffff831115612a9b565b640fffffffff60b01b198251169060b01b179052565b604051906136bb82612537565b60018252603160f81b6020830152565b6034546136e0906001600160a01b0316610249565b604051809163383e6b8b60e11b825281600460209485935afa90811561034c5760009161376b575b50604051637be53ca160e01b8152336004820152908290829060249082906001600160a01b03165afa90811561034c576103be9260009261374e575b50506102c86136ae565b6137649250803d10610345576103368183612552565b3880613744565b6137829150823d8411610396576103888183612552565b38613708565b9061379f613794612ae0565b61ffff831115612a9b565b61ffff60981b198251169060981b179052565b9067200000000000000019825116906000146137d95760ff603d1b60015b603d1b16179052565b60ff603d1b60006137d0565b604051906137f282612537565b60018252603360f81b6020830152565b9067100000000000000019825116906000146138295760ff603c1b60015b603c1b16179052565b60ff603c1b6000613820565b90613841613794612d58565b69ffff0000000000000000198251169060401b179052565b9061388660405161386981612537565b6002815261363960f01b6020820152640fffffffff831115612a9b565b640fffffffff60741b198251169060741b179052565b906001603a1b19825116906000146138bf5760ff603a1b60015b603a1b16179052565b60ff603a1b60006138b6565b604051906138d882612537565b60018252601960f91b6020830152565b91908261018091031261039d5781519160208101519160408201519160608101519160808201519160a08101519160c08201519160e0810151916101008201519161012081015191610ac961016061014084015193016128db565b6040519061395082612537565b6002825261062760f31b6020830152565b6034546004919060209061397d906001600160a01b0316610249565b60405163e860accb60e01b815293849182905afa91821561034c57600092613a49575b506040516335ea6a7560e01b81526001600160a01b0390911660048201529061018090819083908180602481015b03916001600160a01b03165afa801561034c576103be92600092600092613a0c575b5050159081613a03575b506102c8613943565b905015386139fa565b613a2f935080919250903d10613a42575b613a278183612552565b8101906138e8565b50505050505050505091509038806139f0565b503d613a1d565b6139ce919250613a679060203d602011610396576103888183612552565b91906139a0565b8161138819048111158215171561039d576127109102611388010490565b90613ab6604051613a9c81612537565b6002815261363360f01b602082015261ffff831115612a9b565b815161ffff1916179052565b90613aec604051613ad281612537565b60028152610d8d60f21b602082015261ffff831115612a9b565b63ffff0000198251169060101b179052565b90613b28604051613b0e81612537565b6002815261363560f01b602082015261ffff831115612a9b565b65ffff00000000198251169060201b179052565b906001603b1b1982511690600014613b5f5760ff603b1b60015b603b1b16179052565b60ff603b1b6000613b56565b906702000000000000001982511690600014613b925760ff60391b60015b60391b16179052565b60ff60391b6000613b89565b60405190613bab82612537565b6002825261039360f41b6020830152565b603454613bd1906001600160a01b0316610249565b90604051809263e860accb60e01b825281600460209586935afa91821561034c57613c2e928492600091613c7c575b50604051634d44ac4f60e01b81526001600160a01b0390921660048301529092839190829081906024820190565b03916001600160a01b03165afa90811561034c576103be92600092613c5f575b5050613c58613b9e565b9015612a9b565b613c759250803d10610a9357610a858183612552565b3880613c4e565b613c939150833d8511610396576103888183612552565b38613c00565b906001603e1b1982511690600014613cbc5760ff603e1b60015b603e1b16179052565b60ff603e1b6000613cb3565b90613cf5604051613cd881612537565b6002815261373360f01b602082015264ffffffffff831115612a9b565b6001650f000000000160d41b038251169060d41b179052565b906701000000000000001982511690600014613d355760ff60381b60015b60381b16179052565b60ff60381b6000613d2c565b90613d6e604051613d5181612537565b600281526106c760f31b6020820152640fffffffff831115612a9b565b640fffffffff60501b198251169060501b179052565b90613dad604051613d9481612537565b6002815261373160f01b602082015260ff831115612a9b565b60ff60a81b198251169060a81b179052565b906780000000000000001982511690600014613de65760ff603f1b60015b603f1b16179052565b60ff603f1b6000613ddd56fea26469706673582212203af5bce192c49b2b035069b7a6ab5693f1bf9561e6a004ef3fb981611d542ed964736f6c63430008180033",
  "libraries": {
    "ConfiguratorLogic": "0xeeF0662c96022d3cAfDFab84fB6EBa2072a15dFd"
  },
  "devdoc": {
    "author": "Aave",
    "details": "Implements the configuration methods for the Aave protocol",
    "events": {
      "ATokenUpgraded(address,address,address)": {
        "details": "Emitted when an aToken implementation is upgraded.",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "implementation": "The new aToken implementation",
          "proxy": "The aToken proxy address"
        }
      },
      "BorrowCapChanged(address,uint256,uint256)": {
        "details": "Emitted when the borrow cap of a reserve is updated.",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "newBorrowCap": "The new borrow cap",
          "oldBorrowCap": "The old borrow cap"
        }
      },
      "BorrowableInIsolationChanged(address,bool)": {
        "details": "Emitted when the reserve is set as borrowable/non borrowable in isolation mode.",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "borrowable": "True if the reserve is borrowable in isolation, false otherwise"
        }
      },
      "BridgeProtocolFeeUpdated(uint256,uint256)": {
        "details": "Emitted when the bridge protocol fee is updated.",
        "params": {
          "newBridgeProtocolFee": "The new protocol fee, expressed in bps",
          "oldBridgeProtocolFee": "The old protocol fee, expressed in bps"
        }
      },
      "CollateralConfigurationChanged(address,uint256,uint256,uint256)": {
        "details": "Emitted when the collateralization risk parameters for the specified asset are updated.",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "liquidationBonus": "The bonus liquidators receive to liquidate this asset",
          "liquidationThreshold": "The threshold at which loans using this asset as collateral will be considered undercollateralized",
          "ltv": "The loan to value of the asset when used as collateral"
        }
      },
      "DebtCeilingChanged(address,uint256,uint256)": {
        "details": "Emitted when the debt ceiling of an asset is set.",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "newDebtCeiling": "The new debt ceiling",
          "oldDebtCeiling": "The old debt ceiling"
        }
      },
      "EModeAssetCategoryChanged(address,uint8,uint8)": {
        "details": "Emitted when the category of an asset in eMode is changed.",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "newCategoryId": "The new eMode asset category",
          "oldCategoryId": "The old eMode asset category"
        }
      },
      "EModeCategoryAdded(uint8,uint256,uint256,uint256,address,string)": {
        "details": "Emitted when a new eMode category is added.",
        "params": {
          "categoryId": "The new eMode category id",
          "label": "A human readable identifier for the category",
          "liquidationBonus": "The liquidationBonus for the asset category in eMode",
          "liquidationThreshold": "The liquidationThreshold for the asset category in eMode",
          "ltv": "The ltv for the asset category in eMode",
          "oracle": "The optional address of the price oracle specific for this category"
        }
      },
      "FlashloanPremiumToProtocolUpdated(uint128,uint128)": {
        "details": "Emitted when the part of the premium that goes to protocol is updated.",
        "params": {
          "newFlashloanPremiumToProtocol": "The new premium, expressed in bps",
          "oldFlashloanPremiumToProtocol": "The old premium, expressed in bps"
        }
      },
      "FlashloanPremiumTotalUpdated(uint128,uint128)": {
        "details": "Emitted when the total premium on flashloans is updated.",
        "params": {
          "newFlashloanPremiumTotal": "The new premium, expressed in bps",
          "oldFlashloanPremiumTotal": "The old premium, expressed in bps"
        }
      },
      "LiquidationProtocolFeeChanged(address,uint256,uint256)": {
        "details": "Emitted when the liquidation protocol fee of a reserve is updated.",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "newFee": "The new liquidation protocol fee, expressed in bps",
          "oldFee": "The old liquidation protocol fee, expressed in bps"
        }
      },
      "ReserveActive(address,bool)": {
        "details": "Emitted when a reserve is activated or deactivated",
        "params": {
          "active": "True if reserve is active, false otherwise",
          "asset": "The address of the underlying asset of the reserve"
        }
      },
      "ReserveBorrowing(address,bool)": {
        "details": "Emitted when borrowing is enabled or disabled on a reserve.",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "enabled": "True if borrowing is enabled, false otherwise"
        }
      },
      "ReserveDropped(address)": {
        "details": "Emitted when a reserve is dropped.",
        "params": {
          "asset": "The address of the underlying asset of the reserve"
        }
      },
      "ReserveFactorChanged(address,uint256,uint256)": {
        "details": "Emitted when a reserve factor is updated.",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "newReserveFactor": "The new reserve factor, expressed in bps",
          "oldReserveFactor": "The old reserve factor, expressed in bps"
        }
      },
      "ReserveFlashLoaning(address,bool)": {
        "details": "Emitted when flashloans are enabled or disabled on a reserve.",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "enabled": "True if flashloans are enabled, false otherwise"
        }
      },
      "ReserveFrozen(address,bool)": {
        "details": "Emitted when a reserve is frozen or unfrozen",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "frozen": "True if reserve is frozen, false otherwise"
        }
      },
      "ReserveInitialized(address,address,address,address,address)": {
        "details": "Emitted when a reserve is initialized.",
        "params": {
          "aToken": "The address of the associated aToken contract",
          "asset": "The address of the underlying asset of the reserve",
          "interestRateStrategyAddress": "The address of the interest rate strategy for the reserve",
          "stableDebtToken": "The address of the associated stable rate debt token",
          "variableDebtToken": "The address of the associated variable rate debt token"
        }
      },
      "ReserveInterestRateStrategyChanged(address,address,address)": {
        "details": "Emitted when a reserve interest strategy contract is updated.",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "newStrategy": "The address of the new interest strategy contract",
          "oldStrategy": "The address of the old interest strategy contract"
        }
      },
      "ReservePaused(address,bool)": {
        "details": "Emitted when a reserve is paused or unpaused",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "paused": "True if reserve is paused, false otherwise"
        }
      },
      "ReserveStableRateBorrowing(address,bool)": {
        "details": "Emitted when stable rate borrowing is enabled or disabled on a reserve",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "enabled": "True if stable rate borrowing is enabled, false otherwise"
        }
      },
      "SiloedBorrowingChanged(address,bool,bool)": {
        "details": "Emitted when the the siloed borrowing state for an asset is changed.",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "newState": "The new siloed borrowing state",
          "oldState": "The old siloed borrowing state"
        }
      },
      "StableDebtTokenUpgraded(address,address,address)": {
        "details": "Emitted when the implementation of a stable debt token is upgraded.",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "implementation": "The new aToken implementation",
          "proxy": "The stable debt token proxy address"
        }
      },
      "SupplyCapChanged(address,uint256,uint256)": {
        "details": "Emitted when the supply cap of a reserve is updated.",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "newSupplyCap": "The new supply cap",
          "oldSupplyCap": "The old supply cap"
        }
      },
      "UnbackedMintCapChanged(address,uint256,uint256)": {
        "details": "Emitted when the unbacked mint cap of a reserve is updated.",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "newUnbackedMintCap": "The new unbacked mint cap",
          "oldUnbackedMintCap": "The old unbacked mint cap"
        }
      },
      "VariableDebtTokenUpgraded(address,address,address)": {
        "details": "Emitted when the implementation of a variable debt token is upgraded.",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "implementation": "The new aToken implementation",
          "proxy": "The variable debt token proxy address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "configureReserveAsCollateral(address,uint256,uint256,uint256)": {
        "details": "All the values are expressed in bps. A value of 10000, results in 100.00%The `liquidationBonus` is always above 100%. A value of 105% means the liquidator will receive a 5% bonus",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "liquidationBonus": "The bonus liquidators receive to liquidate this asset",
          "liquidationThreshold": "The threshold at which loans using this asset as collateral will be considered undercollateralized",
          "ltv": "The loan to value of the asset when used as collateral"
        }
      },
      "dropReserve(address)": {
        "params": {
          "asset": "The address of the reserve to drop"
        }
      },
      "initReserves((address,address,address,uint8,address,address,address,address,string,string,string,string,string,string,bytes)[])": {
        "params": {
          "input": "The array of initialization parameters"
        }
      },
      "setAssetEModeCategory(address,uint8)": {
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "newCategoryId": "The new category id of the asset"
        }
      },
      "setBorrowCap(address,uint256)": {
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "newBorrowCap": "The new borrow cap of the reserve"
        }
      },
      "setBorrowableInIsolation(address,bool)": {
        "details": "When this flag is set to true, the asset will be borrowable against isolated collaterals and the borrowed amount will be accumulated in the isolated collateral's total debt exposureOnly assets of the same family (e.g. USD stablecoins) should be borrowable in isolation mode to keep consistency in the debt ceiling calculations",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "borrowable": "True if the asset should be borrowable in isolation, false otherwise"
        }
      },
      "setDebtCeiling(address,uint256)": {
        "params": {
          "newDebtCeiling": "The new debt ceiling"
        }
      },
      "setEModeCategory(uint8,uint16,uint16,uint16,address,string)": {
        "details": "If zero is provided as oracle address, the default asset oracles will be used to compute the overall debt and overcollateralization of the users using this category.The new ltv and liquidation threshold must be greater than the base ltvs and liquidation thresholds of all assets within the eMode category",
        "params": {
          "categoryId": "The id of the category to be configured",
          "label": "A label identifying the category",
          "liquidationBonus": "The liquidation bonus associated with the category",
          "liquidationThreshold": "The liquidation threshold associated with the category",
          "ltv": "The ltv associated with the category",
          "oracle": "The oracle associated with the category"
        }
      },
      "setLiquidationProtocolFee(address,uint256)": {
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "newFee": "The new liquidation protocol fee of the reserve, expressed in bps"
        }
      },
      "setPoolPause(bool)": {
        "params": {
          "paused": "True if protocol needs to be paused, false otherwise"
        }
      },
      "setReserveActive(address,bool)": {
        "params": {
          "active": "True if the reserve needs to be active, false otherwise",
          "asset": "The address of the underlying asset of the reserve"
        }
      },
      "setReserveBorrowing(address,bool)": {
        "details": "Can only be disabled (set to false) if stable borrowing is disabled",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "enabled": "True if borrowing needs to be enabled, false otherwise"
        }
      },
      "setReserveFactor(address,uint256)": {
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "newReserveFactor": "The new reserve factor of the reserve"
        }
      },
      "setReserveFlashLoaning(address,bool)": {
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "enabled": "True if flashloans need to be enabled, false otherwise"
        }
      },
      "setReserveFreeze(address,bool)": {
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "freeze": "True if the reserve needs to be frozen, false otherwise"
        }
      },
      "setReserveInterestRateStrategyAddress(address,address)": {
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "newRateStrategyAddress": "The address of the new interest strategy contract"
        }
      },
      "setReservePause(address,bool)": {
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "paused": "True if pausing the reserve, false if unpausing"
        }
      },
      "setReserveStableRateBorrowing(address,bool)": {
        "details": "Can only be enabled (set to true) if borrowing is enabled",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "enabled": "True if stable rate borrowing needs to be enabled, false otherwise"
        }
      },
      "setSiloedBorrowing(address,bool)": {
        "params": {
          "siloed": "The new siloed borrowing state"
        }
      },
      "setSupplyCap(address,uint256)": {
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "newSupplyCap": "The new supply cap of the reserve"
        }
      },
      "setUnbackedMintCap(address,uint256)": {
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "newUnbackedMintCap": "The new unbacked mint cap of the reserve"
        }
      },
      "updateAToken((address,address,address,string,string,address,bytes))": {
        "details": "Updates the aToken implementation for the reserve.",
        "params": {
          "input": "The aToken update parameters"
        }
      },
      "updateBridgeProtocolFee(uint256)": {
        "params": {
          "newBridgeProtocolFee": "The part of the fee sent to the protocol treasury, expressed in bps"
        }
      },
      "updateFlashloanPremiumToProtocol(uint128)": {
        "details": "Expressed in bpsThe premium to protocol is calculated on the total flashloan premium",
        "params": {
          "newFlashloanPremiumToProtocol": "The part of the flashloan premium sent to the protocol treasury"
        }
      },
      "updateFlashloanPremiumTotal(uint128)": {
        "details": "Expressed in bpsThe premium is calculated on the total amount borrowed",
        "params": {
          "newFlashloanPremiumTotal": "The total flashloan premium"
        }
      },
      "updateStableDebtToken((address,address,string,string,address,bytes))": {
        "params": {
          "input": "The stableDebtToken update parameters"
        }
      },
      "updateVariableDebtToken((address,address,string,string,address,bytes))": {
        "params": {
          "input": "The variableDebtToken update parameters"
        }
      }
    },
    "title": "PoolConfigurator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "configureReserveAsCollateral(address,uint256,uint256,uint256)": {
        "notice": "Configures the reserve collateralization parameters."
      },
      "dropReserve(address)": {
        "notice": "Drops a reserve entirely."
      },
      "initReserves((address,address,address,uint8,address,address,address,address,string,string,string,string,string,string,bytes)[])": {
        "notice": "Initializes multiple reserves."
      },
      "setAssetEModeCategory(address,uint8)": {
        "notice": "Assign an efficiency mode (eMode) category to asset."
      },
      "setBorrowCap(address,uint256)": {
        "notice": "Updates the borrow cap of a reserve."
      },
      "setBorrowableInIsolation(address,bool)": {
        "notice": "Sets the borrowable in isolation flag for the reserve."
      },
      "setDebtCeiling(address,uint256)": {
        "notice": "Sets the debt ceiling for an asset."
      },
      "setEModeCategory(uint8,uint16,uint16,uint16,address,string)": {
        "notice": "Adds a new efficiency mode (eMode) category."
      },
      "setLiquidationProtocolFee(address,uint256)": {
        "notice": "Updates the liquidation protocol fee of reserve."
      },
      "setPoolPause(bool)": {
        "notice": "Pauses or unpauses all the protocol reserves. In the paused state all the protocol interactions are suspended."
      },
      "setReserveActive(address,bool)": {
        "notice": "Activate or deactivate a reserve"
      },
      "setReserveBorrowing(address,bool)": {
        "notice": "Configures borrowing on a reserve."
      },
      "setReserveFactor(address,uint256)": {
        "notice": "Updates the reserve factor of a reserve."
      },
      "setReserveFlashLoaning(address,bool)": {
        "notice": "Enable or disable flashloans on a reserve"
      },
      "setReserveFreeze(address,bool)": {
        "notice": "Freeze or unfreeze a reserve. A frozen reserve doesn't allow any new supply, borrow or rate swap but allows repayments, liquidations, rate rebalances and withdrawals."
      },
      "setReserveInterestRateStrategyAddress(address,address)": {
        "notice": "Sets the interest rate strategy of a reserve."
      },
      "setReservePause(address,bool)": {
        "notice": "Pauses a reserve. A paused reserve does not allow any interaction (supply, borrow, repay, swap interest rate, liquidate, atoken transfers)."
      },
      "setReserveStableRateBorrowing(address,bool)": {
        "notice": "Enable or disable stable rate borrowing on a reserve."
      },
      "setSiloedBorrowing(address,bool)": {
        "notice": "Sets siloed borrowing for an asset"
      },
      "setSupplyCap(address,uint256)": {
        "notice": "Updates the supply cap of a reserve."
      },
      "setUnbackedMintCap(address,uint256)": {
        "notice": "Updates the unbacked mint cap of reserve."
      },
      "updateBridgeProtocolFee(uint256)": {
        "notice": "Updates the bridge fee collected by the protocol reserves."
      },
      "updateFlashloanPremiumToProtocol(uint128)": {
        "notice": "Updates the flash loan premium collected by protocol reserves"
      },
      "updateFlashloanPremiumTotal(uint128)": {
        "notice": "Updates the total flash loan premium. Total flash loan premium consists of two parts: - A part is sent to aToken holders as extra balance - A part is collected by the protocol reserves"
      },
      "updateStableDebtToken((address,address,string,string,address,bytes))": {
        "notice": "Updates the stable debt token implementation for the reserve."
      },
      "updateVariableDebtToken((address,address,string,string,address,bytes))": {
        "notice": "Updates the variable debt token implementation for the asset."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6027,
        "contract": "contracts/lending/core/protocol/pool/PoolConfigurator.sol:PoolConfigurator",
        "label": "lastInitializedRevision",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 6030,
        "contract": "contracts/lending/core/protocol/pool/PoolConfigurator.sol:PoolConfigurator",
        "label": "initializing",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 6100,
        "contract": "contracts/lending/core/protocol/pool/PoolConfigurator.sol:PoolConfigurator",
        "label": "______gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 19421,
        "contract": "contracts/lending/core/protocol/pool/PoolConfigurator.sol:PoolConfigurator",
        "label": "_addressesProvider",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IPoolAddressesProvider)3736"
      },
      {
        "astId": 19424,
        "contract": "contracts/lending/core/protocol/pool/PoolConfigurator.sol:PoolConfigurator",
        "label": "_pool",
        "offset": 0,
        "slot": "53",
        "type": "t_contract(IPool)3527"
      }
    ],
    "types": {
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IPool)3527": {
        "encoding": "inplace",
        "label": "contract IPool",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolAddressesProvider)3736": {
        "encoding": "inplace",
        "label": "contract IPoolAddressesProvider",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}