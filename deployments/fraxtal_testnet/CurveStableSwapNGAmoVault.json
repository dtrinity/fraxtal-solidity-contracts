{
  "address": "0x46d8743D3fF667a11B95BC24BD974A6a8E163599",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dusd",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_amoManager",
          "type": "address"
        },
        {
          "internalType": "contract IPriceOracleGetter",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "contract ICurveRouterNgPoolsOnlyV1",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralWithdrawer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recoverer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_amoTrader",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "CannotRecoverVaultToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "CollateralAlreadyAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "CollateralNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "FailedToAddCollateral",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "FailedToRemoveCollateral",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseCurrencyUnit",
          "type": "uint256"
        }
      ],
      "name": "IncorrectBaseCurrencyUnit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmoManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MustSupportAtLeastOneCollateral",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "NoOracleSupport",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenNotAllowedAsCollateral",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "UnsupportedCollateral",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "CollateralAllowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "CollateralDisallowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "OracleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AMO_TRADER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COLLATERAL_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COLLATERAL_STRATEGY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COLLATERAL_WITHDRAWER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RECOVERER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minMintAmount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "allowCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "allowCollaterals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amoManager",
      "outputs": [
        {
          "internalType": "contract AmoManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approveAmoManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "usdValue",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "assetAmountFromValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "assetValueFromAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "usdValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseCurrencyUnit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "depositFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "disallowCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "disallowCollaterals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dusd",
      "outputs": [
        {
          "internalType": "contract IERC20Stablecoin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dusdDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllLpTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[11]",
          "name": "route",
          "type": "address[11]"
        },
        {
          "internalType": "uint256[4][5]",
          "name": "swapParams",
          "type": "uint256[4][5]"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "getExpectedInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[11]",
          "name": "route",
          "type": "address[11]"
        },
        {
          "internalType": "uint256[4][5]",
          "name": "swapParams",
          "type": "uint256[4][5]"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "getExpectedOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLpTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        }
      ],
      "name": "hasLpToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "isCollateralSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listCollateral",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracleGetter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lpTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "minAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "maxBurnAmount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityImbalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lpTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "i",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityOneCoin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract ICurveRouterNgPoolsOnlyV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAmoManager",
          "type": "address"
        }
      ],
      "name": "setAmoManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newBaseCurrencyUnit",
          "type": "uint256"
        }
      ],
      "name": "setBaseCurrencyUnit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPriceOracleGetter",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[11]",
          "name": "route",
          "type": "address[11]"
        },
        {
          "internalType": "uint256[4][5]",
          "name": "swapParams",
          "type": "uint256[4][5]"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "swapExactIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCollateralValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDusdValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x12355aff885d9358de302c13e02214c1cb83817f67c04fc3decdbaf1be87ec5f",
  "receipt": {
    "to": null,
    "from": "0x53Ae1433Ab4563d7D5a84d27524784837259f105",
    "contractAddress": "0x46d8743D3fF667a11B95BC24BD974A6a8E163599",
    "transactionIndex": 1,
    "gasUsed": "2894710",
    "logsBloom": "0x
    "blockHash": "0x8121409e54ec6c9a7958cf591d21cf4ea8ee48c5634de4ec016d58ac55611a7e",
    "transactionHash": "0x12355aff885d9358de302c13e02214c1cb83817f67c04fc3decdbaf1be87ec5f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 16985528,
        "transactionHash": "0x12355aff885d9358de302c13e02214c1cb83817f67c04fc3decdbaf1be87ec5f",
        "address": "0x46d8743D3fF667a11B95BC24BD974A6a8E163599",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000053ae1433ab4563d7d5a84d27524784837259f105",
          "0x00000000000000000000000053ae1433ab4563d7d5a84d27524784837259f105"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8121409e54ec6c9a7958cf591d21cf4ea8ee48c5634de4ec016d58ac55611a7e"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 16985528,
        "transactionHash": "0x12355aff885d9358de302c13e02214c1cb83817f67c04fc3decdbaf1be87ec5f",
        "address": "0x46d8743D3fF667a11B95BC24BD974A6a8E163599",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x85e8f2d6819d6b24108062d87ea08f54651bcb8960d98062d3faf96e7873b8b9",
          "0x00000000000000000000000053ae1433ab4563d7d5a84d27524784837259f105",
          "0x00000000000000000000000053ae1433ab4563d7d5a84d27524784837259f105"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x8121409e54ec6c9a7958cf591d21cf4ea8ee48c5634de4ec016d58ac55611a7e"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 16985528,
        "transactionHash": "0x12355aff885d9358de302c13e02214c1cb83817f67c04fc3decdbaf1be87ec5f",
        "address": "0x46d8743D3fF667a11B95BC24BD974A6a8E163599",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x1f29e81ed8f7ae439f042f6b6767d105e87c4eef908508d5d9e550aef35af644",
          "0x00000000000000000000000053ae1433ab4563d7d5a84d27524784837259f105",
          "0x00000000000000000000000053ae1433ab4563d7d5a84d27524784837259f105"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x8121409e54ec6c9a7958cf591d21cf4ea8ee48c5634de4ec016d58ac55611a7e"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 16985528,
        "transactionHash": "0x12355aff885d9358de302c13e02214c1cb83817f67c04fc3decdbaf1be87ec5f",
        "address": "0x46d8743D3fF667a11B95BC24BD974A6a8E163599",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x1a52e20da533a06a1f80a73dba6e5d09cb788f108eae685b8ce6644834e67abe",
          "0x00000000000000000000000053ae1433ab4563d7d5a84d27524784837259f105",
          "0x00000000000000000000000053ae1433ab4563d7d5a84d27524784837259f105"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x8121409e54ec6c9a7958cf591d21cf4ea8ee48c5634de4ec016d58ac55611a7e"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 16985528,
        "transactionHash": "0x12355aff885d9358de302c13e02214c1cb83817f67c04fc3decdbaf1be87ec5f",
        "address": "0x46d8743D3fF667a11B95BC24BD974A6a8E163599",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xb3e25b5404b87e5a838579cb5d7481d61ad96ee284d38ec1e97c07ba64e7f6fc",
          "0x00000000000000000000000053ae1433ab4563d7d5a84d27524784837259f105",
          "0x00000000000000000000000053ae1433ab4563d7d5a84d27524784837259f105"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x8121409e54ec6c9a7958cf591d21cf4ea8ee48c5634de4ec016d58ac55611a7e"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 16985528,
        "transactionHash": "0x12355aff885d9358de302c13e02214c1cb83817f67c04fc3decdbaf1be87ec5f",
        "address": "0x4D6E79013212F10A026A1FB0b926C9Fd0432b96c",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000046d8743d3ff667a11b95bc24bd974a6a8e163599",
          "0x000000000000000000000000f2828638927f0e084c588dde5a4856ce35dc5e7e"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 5,
        "blockHash": "0x8121409e54ec6c9a7958cf591d21cf4ea8ee48c5634de4ec016d58ac55611a7e"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 16985528,
        "transactionHash": "0x12355aff885d9358de302c13e02214c1cb83817f67c04fc3decdbaf1be87ec5f",
        "address": "0x46d8743D3fF667a11B95BC24BD974A6a8E163599",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xc9d160ddf8721202a3f3e2bd663b1fdb5675930469632a500038010be1a191dc",
          "0x00000000000000000000000053ae1433ab4563d7d5a84d27524784837259f105",
          "0x00000000000000000000000053ae1433ab4563d7d5a84d27524784837259f105"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x8121409e54ec6c9a7958cf591d21cf4ea8ee48c5634de4ec016d58ac55611a7e"
      }
    ],
    "blockNumber": 16985528,
    "cumulativeGasUsed": "2940676",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4D6E79013212F10A026A1FB0b926C9Fd0432b96c",
    "0xf2828638927F0e084c588Dde5a4856ce35DC5E7e",
    "0xa741BA2830cbF7A3432D96A6e188af0132792Cb9",
    "0xF66c3Ef85BceafaEcE9171E25Eee2972b10e1958",
    "0x53Ae1433Ab4563d7D5a84d27524784837259f105",
    "0x53Ae1433Ab4563d7D5a84d27524784837259f105",
    "0x53Ae1433Ab4563d7D5a84d27524784837259f105",
    "0x53Ae1433Ab4563d7D5a84d27524784837259f105"
  ],
  "numDeployments": 1,
  "solcInputHash": "f1d62b78e1f20504cae5997f17d5723f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dusd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_amoManager\",\"type\":\"address\"},{\"internalType\":\"contract IPriceOracleGetter\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"contract ICurveRouterNgPoolsOnlyV1\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralWithdrawer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recoverer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_amoTrader\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"CannotRecoverVaultToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"CollateralAlreadyAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"CollateralNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"FailedToAddCollateral\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"FailedToRemoveCollateral\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseCurrencyUnit\",\"type\":\"uint256\"}],\"name\":\"IncorrectBaseCurrencyUnit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmoManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustSupportAtLeastOneCollateral\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"NoOracleSupport\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenNotAllowedAsCollateral\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"UnsupportedCollateral\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"CollateralAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"CollateralDisallowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AMO_TRADER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COLLATERAL_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COLLATERAL_STRATEGY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COLLATERAL_WITHDRAWER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECOVERER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minMintAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"allowCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"allowCollaterals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amoManager\",\"outputs\":[{\"internalType\":\"contract AmoManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveAmoManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"assetAmountFromValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"assetValueFromAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseCurrencyUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"depositFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"disallowCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"disallowCollaterals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dusd\",\"outputs\":[{\"internalType\":\"contract IERC20Stablecoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dusdDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllLpTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[11]\",\"name\":\"route\",\"type\":\"address[11]\"},{\"internalType\":\"uint256[4][5]\",\"name\":\"swapParams\",\"type\":\"uint256[4][5]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"getExpectedInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[11]\",\"name\":\"route\",\"type\":\"address[11]\"},{\"internalType\":\"uint256[4][5]\",\"name\":\"swapParams\",\"type\":\"uint256[4][5]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"getExpectedOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"}],\"name\":\"hasLpToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"isCollateralSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listCollateral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracleGetter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmounts\",\"type\":\"uint256[]\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"maxBurnAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityImbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract ICurveRouterNgPoolsOnlyV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAmoManager\",\"type\":\"address\"}],\"name\":\"setAmoManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBaseCurrencyUnit\",\"type\":\"uint256\"}],\"name\":\"setBaseCurrencyUnit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceOracleGetter\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[11]\",\"name\":\"route\",\"type\":\"address[11]\"},{\"internalType\":\"uint256[4][5]\",\"name\":\"swapParams\",\"type\":\"uint256[4][5]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"swapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDusdValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addLiquidity(address,uint256[],uint256)\":{\"details\":\"Adds liquidity to a Curve pool.\",\"params\":{\"amounts\":\"The amounts of tokens to add as liquidity\",\"minMintAmount\":\"The minimum amount of LP tokens to receive\",\"poolAddress\":\"The address of the Curve pool\"},\"returns\":{\"_0\":\"The amount of LP tokens received\"}},\"allowCollateral(address)\":{\"params\":{\"collateralAsset\":\"The address of the collateral asset\"}},\"allowCollaterals(address[])\":{\"details\":\"Helper for allowing multiple collateral tokens.\",\"params\":{\"tokens\":\"An array of token addresses to be added as collateral.\"}},\"approveAmoManager()\":{\"details\":\"Only callable by the contract owner or an account with the DEFAULT_ADMIN_ROLE\"},\"assetAmountFromValue(uint256,address)\":{\"params\":{\"asset\":\"The address of the asset\",\"usdValue\":\"The USD value\"},\"returns\":{\"assetAmount\":\"The amount of the asset\"}},\"assetValueFromAmount(uint256,address)\":{\"params\":{\"asset\":\"The address of the asset\",\"assetAmount\":\"The amount of the asset\"},\"returns\":{\"usdValue\":\"The USD value of the asset\"}},\"constructor\":{\"params\":{\"_admin\":\"Address of the admin\",\"_amoManager\":\"Address of the AMO manager\",\"_amoTrader\":\"Address allowed to perform AMO trading operations\",\"_collateralWithdrawer\":\"Address allowed to withdraw collateral\",\"_dusd\":\"Address of the DUSD token\",\"_oracle\":\"Address of the price oracle\",\"_recoverer\":\"Address allowed to recover tokens\",\"_router\":\"Address of the Curve Router NG\"}},\"deposit(uint256,address)\":{\"params\":{\"collateralAmount\":\"The amount of collateral to deposit\",\"collateralAsset\":\"The address of the collateral asset\"}},\"depositFrom(address,uint256,address)\":{\"params\":{\"collateralAmount\":\"The amount of collateral to deposit\",\"collateralAsset\":\"The address of the collateral asset\",\"depositer\":\"The address providing the collateral\"}},\"disallowCollateral(address)\":{\"details\":\"Requires at least one collateral asset to remain supported\",\"params\":{\"collateralAsset\":\"The address of the collateral asset to disallow\"}},\"disallowCollaterals(address[])\":{\"details\":\"Helper for disallowing multiple collateral tokens.\",\"params\":{\"tokens\":\"An array of token addresses to be removed from collateral.\"}},\"getAllLpTokens()\":{\"returns\":{\"_0\":\"An array of all LP token addresses.\"}},\"getExpectedInput(address[11],uint256[4][5],uint256)\":{\"params\":{\"amountOut\":\"The desired amount of output tokens\",\"route\":\"Array of token addresses representing the swap path\",\"swapParams\":\"Array of swap parameters for each hop\"},\"returns\":{\"_0\":\"uint256 The expected amount of input tokens required\"}},\"getExpectedOutput(address[11],uint256[4][5],uint256)\":{\"params\":{\"amountIn\":\"The amount of input tokens\",\"route\":\"Array of token addresses representing the swap path\",\"swapParams\":\"Array of swap parameters for each hop\"},\"returns\":{\"_0\":\"uint256 The expected amount of output tokens\"}},\"getLpTokenCount()\":{\"returns\":{\"_0\":\"The number of LP tokens.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasLpToken(address)\":{\"params\":{\"lpToken\":\"The LP token address to check.\"},\"returns\":{\"_0\":\"True if the LP token is in the set, false otherwise.\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isCollateralSupported(address)\":{\"params\":{\"collateralAsset\":\"The address of the collateral asset to check\"},\"returns\":{\"_0\":\"bool True if the asset is supported, false otherwise\"}},\"listCollateral()\":{\"returns\":{\"_0\":\"address[] Array of collateral asset addresses\"}},\"recoverERC20(address,address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens to recover\",\"to\":\"The address to send the tokens to\",\"token\":\"The address of the token to recover\"}},\"recoverETH(address,uint256)\":{\"params\":{\"amount\":\"The amount of ETH to recover\",\"to\":\"The address to send the ETH to\"}},\"removeLiquidity(address,uint256,uint256[])\":{\"details\":\"Removes liquidity from a Curve pool.\",\"params\":{\"lpTokenAmount\":\"The amount of LP tokens to burn\",\"minAmounts\":\"The minimum amounts of tokens to receive\",\"poolAddress\":\"The address of the Curve pool\"},\"returns\":{\"_0\":\"The amounts of tokens received\"}},\"removeLiquidityImbalance(address,uint256[],uint256)\":{\"details\":\"Removes liquidity from a Curve pool imbalanced.\",\"params\":{\"amounts\":\"The amounts of tokens to withdraw\",\"maxBurnAmount\":\"The maximum amount of LP tokens to burn\",\"poolAddress\":\"The address of the Curve pool\"},\"returns\":{\"_0\":\"The actual amount of LP tokens burned\"}},\"removeLiquidityOneCoin(address,uint256,int128,uint256)\":{\"details\":\"Removes liquidity from a Curve pool in a single coin.\",\"params\":{\"i\":\"The index of the coin to receive\",\"lpTokenAmount\":\"The amount of LP tokens to burn\",\"minAmount\":\"The minimum amount of tokens to receive\",\"poolAddress\":\"The address of the Curve pool\"},\"returns\":{\"_0\":\"The amount of tokens received\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setAmoManager(address)\":{\"details\":\"Only callable by an account with the DEFAULT_ADMIN_ROLE\",\"params\":{\"_newAmoManager\":\"The address of the new AmoManager\"}},\"setBaseCurrencyUnit(uint256)\":{\"details\":\"Only used if the oracle's base currency unit changes\",\"params\":{\"_newBaseCurrencyUnit\":\"The new base currency unit to set\"}},\"setOracle(address)\":{\"params\":{\"newOracle\":\"The new oracle to use\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"swapExactIn(address[11],uint256[4][5],uint256,uint256)\":{\"params\":{\"amountIn\":\"The exact amount of input tokens to swap\",\"minAmountOut\":\"The minimum amount of output tokens to receive\",\"route\":\"Array of token addresses representing the swap path\",\"swapParams\":\"Array of swap parameters for each hop\"},\"returns\":{\"_0\":\"uint256 The amount of output tokens received\"}},\"totalCollateralValue()\":{\"details\":\"Calculates the total collateral value of the vault.\",\"returns\":{\"_0\":\"The total collateral value in BASE_CURRENCY_UNIT.\"}},\"totalDusdValue()\":{\"returns\":{\"_0\":\"The total value of dUSD in the vault, denominated in the base value (e.g., USD)\"}},\"totalValue()\":{\"returns\":{\"_0\":\"The total value of the vault, denominated in the base value (e.g., USD)\"}},\"withdraw(uint256,address)\":{\"params\":{\"collateralAmount\":\"The amount of collateral to withdraw\",\"collateralAsset\":\"The address of the collateral asset\"}},\"withdrawTo(address,uint256,address)\":{\"params\":{\"collateralAmount\":\"The amount of collateral to withdraw\",\"collateralAsset\":\"The address of the collateral asset\",\"recipient\":\"The address receiving the collateral\"}}},\"title\":\"CurveStableSwapNGAmoVault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowCollateral(address)\":{\"notice\":\"Allows a new collateral asset\"},\"approveAmoManager()\":{\"notice\":\"Approves the AmoManager to spend dUSD on behalf of this contract\"},\"assetAmountFromValue(uint256,address)\":{\"notice\":\"Calculates the amount of an asset that corresponds to a given USD value\"},\"assetValueFromAmount(uint256,address)\":{\"notice\":\"Calculates the USD value of a given amount of an asset\"},\"constructor\":{\"notice\":\"Initializes the CurveStableSwapNGAmoVault\"},\"deposit(uint256,address)\":{\"notice\":\"Deposit collateral into the vault\"},\"depositFrom(address,uint256,address)\":{\"notice\":\"Deposit collateral into the vault from a specific address\"},\"disallowCollateral(address)\":{\"notice\":\"Disallows a previously supported collateral asset\"},\"getAllLpTokens()\":{\"notice\":\"Returns a list of all LP token addresses.\"},\"getExpectedInput(address[11],uint256[4][5],uint256)\":{\"notice\":\"Gets the expected input amount for a desired output amount\"},\"getExpectedOutput(address[11],uint256[4][5],uint256)\":{\"notice\":\"Gets the expected output amount for a swap with exact input\"},\"getLpTokenCount()\":{\"notice\":\"Returns the number of LP token positions.\"},\"hasLpToken(address)\":{\"notice\":\"Checks if the given LP token is in the set.\"},\"isCollateralSupported(address)\":{\"notice\":\"Checks if a given asset is supported as collateral\"},\"listCollateral()\":{\"notice\":\"Returns a list of all supported collateral assets\"},\"recoverERC20(address,address,uint256)\":{\"notice\":\"Recovers ERC20 tokens accidentally sent to the contract\"},\"recoverETH(address,uint256)\":{\"notice\":\"Recovers ETH accidentally sent to the contract\"},\"setAmoManager(address)\":{\"notice\":\"Sets a new AmoManager address\"},\"setBaseCurrencyUnit(uint256)\":{\"notice\":\"Updates the base currency unit used for price calculations\"},\"setOracle(address)\":{\"notice\":\"Sets the oracle to use for collateral valuation\"},\"swapExactIn(address[11],uint256[4][5],uint256,uint256)\":{\"notice\":\"Executes a swap with exact input amount on Curve\"},\"totalDusdValue()\":{\"notice\":\"Calculates the total value of dUSD in the vault\"},\"totalValue()\":{\"notice\":\"Calculates the total value of the vault\"},\"withdraw(uint256,address)\":{\"notice\":\"Withdraws collateral from the vault\"},\"withdrawTo(address,uint256,address)\":{\"notice\":\"Withdraws collateral from the vault to a specific address\"}},\"notice\":\"Implementation of AmoVault for Curve StableSwap NG pools\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dusd/CurveStableSwapNGAmoVault.sol\":\"CurveStableSwapNGAmoVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-5/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {EnumerableSet} from \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code repetition as possible, we write it in\\n    // terms of a generic Map type with bytes32 keys and values. The Map implementation uses private functions,\\n    // and user-facing implementations such as `UintToAddressMap` are just wrappers around the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit in bytes32.\\n\\n    /**\\n     * @dev Query for a nonexistent map key.\\n     */\\n    error EnumerableMapNonexistentKey(bytes32 key);\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 key => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == 0 && !contains(map, key)) {\\n            revert EnumerableMapNonexistentKey(key);\\n        }\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\\n        return map._keys.values();\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa3edd94148e931d8a37353624ea57afa1c679b6fe06b7059ccdc8da78a90c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/curve/interfaces/ICurveRouterNgPoolsOnlyV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface for Curve.Fi RouterNG contract (pools-only version 1).\\n * @dev Generated from original ABI: https://fraxscan.com/address/0x9f2Fa7709B30c75047980a0d70A106728f0Ef2db#code\\n */\\n\\ninterface ICurveRouterNgPoolsOnlyV1 {\\n    event Exchange(\\n        address indexed sender,\\n        address indexed receiver,\\n        address[11] route,\\n        uint256[4][5] swap_params,\\n        uint256 in_amount,\\n        uint256 out_amount\\n    );\\n\\n    function exchange(\\n        address[11] calldata _route,\\n        uint256[4][5] calldata _swap_params,\\n        uint256 _amount,\\n        uint256 _min_dy\\n    ) external payable returns (uint256);\\n\\n    function exchange(\\n        address[11] calldata _route,\\n        uint256[4][5] calldata _swap_params,\\n        uint256 _amount,\\n        uint256 _min_dy,\\n        address _receiver\\n    ) external payable returns (uint256);\\n\\n    function get_dy(\\n        address[11] calldata _route,\\n        uint256[4][5] calldata _swap_params,\\n        uint256 _amount\\n    ) external view returns (uint256);\\n\\n    function get_dx(\\n        address[11] calldata _route,\\n        uint256[4][5] calldata _swap_params,\\n        uint256 _out_amount\\n    ) external view returns (uint256);\\n\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x1856b6ab2e9e5446f4f3052a776625ca39569a9844f4c5936f539dab3036cb1f\",\"license\":\"MIT\"},\"contracts/curve/interfaces/IStableSwapNG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface for Curve.Fi StableSwapNG contract.\\n * @dev Generated October 2024 based https://etherscan.io/address/0x02950460e2b9529d0e00284a5fa2d7bdf3fa4d72#code\\n */\\n\\ninterface ICurveStableSwapNG {\\n    // Events\\n    event Transfer(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint256 value\\n    );\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event TokenExchange(\\n        address indexed buyer,\\n        int128 sold_id,\\n        uint256 tokens_sold,\\n        int128 bought_id,\\n        uint256 tokens_bought\\n    );\\n    event TokenExchangeUnderlying(\\n        address indexed buyer,\\n        int128 sold_id,\\n        uint256 tokens_sold,\\n        int128 bought_id,\\n        uint256 tokens_bought\\n    );\\n    event AddLiquidity(\\n        address indexed provider,\\n        uint256[] token_amounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n    event RemoveLiquidity(\\n        address indexed provider,\\n        uint256[] token_amounts,\\n        uint256[] fees,\\n        uint256 token_supply\\n    );\\n    event RemoveLiquidityOne(\\n        address indexed provider,\\n        int128 token_id,\\n        uint256 token_amount,\\n        uint256 coin_amount,\\n        uint256 token_supply\\n    );\\n    event RemoveLiquidityImbalance(\\n        address indexed provider,\\n        uint256[] token_amounts,\\n        uint256[] fees,\\n        uint256 invariant,\\n        uint256 token_supply\\n    );\\n    event RampA(\\n        uint256 old_A,\\n        uint256 new_A,\\n        uint256 initial_time,\\n        uint256 future_time\\n    );\\n    event StopRampA(uint256 A, uint256 t);\\n    event ApplyNewFee(uint256 fee, uint256 offpeg_fee_multiplier);\\n\\n    // State Variables\\n    function coins(uint256 i) external view returns (address);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function fee() external view returns (uint256);\\n\\n    function offpeg_fee_multiplier() external view returns (uint256);\\n\\n    function admin_fee() external view returns (uint256);\\n\\n    function initial_A() external view returns (uint256);\\n\\n    function future_A() external view returns (uint256);\\n\\n    function initial_A_time() external view returns (uint256);\\n\\n    function future_A_time() external view returns (uint256);\\n\\n    function admin_balances(uint256 i) external view returns (uint256);\\n\\n    function ma_exp_time() external view returns (uint256);\\n\\n    function D_ma_time() external view returns (uint256);\\n\\n    function ma_last_time() external view returns (uint256);\\n\\n    // Public functions\\n    function A() external view returns (uint256);\\n\\n    function A_precise() external view returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function calc_token_amount(\\n        uint256[] calldata amounts,\\n        bool is_deposit\\n    ) external view returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[] calldata amounts,\\n        uint256 min_mint_amount,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_dx(\\n        int128 i,\\n        int128 j,\\n        uint256 dy\\n    ) external view returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function exchange_received(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function exchange_received(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function remove_liquidity(\\n        uint256 amount,\\n        uint256[] calldata min_amounts\\n    ) external returns (uint256[] memory);\\n\\n    function remove_liquidity(\\n        uint256 amount,\\n        uint256[] calldata min_amounts,\\n        address receiver\\n    ) external returns (uint256[] memory);\\n\\n    function remove_liquidity(\\n        uint256 amount,\\n        uint256[] calldata min_amounts,\\n        address receiver,\\n        bool claim_admin_fees\\n    ) external returns (uint256[] memory);\\n\\n    function remove_liquidity_imbalance(\\n        uint256[] calldata amounts,\\n        uint256 max_burn_amount\\n    ) external returns (uint256);\\n\\n    function remove_liquidity_imbalance(\\n        uint256[] calldata amounts,\\n        uint256 max_burn_amount,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function calc_withdraw_one_coin(\\n        uint256 token_amount,\\n        int128 i\\n    ) external view returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 token_amount,\\n        int128 i,\\n        uint256 min_amount,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    // Admin functions\\n    function ramp_A(uint256 future_A, uint256 future_time) external;\\n\\n    function stop_ramp_A() external;\\n\\n    function set_new_fee(\\n        uint256 new_fee,\\n        uint256 new_offpeg_fee_multiplier\\n    ) external;\\n\\n    function set_ma_exp_time(uint256 _ma_exp_time, uint256 _D_ma_time) external;\\n\\n    function withdraw_admin_fees() external;\\n\\n    // Additional view functions\\n    function get_balances() external view returns (uint256[] memory);\\n\\n    function last_price(uint256 i) external view returns (uint256);\\n\\n    function ema_price(uint256 i) external view returns (uint256);\\n\\n    function get_p(uint256 i) external view returns (uint256);\\n\\n    function price_oracle(uint256 i) external view returns (uint256);\\n\\n    function D_oracle() external view returns (uint256);\\n\\n    function dynamic_fee(int128 i, int128 j) external view returns (uint256);\\n\\n    function stored_rates() external view returns (uint256[] memory);\\n\\n    // ERC20 functions\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (bool);\\n\\n    // Additional view functions\\n    function N_COINS() external view returns (uint256);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function version() external view returns (string memory);\\n\\n    function salt() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb476b7bad9eca6ebf7c743b94b689c9329c0f0b8849d671c8738498597f122ca\",\"license\":\"MIT\"},\"contracts/dusd/AmoManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-5/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/utils/structs/EnumerableMap.sol\\\";\\nimport \\\"contracts/shared/Constants.sol\\\";\\nimport \\\"contracts/token/IERC20Stablecoin.sol\\\";\\nimport \\\"contracts/dusd/AmoVault.sol\\\";\\n\\n/**\\n * @title AmoManager\\n * @dev Manages AMOs for dUSD\\n * Handles allocation, deallocation, collateral management, and profit management for AMO vaults.\\n */\\ncontract AmoManager is AccessControl, OracleAware {\\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\\n\\n    /* Core state */\\n\\n    EnumerableMap.AddressToUintMap private _amoVaults;\\n    uint256 public totalAllocated;\\n    IERC20Stablecoin public dusd;\\n    CollateralVault public collateralHolderVault;\\n\\n    uint256 public immutable USD_UNIT;\\n\\n    /* Events */\\n\\n    event AmoVaultSet(address indexed amoVault, bool isActive);\\n    event AmoAllocated(address indexed amoVault, uint256 dusdAmount);\\n    event AmoDeallocated(address indexed amoVault, uint256 dusdAmount);\\n    event ProfitsWithdrawn(address indexed amoVault, uint256 amount);\\n\\n    /* Roles */\\n\\n    bytes32 public constant AMO_ALLOCATOR_ROLE =\\n        keccak256(\\\"AMO_ALLOCATOR_ROLE\\\");\\n    bytes32 public constant FEE_COLLECTOR_ROLE =\\n        keccak256(\\\"FEE_COLLECTOR_ROLE\\\");\\n\\n    /* Errors */\\n\\n    error InactiveAmoVault(address amoVault);\\n    error AmoSupplyInvariantViolation(\\n        uint256 startingSupply,\\n        uint256 endingSupply\\n    );\\n    error AmoVaultAlreadyEnabled(address amoVault);\\n    error CannotTransferDUSD();\\n    error InsufficientProfits(\\n        uint256 takeProfitValueInUsd,\\n        int256 availableProfitInUsd\\n    );\\n\\n    /**\\n     * @notice Initializes the AmoManager contract.\\n     * @param _dusd The address of the dUSD stablecoin.\\n     * @param _collateralHolderVault The address of the collateral holder vault.\\n     * @param _oracle The oracle for price feeds.\\n     */\\n    constructor(\\n        address _dusd,\\n        address _collateralHolderVault,\\n        IPriceOracleGetter _oracle\\n    ) OracleAware(_oracle, Constants.ORACLE_BASE_CURRENCY_UNIT) {\\n        dusd = IERC20Stablecoin(_dusd);\\n        collateralHolderVault = CollateralVault(_collateralHolderVault);\\n\\n        USD_UNIT = oracle.BASE_CURRENCY_UNIT();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        grantRole(AMO_ALLOCATOR_ROLE, msg.sender);\\n        grantRole(FEE_COLLECTOR_ROLE, msg.sender);\\n    }\\n\\n    /* AMO */\\n\\n    /**\\n     * @notice Allocates AMO tokens to an AMO vault.\\n     * @param amoVault The address of the AMO vault.\\n     * @param dusdAmount The amount of dUSD to allocate.\\n     */\\n    function allocateAmo(\\n        address amoVault,\\n        uint256 dusdAmount\\n    ) public onlyRole(AMO_ALLOCATOR_ROLE) {\\n        uint256 startingAmoSupply = totalAmoSupply();\\n\\n        // Make sure the vault is active\\n        if (!isAmoActive(amoVault)) {\\n            revert InactiveAmoVault(amoVault);\\n        }\\n\\n        // Update the allocation for this vault\\n        (, uint256 currentAllocation) = _amoVaults.tryGet(amoVault);\\n        _amoVaults.set(amoVault, currentAllocation + dusdAmount);\\n\\n        // Make the deposit\\n        totalAllocated += dusdAmount;\\n        dusd.transfer(amoVault, dusdAmount);\\n\\n        // Check invariants\\n        uint256 endingAmoSupply = totalAmoSupply();\\n        if (endingAmoSupply != startingAmoSupply) {\\n            revert AmoSupplyInvariantViolation(\\n                startingAmoSupply,\\n                endingAmoSupply\\n            );\\n        }\\n\\n        emit AmoAllocated(amoVault, dusdAmount);\\n    }\\n\\n    /**\\n     * @notice Deallocates AMO tokens from an AMO vault.\\n     * @param amoVault The address of the AMO vault.\\n     * @param dusdAmount The amount of dUSD to deallocate.\\n     */\\n    function deallocateAmo(\\n        address amoVault,\\n        uint256 dusdAmount\\n    ) public onlyRole(AMO_ALLOCATOR_ROLE) {\\n        uint256 startingAmoSupply = totalAmoSupply();\\n\\n        // We don't require that the vault is active or has allocation, since we want to allow withdrawing from inactive vaults\\n\\n        // If the vault is still active, make sure it has enough allocation and decrease it\\n        (, uint256 currentAllocation) = _amoVaults.tryGet(amoVault);\\n        if (currentAllocation > 0) {\\n            // Update the allocation for this vault\\n            _amoVaults.set(amoVault, currentAllocation - dusdAmount);\\n        }\\n\\n        // Make the withdrawal\\n        totalAllocated -= dusdAmount;\\n        dusd.transferFrom(amoVault, address(this), dusdAmount);\\n\\n        // Check invariants\\n        uint256 endingAmoSupply = totalAmoSupply();\\n        if (endingAmoSupply != startingAmoSupply) {\\n            revert AmoSupplyInvariantViolation(\\n                startingAmoSupply,\\n                endingAmoSupply\\n            );\\n        }\\n\\n        emit AmoDeallocated(amoVault, dusdAmount);\\n    }\\n\\n    /**\\n     * @notice Returns the total AMO supply.\\n     * @return The total AMO supply.\\n     */\\n    function totalAmoSupply() public view returns (uint256) {\\n        uint256 freeBalance = dusd.balanceOf(address(this));\\n        return freeBalance + totalAllocated;\\n    }\\n\\n    /**\\n     * @notice Decreases the AMO supply by burning dUSD.\\n     * @param dusdAmount The amount of dUSD to burn.\\n     */\\n    function decreaseAmoSupply(\\n        uint256 dusdAmount\\n    ) public onlyRole(AMO_ALLOCATOR_ROLE) {\\n        dusd.burn(dusdAmount);\\n    }\\n\\n    /**\\n     * @notice Checks if an AMO vault is active.\\n     * @param amoVault The address of the AMO vault to check.\\n     * @return True if the AMO vault is active, false otherwise.\\n     */\\n    function isAmoActive(address amoVault) public view returns (bool) {\\n        return _amoVaults.contains(amoVault);\\n    }\\n\\n    /**\\n     * @notice Returns the allocation for a specific AMO vault.\\n     * @param amoVault The address of the AMO vault.\\n     * @return The current allocation for the vault.\\n     */\\n    function amoVaultAllocation(\\n        address amoVault\\n    ) public view returns (uint256) {\\n        (bool exists, uint256 allocation) = _amoVaults.tryGet(amoVault);\\n        return exists ? allocation : 0;\\n    }\\n\\n    /**\\n     * @notice Returns the list of all AMO vaults.\\n     * @return The list of AMO vault addresses.\\n     */\\n    function amoVaults() public view returns (address[] memory) {\\n        return _amoVaults.keys();\\n    }\\n\\n    /**\\n     * @notice Enables an AMO vault.\\n     * @param amoVault The address of the AMO vault.\\n     */\\n    function enableAmoVault(\\n        address amoVault\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_amoVaults.contains(amoVault)) {\\n            revert AmoVaultAlreadyEnabled(amoVault);\\n        }\\n        _amoVaults.set(amoVault, 0);\\n        emit AmoVaultSet(amoVault, true);\\n    }\\n\\n    /**\\n     * @notice Disables an AMO vault.\\n     * @param amoVault The address of the AMO vault.\\n     */\\n    function disableAmoVault(\\n        address amoVault\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!_amoVaults.contains(amoVault)) {\\n            revert InactiveAmoVault(amoVault);\\n        }\\n        _amoVaults.remove(amoVault);\\n        emit AmoVaultSet(amoVault, false);\\n    }\\n\\n    /* Collateral Management */\\n\\n    /**\\n     * @notice Returns the total collateral value of all active AMO vaults.\\n     * @return The total collateral value in USD.\\n     */\\n    function totalCollateralValue() public view returns (uint256) {\\n        uint256 totalUsdValue = 0;\\n        for (uint256 i = 0; i < _amoVaults.length(); i++) {\\n            (address vaultAddress, ) = _amoVaults.at(i);\\n            if (isAmoActive(vaultAddress)) {\\n                totalUsdValue += AmoVault(vaultAddress).totalCollateralValue();\\n            }\\n        }\\n        return totalUsdValue;\\n    }\\n\\n    /**\\n     * @notice Transfers collateral from an AMO vault to the holding vault.\\n     * @param amoVault The address of the AMO vault.\\n     * @param token The address of the collateral token to transfer.\\n     * @param amount The amount of collateral to transfer.\\n     */\\n    function transferFromAmoVaultToHoldingVault(\\n        address amoVault,\\n        address token,\\n        uint256 amount\\n    ) public onlyRole(AMO_ALLOCATOR_ROLE) {\\n        if (token == address(dusd)) {\\n            revert CannotTransferDUSD();\\n        }\\n\\n        // Update allocation\\n        // A note on why we modify AMO allocation when we withdraw collateral:\\n        // 1. When dUSD AMO enters the AMO vault, the dUSD is initially unbacked\\n        // 2. Over time the AMO vault accrues collateral in exchange for distributing dUSD\\n        // 3. We may be able to make better use of that collateral in a different collateral vault\\n        // 4. So we transfer the collateral out of the AMO vault, but at that point the dUSD that\\n        //    converted to that collateral is now free-floating and fully backed\\n        // 5. Thus we decrement the AMO allocation to reflect the fact that the dUSD is no longer\\n        //    unbacked, but is actually fully backed and circulating\\n        uint256 collateralUsdValue = collateralHolderVault.assetValueFromAmount(\\n            amount,\\n            token\\n        );\\n        uint256 collateralInDusd = usdValueToDusdAmount(collateralUsdValue);\\n        (, uint256 currentAllocation) = _amoVaults.tryGet(amoVault);\\n        _amoVaults.set(amoVault, currentAllocation - collateralInDusd);\\n        totalAllocated -= collateralInDusd;\\n\\n        // Transfer the collateral\\n        AmoVault(amoVault).withdrawTo(\\n            address(collateralHolderVault),\\n            amount,\\n            token\\n        );\\n    }\\n\\n    /**\\n     * @notice Transfers collateral from the holding vault to an AMO vault.\\n     * @param amoVault The address of the AMO vault.\\n     * @param token The address of the collateral token to transfer.\\n     * @param amount The amount of collateral to transfer.\\n     */\\n    function transferFromHoldingVaultToAmoVault(\\n        address amoVault,\\n        address token,\\n        uint256 amount\\n    ) public onlyRole(AMO_ALLOCATOR_ROLE) {\\n        if (token == address(dusd)) {\\n            revert CannotTransferDUSD();\\n        }\\n        if (!_amoVaults.contains(amoVault)) {\\n            revert InactiveAmoVault(amoVault);\\n        }\\n\\n        // Update allocation\\n        // A note on why we modify AMO allocation when we deposit collateral:\\n        // 1. When we deposit collateral, it can be used to buy back dUSD\\n        // 2. When we buy back dUSD, the dUSD is now unbacked (a redemption)\\n        // 3. Thus any collateral deposited to an AMO vault can create unbacked dUSD,\\n        //    which means the AMO allocation for that vault must be increased to reflect this\\n        uint256 collateralUsdValue = collateralHolderVault.assetValueFromAmount(\\n            amount,\\n            token\\n        );\\n        uint256 collateralInDusd = usdValueToDusdAmount(collateralUsdValue);\\n        (, uint256 currentAllocation) = _amoVaults.tryGet(amoVault);\\n        _amoVaults.set(amoVault, currentAllocation + collateralInDusd);\\n        totalAllocated += collateralInDusd;\\n\\n        // Transfer the collateral\\n        collateralHolderVault.withdrawTo(amoVault, amount, token);\\n    }\\n\\n    /* Profit Management */\\n\\n    /**\\n     * @notice Returns the available profit for a specific vault in USD.\\n     * @param vaultAddress The address of the AMO vault to check.\\n     * @return The available profit in USD (can be negative).\\n     */\\n    function availableVaultProfitsInUsd(\\n        address vaultAddress\\n    ) public view returns (int256) {\\n        uint256 totalVaultValueInUsd = AmoVault(vaultAddress).totalValue();\\n        uint256 allocatedDusd = amoVaultAllocation(vaultAddress);\\n        uint256 allocatedValueInUsd = dusdAmountToUsdValue(allocatedDusd);\\n\\n        return int256(totalVaultValueInUsd) - int256(allocatedValueInUsd);\\n    }\\n\\n    /**\\n     * @notice Withdraws profits from an AMO vault to a recipient.\\n     * @param amoVault The AMO vault from which to withdraw profits.\\n     * @param recipient The address to receive the profits.\\n     * @param takeProfitToken The collateral token to withdraw.\\n     * @param takeProfitAmount The amount of collateral to withdraw.\\n     * @return takeProfitValueInUsd The value of the withdrawn profits in USD.\\n     */\\n    function withdrawProfits(\\n        AmoVault amoVault,\\n        address recipient,\\n        address takeProfitToken,\\n        uint256 takeProfitAmount\\n    )\\n        public\\n        onlyRole(FEE_COLLECTOR_ROLE)\\n        returns (uint256 takeProfitValueInUsd)\\n    {\\n        // Leave open the possibility of withdrawing profits from inactive vaults\\n\\n        takeProfitValueInUsd = amoVault.assetValueFromAmount(\\n            takeProfitAmount,\\n            takeProfitToken\\n        );\\n\\n        int256 _availableProfitInUsd = availableVaultProfitsInUsd(\\n            address(amoVault)\\n        );\\n\\n        // Make sure we are withdrawing less than the available profit\\n        if (\\n            _availableProfitInUsd <= 0 ||\\n            int256(takeProfitValueInUsd) > _availableProfitInUsd\\n        ) {\\n            revert InsufficientProfits(\\n                takeProfitValueInUsd,\\n                _availableProfitInUsd\\n            );\\n        }\\n\\n        // Withdraw profits from the vault\\n        amoVault.withdrawTo(recipient, takeProfitAmount, takeProfitToken);\\n\\n        emit ProfitsWithdrawn(address(amoVault), takeProfitValueInUsd);\\n\\n        return takeProfitValueInUsd;\\n    }\\n\\n    /**\\n     * @notice Returns the total available profit across all AMO vaults in USD.\\n     * @return The total available profit in USD.\\n     */\\n    function availableProfitInUsd() public view returns (int256) {\\n        int256 totalProfit = 0;\\n\\n        // Iterate through all AMO vaults\\n        for (uint256 i = 0; i < _amoVaults.length(); i++) {\\n            (address vaultAddress, ) = _amoVaults.at(i);\\n\\n            if (isAmoActive(vaultAddress)) {\\n                totalProfit += availableVaultProfitsInUsd(vaultAddress);\\n            }\\n        }\\n\\n        return totalProfit;\\n    }\\n\\n    /* Utility */\\n\\n    /**\\n     * @notice Converts a USD value to an equivalent amount of dUSD tokens.\\n     * @param usdValue The amount of USD value to convert.\\n     * @return The equivalent amount of dUSD tokens.\\n     */\\n    function usdValueToDusdAmount(\\n        uint256 usdValue\\n    ) public view returns (uint256) {\\n        uint8 dusdDecimals = dusd.decimals();\\n        return (usdValue * (10 ** dusdDecimals)) / USD_UNIT;\\n    }\\n\\n    /**\\n     * @notice Converts an amount of dUSD tokens to an equivalent USD value.\\n     * @param dusdAmount The amount of dUSD tokens to convert.\\n     * @return The equivalent amount of USD value.\\n     */\\n    function dusdAmountToUsdValue(\\n        uint256 dusdAmount\\n    ) public view returns (uint256) {\\n        uint8 dusdDecimals = dusd.decimals();\\n        return\\n            (dusdAmount * oracle.getAssetPrice(address(dusd))) /\\n            (10 ** dusdDecimals);\\n    }\\n}\\n\\n/**\\n * @title ICollateralSum\\n * @dev Interface for contracts that can provide total collateral value.\\n */\\ninterface ICollateralSum {\\n    /**\\n     * @notice Returns the total collateral value of the implementing contract.\\n     * @return The total collateral value in base value (e.g., USD).\\n     */\\n    function totalCollateralValue() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2e85572b13d4ed474fbefbb7a562006dd2dc0ee5dddcafa79f29fec53df93bac\",\"license\":\"MIT\"},\"contracts/dusd/AmoVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-5/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/token/ERC20/IERC20.sol\\\";\\nimport \\\"contracts/token/IERC20Stablecoin.sol\\\";\\nimport \\\"contracts/dusd/AmoManager.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/utils/ReentrancyGuard.sol\\\";\\nimport \\\"contracts/dusd/CollateralVault.sol\\\";\\n\\ninterface IRecoverable {\\n    function recoverERC20(address token, address to, uint256 amount) external;\\n\\n    function recoverETH(address to, uint256 amount) external;\\n}\\n\\n/**\\n * @title AmoVault\\n * @notice Base contract for AMO (Algorithmic Market Operations) vaults that manage dUSD and collateral assets\\n */\\nabstract contract AmoVault is CollateralVault, IRecoverable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /* Core state */\\n\\n    IERC20Stablecoin public immutable dusd;\\n    uint8 public immutable dusdDecimals;\\n    AmoManager public amoManager;\\n\\n    /* Roles */\\n\\n    bytes32 public constant RECOVERER_ROLE = keccak256(\\\"RECOVERER_ROLE\\\");\\n\\n    /* Errors */\\n\\n    error CannotRecoverVaultToken(address token);\\n    error InvalidAmoManager();\\n\\n    constructor(\\n        address _dusd,\\n        address _amoManager,\\n        address _admin,\\n        address _collateralWithdrawer,\\n        address _recoverer,\\n        IPriceOracleGetter _oracle\\n    ) CollateralVault(_oracle) {\\n        dusd = IERC20Stablecoin(_dusd);\\n        dusdDecimals = IERC20Metadata(_dusd).decimals();\\n        amoManager = AmoManager(_amoManager);\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        grantRole(COLLATERAL_WITHDRAWER_ROLE, _collateralWithdrawer);\\n        grantRole(RECOVERER_ROLE, _recoverer);\\n        approveAmoManager();\\n    }\\n\\n    /**\\n     * @notice Approves the AmoManager to spend dUSD on behalf of this contract\\n     * @dev Only callable by the contract owner or an account with the DEFAULT_ADMIN_ROLE\\n     */\\n    function approveAmoManager() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        dusd.approve(address(amoManager), type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Sets a new AmoManager address\\n     * @param _newAmoManager The address of the new AmoManager\\n     * @dev Only callable by an account with the DEFAULT_ADMIN_ROLE\\n     */\\n    function setAmoManager(\\n        address _newAmoManager\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_newAmoManager == address(0)) revert InvalidAmoManager();\\n\\n        // Reset allowance for old AMO manager\\n        dusd.approve(address(amoManager), 0);\\n\\n        // Set new AMO manager\\n        amoManager = AmoManager(_newAmoManager);\\n\\n        // Approve new AMO manager\\n        approveAmoManager();\\n    }\\n\\n    /* Recovery */\\n\\n    /**\\n     * @notice Recovers ERC20 tokens accidentally sent to the contract\\n     * @param token The address of the token to recover\\n     * @param to The address to send the tokens to\\n     * @param amount The amount of tokens to recover\\n     */\\n    function recoverERC20(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external onlyRole(RECOVERER_ROLE) nonReentrant {\\n        if (token == address(dusd) || isCollateralSupported(token)) {\\n            revert CannotRecoverVaultToken(token);\\n        }\\n        IERC20(token).safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @notice Recovers ETH accidentally sent to the contract\\n     * @param to The address to send the ETH to\\n     * @param amount The amount of ETH to recover\\n     */\\n    function recoverETH(\\n        address to,\\n        uint256 amount\\n    ) external onlyRole(RECOVERER_ROLE) {\\n        payable(to).sendValue(amount);\\n    }\\n\\n    /* Virtual functions */\\n\\n    /**\\n     * @notice Calculates the total value of non-dUSD collateral assets in the vault\\n     * @return The total value of collateral assets denominated in the base currency (e.g., USD)\\n     * @dev Must be implemented by derived contracts\\n     */\\n    function totalCollateralValue() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Calculates the total value of dUSD holdings in the vault\\n     * @return The total value of dUSD holdings denominated in the base currency (e.g., USD)\\n     * @dev Must be implemented by derived contracts\\n     */\\n    function totalDusdValue() public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x4278f476895ac426a8c1db61c1e52cb8f1426c0b4936da45285ca3981f29815a\",\"license\":\"MIT\"},\"contracts/dusd/CollateralVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-5/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"contracts/shared/Constants.sol\\\";\\nimport \\\"contracts/lending/core/interfaces/IPriceOracleGetter.sol\\\";\\nimport \\\"contracts/dusd/OracleAware.sol\\\";\\n\\n/**\\n * @title CollateralVault\\n * @notice Abstract contract for any contract that manages collateral assets\\n\\\\ */\\nabstract contract CollateralVault is AccessControl, OracleAware {\\n    using SafeERC20 for IERC20Metadata;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /* Core state */\\n\\n    EnumerableSet.AddressSet internal _supportedCollaterals;\\n\\n    /* Events */\\n\\n    event CollateralAllowed(address indexed collateralAsset);\\n    event CollateralDisallowed(address indexed collateralAsset);\\n\\n    /* Roles */\\n\\n    bytes32 public constant COLLATERAL_MANAGER_ROLE =\\n        keccak256(\\\"COLLATERAL_MANAGER_ROLE\\\");\\n    bytes32 public constant COLLATERAL_STRATEGY_ROLE =\\n        keccak256(\\\"COLLATERAL_STRATEGY_ROLE\\\");\\n    bytes32 public constant COLLATERAL_WITHDRAWER_ROLE =\\n        keccak256(\\\"COLLATERAL_WITHDRAWER_ROLE\\\");\\n\\n    /* Errors */\\n    error UnsupportedCollateral(address collateralAsset);\\n    error CollateralAlreadyAllowed(address collateralAsset);\\n    error NoOracleSupport(address collateralAsset);\\n    error FailedToAddCollateral(address collateralAsset);\\n    error CollateralNotSupported(address collateralAsset);\\n    error MustSupportAtLeastOneCollateral();\\n    error FailedToRemoveCollateral(address collateralAsset);\\n\\n    /**\\n     * @notice Initializes the vault with an oracle and sets up initial roles\\n     * @dev Grants all roles to the contract deployer initially\\n     * @param oracle The price oracle to use for collateral valuation\\n     */\\n    constructor(\\n        IPriceOracleGetter oracle\\n    ) OracleAware(oracle, Constants.ORACLE_BASE_CURRENCY_UNIT) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender); // This is the super admin\\n        grantRole(COLLATERAL_MANAGER_ROLE, msg.sender);\\n        grantRole(COLLATERAL_WITHDRAWER_ROLE, msg.sender);\\n        grantRole(COLLATERAL_STRATEGY_ROLE, msg.sender);\\n    }\\n\\n    /* Deposit */\\n\\n    /**\\n     * @notice Deposit collateral into the vault\\n     * @param collateralAmount The amount of collateral to deposit\\n     * @param collateralAsset The address of the collateral asset\\n     */\\n    function deposit(uint256 collateralAmount, address collateralAsset) public {\\n        return _deposit(msg.sender, collateralAmount, collateralAsset);\\n    }\\n\\n    /**\\n     * @notice Deposit collateral into the vault from a specific address\\n     * @param depositer The address providing the collateral\\n     * @param collateralAmount The amount of collateral to deposit\\n     * @param collateralAsset The address of the collateral asset\\n     */\\n    function depositFrom(\\n        address depositer,\\n        uint256 collateralAmount,\\n        address collateralAsset\\n    ) public {\\n        return _deposit(depositer, collateralAmount, collateralAsset);\\n    }\\n\\n    /**\\n     * @notice Internal function to deposit collateral into the vault\\n     * @param depositer The address providing the collateral\\n     * @param collateralAmount The amount of collateral to deposit\\n     * @param collateralAsset The address of the collateral asset\\n     */\\n    function _deposit(\\n        address depositer,\\n        uint256 collateralAmount,\\n        address collateralAsset\\n    ) internal {\\n        if (!_supportedCollaterals.contains(collateralAsset)) {\\n            revert UnsupportedCollateral(collateralAsset);\\n        }\\n\\n        IERC20Metadata(collateralAsset).safeTransferFrom(\\n            depositer,\\n            address(this),\\n            collateralAmount\\n        );\\n    }\\n\\n    /* Withdrawal */\\n\\n    /**\\n     * @notice Withdraws collateral from the vault\\n     * @param collateralAmount The amount of collateral to withdraw\\n     * @param collateralAsset The address of the collateral asset\\n     */\\n    function withdraw(\\n        uint256 collateralAmount,\\n        address collateralAsset\\n    ) public onlyRole(COLLATERAL_WITHDRAWER_ROLE) {\\n        return _withdraw(msg.sender, collateralAmount, collateralAsset);\\n    }\\n\\n    /**\\n     * @notice Withdraws collateral from the vault to a specific address\\n     * @param recipient The address receiving the collateral\\n     * @param collateralAmount The amount of collateral to withdraw\\n     * @param collateralAsset The address of the collateral asset\\n     */\\n    function withdrawTo(\\n        address recipient,\\n        uint256 collateralAmount,\\n        address collateralAsset\\n    ) public onlyRole(COLLATERAL_WITHDRAWER_ROLE) {\\n        return _withdraw(recipient, collateralAmount, collateralAsset);\\n    }\\n\\n    /**\\n     * @notice Internal function to withdraw collateral from the vault\\n     * @param withdrawer The address withdrawing the collateral\\n     * @param collateralAmount The amount of collateral to withdraw\\n     * @param collateralAsset The address of the collateral asset\\n     */\\n    function _withdraw(\\n        address withdrawer,\\n        uint256 collateralAmount,\\n        address collateralAsset\\n    ) internal {\\n        IERC20Metadata(collateralAsset).safeTransfer(\\n            withdrawer,\\n            collateralAmount\\n        );\\n    }\\n\\n    /* Collateral Info */\\n\\n    /**\\n     * @notice Calculates the total value of all assets in the vault\\n     * @return usdValue The total value of all assets in USD\\n     */\\n    function totalValue() public view virtual returns (uint256 usdValue);\\n\\n    /**\\n     * @notice Calculates the USD value of a given amount of an asset\\n     * @param assetAmount The amount of the asset\\n     * @param asset The address of the asset\\n     * @return usdValue The USD value of the asset\\n     */\\n    function assetValueFromAmount(\\n        uint256 assetAmount,\\n        address asset\\n    ) public view returns (uint256 usdValue) {\\n        uint256 assetPrice = oracle.getAssetPrice(asset);\\n        uint8 assetDecimals = IERC20Metadata(asset).decimals();\\n        return (assetPrice * assetAmount) / (10 ** assetDecimals);\\n    }\\n\\n    /**\\n     * @notice Calculates the amount of an asset that corresponds to a given USD value\\n     * @param usdValue The USD value\\n     * @param asset The address of the asset\\n     * @return assetAmount The amount of the asset\\n     */\\n    function assetAmountFromValue(\\n        uint256 usdValue,\\n        address asset\\n    ) public view returns (uint256 assetAmount) {\\n        uint256 assetPrice = oracle.getAssetPrice(asset);\\n        uint8 assetDecimals = IERC20Metadata(asset).decimals();\\n        return (usdValue * (10 ** assetDecimals)) / assetPrice;\\n    }\\n\\n    /* Collateral management */\\n\\n    /**\\n     * @notice Allows a new collateral asset\\n     * @param collateralAsset The address of the collateral asset\\n     */\\n    function allowCollateral(\\n        address collateralAsset\\n    ) public onlyRole(COLLATERAL_MANAGER_ROLE) {\\n        if (_supportedCollaterals.contains(collateralAsset)) {\\n            revert CollateralAlreadyAllowed(collateralAsset);\\n        }\\n        if (oracle.getAssetPrice(collateralAsset) == 0) {\\n            revert NoOracleSupport(collateralAsset);\\n        }\\n        if (!_supportedCollaterals.add(collateralAsset)) {\\n            revert FailedToAddCollateral(collateralAsset);\\n        }\\n        emit CollateralAllowed(collateralAsset);\\n    }\\n\\n    /**\\n     * @notice Disallows a previously supported collateral asset\\n     * @dev Requires at least one collateral asset to remain supported\\n     * @param collateralAsset The address of the collateral asset to disallow\\n     */\\n    function disallowCollateral(\\n        address collateralAsset\\n    ) public onlyRole(COLLATERAL_MANAGER_ROLE) {\\n        if (!_supportedCollaterals.contains(collateralAsset)) {\\n            revert CollateralNotSupported(collateralAsset);\\n        }\\n        if (_supportedCollaterals.length() <= 1) {\\n            revert MustSupportAtLeastOneCollateral();\\n        }\\n        if (!_supportedCollaterals.remove(collateralAsset)) {\\n            revert FailedToRemoveCollateral(collateralAsset);\\n        }\\n\\n        emit CollateralDisallowed(collateralAsset);\\n    }\\n\\n    /**\\n     * @notice Checks if a given asset is supported as collateral\\n     * @param collateralAsset The address of the collateral asset to check\\n     * @return bool True if the asset is supported, false otherwise\\n     */\\n    function isCollateralSupported(\\n        address collateralAsset\\n    ) public view returns (bool) {\\n        return _supportedCollaterals.contains(collateralAsset);\\n    }\\n\\n    /**\\n     * @notice Returns a list of all supported collateral assets\\n     * @return address[] Array of collateral asset addresses\\n     */\\n    function listCollateral() public view returns (address[] memory) {\\n        return _supportedCollaterals.values();\\n    }\\n\\n    /**\\n     * @notice Calculates the total USD value of all supported collateral assets in the vault\\n     * @dev Iterates through all supported collaterals and sums their USD values\\n     * @return uint256 The total value in USD\\n     */\\n    function _totalValueOfSupportedCollaterals()\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalUsdValue = 0;\\n        for (uint256 i = 0; i < _supportedCollaterals.length(); i++) {\\n            address collateral = _supportedCollaterals.at(i);\\n            uint256 collateralPrice = oracle.getAssetPrice(collateral);\\n            uint8 collateralDecimals = IERC20Metadata(collateral).decimals();\\n            uint256 collateralValue = (collateralPrice *\\n                IERC20Metadata(collateral).balanceOf(address(this))) /\\n                (10 ** collateralDecimals);\\n            totalUsdValue += collateralValue;\\n        }\\n        return totalUsdValue;\\n    }\\n}\\n\",\"keccak256\":\"0x2fb6d21969a529ae5c662c3635e2c2b8ee734b3f3142060e168d8fae2f927a0e\",\"license\":\"MIT\"},\"contracts/dusd/CurveStableSwapNGAmoVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-5/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"contracts/dusd/AmoManager.sol\\\";\\nimport \\\"contracts/dusd/AmoVault.sol\\\";\\nimport \\\"contracts/curve/interfaces/ICurveRouterNgPoolsOnlyV1.sol\\\";\\nimport \\\"contracts/curve/interfaces/IStableSwapNG.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @title CurveStableSwapNGAmoVault\\n * @notice Implementation of AmoVault for Curve StableSwap NG pools\\n */\\ncontract CurveStableSwapNGAmoVault is AmoVault {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /* Core state */\\n\\n    ICurveRouterNgPoolsOnlyV1 public immutable router;\\n    EnumerableSet.AddressSet private _lpTokens;\\n\\n    /* Roles */\\n\\n    bytes32 public constant AMO_TRADER_ROLE = keccak256(\\\"AMO_TRADER_ROLE\\\");\\n\\n    /* Custom Errors */\\n    error TokenNotAllowedAsCollateral(address token);\\n\\n    /**\\n     * @notice Initializes the CurveStableSwapNGAmoVault\\n     * @param _dusd Address of the DUSD token\\n     * @param _amoManager Address of the AMO manager\\n     * @param _oracle Address of the price oracle\\n     * @param _router Address of the Curve Router NG\\n     * @param _admin Address of the admin\\n     * @param _collateralWithdrawer Address allowed to withdraw collateral\\n     * @param _recoverer Address allowed to recover tokens\\n     * @param _amoTrader Address allowed to perform AMO trading operations\\n     */\\n    constructor(\\n        address _dusd,\\n        address _amoManager,\\n        IPriceOracleGetter _oracle,\\n        ICurveRouterNgPoolsOnlyV1 _router,\\n        address _admin,\\n        address _collateralWithdrawer,\\n        address _recoverer,\\n        address _amoTrader\\n    )\\n        AmoVault(\\n            _dusd,\\n            _amoManager,\\n            _admin,\\n            _collateralWithdrawer,\\n            _recoverer,\\n            _oracle\\n        )\\n    {\\n        router = ICurveRouterNgPoolsOnlyV1(_router);\\n\\n        grantRole(AMO_TRADER_ROLE, _amoTrader);\\n    }\\n\\n    /**\\n     * @dev Calculates the total collateral value of the vault.\\n     * @return The total collateral value in BASE_CURRENCY_UNIT.\\n     */\\n    function totalCollateralValue() public view override returns (uint256) {\\n        uint256 totalUsdValue = 0;\\n\\n        // Add the value of all collateral tokens\\n        address[] memory collateralTokens = listCollateral();\\n        for (uint256 i = 0; i < collateralTokens.length; i++) {\\n            address collateralToken = collateralTokens[i];\\n            uint256 collateralBalance = IERC20(collateralToken).balanceOf(\\n                address(this)\\n            );\\n            totalUsdValue += _getTokenValue(collateralToken, collateralBalance);\\n        }\\n\\n        // Add the collateral value from LP tokens\\n        (uint256 lpCollateralValue, ) = _totalLpValues();\\n        totalUsdValue += lpCollateralValue;\\n\\n        return totalUsdValue;\\n    }\\n\\n    /**\\n     * @notice Calculates the total value of dUSD in the vault\\n     * @return The total value of dUSD in the vault, denominated in the base value (e.g., USD)\\n     */\\n    function totalDusdValue() public view override returns (uint256) {\\n        uint256 dusdUsdValue = 0;\\n\\n        // Get the value of dUSD in this contract\\n        uint256 dusdBalance = dusd.balanceOf(address(this));\\n        dusdUsdValue += _getTokenValue(address(dusd), dusdBalance);\\n\\n        // Get the value of dUSD in LP tokens\\n        (, uint256 lpDusdValue) = _totalLpValues();\\n        dusdUsdValue += lpDusdValue;\\n\\n        return dusdUsdValue;\\n    }\\n\\n    /**\\n     * @notice Calculates the total value of the vault\\n     * @return The total value of the vault, denominated in the base value (e.g., USD)\\n     */\\n    function totalValue() public view override returns (uint256) {\\n        uint256 _totalValue = 0;\\n\\n        // Add the value of all collateral tokens\\n        address[] memory collateralTokens = listCollateral();\\n        for (uint256 i = 0; i < collateralTokens.length; i++) {\\n            address collateralToken = collateralTokens[i];\\n            uint256 collateralBalance = IERC20(collateralToken).balanceOf(\\n                address(this)\\n            );\\n            _totalValue += _getTokenValue(collateralToken, collateralBalance);\\n        }\\n\\n        // Add the value of dUSD\\n        uint256 dusdBalance = dusd.balanceOf(address(this));\\n        _totalValue += _getTokenValue(address(dusd), dusdBalance);\\n\\n        // Add the value of LP tokens\\n        (uint256 lpCollateralValue, uint256 lpDusdValue) = _totalLpValues();\\n        _totalValue += lpCollateralValue + lpDusdValue;\\n\\n        return _totalValue;\\n    }\\n\\n    /**\\n     * @dev Helper for allowing multiple collateral tokens.\\n     * @param tokens An array of token addresses to be added as collateral.\\n     */\\n    function allowCollaterals(\\n        address[] calldata tokens\\n    ) external onlyRole(COLLATERAL_MANAGER_ROLE) {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            super.allowCollateral(tokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper for disallowing multiple collateral tokens.\\n     * @param tokens An array of token addresses to be removed from collateral.\\n     */\\n    function disallowCollaterals(\\n        address[] calldata tokens\\n    ) external onlyRole(COLLATERAL_MANAGER_ROLE) {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            super.disallowCollateral(tokens[i]);\\n        }\\n    }\\n\\n    /* Curve Interaction */\\n\\n    /**\\n     * @notice Executes a swap with exact input amount on Curve\\n     * @param route Array of token addresses representing the swap path\\n     * @param swapParams Array of swap parameters for each hop\\n     * @param amountIn The exact amount of input tokens to swap\\n     * @param minAmountOut The minimum amount of output tokens to receive\\n     * @return uint256 The amount of output tokens received\\n     */\\n    function swapExactIn(\\n        address[11] calldata route,\\n        uint256[4][5] calldata swapParams,\\n        uint256 amountIn,\\n        uint256 minAmountOut\\n    ) external onlyRole(AMO_TRADER_ROLE) returns (uint256) {\\n        address tokenIn = route[0];\\n        IERC20(tokenIn).approve(address(router), amountIn);\\n\\n        return\\n            router.exchange(\\n                route,\\n                swapParams,\\n                amountIn,\\n                minAmountOut,\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets the expected output amount for a swap with exact input\\n     * @param route Array of token addresses representing the swap path\\n     * @param swapParams Array of swap parameters for each hop\\n     * @param amountIn The amount of input tokens\\n     * @return uint256 The expected amount of output tokens\\n     */\\n    function getExpectedOutput(\\n        address[11] calldata route,\\n        uint256[4][5] calldata swapParams,\\n        uint256 amountIn\\n    ) external view returns (uint256) {\\n        return router.get_dy(route, swapParams, amountIn);\\n    }\\n\\n    /**\\n     * @notice Gets the expected input amount for a desired output amount\\n     * @param route Array of token addresses representing the swap path\\n     * @param swapParams Array of swap parameters for each hop\\n     * @param amountOut The desired amount of output tokens\\n     * @return uint256 The expected amount of input tokens required\\n     */\\n    function getExpectedInput(\\n        address[11] calldata route,\\n        uint256[4][5] calldata swapParams,\\n        uint256 amountOut\\n    ) external view returns (uint256) {\\n        return router.get_dx(route, swapParams, amountOut);\\n    }\\n\\n    /**\\n     * @dev Adds liquidity to a Curve pool.\\n     * @param poolAddress The address of the Curve pool\\n     * @param amounts The amounts of tokens to add as liquidity\\n     * @param minMintAmount The minimum amount of LP tokens to receive\\n     * @return The amount of LP tokens received\\n     */\\n    function addLiquidity(\\n        address poolAddress,\\n        uint256[] calldata amounts,\\n        uint256 minMintAmount\\n    ) external onlyRole(AMO_TRADER_ROLE) returns (uint256) {\\n        ICurveStableSwapNG pool = ICurveStableSwapNG(poolAddress);\\n        uint256 nCoins = pool.N_COINS();\\n\\n        // Approve tokens\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            address token = pool.coins(i);\\n            if (amounts[i] > 0) {\\n                IERC20(token).approve(poolAddress, amounts[i]);\\n            }\\n        }\\n\\n        // Add liquidity to the pool\\n        uint256 lpTokensReceived = pool.add_liquidity(amounts, minMintAmount);\\n\\n        // Update position tracking\\n        // Note that add returns false if the value is already in the set, so it's safe to call it multiple times for the same pool\\n        _lpTokens.add(poolAddress);\\n\\n        return lpTokensReceived;\\n    }\\n\\n    /**\\n     * @dev Removes liquidity from a Curve pool.\\n     * @param poolAddress The address of the Curve pool\\n     * @param lpTokenAmount The amount of LP tokens to burn\\n     * @param minAmounts The minimum amounts of tokens to receive\\n     * @return The amounts of tokens received\\n     */\\n    function removeLiquidity(\\n        address poolAddress,\\n        uint256 lpTokenAmount,\\n        uint256[] calldata minAmounts\\n    ) external onlyRole(AMO_TRADER_ROLE) returns (uint256[] memory) {\\n        ICurveStableSwapNG pool = ICurveStableSwapNG(poolAddress);\\n\\n        // Approve LP tokens\\n        IERC20(poolAddress).approve(poolAddress, lpTokenAmount);\\n\\n        // Remove liquidity from the pool\\n        uint256[] memory receivedAmounts = pool.remove_liquidity(\\n            lpTokenAmount,\\n            minAmounts\\n        );\\n\\n        // Update position tracking\\n        if (IERC20(poolAddress).balanceOf(address(this)) == 0) {\\n            _lpTokens.remove(poolAddress);\\n        }\\n\\n        return receivedAmounts;\\n    }\\n\\n    /**\\n     * @dev Removes liquidity from a Curve pool in a single coin.\\n     * @param poolAddress The address of the Curve pool\\n     * @param lpTokenAmount The amount of LP tokens to burn\\n     * @param i The index of the coin to receive\\n     * @param minAmount The minimum amount of tokens to receive\\n     * @return The amount of tokens received\\n     */\\n    function removeLiquidityOneCoin(\\n        address poolAddress,\\n        uint256 lpTokenAmount,\\n        int128 i,\\n        uint256 minAmount\\n    ) external onlyRole(AMO_TRADER_ROLE) returns (uint256) {\\n        ICurveStableSwapNG pool = ICurveStableSwapNG(poolAddress);\\n\\n        // Approve LP tokens\\n        IERC20(poolAddress).approve(poolAddress, lpTokenAmount);\\n\\n        // Remove liquidity from the pool\\n        uint256 receivedAmount = pool.remove_liquidity_one_coin(\\n            lpTokenAmount,\\n            i,\\n            minAmount\\n        );\\n\\n        // Update position tracking\\n        if (IERC20(poolAddress).balanceOf(address(this)) == 0) {\\n            _lpTokens.remove(poolAddress);\\n        }\\n\\n        return receivedAmount;\\n    }\\n\\n    /**\\n     * @dev Removes liquidity from a Curve pool imbalanced.\\n     * @param poolAddress The address of the Curve pool\\n     * @param amounts The amounts of tokens to withdraw\\n     * @param maxBurnAmount The maximum amount of LP tokens to burn\\n     * @return The actual amount of LP tokens burned\\n     */\\n    function removeLiquidityImbalance(\\n        address poolAddress,\\n        uint256[] calldata amounts,\\n        uint256 maxBurnAmount\\n    ) external onlyRole(AMO_TRADER_ROLE) returns (uint256) {\\n        ICurveStableSwapNG pool = ICurveStableSwapNG(poolAddress);\\n\\n        // Approve LP tokens\\n        IERC20(poolAddress).approve(poolAddress, maxBurnAmount);\\n\\n        // Remove liquidity from the pool\\n        uint256 burnedAmount = pool.remove_liquidity_imbalance(\\n            amounts,\\n            maxBurnAmount\\n        );\\n\\n        // Update position tracking\\n        if (IERC20(poolAddress).balanceOf(address(this)) == 0) {\\n            _lpTokens.remove(poolAddress);\\n        }\\n\\n        return burnedAmount;\\n    }\\n\\n    /**\\n     * @notice Returns the number of LP token positions.\\n     * @return The number of LP tokens.\\n     */\\n    function getLpTokenCount() public view returns (uint256) {\\n        return _lpTokens.length();\\n    }\\n\\n    /**\\n     * @notice Checks if the given LP token is in the set.\\n     * @param lpToken The LP token address to check.\\n     * @return True if the LP token is in the set, false otherwise.\\n     */\\n    function hasLpToken(address lpToken) public view returns (bool) {\\n        return _lpTokens.contains(lpToken);\\n    }\\n\\n    /**\\n     * @notice Returns a list of all LP token addresses.\\n     * @return An array of all LP token addresses.\\n     */\\n    function getAllLpTokens() public view returns (address[] memory) {\\n        return _lpTokens.values();\\n    }\\n\\n    /**\\n     * @dev Calculates the value of an LP excluding DUSD.\\n     * @param lpToken The address of the LP token.\\n     * @return collateralValue The value of the collateral in BASE_CURRENCY_UNIT\\n     * @return dusdValue The value of the dUSD in BASE_CURRENCY_UNIT\\n     */\\n    function _getLpValues(\\n        address lpToken\\n    ) internal view returns (uint256 collateralValue, uint256 dusdValue) {\\n        ICurveStableSwapNG pool = ICurveStableSwapNG(lpToken);\\n        uint256 myLpBalance = IERC20(lpToken).balanceOf(address(this));\\n        uint256 totalLpSupply = IERC20(lpToken).totalSupply();\\n\\n        uint256 nCoins = pool.N_COINS();\\n        for (uint256 i = 0; i < nCoins; i++) {\\n            address token = pool.coins(i);\\n            uint256 poolTokenBalance = pool.balances(i);\\n            uint256 myTokenShare = (poolTokenBalance * myLpBalance) /\\n                totalLpSupply;\\n            uint256 tokenValue = _getTokenValue(token, myTokenShare);\\n            if (token == address(dusd)) {\\n                dusdValue += tokenValue;\\n            } else {\\n                collateralValue += tokenValue;\\n            }\\n        }\\n\\n        return (collateralValue, dusdValue);\\n    }\\n\\n    /**\\n     * @dev Gets the value of a token in BASE_CURRENCY_UNIT\\n     * @param token The address of the token\\n     * @param amount The amount of tokens\\n     * @return The value of the tokens in BASE_CURRENCY_UNIT\\n     */\\n    function _getTokenValue(\\n        address token,\\n        uint256 amount\\n    ) internal view returns (uint256) {\\n        uint256 price = oracle.getAssetPrice(token);\\n        uint256 decimals = IERC20Metadata(token).decimals();\\n\\n        return (amount * price) / (10 ** decimals);\\n    }\\n\\n    /**\\n     * @dev Calculates the total values across all LP positions\\n     * @return _totalCollateralValue The sum of all non-DUSD token values in BASE_CURRENCY_UNIT\\n     * @return _totalDusdValue The sum of all DUSD values in BASE_CURRENCY_UNIT\\n     */\\n    function _totalLpValues()\\n        internal\\n        view\\n        returns (uint256 _totalCollateralValue, uint256 _totalDusdValue)\\n    {\\n        uint256 lpTokenCount = _lpTokens.length();\\n        for (uint256 i = 0; i < lpTokenCount; i++) {\\n            address lpToken = _lpTokens.at(i);\\n            (uint256 collateralValue, uint256 dusdValue) = _getLpValues(\\n                lpToken\\n            );\\n            _totalCollateralValue += collateralValue;\\n            _totalDusdValue += dusdValue;\\n        }\\n        return (_totalCollateralValue, _totalDusdValue);\\n    }\\n}\\n\",\"keccak256\":\"0x4fc27329ae980d2b2d2022ae9e4f498bb5c3692bbe739ada61c3e4c815613a2e\",\"license\":\"MIT\"},\"contracts/dusd/OracleAware.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-5/access/AccessControl.sol\\\";\\nimport \\\"contracts/lending/core/interfaces/IPriceOracleGetter.sol\\\";\\n\\n/**\\n * @title OracleAware\\n * @notice Abstract contract that provides oracle functionality to other contracts\\n */\\nabstract contract OracleAware is AccessControl {\\n    /* Core state */\\n\\n    IPriceOracleGetter public oracle;\\n    uint256 public baseCurrencyUnit;\\n\\n    /* Events */\\n\\n    event OracleSet(address indexed newOracle);\\n\\n    /* Errors */\\n\\n    error IncorrectBaseCurrencyUnit(uint256 baseCurrencyUnit);\\n\\n    /**\\n     * @notice Initializes the contract with an oracle and base currency unit\\n     * @param initialOracle The initial oracle to use for price feeds\\n     * @param _baseCurrencyUnit The base currency unit for price calculations\\n     * @dev Sets up the initial oracle and base currency unit values\\n     */\\n    constructor(IPriceOracleGetter initialOracle, uint256 _baseCurrencyUnit) {\\n        oracle = initialOracle;\\n        baseCurrencyUnit = _baseCurrencyUnit;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Sets the oracle to use for collateral valuation\\n     * @param newOracle The new oracle to use\\n     */\\n    function setOracle(\\n        IPriceOracleGetter newOracle\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (newOracle.BASE_CURRENCY_UNIT() != baseCurrencyUnit) {\\n            revert IncorrectBaseCurrencyUnit(baseCurrencyUnit);\\n        }\\n\\n        oracle = newOracle;\\n\\n        emit OracleSet(address(newOracle));\\n    }\\n\\n    /**\\n     * @notice Updates the base currency unit used for price calculations\\n     * @param _newBaseCurrencyUnit The new base currency unit to set\\n     * @dev Only used if the oracle's base currency unit changes\\n     */\\n    function setBaseCurrencyUnit(\\n        uint256 _newBaseCurrencyUnit\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        baseCurrencyUnit = _newBaseCurrencyUnit;\\n    }\\n}\\n\",\"keccak256\":\"0x48844373ef6492851eeea63e4b243e929d8ae1de80e086b37e4f9d66ccb4442d\",\"license\":\"MIT\"},\"contracts/lending/core/interfaces/IPriceOracleGetter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPriceOracleGetter\\n * @author Aave\\n * @notice Interface for the Aave price oracle.\\n */\\ninterface IPriceOracleGetter {\\n    /**\\n     * @notice Returns the base currency address\\n     * @dev Address 0x0 is reserved for USD as base currency.\\n     * @return Returns the base currency address.\\n     */\\n    function BASE_CURRENCY() external view returns (address);\\n\\n    /**\\n     * @notice Returns the base currency unit\\n     * @dev 1 ether for ETH, 1e8 for USD.\\n     * @return Returns the base currency unit.\\n     */\\n    function BASE_CURRENCY_UNIT() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the asset price in the base currency\\n     * @param asset The address of the asset\\n     * @return The price of the asset\\n     */\\n    function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x31366baa77e6298e46695465ba7f5ba8641fe8537e54901ae119282be0ee6d67\",\"license\":\"AGPL-3.0\"},\"contracts/shared/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Constants {\\n    // Shared definitions of how we represent percentages and basis points\\n    uint16 public constant ONE_BPS = 100; // 1 basis point with 2 decimals\\n    uint32 public constant ONE_PERCENT_BPS = ONE_BPS * 100;\\n    uint32 public constant ONE_HUNDRED_PERCENT_BPS = ONE_PERCENT_BPS * 100;\\n\\n    uint32 public constant ORACLE_BASE_CURRENCY_UNIT = 1e8;\\n}\\n\",\"keccak256\":\"0xcc25566eb9a2e10e6861ef828987039329e61385929384237cd3cf4429c8d819\",\"license\":\"MIT\"},\"contracts/token/IERC20Stablecoin.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-5/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Stablecoin is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa13d8ca7e9f008eef376fca0314bac40a8ad910bb2d208cfcf7212e7cd2a841d\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60e0604081815234620003f857610100826200361e8038038091620000258285620003fd565b833981010312620003f8576200003b8262000437565b60206200004a81850162000437565b838501519094906001600160a01b039081811690819003620003f8576060830151928284168403620003f857620000846080820162000437565b956200009360a0830162000437565b90620000b060e0620000a860c0860162000437565b940162000437565b600180546001600160a01b031990811690961790556305f5e10060025597620000d9336200044c565b50620000e5336200044c565b506000809b6000805160206200359e8339815191528252818a526200011060018d842001546200079e565b6200011b33620004cc565b5060048a8d8a600080516020620035be8339815191529788875286845262000149600184892001546200079e565b62000154336200055d565b50600080516020620035fe83398151915287528684526200017b600184892001546200079e565b6200018633620005e9565b506001600555169081608052519283809263313ce56760e01b82525afa908115620003ee5789939162000399575b5096620001db92620001f896959492620002259960a052169060065416176006556200044c565b508a52898752620001f260018a8c2001546200079e565b6200055d565b50600080516020620035de83398151915288528785526200021f6001888a2001546200079e565b62000675565b50858052858352848620338752835260ff8587205416156200037b57608051600654865163095ea7b360e01b815290831660048201526000196024820152918491839160449183918b91165af1801562000371576200032f575b508385620002c69596620002c09460019460c0527fc9d160ddf8721202a3f3e2bd663b1fdb5675930469632a500038010be1a191dc8252522001546200079e565b62000701565b5051612d9a9081620007e482396080518181816108270152818161096b01528181610c9301528181610f1f015281816112d601528181611b09015261262d015260a05181611462015260c0518181816102950152818161079b01528181611cfe0152611d9f0152f35b8281813d831162000369575b620003478183620003fd565b81010312620003655751801515036200036157386200027f565b8480fd5b8580fd5b503d6200033b565b85513d88823e3d90fd5b845163e2517d3f60e01b815233600482015260248101879052604490fd5b809293508b809250969594963d8311620003e6575b620003ba8183620003fd565b81010312620003e257519360ff85168503620003e2579293919291879190620001db620001b4565b8c80fd5b503d620003ae565b8d513d85823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b038211908210176200042157604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620003f857565b6001600160a01b031660008181527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205490919060ff16620004c857818052816020526040822081835260205260408220600160ff1982541617905533916000805160206200357e8339815191528180a4600190565b5090565b6001600160a01b031660008181527fb56095460044281636dd3a77e227972b73971c7d766b38feb76e4e7f12e8c60260205260408120549091906000805160206200359e8339815191529060ff166200055857808352826020526040832082845260205260408320600160ff198254161790556000805160206200357e833981519152339380a4600190565b505090565b6001600160a01b031660008181527fc191fc48a308d795605d8380942284aa535eb60ab59dded9d8c4eff77cf3c8726020526040812054909190600080516020620035be8339815191529060ff166200055857808352826020526040832082845260205260408320600160ff198254161790556000805160206200357e833981519152339380a4600190565b6001600160a01b031660008181527f94449471841a7f40a7871d590913647b573afdadc8e3b552848558acac45c28a6020526040812054909190600080516020620035fe8339815191529060ff166200055857808352826020526040832082845260205260408320600160ff198254161790556000805160206200357e833981519152339380a4600190565b6001600160a01b031660008181527fa921dec465a2db617c1283eb3fd0c7be03ef4a04bbcfeba0659a6baa62f900016020526040812054909190600080516020620035de8339815191529060ff166200055857808352826020526040832082845260205260408320600160ff198254161790556000805160206200357e833981519152339380a4600190565b6001600160a01b031660008181527f35981844e2f7014ed33b54358b929d550bdab17164e935e079ba150ceda75ff860205260408120549091907fc9d160ddf8721202a3f3e2bd663b1fdb5675930469632a500038010be1a191dc9060ff166200055857808352826020526040832082845260205260408320600160ff198254161790556000805160206200357e833981519152339380a4600190565b80600052600060205260406000203360005260205260ff6040600020541615620007c55750565b6044906040519063e2517d3f60e01b82523360048301526024820152fdfe6080604052600436101561001257600080fd5b60003560e01c8062f714ce14611e3f57806301fd155d14611ca857806301ffc9a714611c525780630ee209c114611b915780631171bda914611ac2578063132c29b214611a875780631ee903b6146119c757806321fccb48146117ac578063248a9ca31461177d5780632a6739a2146116af5780632e718ab7146116745780632f2ff15d1461163557806336568abe146115ee5780633e0c0629146115745780633f8634811461155d57806345daa27b146115225780634a0bbabb146115015780634f5f32991461148657806352816b68146114485780635433a7661461140c5780635c23ef6e1461131c5780635c5088e4146112855780636e553f65146112605780637adbf9731461117e5780637dc0d1d01461115557806391d14854146111085780639377e63a146110025780639d4cc8d314610ee9578063a217fddf14610ecd578063a4e2a31e14610dbd578063acf1c94814610d82578063bea151fb14610d52578063c4e2c1e614610d28578063c7bee63d14610c6d578063c83abb8514610a2a578063cf07456f146109fe578063d4c3eea014610897578063d547741f14610856578063de1409ce14610811578063de5eaee614610767578063de777a7f146105f2578063e00cb4a5146104dc578063e1121672146104a1578063eb0bc1ec14610483578063f20c333c1461030b578063f3bddde1146102ed578063f817f7d0146102c4578063f887ea401461027f5763fa6bd2ee1461023657600080fd5b3461027a57602036600319011261027a5760206102706001600160a01b0361025c611e8d565b166000526004602052604060002054151590565b6040519015158152f35b600080fd5b3461027a57600036600319011261027a576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461027a57600036600319011261027a576006546040516001600160a01b039091168152602090f35b3461027a57600036600319011261027a576020600254604051908152f35b3461027a5760208060031936011261027a5760043567ffffffffffffffff811161027a5761033d903690600401611eb7565b90610346612267565b60005b82811061035257005b610365610360828585612021565b611fd3565b61036d612267565b6001600160a01b0390811660008181526004602052604090205490919061046a578590600154166040519182809263b3596f0760e01b825285600483015260249485915afa90811561045e57600091610431575b501561041b576103d082612c58565b156104055750906001917f500f8acd525a3d9f96ab641587f59e34ef9d02f9397fdd46bb7786273bad1607600080a201610349565b906040519063cdb5999560e01b82526004820152fd5b9060405190631066c96360e31b82526004820152fd5b90508681813d8311610457575b6104488183611fe7565b8101031261027a5751876103c1565b503d61043e565b6040513d6000823e3d90fd5b60405163098f893f60e21b815260048101839052602490fd5b3461027a57600036600319011261027a576020600754604051908152f35b3461027a57600036600319011261027a5760206040517fc9d160ddf8721202a3f3e2bd663b1fdb5675930469632a500038010be1a191dc8152f35b3461027a57604036600319011261027a576104f5611e77565b60015460405163b3596f0760e01b81526001600160a01b039283166004820181905260209391929091849184916024918391165afa90811561045e5783906000926105c2575b60405163313ce56760e01b81529350839060049082905afa90811561045e576105839260009261058b575b5061057761057d91600435906120eb565b916120da565b906120fe565b604051908152f35b61057d9192506105b361057791863d88116105bb575b6105ab8183611fe7565b8101906120c1565b929150610566565b503d6105a1565b915082813d83116105eb575b6105d88183611fe7565b8101031261027a5782600492519161053b565b503d6105ce565b3461027a5761060036611ee8565b80939261060b61220b565b60405163095ea7b360e01b81526001600160a01b03949094166004850181905260248501959095526020949285856044816000885af192831561045e5761067795879461073a575b506040519586938493637706db7560e01b8552604060048601526044850191612066565b90602483015203816000855af191821561045e5760009261070b575b506040516370a0823160e01b81523060048201528381602481855afa90811561045e576000916106de575b50156106ce575b50604051908152f35b6106d790612b0d565b50826106c5565b90508381813d8311610704575b6106f58183611fe7565b8101031261027a5751846106be565b503d6106eb565b9091508281813d8311610733575b6107238183611fe7565b8101031261027a57519083610693565b503d610719565b61075990853d8711610760575b6107518183611fe7565b810190612009565b5087610653565b503d610747565b3461027a57602061077736611fa9565b929161079760405194859384936308f109c360e11b85526004850161211e565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa801561045e576000906107de575b602090604051908152f35b506020813d602011610809575b816107f860209383611fe7565b8101031261027a57602090516107d3565b3d91506107eb565b3461027a57600036600319011261027a576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461027a57604036600319011261027a57610895600435610875611e77565b90806000526000602052610890600160406000200154612359565b6127f5565b005b3461027a57600036600319011261027a5760006108b2612ca5565b6000915b8151831015610956576001600160a01b036108d1848461208a565b5116604051906370a0823160e01b82523060048301526020918281602481855afa92831561045e57600093610921575b505091610913610919926001946123c2565b9061209e565b9201916108b6565b908094929350813d831161094f575b61093a8183611fe7565b8101031261027a579151906109136001610901565b503d610930565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316602082602481845afa91821561045e576000926109c9575b60206105836109be8661091387876123c2565b6109136109136124a1565b91506020823d6020116109f6575b816109e460209383611fe7565b8101031261027a5790519060206109ab565b3d91506109d7565b3461027a57600036600319011261027a57610a26610a1a612ca5565b60405191829182611f64565b0390f35b3461027a57606036600319011261027a57610a43611e8d565b6024359067ffffffffffffffff60443581811161027a57610a68903690600401611eb7565b919092610a7361220b565b60405163095ea7b360e01b81526001600160a01b0391909116600482018190526024820186905260209590939086836044816000895af192831561045e57600093610c50575b50610ae5604051968793849363350376e360e21b85526004850152604060248501526044840191612066565b038183865af192831561045e57600093610bae575b50506040516370a0823160e01b81523060048201528381602481855afa90811561045e57600091610b81575b5015610b71575b50906040519181839283018184528251809152816040850193019160005b828110610b5a57505050500390f35b835185528695509381019392810192600101610b4b565b610b7a90612b0d565b5082610b2d565b90508381813d8311610ba7575b610b988183611fe7565b8101031261027a575184610b26565b503d610b8e565b909192503d806000833e610bc28183611fe7565b810190848183031261027a5780519083821161027a570181601f8201121561027a578051928311610c3a578260051b60405193610c0187830186611fe7565b8452858085019183010192831161027a5785809201905b838210610c2b5750505050908380610afa565b81518152908201908201610c18565b634e487b7160e01b600052604160045260246000fd5b610c6690883d8a11610760576107518183611fe7565b5087610ab9565b3461027a57600036600319011261027a576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316602082602481845afa91821561045e57600092610cf2575b6020610583610ce285856123c2565b610cea6124a1565b91905061209e565b91506020823d602011610d20575b81610d0d60209383611fe7565b8101031261027a57905190610ce2610cd3565b3d9150610d00565b3461027a57610895610d3936611f30565b610d44929192612191565b6001600160a01b031661237f565b3461027a576020610d6236611fa9565b92916107976040519485938493637b5e2c7b60e01b85526004850161211e565b3461027a57600036600319011261027a5760206040517fb3e25b5404b87e5a838579cb5d7481d61ad96ee284d38ec1e97c07ba64e7f6fc8152f35b3461027a57602036600319011261027a57610dd6611e8d565b610dde612267565b6001600160a01b0390811660008181526004602052604090205490919061046a576020602491600154166040519283809263b3596f0760e01b82528660048301525afa90811561045e57600091610e9b575b5015610e8357610e3f81612c58565b15610e6b577f500f8acd525a3d9f96ab641587f59e34ef9d02f9397fdd46bb7786273bad1607600080a2005b6024906040519063cdb5999560e01b82526004820152fd5b60249060405190631066c96360e31b82526004820152fd5b90506020813d602011610ec5575b81610eb660209383611fe7565b8101031261027a575182610e30565b3d9150610ea9565b3461027a57600036600319011261027a57602060405160008152f35b3461027a5760208060031936011261027a57610f03611e8d565b610f0b61231f565b6001600160a01b039081168015610ff057817f0000000000000000000000000000000000000000000000000000000000000000169160065416906040519163095ea7b360e01b9081845260048401526000602484015284836044816000885af190811561045e578593604492610fd3575b50600680546001600160a01b03191684179055610f9761231f565b6000604051958694859384526004840152811960248401525af1801561045e57610fbd57005b8161089592903d10610760576107518183611fe7565b610fe990853d8711610760576107518183611fe7565b5086610f7c565b6040516314e632d960e11b8152600490fd5b3461027a57608036600319011261027a5761101b611e8d565b602435906044359081600f0b80920361027a57829161103861220b565b60405163095ea7b360e01b81526001600160a01b03929092166004830181905260248301949094526020939184816044816000875af1801561045e576110eb575b5060405192630d2680e960e11b845260048401526024830152606435604483015282826064816000855af191821561045e5760009261070b57506040516370a0823160e01b81523060048201528381602481855afa90811561045e576000916106de5750156106ce5750604051908152f35b61110190853d8711610760576107518183611fe7565b5084611079565b3461027a57604036600319011261027a57611121611e77565b600435600052600060205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b3461027a57600036600319011261027a576001546040516001600160a01b039091168152602090f35b3461027a57602036600319011261027a576004356001600160a01b0381169081900361027a576111ac61231f565b604051638c89b64f60e01b8152602081600481855afa90811561045e5760009161122e575b506002548091036112165750600180546001600160a01b031916821790557f3f32684a32a11dabdbb8c0177de80aa3ae36a004d75210335b49e544e48cd0aa600080a2005b60249060405190639b6812b960e01b82526004820152fd5b90506020813d602011611258575b8161124960209383611fe7565b8101031261027a5751826111d1565b3d915061123c565b3461027a57604036600319011261027a5761089561127c611e77565b600435336128aa565b3461027a57600036600319011261027a5761129e61231f565b60065460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015290602090829060449082906000907f0000000000000000000000000000000000000000000000000000000000000000165af1801561045e5761130457005b6108959060203d602011610760576107518183611fe7565b3461027a57604036600319011261027a57611335611e77565b60015460405163b3596f0760e01b81526001600160a01b039283166004820181905260209391929091849184916024918391165afa90811561045e5783906000926113dc575b60405163313ce56760e01b81529350839060049082905afa801561045e576113b26113ba91610583946000916113bf575b506120da565b6004356120eb565b6120fe565b6113d69150863d88116105bb576105ab8183611fe7565b866113ac565b915082813d8311611405575b6113f28183611fe7565b8101031261027a5782600492519161137b565b503d6113e8565b3461027a57602036600319011261027a576001600160a01b0361142d611e8d565b16600052600860205260206040600020541515604051908152f35b3461027a57600036600319011261027a57602060405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461027a57600036600319011261027a57604051806007549182815260208091019260076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688916000905b8282106114ea57610a2685610a1a81890382611fe7565b8354865294850194600193840193909101906114d3565b3461027a57602036600319011261027a5761151a61231f565b600435600255005b3461027a57600036600319011261027a5760206040517f1f29e81ed8f7ae439f042f6b6767d105e87c4eef908508d5d9e550aef35af6448152f35b3461027a5761089561156e36611f30565b916128aa565b3461027a57604036600319011261027a5761158d611e8d565b602435906115996122c3565b8147106115d6576000918291829182916001600160a01b03165af16115bc61286a565b50156115c457005b604051630a12f52160e11b8152600490fd5b60405163cd78605960e01b8152306004820152602490fd5b3461027a57604036600319011261027a57611607611e77565b336001600160a01b0382160361162357610895906004356127f5565b60405163334bd91960e11b8152600490fd5b3461027a57604036600319011261027a57610895600435611654611e77565b9080600052600060205261166f600160406000200154612359565b612777565b3461027a57600036600319011261027a5760206040517f85e8f2d6819d6b24108062d87ea08f54651bcb8960d98062d3faf96e7873b8b98152f35b3461027a57600036600319011261027a5760006116ca612ca5565b6000915b8151831015611768576001600160a01b036116e9848461208a565b5116604051906370a0823160e01b82523060048301526020918281602481855afa92831561045e57600093611733575b50509161091361172b926001946123c2565b9201916116ce565b908094929350813d8311611761575b61174c8183611fe7565b8101031261027a579151906109136001611719565b503d611742565b6105836020916117766124a1565b509061209e565b3461027a57602036600319011261027a5760043560005260006020526020600160406000200154604051908152f35b3461027a576117ba36611ee8565b91906117c461220b565b604051630293577560e41b81526020946001600160a01b038181169592909187826004818a5afa91821561045e57600092611998575b5095949290918794926000975b8189106118905750505061183995506040519586938493635b96faef60e11b8552604060048601526044850191612066565b90602483015203816000855af191821561045e5760009261185f575b506106c590612bf2565b9091508281813d8311611889575b6118778183611fe7565b8101031261027a5751906106c5611855565b503d61186d565b91939550919395966040519063c661065760e01b825280600483015289826024818c5afa91821561045e5785928b9160009161196b575b506118d3838a8c612021565b356118ed575b505060019150019695939188959391611807565b611930906118fc848b8d612021565b60405163095ea7b360e01b81526001600160a01b038816600482015290356024820152948592839160009183906044820190565b0393165af191821561045e5760019261194e575b85928b91506118d9565b611964908b3d8d11610760576107518183611fe7565b508a611944565b61198b9150823d8411611991575b6119838183611fe7565b810190612047565b8c6118c7565b503d611979565b9091508781813d83116119c0575b6119b08183611fe7565b8101031261027a575190886117fa565b503d6119a6565b3461027a57602036600319011261027a576119e0611e8d565b6119e8612267565b6001600160a01b031660008181526004602052604090205415611a6f5760016003541115611a5d57611a1981612a0d565b15611a45577fcebbf63022189259f517d89d98c7c527b44c211d25e443dad13aab2479c7e7b3600080a2005b6024906040519063644e3dd760e11b82526004820152fd5b6040516305bc742560e11b8152600490fd5b60249060405190632108722b60e01b82526004820152fd5b3461027a57600036600319011261027a5760206040517f1a52e20da533a06a1f80a73dba6e5d09cb788f108eae685b8ce6644834e67abe8152f35b3461027a57606036600319011261027a57611adb611e8d565b611ae3611e77565b90611aec6122c3565b600260055414611b7f5760026005556001600160a01b03908116907f00000000000000000000000000000000000000000000000000000000000000001681148015611b62575b611b4a57611b43916044359161237f565b6001600555005b60249060405190638415be8960e01b82526004820152fd5b50611b7a816000526004602052604060002054151590565b611b32565b604051633ee5aeb560e01b8152600490fd5b3461027a57602036600319011261027a5760043567ffffffffffffffff811161027a57611bc2903690600401611eb7565b90611bcb612267565b60005b828110611bd757005b611be5610360828585612021565b611bed612267565b6001600160a01b031660008181526004602052604090205415611a6f5760016003541115611a5d57611c1e81612a0d565b15611a4557906001917fcebbf63022189259f517d89d98c7c527b44c211d25e443dad13aab2479c7e7b3600080a201611bce565b3461027a57602036600319011261027a5760043563ffffffff60e01b811680910361027a57602090637965db0b60e01b8114908115611c97575b506040519015158152f35b6301ffc9a760e01b14905082611c8c565b3461027a5761042036600319011261027a57366101641161027a57366103e41161027a57611cd461220b565b6004356001600160a01b038116810361027a5760405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526103e4356024830152909160209183916044918391600091165af1801561045e57611e20575b50604051633f51256760e21b8152600460008183015b600b8210611df8578360006101648083015b60058310611de1576103e480359085015261040480359085015230610424850152836020816104448160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1801561045e576000906107de57602090604051908152f35b600190608081818581943701920192019190611d72565b60019060209081906001600160a01b03611e1187611ea3565b16815201930191019091611d60565b611e389060203d602011610760576107518183611fe7565b5080611d4a565b3461027a57604036600319011261027a57610895611e5b611e77565b611e63612191565b6004359033906001600160a01b031661237f565b602435906001600160a01b038216820361027a57565b600435906001600160a01b038216820361027a57565b35906001600160a01b038216820361027a57565b9181601f8401121561027a5782359167ffffffffffffffff831161027a576020808501948460051b01011161027a57565b90606060031983011261027a576004356001600160a01b038116810361027a57916024359067ffffffffffffffff821161027a57611f2891600401611eb7565b909160443590565b606090600319011261027a576001600160a01b03600435818116810361027a579160243591604435908116810361027a5790565b602090602060408183019282815285518094520193019160005b828110611f8c575050505090565b83516001600160a01b031685529381019392810192600101611f7e565b61040060031982011261027a576101649181831161027a576004926103e492831161027a57913590565b356001600160a01b038116810361027a5790565b90601f8019910116810190811067ffffffffffffffff821117610c3a57604052565b9081602091031261027a5751801515810361027a5790565b91908110156120315760051b0190565b634e487b7160e01b600052603260045260246000fd5b9081602091031261027a57516001600160a01b038116810361027a5790565b81835290916001600160fb1b03831161027a5760209260051b809284830137010190565b80518210156120315760209160051b010190565b919082018092116120ab57565b634e487b7160e01b600052601160045260246000fd5b9081602091031261027a575160ff8116810361027a5790565b60ff16604d81116120ab57600a0a90565b818102929181159184041417156120ab57565b8115612108570490565b634e487b7160e01b600052601260045260246000fd5b61040081019493929091600090835b600b831061216b575050506101608201906000915b60058310612154575050506103e00152565b600190608081818581943701920192019190612142565b6001906001600160a01b0361217f84611ea3565b1681529201916020918201910161212d565b3360009081527fc191fc48a308d795605d8380942284aa535eb60ab59dded9d8c4eff77cf3c87260205260409020547f1f29e81ed8f7ae439f042f6b6767d105e87c4eef908508d5d9e550aef35af6449060ff16156121ed5750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b3360009081527f35981844e2f7014ed33b54358b929d550bdab17164e935e079ba150ceda75ff860205260409020547fc9d160ddf8721202a3f3e2bd663b1fdb5675930469632a500038010be1a191dc9060ff16156121ed5750565b3360009081527fb56095460044281636dd3a77e227972b73971c7d766b38feb76e4e7f12e8c60260205260409020547f85e8f2d6819d6b24108062d87ea08f54651bcb8960d98062d3faf96e7873b8b99060ff16156121ed5750565b3360009081527fa921dec465a2db617c1283eb3fd0c7be03ef4a04bbcfeba0659a6baa62f9000160205260409020547fb3e25b5404b87e5a838579cb5d7481d61ad96ee284d38ec1e97c07ba64e7f6fc9060ff16156121ed5750565b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205460ff16156121ed5750565b80600052600060205260406000203360005260205260ff60406000205416156121ed5750565b60405163a9059cbb60e01b60208201526001600160a01b039290921660248301526044808301939093529181526123c0916123bb606483611fe7565b61292d565b565b60015460405163b3596f0760e01b81526001600160a01b0392831660048201819052929091602091829184916024918391165afa91821561045e57600092612470575b50806004936040519485809263313ce56760e01b82525afa801561045e5761243b9360ff92600092612453575b505016926120eb565b604d82116120ab5761245091600a0a906120fe565b90565b6124699250803d106105bb576105ab8183611fe7565b3880612432565b9291508083813d831161249a575b6124888183611fe7565b8101031261027a579151909180612405565b503d61247e565b6000906000916007546000905b8082106124bb5750509190565b600760009081527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6888301546040516370a0823160e01b815230600482015293969492939192839290916001600160a01b0316602082602481845afa91821561045e57600092612743575b506040516318160ddd60e01b815290602082600481845afa91821561045e5760009261270f575b50604051630293577560e41b815290602082600481845afa91821561045e576000926126db575b509291906000935b8185106125a55750505050509161259761259d9260019461209e565b9461209e565b9401906124ae565b90919293966040519063c661065760e01b8252886004830152602082602481865afa91821561045e576000926126ba575b50604051634903b0d160e01b8152600481018a9052602081602481875afa90811561045e5786918891600091612680575b50916113ba6126199261261f946120eb565b836123c2565b916001600160a01b039081167f00000000000000000000000000000000000000000000000000000000000000009091160361266c576001916126609161209e565b975b019392919061257b565b979660019161267a9161209e565b96612662565b925050506020813d6020116126b2575b8161269d60209383611fe7565b8101031261027a5751859087906113ba612607565b3d9150612690565b6126d491925060203d602011611991576119838183611fe7565b90386125d6565b9091506020813d602011612707575b816126f760209383611fe7565b8101031261027a57519038612573565b3d91506126ea565b9091506020813d60201161273b575b8161272b60209383611fe7565b8101031261027a5751903861254c565b3d915061271e565b9091506020813d60201161276f575b8161275f60209383611fe7565b8101031261027a57519038612525565b3d9150612752565b9060009180835282602052604083209160018060a01b03169182845260205260ff604084205416156000146127f057808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b9060009180835282602052604083209160018060a01b03169182845260205260ff6040842054166000146127f05780835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b3d156128a5573d9067ffffffffffffffff8211610c3a5760405191612899601f8201601f191660200184611fe7565b82523d6000602084013e565b606090565b9060018060a01b03809316928360005260046020526040600020541561291457604051926323b872dd60e01b602085015216602483015230604483015260648201526064815260a081019181831067ffffffffffffffff841117610c3a576123c09260405261292d565b604051632762993f60e11b815260048101859052602490fd5b6000806129569260018060a01b03169360208151910182865af161294f61286a565b9083612d13565b8051908115159182612984575b505061296c5750565b60249060405190635274afe760e01b82526004820152fd5b6129979250602080918301019101612009565b153880612963565b6003548110156120315760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b6007548110156120315760076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880190600090565b600090808252600490816020526040832054801515600014612b075760001990808201818111612af45760035490838201918211612ae157818103612a97575b5050506003548015612a8457810190612a658261299f565b909182549160031b1b1916905560035582526020526040812055600190565b634e487b7160e01b855260318452602485fd5b612acc612aa6612ab59361299f565b90549060031b1c92839261299f565b819391549060031b91821b91600019901b19161790565b90558552836020526040852055388080612a4d565b634e487b7160e01b875260118652602487fd5b634e487b7160e01b865260118552602486fd5b50505090565b60008181526008602052604081205490919080156127f05760001990808201818111612bde5760075490838201918211612bca57818103612b96575b5050506007548015612b8257810190612b61826129d6565b909182549160031b1b19169055600755815260086020526040812055600190565b634e487b7160e01b84526031600452602484fd5b612bb4612ba5612ab5936129d6565b90549060031b1c9283926129d6565b9055845260086020526040842055388080612b49565b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b85526011600452602485fd5b600081815260086020526040812054612c5357600754600160401b811015612c3f579082612c2b612ab5846001604096016007556129d6565b905560075492815260086020522055600190565b634e487b7160e01b82526041600452602482fd5b905090565b600081815260046020526040812054612c5357600354600160401b811015612c3f579082612c91612ab58460016040960160035561299f565b905560035492815260046020522055600190565b6040519060035480835282602091602082019060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b936000905b828210612cf9575050506123c092500383611fe7565b855484526001958601958895509381019390910190612ce3565b90612d2857508051156115c457805190602001fd5b81511580612d5b575b612d39575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15612d3156fea2646970667358221220d1cc63bdbff580c47b2cd30033e73fdd4c5b031e4074b0fb6720674db015d07b64736f6c634300081800332f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d85e8f2d6819d6b24108062d87ea08f54651bcb8960d98062d3faf96e7873b8b91f29e81ed8f7ae439f042f6b6767d105e87c4eef908508d5d9e550aef35af644b3e25b5404b87e5a838579cb5d7481d61ad96ee284d38ec1e97c07ba64e7f6fc1a52e20da533a06a1f80a73dba6e5d09cb788f108eae685b8ce6644834e67abe",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c8062f714ce14611e3f57806301fd155d14611ca857806301ffc9a714611c525780630ee209c114611b915780631171bda914611ac2578063132c29b214611a875780631ee903b6146119c757806321fccb48146117ac578063248a9ca31461177d5780632a6739a2146116af5780632e718ab7146116745780632f2ff15d1461163557806336568abe146115ee5780633e0c0629146115745780633f8634811461155d57806345daa27b146115225780634a0bbabb146115015780634f5f32991461148657806352816b68146114485780635433a7661461140c5780635c23ef6e1461131c5780635c5088e4146112855780636e553f65146112605780637adbf9731461117e5780637dc0d1d01461115557806391d14854146111085780639377e63a146110025780639d4cc8d314610ee9578063a217fddf14610ecd578063a4e2a31e14610dbd578063acf1c94814610d82578063bea151fb14610d52578063c4e2c1e614610d28578063c7bee63d14610c6d578063c83abb8514610a2a578063cf07456f146109fe578063d4c3eea014610897578063d547741f14610856578063de1409ce14610811578063de5eaee614610767578063de777a7f146105f2578063e00cb4a5146104dc578063e1121672146104a1578063eb0bc1ec14610483578063f20c333c1461030b578063f3bddde1146102ed578063f817f7d0146102c4578063f887ea401461027f5763fa6bd2ee1461023657600080fd5b3461027a57602036600319011261027a5760206102706001600160a01b0361025c611e8d565b166000526004602052604060002054151590565b6040519015158152f35b600080fd5b3461027a57600036600319011261027a576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461027a57600036600319011261027a576006546040516001600160a01b039091168152602090f35b3461027a57600036600319011261027a576020600254604051908152f35b3461027a5760208060031936011261027a5760043567ffffffffffffffff811161027a5761033d903690600401611eb7565b90610346612267565b60005b82811061035257005b610365610360828585612021565b611fd3565b61036d612267565b6001600160a01b0390811660008181526004602052604090205490919061046a578590600154166040519182809263b3596f0760e01b825285600483015260249485915afa90811561045e57600091610431575b501561041b576103d082612c58565b156104055750906001917f500f8acd525a3d9f96ab641587f59e34ef9d02f9397fdd46bb7786273bad1607600080a201610349565b906040519063cdb5999560e01b82526004820152fd5b9060405190631066c96360e31b82526004820152fd5b90508681813d8311610457575b6104488183611fe7565b8101031261027a5751876103c1565b503d61043e565b6040513d6000823e3d90fd5b60405163098f893f60e21b815260048101839052602490fd5b3461027a57600036600319011261027a576020600754604051908152f35b3461027a57600036600319011261027a5760206040517fc9d160ddf8721202a3f3e2bd663b1fdb5675930469632a500038010be1a191dc8152f35b3461027a57604036600319011261027a576104f5611e77565b60015460405163b3596f0760e01b81526001600160a01b039283166004820181905260209391929091849184916024918391165afa90811561045e5783906000926105c2575b60405163313ce56760e01b81529350839060049082905afa90811561045e576105839260009261058b575b5061057761057d91600435906120eb565b916120da565b906120fe565b604051908152f35b61057d9192506105b361057791863d88116105bb575b6105ab8183611fe7565b8101906120c1565b929150610566565b503d6105a1565b915082813d83116105eb575b6105d88183611fe7565b8101031261027a5782600492519161053b565b503d6105ce565b3461027a5761060036611ee8565b80939261060b61220b565b60405163095ea7b360e01b81526001600160a01b03949094166004850181905260248501959095526020949285856044816000885af192831561045e5761067795879461073a575b506040519586938493637706db7560e01b8552604060048601526044850191612066565b90602483015203816000855af191821561045e5760009261070b575b506040516370a0823160e01b81523060048201528381602481855afa90811561045e576000916106de575b50156106ce575b50604051908152f35b6106d790612b0d565b50826106c5565b90508381813d8311610704575b6106f58183611fe7565b8101031261027a5751846106be565b503d6106eb565b9091508281813d8311610733575b6107238183611fe7565b8101031261027a57519083610693565b503d610719565b61075990853d8711610760575b6107518183611fe7565b810190612009565b5087610653565b503d610747565b3461027a57602061077736611fa9565b929161079760405194859384936308f109c360e11b85526004850161211e565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa801561045e576000906107de575b602090604051908152f35b506020813d602011610809575b816107f860209383611fe7565b8101031261027a57602090516107d3565b3d91506107eb565b3461027a57600036600319011261027a576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461027a57604036600319011261027a57610895600435610875611e77565b90806000526000602052610890600160406000200154612359565b6127f5565b005b3461027a57600036600319011261027a5760006108b2612ca5565b6000915b8151831015610956576001600160a01b036108d1848461208a565b5116604051906370a0823160e01b82523060048301526020918281602481855afa92831561045e57600093610921575b505091610913610919926001946123c2565b9061209e565b9201916108b6565b908094929350813d831161094f575b61093a8183611fe7565b8101031261027a579151906109136001610901565b503d610930565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316602082602481845afa91821561045e576000926109c9575b60206105836109be8661091387876123c2565b6109136109136124a1565b91506020823d6020116109f6575b816109e460209383611fe7565b8101031261027a5790519060206109ab565b3d91506109d7565b3461027a57600036600319011261027a57610a26610a1a612ca5565b60405191829182611f64565b0390f35b3461027a57606036600319011261027a57610a43611e8d565b6024359067ffffffffffffffff60443581811161027a57610a68903690600401611eb7565b919092610a7361220b565b60405163095ea7b360e01b81526001600160a01b0391909116600482018190526024820186905260209590939086836044816000895af192831561045e57600093610c50575b50610ae5604051968793849363350376e360e21b85526004850152604060248501526044840191612066565b038183865af192831561045e57600093610bae575b50506040516370a0823160e01b81523060048201528381602481855afa90811561045e57600091610b81575b5015610b71575b50906040519181839283018184528251809152816040850193019160005b828110610b5a57505050500390f35b835185528695509381019392810192600101610b4b565b610b7a90612b0d565b5082610b2d565b90508381813d8311610ba7575b610b988183611fe7565b8101031261027a575184610b26565b503d610b8e565b909192503d806000833e610bc28183611fe7565b810190848183031261027a5780519083821161027a570181601f8201121561027a578051928311610c3a578260051b60405193610c0187830186611fe7565b8452858085019183010192831161027a5785809201905b838210610c2b5750505050908380610afa565b81518152908201908201610c18565b634e487b7160e01b600052604160045260246000fd5b610c6690883d8a11610760576107518183611fe7565b5087610ab9565b3461027a57600036600319011261027a576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316602082602481845afa91821561045e57600092610cf2575b6020610583610ce285856123c2565b610cea6124a1565b91905061209e565b91506020823d602011610d20575b81610d0d60209383611fe7565b8101031261027a57905190610ce2610cd3565b3d9150610d00565b3461027a57610895610d3936611f30565b610d44929192612191565b6001600160a01b031661237f565b3461027a576020610d6236611fa9565b92916107976040519485938493637b5e2c7b60e01b85526004850161211e565b3461027a57600036600319011261027a5760206040517fb3e25b5404b87e5a838579cb5d7481d61ad96ee284d38ec1e97c07ba64e7f6fc8152f35b3461027a57602036600319011261027a57610dd6611e8d565b610dde612267565b6001600160a01b0390811660008181526004602052604090205490919061046a576020602491600154166040519283809263b3596f0760e01b82528660048301525afa90811561045e57600091610e9b575b5015610e8357610e3f81612c58565b15610e6b577f500f8acd525a3d9f96ab641587f59e34ef9d02f9397fdd46bb7786273bad1607600080a2005b6024906040519063cdb5999560e01b82526004820152fd5b60249060405190631066c96360e31b82526004820152fd5b90506020813d602011610ec5575b81610eb660209383611fe7565b8101031261027a575182610e30565b3d9150610ea9565b3461027a57600036600319011261027a57602060405160008152f35b3461027a5760208060031936011261027a57610f03611e8d565b610f0b61231f565b6001600160a01b039081168015610ff057817f0000000000000000000000000000000000000000000000000000000000000000169160065416906040519163095ea7b360e01b9081845260048401526000602484015284836044816000885af190811561045e578593604492610fd3575b50600680546001600160a01b03191684179055610f9761231f565b6000604051958694859384526004840152811960248401525af1801561045e57610fbd57005b8161089592903d10610760576107518183611fe7565b610fe990853d8711610760576107518183611fe7565b5086610f7c565b6040516314e632d960e11b8152600490fd5b3461027a57608036600319011261027a5761101b611e8d565b602435906044359081600f0b80920361027a57829161103861220b565b60405163095ea7b360e01b81526001600160a01b03929092166004830181905260248301949094526020939184816044816000875af1801561045e576110eb575b5060405192630d2680e960e11b845260048401526024830152606435604483015282826064816000855af191821561045e5760009261070b57506040516370a0823160e01b81523060048201528381602481855afa90811561045e576000916106de5750156106ce5750604051908152f35b61110190853d8711610760576107518183611fe7565b5084611079565b3461027a57604036600319011261027a57611121611e77565b600435600052600060205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b3461027a57600036600319011261027a576001546040516001600160a01b039091168152602090f35b3461027a57602036600319011261027a576004356001600160a01b0381169081900361027a576111ac61231f565b604051638c89b64f60e01b8152602081600481855afa90811561045e5760009161122e575b506002548091036112165750600180546001600160a01b031916821790557f3f32684a32a11dabdbb8c0177de80aa3ae36a004d75210335b49e544e48cd0aa600080a2005b60249060405190639b6812b960e01b82526004820152fd5b90506020813d602011611258575b8161124960209383611fe7565b8101031261027a5751826111d1565b3d915061123c565b3461027a57604036600319011261027a5761089561127c611e77565b600435336128aa565b3461027a57600036600319011261027a5761129e61231f565b60065460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015290602090829060449082906000907f0000000000000000000000000000000000000000000000000000000000000000165af1801561045e5761130457005b6108959060203d602011610760576107518183611fe7565b3461027a57604036600319011261027a57611335611e77565b60015460405163b3596f0760e01b81526001600160a01b039283166004820181905260209391929091849184916024918391165afa90811561045e5783906000926113dc575b60405163313ce56760e01b81529350839060049082905afa801561045e576113b26113ba91610583946000916113bf575b506120da565b6004356120eb565b6120fe565b6113d69150863d88116105bb576105ab8183611fe7565b866113ac565b915082813d8311611405575b6113f28183611fe7565b8101031261027a5782600492519161137b565b503d6113e8565b3461027a57602036600319011261027a576001600160a01b0361142d611e8d565b16600052600860205260206040600020541515604051908152f35b3461027a57600036600319011261027a57602060405160ff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461027a57600036600319011261027a57604051806007549182815260208091019260076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688916000905b8282106114ea57610a2685610a1a81890382611fe7565b8354865294850194600193840193909101906114d3565b3461027a57602036600319011261027a5761151a61231f565b600435600255005b3461027a57600036600319011261027a5760206040517f1f29e81ed8f7ae439f042f6b6767d105e87c4eef908508d5d9e550aef35af6448152f35b3461027a5761089561156e36611f30565b916128aa565b3461027a57604036600319011261027a5761158d611e8d565b602435906115996122c3565b8147106115d6576000918291829182916001600160a01b03165af16115bc61286a565b50156115c457005b604051630a12f52160e11b8152600490fd5b60405163cd78605960e01b8152306004820152602490fd5b3461027a57604036600319011261027a57611607611e77565b336001600160a01b0382160361162357610895906004356127f5565b60405163334bd91960e11b8152600490fd5b3461027a57604036600319011261027a57610895600435611654611e77565b9080600052600060205261166f600160406000200154612359565b612777565b3461027a57600036600319011261027a5760206040517f85e8f2d6819d6b24108062d87ea08f54651bcb8960d98062d3faf96e7873b8b98152f35b3461027a57600036600319011261027a5760006116ca612ca5565b6000915b8151831015611768576001600160a01b036116e9848461208a565b5116604051906370a0823160e01b82523060048301526020918281602481855afa92831561045e57600093611733575b50509161091361172b926001946123c2565b9201916116ce565b908094929350813d8311611761575b61174c8183611fe7565b8101031261027a579151906109136001611719565b503d611742565b6105836020916117766124a1565b509061209e565b3461027a57602036600319011261027a5760043560005260006020526020600160406000200154604051908152f35b3461027a576117ba36611ee8565b91906117c461220b565b604051630293577560e41b81526020946001600160a01b038181169592909187826004818a5afa91821561045e57600092611998575b5095949290918794926000975b8189106118905750505061183995506040519586938493635b96faef60e11b8552604060048601526044850191612066565b90602483015203816000855af191821561045e5760009261185f575b506106c590612bf2565b9091508281813d8311611889575b6118778183611fe7565b8101031261027a5751906106c5611855565b503d61186d565b91939550919395966040519063c661065760e01b825280600483015289826024818c5afa91821561045e5785928b9160009161196b575b506118d3838a8c612021565b356118ed575b505060019150019695939188959391611807565b611930906118fc848b8d612021565b60405163095ea7b360e01b81526001600160a01b038816600482015290356024820152948592839160009183906044820190565b0393165af191821561045e5760019261194e575b85928b91506118d9565b611964908b3d8d11610760576107518183611fe7565b508a611944565b61198b9150823d8411611991575b6119838183611fe7565b810190612047565b8c6118c7565b503d611979565b9091508781813d83116119c0575b6119b08183611fe7565b8101031261027a575190886117fa565b503d6119a6565b3461027a57602036600319011261027a576119e0611e8d565b6119e8612267565b6001600160a01b031660008181526004602052604090205415611a6f5760016003541115611a5d57611a1981612a0d565b15611a45577fcebbf63022189259f517d89d98c7c527b44c211d25e443dad13aab2479c7e7b3600080a2005b6024906040519063644e3dd760e11b82526004820152fd5b6040516305bc742560e11b8152600490fd5b60249060405190632108722b60e01b82526004820152fd5b3461027a57600036600319011261027a5760206040517f1a52e20da533a06a1f80a73dba6e5d09cb788f108eae685b8ce6644834e67abe8152f35b3461027a57606036600319011261027a57611adb611e8d565b611ae3611e77565b90611aec6122c3565b600260055414611b7f5760026005556001600160a01b03908116907f00000000000000000000000000000000000000000000000000000000000000001681148015611b62575b611b4a57611b43916044359161237f565b6001600555005b60249060405190638415be8960e01b82526004820152fd5b50611b7a816000526004602052604060002054151590565b611b32565b604051633ee5aeb560e01b8152600490fd5b3461027a57602036600319011261027a5760043567ffffffffffffffff811161027a57611bc2903690600401611eb7565b90611bcb612267565b60005b828110611bd757005b611be5610360828585612021565b611bed612267565b6001600160a01b031660008181526004602052604090205415611a6f5760016003541115611a5d57611c1e81612a0d565b15611a4557906001917fcebbf63022189259f517d89d98c7c527b44c211d25e443dad13aab2479c7e7b3600080a201611bce565b3461027a57602036600319011261027a5760043563ffffffff60e01b811680910361027a57602090637965db0b60e01b8114908115611c97575b506040519015158152f35b6301ffc9a760e01b14905082611c8c565b3461027a5761042036600319011261027a57366101641161027a57366103e41161027a57611cd461220b565b6004356001600160a01b038116810361027a5760405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526103e4356024830152909160209183916044918391600091165af1801561045e57611e20575b50604051633f51256760e21b8152600460008183015b600b8210611df8578360006101648083015b60058310611de1576103e480359085015261040480359085015230610424850152836020816104448160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1801561045e576000906107de57602090604051908152f35b600190608081818581943701920192019190611d72565b60019060209081906001600160a01b03611e1187611ea3565b16815201930191019091611d60565b611e389060203d602011610760576107518183611fe7565b5080611d4a565b3461027a57604036600319011261027a57610895611e5b611e77565b611e63612191565b6004359033906001600160a01b031661237f565b602435906001600160a01b038216820361027a57565b600435906001600160a01b038216820361027a57565b35906001600160a01b038216820361027a57565b9181601f8401121561027a5782359167ffffffffffffffff831161027a576020808501948460051b01011161027a57565b90606060031983011261027a576004356001600160a01b038116810361027a57916024359067ffffffffffffffff821161027a57611f2891600401611eb7565b909160443590565b606090600319011261027a576001600160a01b03600435818116810361027a579160243591604435908116810361027a5790565b602090602060408183019282815285518094520193019160005b828110611f8c575050505090565b83516001600160a01b031685529381019392810192600101611f7e565b61040060031982011261027a576101649181831161027a576004926103e492831161027a57913590565b356001600160a01b038116810361027a5790565b90601f8019910116810190811067ffffffffffffffff821117610c3a57604052565b9081602091031261027a5751801515810361027a5790565b91908110156120315760051b0190565b634e487b7160e01b600052603260045260246000fd5b9081602091031261027a57516001600160a01b038116810361027a5790565b81835290916001600160fb1b03831161027a5760209260051b809284830137010190565b80518210156120315760209160051b010190565b919082018092116120ab57565b634e487b7160e01b600052601160045260246000fd5b9081602091031261027a575160ff8116810361027a5790565b60ff16604d81116120ab57600a0a90565b818102929181159184041417156120ab57565b8115612108570490565b634e487b7160e01b600052601260045260246000fd5b61040081019493929091600090835b600b831061216b575050506101608201906000915b60058310612154575050506103e00152565b600190608081818581943701920192019190612142565b6001906001600160a01b0361217f84611ea3565b1681529201916020918201910161212d565b3360009081527fc191fc48a308d795605d8380942284aa535eb60ab59dded9d8c4eff77cf3c87260205260409020547f1f29e81ed8f7ae439f042f6b6767d105e87c4eef908508d5d9e550aef35af6449060ff16156121ed5750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b3360009081527f35981844e2f7014ed33b54358b929d550bdab17164e935e079ba150ceda75ff860205260409020547fc9d160ddf8721202a3f3e2bd663b1fdb5675930469632a500038010be1a191dc9060ff16156121ed5750565b3360009081527fb56095460044281636dd3a77e227972b73971c7d766b38feb76e4e7f12e8c60260205260409020547f85e8f2d6819d6b24108062d87ea08f54651bcb8960d98062d3faf96e7873b8b99060ff16156121ed5750565b3360009081527fa921dec465a2db617c1283eb3fd0c7be03ef4a04bbcfeba0659a6baa62f9000160205260409020547fb3e25b5404b87e5a838579cb5d7481d61ad96ee284d38ec1e97c07ba64e7f6fc9060ff16156121ed5750565b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205460ff16156121ed5750565b80600052600060205260406000203360005260205260ff60406000205416156121ed5750565b60405163a9059cbb60e01b60208201526001600160a01b039290921660248301526044808301939093529181526123c0916123bb606483611fe7565b61292d565b565b60015460405163b3596f0760e01b81526001600160a01b0392831660048201819052929091602091829184916024918391165afa91821561045e57600092612470575b50806004936040519485809263313ce56760e01b82525afa801561045e5761243b9360ff92600092612453575b505016926120eb565b604d82116120ab5761245091600a0a906120fe565b90565b6124699250803d106105bb576105ab8183611fe7565b3880612432565b9291508083813d831161249a575b6124888183611fe7565b8101031261027a579151909180612405565b503d61247e565b6000906000916007546000905b8082106124bb5750509190565b600760009081527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6888301546040516370a0823160e01b815230600482015293969492939192839290916001600160a01b0316602082602481845afa91821561045e57600092612743575b506040516318160ddd60e01b815290602082600481845afa91821561045e5760009261270f575b50604051630293577560e41b815290602082600481845afa91821561045e576000926126db575b509291906000935b8185106125a55750505050509161259761259d9260019461209e565b9461209e565b9401906124ae565b90919293966040519063c661065760e01b8252886004830152602082602481865afa91821561045e576000926126ba575b50604051634903b0d160e01b8152600481018a9052602081602481875afa90811561045e5786918891600091612680575b50916113ba6126199261261f946120eb565b836123c2565b916001600160a01b039081167f00000000000000000000000000000000000000000000000000000000000000009091160361266c576001916126609161209e565b975b019392919061257b565b979660019161267a9161209e565b96612662565b925050506020813d6020116126b2575b8161269d60209383611fe7565b8101031261027a5751859087906113ba612607565b3d9150612690565b6126d491925060203d602011611991576119838183611fe7565b90386125d6565b9091506020813d602011612707575b816126f760209383611fe7565b8101031261027a57519038612573565b3d91506126ea565b9091506020813d60201161273b575b8161272b60209383611fe7565b8101031261027a5751903861254c565b3d915061271e565b9091506020813d60201161276f575b8161275f60209383611fe7565b8101031261027a57519038612525565b3d9150612752565b9060009180835282602052604083209160018060a01b03169182845260205260ff604084205416156000146127f057808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b9060009180835282602052604083209160018060a01b03169182845260205260ff6040842054166000146127f05780835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b3d156128a5573d9067ffffffffffffffff8211610c3a5760405191612899601f8201601f191660200184611fe7565b82523d6000602084013e565b606090565b9060018060a01b03809316928360005260046020526040600020541561291457604051926323b872dd60e01b602085015216602483015230604483015260648201526064815260a081019181831067ffffffffffffffff841117610c3a576123c09260405261292d565b604051632762993f60e11b815260048101859052602490fd5b6000806129569260018060a01b03169360208151910182865af161294f61286a565b9083612d13565b8051908115159182612984575b505061296c5750565b60249060405190635274afe760e01b82526004820152fd5b6129979250602080918301019101612009565b153880612963565b6003548110156120315760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b6007548110156120315760076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880190600090565b600090808252600490816020526040832054801515600014612b075760001990808201818111612af45760035490838201918211612ae157818103612a97575b5050506003548015612a8457810190612a658261299f565b909182549160031b1b1916905560035582526020526040812055600190565b634e487b7160e01b855260318452602485fd5b612acc612aa6612ab59361299f565b90549060031b1c92839261299f565b819391549060031b91821b91600019901b19161790565b90558552836020526040852055388080612a4d565b634e487b7160e01b875260118652602487fd5b634e487b7160e01b865260118552602486fd5b50505090565b60008181526008602052604081205490919080156127f05760001990808201818111612bde5760075490838201918211612bca57818103612b96575b5050506007548015612b8257810190612b61826129d6565b909182549160031b1b19169055600755815260086020526040812055600190565b634e487b7160e01b84526031600452602484fd5b612bb4612ba5612ab5936129d6565b90549060031b1c9283926129d6565b9055845260086020526040842055388080612b49565b634e487b7160e01b86526011600452602486fd5b634e487b7160e01b85526011600452602485fd5b600081815260086020526040812054612c5357600754600160401b811015612c3f579082612c2b612ab5846001604096016007556129d6565b905560075492815260086020522055600190565b634e487b7160e01b82526041600452602482fd5b905090565b600081815260046020526040812054612c5357600354600160401b811015612c3f579082612c91612ab58460016040960160035561299f565b905560035492815260046020522055600190565b6040519060035480835282602091602082019060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b936000905b828210612cf9575050506123c092500383611fe7565b855484526001958601958895509381019390910190612ce3565b90612d2857508051156115c457805190602001fd5b81511580612d5b575b612d39575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15612d3156fea2646970667358221220d1cc63bdbff580c47b2cd30033e73fdd4c5b031e4074b0fb6720674db015d07b64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addLiquidity(address,uint256[],uint256)": {
        "details": "Adds liquidity to a Curve pool.",
        "params": {
          "amounts": "The amounts of tokens to add as liquidity",
          "minMintAmount": "The minimum amount of LP tokens to receive",
          "poolAddress": "The address of the Curve pool"
        },
        "returns": {
          "_0": "The amount of LP tokens received"
        }
      },
      "allowCollateral(address)": {
        "params": {
          "collateralAsset": "The address of the collateral asset"
        }
      },
      "allowCollaterals(address[])": {
        "details": "Helper for allowing multiple collateral tokens.",
        "params": {
          "tokens": "An array of token addresses to be added as collateral."
        }
      },
      "approveAmoManager()": {
        "details": "Only callable by the contract owner or an account with the DEFAULT_ADMIN_ROLE"
      },
      "assetAmountFromValue(uint256,address)": {
        "params": {
          "asset": "The address of the asset",
          "usdValue": "The USD value"
        },
        "returns": {
          "assetAmount": "The amount of the asset"
        }
      },
      "assetValueFromAmount(uint256,address)": {
        "params": {
          "asset": "The address of the asset",
          "assetAmount": "The amount of the asset"
        },
        "returns": {
          "usdValue": "The USD value of the asset"
        }
      },
      "constructor": {
        "params": {
          "_admin": "Address of the admin",
          "_amoManager": "Address of the AMO manager",
          "_amoTrader": "Address allowed to perform AMO trading operations",
          "_collateralWithdrawer": "Address allowed to withdraw collateral",
          "_dusd": "Address of the DUSD token",
          "_oracle": "Address of the price oracle",
          "_recoverer": "Address allowed to recover tokens",
          "_router": "Address of the Curve Router NG"
        }
      },
      "deposit(uint256,address)": {
        "params": {
          "collateralAmount": "The amount of collateral to deposit",
          "collateralAsset": "The address of the collateral asset"
        }
      },
      "depositFrom(address,uint256,address)": {
        "params": {
          "collateralAmount": "The amount of collateral to deposit",
          "collateralAsset": "The address of the collateral asset",
          "depositer": "The address providing the collateral"
        }
      },
      "disallowCollateral(address)": {
        "details": "Requires at least one collateral asset to remain supported",
        "params": {
          "collateralAsset": "The address of the collateral asset to disallow"
        }
      },
      "disallowCollaterals(address[])": {
        "details": "Helper for disallowing multiple collateral tokens.",
        "params": {
          "tokens": "An array of token addresses to be removed from collateral."
        }
      },
      "getAllLpTokens()": {
        "returns": {
          "_0": "An array of all LP token addresses."
        }
      },
      "getExpectedInput(address[11],uint256[4][5],uint256)": {
        "params": {
          "amountOut": "The desired amount of output tokens",
          "route": "Array of token addresses representing the swap path",
          "swapParams": "Array of swap parameters for each hop"
        },
        "returns": {
          "_0": "uint256 The expected amount of input tokens required"
        }
      },
      "getExpectedOutput(address[11],uint256[4][5],uint256)": {
        "params": {
          "amountIn": "The amount of input tokens",
          "route": "Array of token addresses representing the swap path",
          "swapParams": "Array of swap parameters for each hop"
        },
        "returns": {
          "_0": "uint256 The expected amount of output tokens"
        }
      },
      "getLpTokenCount()": {
        "returns": {
          "_0": "The number of LP tokens."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasLpToken(address)": {
        "params": {
          "lpToken": "The LP token address to check."
        },
        "returns": {
          "_0": "True if the LP token is in the set, false otherwise."
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isCollateralSupported(address)": {
        "params": {
          "collateralAsset": "The address of the collateral asset to check"
        },
        "returns": {
          "_0": "bool True if the asset is supported, false otherwise"
        }
      },
      "listCollateral()": {
        "returns": {
          "_0": "address[] Array of collateral asset addresses"
        }
      },
      "recoverERC20(address,address,uint256)": {
        "params": {
          "amount": "The amount of tokens to recover",
          "to": "The address to send the tokens to",
          "token": "The address of the token to recover"
        }
      },
      "recoverETH(address,uint256)": {
        "params": {
          "amount": "The amount of ETH to recover",
          "to": "The address to send the ETH to"
        }
      },
      "removeLiquidity(address,uint256,uint256[])": {
        "details": "Removes liquidity from a Curve pool.",
        "params": {
          "lpTokenAmount": "The amount of LP tokens to burn",
          "minAmounts": "The minimum amounts of tokens to receive",
          "poolAddress": "The address of the Curve pool"
        },
        "returns": {
          "_0": "The amounts of tokens received"
        }
      },
      "removeLiquidityImbalance(address,uint256[],uint256)": {
        "details": "Removes liquidity from a Curve pool imbalanced.",
        "params": {
          "amounts": "The amounts of tokens to withdraw",
          "maxBurnAmount": "The maximum amount of LP tokens to burn",
          "poolAddress": "The address of the Curve pool"
        },
        "returns": {
          "_0": "The actual amount of LP tokens burned"
        }
      },
      "removeLiquidityOneCoin(address,uint256,int128,uint256)": {
        "details": "Removes liquidity from a Curve pool in a single coin.",
        "params": {
          "i": "The index of the coin to receive",
          "lpTokenAmount": "The amount of LP tokens to burn",
          "minAmount": "The minimum amount of tokens to receive",
          "poolAddress": "The address of the Curve pool"
        },
        "returns": {
          "_0": "The amount of tokens received"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setAmoManager(address)": {
        "details": "Only callable by an account with the DEFAULT_ADMIN_ROLE",
        "params": {
          "_newAmoManager": "The address of the new AmoManager"
        }
      },
      "setBaseCurrencyUnit(uint256)": {
        "details": "Only used if the oracle's base currency unit changes",
        "params": {
          "_newBaseCurrencyUnit": "The new base currency unit to set"
        }
      },
      "setOracle(address)": {
        "params": {
          "newOracle": "The new oracle to use"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "swapExactIn(address[11],uint256[4][5],uint256,uint256)": {
        "params": {
          "amountIn": "The exact amount of input tokens to swap",
          "minAmountOut": "The minimum amount of output tokens to receive",
          "route": "Array of token addresses representing the swap path",
          "swapParams": "Array of swap parameters for each hop"
        },
        "returns": {
          "_0": "uint256 The amount of output tokens received"
        }
      },
      "totalCollateralValue()": {
        "details": "Calculates the total collateral value of the vault.",
        "returns": {
          "_0": "The total collateral value in BASE_CURRENCY_UNIT."
        }
      },
      "totalDusdValue()": {
        "returns": {
          "_0": "The total value of dUSD in the vault, denominated in the base value (e.g., USD)"
        }
      },
      "totalValue()": {
        "returns": {
          "_0": "The total value of the vault, denominated in the base value (e.g., USD)"
        }
      },
      "withdraw(uint256,address)": {
        "params": {
          "collateralAmount": "The amount of collateral to withdraw",
          "collateralAsset": "The address of the collateral asset"
        }
      },
      "withdrawTo(address,uint256,address)": {
        "params": {
          "collateralAmount": "The amount of collateral to withdraw",
          "collateralAsset": "The address of the collateral asset",
          "recipient": "The address receiving the collateral"
        }
      }
    },
    "title": "CurveStableSwapNGAmoVault",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowCollateral(address)": {
        "notice": "Allows a new collateral asset"
      },
      "approveAmoManager()": {
        "notice": "Approves the AmoManager to spend dUSD on behalf of this contract"
      },
      "assetAmountFromValue(uint256,address)": {
        "notice": "Calculates the amount of an asset that corresponds to a given USD value"
      },
      "assetValueFromAmount(uint256,address)": {
        "notice": "Calculates the USD value of a given amount of an asset"
      },
      "constructor": {
        "notice": "Initializes the CurveStableSwapNGAmoVault"
      },
      "deposit(uint256,address)": {
        "notice": "Deposit collateral into the vault"
      },
      "depositFrom(address,uint256,address)": {
        "notice": "Deposit collateral into the vault from a specific address"
      },
      "disallowCollateral(address)": {
        "notice": "Disallows a previously supported collateral asset"
      },
      "getAllLpTokens()": {
        "notice": "Returns a list of all LP token addresses."
      },
      "getExpectedInput(address[11],uint256[4][5],uint256)": {
        "notice": "Gets the expected input amount for a desired output amount"
      },
      "getExpectedOutput(address[11],uint256[4][5],uint256)": {
        "notice": "Gets the expected output amount for a swap with exact input"
      },
      "getLpTokenCount()": {
        "notice": "Returns the number of LP token positions."
      },
      "hasLpToken(address)": {
        "notice": "Checks if the given LP token is in the set."
      },
      "isCollateralSupported(address)": {
        "notice": "Checks if a given asset is supported as collateral"
      },
      "listCollateral()": {
        "notice": "Returns a list of all supported collateral assets"
      },
      "recoverERC20(address,address,uint256)": {
        "notice": "Recovers ERC20 tokens accidentally sent to the contract"
      },
      "recoverETH(address,uint256)": {
        "notice": "Recovers ETH accidentally sent to the contract"
      },
      "setAmoManager(address)": {
        "notice": "Sets a new AmoManager address"
      },
      "setBaseCurrencyUnit(uint256)": {
        "notice": "Updates the base currency unit used for price calculations"
      },
      "setOracle(address)": {
        "notice": "Sets the oracle to use for collateral valuation"
      },
      "swapExactIn(address[11],uint256[4][5],uint256,uint256)": {
        "notice": "Executes a swap with exact input amount on Curve"
      },
      "totalDusdValue()": {
        "notice": "Calculates the total value of dUSD in the vault"
      },
      "totalValue()": {
        "notice": "Calculates the total value of the vault"
      },
      "withdraw(uint256,address)": {
        "notice": "Withdraws collateral from the vault"
      },
      "withdrawTo(address,uint256,address)": {
        "notice": "Withdraws collateral from the vault to a specific address"
      }
    },
    "notice": "Implementation of AmoVault for Curve StableSwap NG pools",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/dusd/CurveStableSwapNGAmoVault.sol:CurveStableSwapNGAmoVault",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 6203,
        "contract": "contracts/dusd/CurveStableSwapNGAmoVault.sol:CurveStableSwapNGAmoVault",
        "label": "oracle",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPriceOracleGetter)6309"
      },
      {
        "astId": 6205,
        "contract": "contracts/dusd/CurveStableSwapNGAmoVault.sol:CurveStableSwapNGAmoVault",
        "label": "baseCurrencyUnit",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4754,
        "contract": "contracts/dusd/CurveStableSwapNGAmoVault.sol:CurveStableSwapNGAmoVault",
        "label": "_supportedCollaterals",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)2637_storage"
      },
      {
        "astId": 1102,
        "contract": "contracts/dusd/CurveStableSwapNGAmoVault.sol:CurveStableSwapNGAmoVault",
        "label": "_status",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4526,
        "contract": "contracts/dusd/CurveStableSwapNGAmoVault.sol:CurveStableSwapNGAmoVault",
        "label": "amoManager",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(AmoManager)4470"
      },
      {
        "astId": 5262,
        "contract": "contracts/dusd/CurveStableSwapNGAmoVault.sol:CurveStableSwapNGAmoVault",
        "label": "_lpTokens",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(AddressSet)2637_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AmoManager)4470": {
        "encoding": "inplace",
        "label": "contract AmoManager",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracleGetter)6309": {
        "encoding": "inplace",
        "label": "contract IPriceOracleGetter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2637_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2636,
            "contract": "contracts/dusd/CurveStableSwapNGAmoVault.sol:CurveStableSwapNGAmoVault",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2322_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/dusd/CurveStableSwapNGAmoVault.sol:CurveStableSwapNGAmoVault",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/dusd/CurveStableSwapNGAmoVault.sol:CurveStableSwapNGAmoVault",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2322_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2317,
            "contract": "contracts/dusd/CurveStableSwapNGAmoVault.sol:CurveStableSwapNGAmoVault",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2321,
            "contract": "contracts/dusd/CurveStableSwapNGAmoVault.sol:CurveStableSwapNGAmoVault",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}