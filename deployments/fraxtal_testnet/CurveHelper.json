{
  "address": "0xC32F2a476e7591089D3e222F19fE588197B797aF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAmountIn",
          "type": "uint256"
        }
      ],
      "name": "InputAmountExceedsMaximum",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "decodeCurveSwapExtraParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[11]",
              "name": "route",
              "type": "address[11]"
            },
            {
              "internalType": "uint256[4][5]",
              "name": "swapParams",
              "type": "uint256[4][5]"
            },
            {
              "internalType": "uint256",
              "name": "swapSlippageBufferBps",
              "type": "uint256"
            }
          ],
          "internalType": "struct CurveHelper.CurveSwapExtraParams",
          "name": "_swapExtraParams",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[11]",
          "name": "route",
          "type": "address[11]"
        }
      ],
      "name": "getLastTokenInRoute",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x8970d5eafb283f7bc47b77c276042e7b396fc48feb9ca4cc594397b1170831b3",
  "receipt": {
    "to": null,
    "from": "0xd2f775Ff2cD41bfe43C7A8c016eD10393553fe44",
    "contractAddress": "0xC32F2a476e7591089D3e222F19fE588197B797aF",
    "transactionIndex": 1,
    "gasUsed": "749526",
    "logsBloom": "0x
    "blockHash": "0x965085a09ff0443d8db65c965ea2e65a4da288f4c0c27bbc7f8c13576c71ce78",
    "transactionHash": "0x8970d5eafb283f7bc47b77c276042e7b396fc48feb9ca4cc594397b1170831b3",
    "logs": [],
    "blockNumber": 22286549,
    "cumulativeGasUsed": "795495",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c5bdcb9de6a27bcda5a00bc2d8dce9a2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"InputAmountExceedsMaximum\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decodeCurveSwapExtraParams\",\"outputs\":[{\"components\":[{\"internalType\":\"address[11]\",\"name\":\"route\",\"type\":\"address[11]\"},{\"internalType\":\"uint256[4][5]\",\"name\":\"swapParams\",\"type\":\"uint256[4][5]\"},{\"internalType\":\"uint256\",\"name\":\"swapSlippageBufferBps\",\"type\":\"uint256\"}],\"internalType\":\"struct CurveHelper.CurveSwapExtraParams\",\"name\":\"_swapExtraParams\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[11]\",\"name\":\"route\",\"type\":\"address[11]\"}],\"name\":\"getLastTokenInRoute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getLastTokenInRoute(address[11])\":{\"notice\":\"Get the last non-zero token in the route\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/curve/CurveHelper.sol\":\"CurveHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0240f7703cff32a61ee3e9fbb339e09a944260432a9ef37debf3692b1a6c8049\",\"license\":\"AGPL-3.0-only\"},\"contracts/curve/CurveHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.20;\\n\\nimport {ICurveRouterNgPoolsOnlyV1} from \\\"contracts/curve/interfaces/ICurveRouterNgPoolsOnlyV1.sol\\\";\\nimport {ICurveRouterWrapper} from \\\"contracts/curve/interfaces/ICurveRouterWrapper.sol\\\";\\nimport {Constants} from \\\"contracts/shared/Constants.sol\\\";\\nimport {ERC20} from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\n\\nlibrary CurveHelper {\\n    /// @notice Get the last non-zero token in the route\\n    function getLastTokenInRoute(\\n        address[11] memory route\\n    ) public pure returns (address) {\\n        for (uint256 i = route.length - 1; i >= 0; i--) {\\n            if (route[i] != address(0)) {\\n                return route[i];\\n            }\\n        }\\n        revert(\\\"No token in route\\\");\\n    }\\n\\n    struct CurveSwapExtraParams {\\n        address[11] route;\\n        uint256[4][5] swapParams;\\n        uint256 swapSlippageBufferBps;\\n    }\\n\\n    function decodeCurveSwapExtraParams(\\n        bytes memory data\\n    ) public pure returns (CurveSwapExtraParams memory _swapExtraParams) {\\n        (\\n            _swapExtraParams.route,\\n            _swapExtraParams.swapParams,\\n            _swapExtraParams.swapSlippageBufferBps\\n        ) = abi.decode(data, (address[11], uint256[4][5], uint256));\\n    }\\n\\n    function swapExactOutput(\\n        ICurveRouterNgPoolsOnlyV1 _curveRouter,\\n        address[11] memory _route,\\n        uint256[4][5] memory _swapParams,\\n        address[11] memory _reverseRoute,\\n        uint256[4][5] memory _reverseSwapParams,\\n        uint256 swapSlippageBufferBps,\\n        uint256 maxSlippageSurplusSwapBps,\\n        uint256 _amountOutput,\\n        uint256 _maxInputAmount\\n    ) public returns (uint256) {\\n        // As Curve does not support exact output swaps, we need to calculate the required input amount\\n        // and add a buffer to account for potential slippage. Then swapping back the surplus amount\\n\\n        address inputToken = _route[0];\\n\\n        // Calculate the required input amount\\n        uint256 estimatedAmountIn = _curveRouter.get_dx(\\n            _route,\\n            _swapParams,\\n            _amountOutput\\n        );\\n\\n        // Add a buffer to account for potential slippage\\n        uint256 amountIn = (estimatedAmountIn *\\n            (Constants.ONE_HUNDRED_PERCENT_BPS + swapSlippageBufferBps)) /\\n            Constants.ONE_HUNDRED_PERCENT_BPS;\\n\\n        // amountIn cannot exceed current balance of input token\\n        uint256 inputTokenBalance = ERC20(inputToken).balanceOf(address(this));\\n        if (amountIn > inputTokenBalance) {\\n            amountIn = inputTokenBalance;\\n        }\\n\\n        if (amountIn > _maxInputAmount) {\\n            revert ICurveRouterWrapper.InputAmountExceedsMaximum(\\n                amountIn,\\n                _maxInputAmount\\n            );\\n        }\\n\\n        // Input token balance before the swap\\n        uint256 inputTokenBalanceBefore = ERC20(inputToken).balanceOf(\\n            address(this)\\n        );\\n\\n        // Approve the router to spend our tokens\\n        ERC20(inputToken).approve(address(_curveRouter), _maxInputAmount);\\n\\n        // Execute the swap\\n        uint256 actualAmountOut = _curveRouter.exchange(\\n            _route,\\n            _swapParams,\\n            amountIn,\\n            _amountOutput, // This is now our minimum expected output\\n            address(this) // The receiver of the output tokens\\n        );\\n\\n        // Get the difference between the actual and expected output\\n        uint256 redundantAmount = actualAmountOut - _amountOutput;\\n\\n        // Swap the redundant amount back to the input token with the reverse route\\n        if (redundantAmount > 0) {\\n            // Calculate estimated amount out for the swap back\\n            uint256 estimatedSwapBackAmountOut = _curveRouter.get_dy(\\n                _reverseRoute,\\n                _reverseSwapParams,\\n                redundantAmount\\n            );\\n\\n            // Calculate minimum output amount using maxSlippageSurplusSwapBps\\n            uint256 minSwapBackAmountOut = (estimatedSwapBackAmountOut *\\n                (Constants.ONE_HUNDRED_PERCENT_BPS -\\n                    maxSlippageSurplusSwapBps)) /\\n                Constants.ONE_HUNDRED_PERCENT_BPS;\\n\\n            address outputToken = getLastTokenInRoute(_route);\\n\\n            ERC20(outputToken).approve(address(_curveRouter), redundantAmount);\\n            _curveRouter.exchange(\\n                _reverseRoute,\\n                _reverseSwapParams,\\n                redundantAmount,\\n                minSwapBackAmountOut,\\n                address(this)\\n            );\\n        }\\n\\n        // Input token balance after the swap\\n        uint256 inputTokenBalanceAfter = ERC20(inputToken).balanceOf(\\n            address(this)\\n        );\\n\\n        if (inputTokenBalanceAfter < inputTokenBalanceBefore) {\\n            uint256 usedInputAmount = inputTokenBalanceBefore -\\n                inputTokenBalanceAfter;\\n\\n            return usedInputAmount;\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a8aeb8779bc8cbe236d87db1297f270f05de3ada68d71a6b45d92918d8b0b5e\",\"license\":\"GNU AGPLv3\"},\"contracts/curve/interfaces/ICurveRouterNgPoolsOnlyV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface for Curve.Fi RouterNG contract (pools-only version 1).\\n * @dev Generated from original ABI: https://fraxscan.com/address/0x9f2Fa7709B30c75047980a0d70A106728f0Ef2db#code\\n */\\n\\ninterface ICurveRouterNgPoolsOnlyV1 {\\n    event Exchange(\\n        address indexed sender,\\n        address indexed receiver,\\n        address[11] route,\\n        uint256[4][5] swap_params,\\n        uint256 in_amount,\\n        uint256 out_amount\\n    );\\n\\n    function exchange(\\n        address[11] calldata _route,\\n        uint256[4][5] calldata _swap_params,\\n        uint256 _amount,\\n        uint256 _min_dy\\n    ) external payable returns (uint256);\\n\\n    function exchange(\\n        address[11] calldata _route,\\n        uint256[4][5] calldata _swap_params,\\n        uint256 _amount,\\n        uint256 _min_dy,\\n        address _receiver\\n    ) external payable returns (uint256);\\n\\n    function get_dy(\\n        address[11] calldata _route,\\n        uint256[4][5] calldata _swap_params,\\n        uint256 _amount\\n    ) external view returns (uint256);\\n\\n    function get_dx(\\n        address[11] calldata _route,\\n        uint256[4][5] calldata _swap_params,\\n        uint256 _out_amount\\n    ) external view returns (uint256);\\n\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x1856b6ab2e9e5446f4f3052a776625ca39569a9844f4c5936f539dab3036cb1f\",\"license\":\"MIT\"},\"contracts/curve/interfaces/ICurveRouterWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"./IRouterNG.sol\\\";\\n\\ninterface ICurveRouterWrapper {\\n    error InsufficientOutputAmount(uint256 amountOut, uint256 minAmountOut);\\n    error InputAmountExceedsMaximum(uint256 amountIn, uint256 maxAmountIn);\\n    error InvalidRouteLength(address[11] route);\\n    error InvalidInputTokenInRoute(address tokenIn, address[11] route);\\n    error NotFoundKeyForSwapExtraParams(\\n        address inputToken,\\n        address outputToken,\\n        string key\\n    );\\n    error DuplicateKeyForSwapExtraParams(\\n        address inputToken,\\n        address outputToken,\\n        string key\\n    );\\n\\n    function router() external view returns (ICurveRouterNG);\\n\\n    /**\\n     * @dev Executes a token swap on Curve with exact input\\n     * @param route The route of the swap\\n     * @param swapParams The swap parameters\\n     * @param amountIn The exact amount of input tokens\\n     * @param minAmountOut The minimum amount of output tokens to receive\\n     * @param pools The pools to use for the swap\\n     * @param tokenIn The address of the input token\\n     * @return The amount of output tokens received\\n     */\\n    function swapExactIn(\\n        address[11] calldata route,\\n        uint256[5][5] calldata swapParams,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address[5] calldata pools,\\n        address tokenIn\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Executes a token swap on Curve with exact output\\n     * @param route The route of the swap\\n     * @param swapParams The swap parameters\\n     * @param amountOut The exact amount of output tokens to receive\\n     * @param maxAmountIn The maximum amount of input tokens to spend\\n     * @param pools The pools to use for the swap\\n     * @param tokenIn The address of the input token\\n     * @return The amount of input tokens spent\\n     */\\n    function swapExactOutput(\\n        address[11] calldata route,\\n        uint256[5][5] calldata swapParams,\\n        uint256 amountOut,\\n        uint256 maxAmountIn,\\n        address[5] calldata pools,\\n        address tokenIn\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Gets the expected output amount for a swap\\n     * @param route The route of the swap\\n     * @param swapParams The swap parameters\\n     * @param amountIn The amount of input tokens\\n     * @param pools The pools to use for the swap\\n     * @return The expected amount of output tokens\\n     */\\n    function getExpectedOutput(\\n        address[11] calldata route,\\n        uint256[5][5] calldata swapParams,\\n        uint256 amountIn,\\n        address[5] calldata pools\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Gets the expected input amount for a desired output amount\\n     * @param route The route of the swap\\n     * @param swapParams The swap parameters\\n     * @param amountOut The desired amount of output tokens\\n     * @param pools The pools to use for the swap\\n     * @return The expected amount of input tokens required\\n     */\\n    function getExpectedInput(\\n        address[11] calldata route,\\n        uint256[5][5] calldata swapParams,\\n        uint256 amountOut,\\n        address[5] calldata pools\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaf6a6edbfa6766fc0180120ccf3b8e699afa10f704bcf44bf9fb9a62bf6460c2\",\"license\":\"MIT\"},\"contracts/curve/interfaces/IRouterNG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface for Curve.Fi RouterNG contract.\\n * @dev See original implementation in official repository:\\n * https://github.com/curvefi/curve-router-ng/blob/master/contracts/Router.vy\\n * ABI: https://etherscan.io/address/0x16C6521Dff6baB339122a0FE25a9116693265353#code\\n */\\n\\ninterface ICurveRouterNG {\\n    event Exchange(\\n        address indexed sender,\\n        address indexed receiver,\\n        address[11] route,\\n        uint256[5][5] swap_params,\\n        address[5] pools,\\n        uint256 in_amount,\\n        uint256 out_amount\\n    );\\n\\n    fallback() external payable;\\n\\n    receive() external payable;\\n\\n    function exchange(\\n        address[11] calldata _route,\\n        uint256[5][5] calldata _swap_params,\\n        uint256 _amount,\\n        uint256 _min_dy\\n    ) external payable returns (uint256);\\n\\n    function exchange(\\n        address[11] calldata _route,\\n        uint256[5][5] calldata _swap_params,\\n        uint256 _amount,\\n        uint256 _min_dy,\\n        address[5] calldata _pools\\n    ) external payable returns (uint256);\\n\\n    function exchange(\\n        address[11] calldata _route,\\n        uint256[5][5] calldata _swap_params,\\n        uint256 _amount,\\n        uint256 _min_dy,\\n        address[5] calldata _pools,\\n        address _receiver\\n    ) external payable returns (uint256);\\n\\n    function get_dy(\\n        address[11] calldata _route,\\n        uint256[5][5] calldata _swap_params,\\n        uint256 _amount\\n    ) external view returns (uint256);\\n\\n    function get_dy(\\n        address[11] calldata _route,\\n        uint256[5][5] calldata _swap_params,\\n        uint256 _amount,\\n        address[5] calldata _pools\\n    ) external view returns (uint256);\\n\\n    function get_dx(\\n        address[11] calldata _route,\\n        uint256[5][5] calldata _swap_params,\\n        uint256 _out_amount,\\n        address[5] calldata _pools\\n    ) external view returns (uint256);\\n\\n    function get_dx(\\n        address[11] calldata _route,\\n        uint256[5][5] calldata _swap_params,\\n        uint256 _out_amount,\\n        address[5] calldata _pools,\\n        address[5] calldata _base_pools\\n    ) external view returns (uint256);\\n\\n    function get_dx(\\n        address[11] calldata _route,\\n        uint256[5][5] calldata _swap_params,\\n        uint256 _out_amount,\\n        address[5] calldata _pools,\\n        address[5] calldata _base_pools,\\n        address[5] calldata _base_tokens\\n    ) external view returns (uint256);\\n\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe4f1c83dcb86b1da6558bc1b4f2e87ad9771fcaf5f813a836dfdc36acb89a925\",\"license\":\"MIT\"},\"contracts/shared/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Constants {\\n    // Shared definitions of how we represent percentages and basis points\\n    uint16 public constant ONE_BPS = 100; // 1 basis point with 2 decimals\\n    uint32 public constant ONE_PERCENT_BPS = ONE_BPS * 100;\\n    uint32 public constant ONE_HUNDRED_PERCENT_BPS = ONE_PERCENT_BPS * 100;\\n\\n    uint32 public constant ORACLE_BASE_CURRENCY_UNIT = 1e8;\\n}\\n\",\"keccak256\":\"0xcc25566eb9a2e10e6861ef828987039329e61385929384237cd3cf4429c8d819\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001d57610c9690816100238239308161038b0152f35b600080fdfe60806040908082526004908136101561001757600080fd5b600090813560e01c9081633fff811314610384575080636d5fe7ce146103085763fd47dd581461004657600080fd5b602090816003193601126103055782359167ffffffffffffffff9384841161030157366023850112156103015783810135948086116102ee57865196601f96610097818901601f191686018a6105f4565b8089528489019636602483830101116102ea5781879260248893018a378a0101528051906060820192828410908411176102d7578281526100d783610589565b610160928336823782528482019181516100f0816105bc565b86885b60a081106102bb5750508352818101978789528a518b01998b888c019b6104009d8e9103126102b7578b603f820112156102b75784519b6101338d610589565b8c61018083019482861161028c57905b8582106102945750508061019f83011215610290578551939291908e610168866105bc565b8592019381851161028c57908e9695949392919a999a915b84831061021a5750505050518a528452525196878587915b600b83106101fa575050505051918601919084925b600584106101c157888888516103e0820152f35b8483518288905b8582106101e3575050506080600192019301930192916101ad565b9280839460019394518152019301910187926101c8565b83516001600160a01b031681529281019260019290920191879101610198565b90838382949596979899509c9b9c01121561028c57875161023a816105d8565b806080850184811161028857918e9286949294905b808210610270575050608093508152019201908e96959493929a999a610180565b919381939581925181520192018f939194929461024f565b8f80fd5b8c80fd5b8a80fd5b81516001600160a01b03811681036102b3578152908b01908b01610143565b8d80fd5b8980fd5b84516102c6816105d8565b6080368237818401520187906100f3565b634e487b7160e01b865260418452602486fd5b8680fd5b634e487b7160e01b845260418252602484fd5b8280fd5b80fd5b5082906101603660031901126103055736602312156103055781519261032d84610589565b83916101649136831161038057925b8284106103605760208561034f88610660565b90516001600160a01b039091168152f35b83356001600160a01b03811681036103015781526020938401930161033c565b5080fd5b84915083307f00000000000000000000000000000000000000000000000000000000000000001461056c5761086036600319011261056c576001600160a01b039390358481168103610380573660431215610380576103e283610589565b6101849183368411610380576024905b848210610570575050366101a3121561030557845195610411876105bc565b866104049436861161056c57905b85821061051c5750503661042312156103805785519061043e82610589565b81906105649536871161051857915b8683106104ff575050503661058312156103805785519161046d836105bc565b826107e49536871161030157905b8682106104ab576020896104a48c8b8b8b8b8b61084435956108243595610804359535946107cc565b9051908152f35b36601f830112156103015788516104c1816105d8565b80608084013681116104fb5784915b8183106104eb5750505081602091608093520191019061047b565b82358152602092830192016104d0565b8580fd5b823582811681036104fb5781526020928301920161044d565b8480fd5b36601f8301121561056c578751610532816105d8565b80608084013681116102ea5784915b81831061055c5750505081602091608093520191019061041f565b8235815260209283019201610541565b8380fd5b8135888116810361056c578152602091820191016103f2565b610160810190811067ffffffffffffffff8211176105a657604052565b634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff8211176105a657604052565b6080810190811067ffffffffffffffff8211176105a657604052565b90601f8019910116810190811067ffffffffffffffff8211176105a657604052565b9190820391821161062357565b634e487b7160e01b600052601160045260246000fd5b90600b81101561064a5760051b0190565b634e487b7160e01b600052603260045260246000fd5b90600a5b6001600160a01b03806106778386610639565b51166106a25750801561068d5760001901610664565b60246000634e487b7160e01b81526011600452fd5b9192906106ae91610639565b511690565b6000915b600b83106106c457505050565b81516001600160a01b0316815260019290920191602091820191016106b7565b9060009182915b600583106106f95750505050565b815184825b6004821061071c5750505060206080600192019201920191906106eb565b6001908351815260208091019301910190916106fe565b6107576103e09295949361074c836104008101986106b3565b6101608301906106e4565b0152565b8181029291811591840414171561062357565b90816020910312610786575180151581036107865790565b600080fd5b9390959491926107b2610420946107a78761044081019a6106b3565b6101608701906106e4565b6103e08501526104008401526001600160a01b0316910152565b8151604051637b5e2c7b60e01b81526001600160a01b03909116989297949694959194919392916020828061080686888e60048501610733565b03816001600160a01b038a165afa9182156109ca57600092610c2c575b50620f4240019081620f42401161062357620f4240916108429161075b565b046040516370a0823160e01b81523060048201526020816024818d5afa9081156109ca57600091610bfa575b50808211610bf2575b50898111610bd4576040516370a0823160e01b81523060048201529960208b6024818d5afa9a8b156109ca5760009b610b9f575b5060405163095ea7b360e01b8082526001600160a01b03881660048301526024820192909252909392919060208160448160008f5af180156109ca578a926020928592610b82575b506109166040519485938493633f51256760e21b998a865230936004870161078b565b038160006001600160a01b038b165af19081156109ca57600091610b4e575b509061094091610616565b94856109d6575b50505050505050506020602491604051928380926370a0823160e01b82523060048301525afa9081156109ca57600091610998575b50818110156109915761098e91610616565b90565b5050600090565b906020823d6020116109c2575b816109b2602093836105f4565b810103126103055750513861097c565b3d91506109a5565b6040513d6000823e3d90fd5b6040516308f109c360e11b815290602082806109f78a898d60048501610733565b03816001600160a01b038a165afa9182156109ca57600092610b1a575b50620f424003620f4240811161062357610a34620f42409160209361075b565b04976001600160a01b0390610a4890610660565b6040519485526001600160a01b03871660048601526024850188905284916044918391600091165af180156109ca57602096600093610a9e92610aed575b5060405198899788968795865230936004870161078b565b03926001600160a01b03165af180156109ca57610ac2575b80808080808080610947565b602090813d8311610ae6575b610ad881836105f4565b810103126107865738610ab6565b503d610ace565b610b0c90893d8b11610b13575b610b0481836105f4565b81019061076e565b5038610a86565b503d610afa565b90916020823d602011610b46575b81610b35602093836105f4565b810103126103055750519038610a14565b3d9150610b28565b906020823d602011610b7a575b81610b68602093836105f4565b81010312610305575051610940610935565b3d9150610b5b565b610b9890843d8611610b1357610b0481836105f4565b50386108f3565b909a6020823d602011610bcc575b81610bba602093836105f4565b810103126103055750519960006108ab565b3d9150610bad565b6044908a604051916334398dcf60e01b835260048301526024820152fd5b905038610877565b906020823d602011610c24575b81610c14602093836105f4565b810103126103055750513861086e565b3d9150610c07565b90916020823d602011610c58575b81610c47602093836105f4565b810103126103055750519038610823565b3d9150610c3a56fea26469706673582212200032fda758825f3367722947d71ecffef25967cc85edb6707891c84ddb699ffd64736f6c63430008140033",
  "deployedBytecode": "0x60806040908082526004908136101561001757600080fd5b600090813560e01c9081633fff811314610384575080636d5fe7ce146103085763fd47dd581461004657600080fd5b602090816003193601126103055782359167ffffffffffffffff9384841161030157366023850112156103015783810135948086116102ee57865196601f96610097818901601f191686018a6105f4565b8089528489019636602483830101116102ea5781879260248893018a378a0101528051906060820192828410908411176102d7578281526100d783610589565b610160928336823782528482019181516100f0816105bc565b86885b60a081106102bb5750508352818101978789528a518b01998b888c019b6104009d8e9103126102b7578b603f820112156102b75784519b6101338d610589565b8c61018083019482861161028c57905b8582106102945750508061019f83011215610290578551939291908e610168866105bc565b8592019381851161028c57908e9695949392919a999a915b84831061021a5750505050518a528452525196878587915b600b83106101fa575050505051918601919084925b600584106101c157888888516103e0820152f35b8483518288905b8582106101e3575050506080600192019301930192916101ad565b9280839460019394518152019301910187926101c8565b83516001600160a01b031681529281019260019290920191879101610198565b90838382949596979899509c9b9c01121561028c57875161023a816105d8565b806080850184811161028857918e9286949294905b808210610270575050608093508152019201908e96959493929a999a610180565b919381939581925181520192018f939194929461024f565b8f80fd5b8c80fd5b8a80fd5b81516001600160a01b03811681036102b3578152908b01908b01610143565b8d80fd5b8980fd5b84516102c6816105d8565b6080368237818401520187906100f3565b634e487b7160e01b865260418452602486fd5b8680fd5b634e487b7160e01b845260418252602484fd5b8280fd5b80fd5b5082906101603660031901126103055736602312156103055781519261032d84610589565b83916101649136831161038057925b8284106103605760208561034f88610660565b90516001600160a01b039091168152f35b83356001600160a01b03811681036103015781526020938401930161033c565b5080fd5b84915083307f00000000000000000000000000000000000000000000000000000000000000001461056c5761086036600319011261056c576001600160a01b039390358481168103610380573660431215610380576103e283610589565b6101849183368411610380576024905b848210610570575050366101a3121561030557845195610411876105bc565b866104049436861161056c57905b85821061051c5750503661042312156103805785519061043e82610589565b81906105649536871161051857915b8683106104ff575050503661058312156103805785519161046d836105bc565b826107e49536871161030157905b8682106104ab576020896104a48c8b8b8b8b8b61084435956108243595610804359535946107cc565b9051908152f35b36601f830112156103015788516104c1816105d8565b80608084013681116104fb5784915b8183106104eb5750505081602091608093520191019061047b565b82358152602092830192016104d0565b8580fd5b823582811681036104fb5781526020928301920161044d565b8480fd5b36601f8301121561056c578751610532816105d8565b80608084013681116102ea5784915b81831061055c5750505081602091608093520191019061041f565b8235815260209283019201610541565b8380fd5b8135888116810361056c578152602091820191016103f2565b610160810190811067ffffffffffffffff8211176105a657604052565b634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff8211176105a657604052565b6080810190811067ffffffffffffffff8211176105a657604052565b90601f8019910116810190811067ffffffffffffffff8211176105a657604052565b9190820391821161062357565b634e487b7160e01b600052601160045260246000fd5b90600b81101561064a5760051b0190565b634e487b7160e01b600052603260045260246000fd5b90600a5b6001600160a01b03806106778386610639565b51166106a25750801561068d5760001901610664565b60246000634e487b7160e01b81526011600452fd5b9192906106ae91610639565b511690565b6000915b600b83106106c457505050565b81516001600160a01b0316815260019290920191602091820191016106b7565b9060009182915b600583106106f95750505050565b815184825b6004821061071c5750505060206080600192019201920191906106eb565b6001908351815260208091019301910190916106fe565b6107576103e09295949361074c836104008101986106b3565b6101608301906106e4565b0152565b8181029291811591840414171561062357565b90816020910312610786575180151581036107865790565b600080fd5b9390959491926107b2610420946107a78761044081019a6106b3565b6101608701906106e4565b6103e08501526104008401526001600160a01b0316910152565b8151604051637b5e2c7b60e01b81526001600160a01b03909116989297949694959194919392916020828061080686888e60048501610733565b03816001600160a01b038a165afa9182156109ca57600092610c2c575b50620f4240019081620f42401161062357620f4240916108429161075b565b046040516370a0823160e01b81523060048201526020816024818d5afa9081156109ca57600091610bfa575b50808211610bf2575b50898111610bd4576040516370a0823160e01b81523060048201529960208b6024818d5afa9a8b156109ca5760009b610b9f575b5060405163095ea7b360e01b8082526001600160a01b03881660048301526024820192909252909392919060208160448160008f5af180156109ca578a926020928592610b82575b506109166040519485938493633f51256760e21b998a865230936004870161078b565b038160006001600160a01b038b165af19081156109ca57600091610b4e575b509061094091610616565b94856109d6575b50505050505050506020602491604051928380926370a0823160e01b82523060048301525afa9081156109ca57600091610998575b50818110156109915761098e91610616565b90565b5050600090565b906020823d6020116109c2575b816109b2602093836105f4565b810103126103055750513861097c565b3d91506109a5565b6040513d6000823e3d90fd5b6040516308f109c360e11b815290602082806109f78a898d60048501610733565b03816001600160a01b038a165afa9182156109ca57600092610b1a575b50620f424003620f4240811161062357610a34620f42409160209361075b565b04976001600160a01b0390610a4890610660565b6040519485526001600160a01b03871660048601526024850188905284916044918391600091165af180156109ca57602096600093610a9e92610aed575b5060405198899788968795865230936004870161078b565b03926001600160a01b03165af180156109ca57610ac2575b80808080808080610947565b602090813d8311610ae6575b610ad881836105f4565b810103126107865738610ab6565b503d610ace565b610b0c90893d8b11610b13575b610b0481836105f4565b81019061076e565b5038610a86565b503d610afa565b90916020823d602011610b46575b81610b35602093836105f4565b810103126103055750519038610a14565b3d9150610b28565b906020823d602011610b7a575b81610b68602093836105f4565b81010312610305575051610940610935565b3d9150610b5b565b610b9890843d8611610b1357610b0481836105f4565b50386108f3565b909a6020823d602011610bcc575b81610bba602093836105f4565b810103126103055750519960006108ab565b3d9150610bad565b6044908a604051916334398dcf60e01b835260048301526024820152fd5b905038610877565b906020823d602011610c24575b81610c14602093836105f4565b810103126103055750513861086e565b3d9150610c07565b90916020823d602011610c58575b81610c47602093836105f4565b810103126103055750519038610823565b3d9150610c3a56fea26469706673582212200032fda758825f3367722947d71ecffef25967cc85edb6707891c84ddb699ffd64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getLastTokenInRoute(address[11])": {
        "notice": "Get the last non-zero token in the route"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}