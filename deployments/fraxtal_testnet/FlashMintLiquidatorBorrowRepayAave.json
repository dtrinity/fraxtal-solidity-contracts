{
  "address": "0xcc752b5F7977941299cCC5f5629EcdBbc0910702",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC3156FlashLender",
          "name": "_flashMinter",
          "type": "address"
        },
        {
          "internalType": "contract ISwapRouter",
          "name": "_uniswapV3Router",
          "type": "address"
        },
        {
          "internalType": "contract ILendingPoolAddressesProvider",
          "name": "_addressesProvider",
          "type": "address"
        },
        {
          "internalType": "contract ILendingPool",
          "name": "_liquidateLender",
          "type": "address"
        },
        {
          "internalType": "contract IAToken",
          "name": "_aDUSD",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_slippageTolerance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NoProfitableLiquidation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrowedToken",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "NotSupportingNonDUSD",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyLiquidator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnknownInitiator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnknownLender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ValueAboveBasisPoints",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FlashLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolTokenBorrowedAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolTokenCollateralAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seized",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "usingFlashLoan",
          "type": "bool"
        }
      ],
      "name": "Liquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_liquidatorAdded",
          "type": "address"
        }
      ],
      "name": "LiquidatorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_liquidatorRemoved",
          "type": "address"
        }
      ],
      "name": "LiquidatorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTolerance",
          "type": "uint256"
        }
      ],
      "name": "SlippageToleranceSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlyingAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DUSD_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FLASHLOAN_CALLBACK",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_HUNDER_PCT_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aDUSD",
      "outputs": [
        {
          "internalType": "contract IAToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newLiquidator",
          "type": "address"
        }
      ],
      "name": "addLiquidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressesProvider",
      "outputs": [
        {
          "internalType": "contract ILendingPoolAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dusd",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashMinter",
      "outputs": [
        {
          "internalType": "contract IERC3156FlashLender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isLiquidator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolTokenBorrowedAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_poolTokenCollateralAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_stakeTokens",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidateLender",
      "outputs": [
        {
          "internalType": "contract ILendingPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initiator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onFlashLoan",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidatorToRemove",
          "type": "address"
        }
      ],
      "name": "removeLiquidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newTolerance",
          "type": "uint256"
        }
      ],
      "name": "setSlippageTolerance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippageTolerance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapV3Router",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_underlyingAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6e23d0ca28170470637292690575fe4f536b64502c6968fce0433a46e54bc40e",
  "receipt": {
    "to": null,
    "from": "0x53Ae1433Ab4563d7D5a84d27524784837259f105",
    "contractAddress": "0xcc752b5F7977941299cCC5f5629EcdBbc0910702",
    "transactionIndex": 1,
    "gasUsed": "1897302",
    "logsBloom": "0x
    "blockHash": "0xc6167bc43cbf45a7b171ed796ed0b5cae9cac46e1ab861867974df81858c3ece",
    "transactionHash": "0x6e23d0ca28170470637292690575fe4f536b64502c6968fce0433a46e54bc40e",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 11875528,
        "transactionHash": "0x6e23d0ca28170470637292690575fe4f536b64502c6968fce0433a46e54bc40e",
        "address": "0xcc752b5F7977941299cCC5f5629EcdBbc0910702",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000053ae1433ab4563d7d5a84d27524784837259f105"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc6167bc43cbf45a7b171ed796ed0b5cae9cac46e1ab861867974df81858c3ece"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 11875528,
        "transactionHash": "0x6e23d0ca28170470637292690575fe4f536b64502c6968fce0433a46e54bc40e",
        "address": "0xcc752b5F7977941299cCC5f5629EcdBbc0910702",
        "topics": [
          "0xb0a258c58bd721bcb64542ee0e4e4c843ae58242f908c0681ad82d40d688f1fa",
          "0x00000000000000000000000053ae1433ab4563d7d5a84d27524784837259f105"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xc6167bc43cbf45a7b171ed796ed0b5cae9cac46e1ab861867974df81858c3ece"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 11875528,
        "transactionHash": "0x6e23d0ca28170470637292690575fe4f536b64502c6968fce0433a46e54bc40e",
        "address": "0xcc752b5F7977941299cCC5f5629EcdBbc0910702",
        "topics": [
          "0x84cb977e2a9a6a9b1fc0d73c4b02cd51695c09eb0d3008d61019a7c0a7406c4c"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000001f4",
        "logIndex": 2,
        "blockHash": "0xc6167bc43cbf45a7b171ed796ed0b5cae9cac46e1ab861867974df81858c3ece"
      }
    ],
    "blockNumber": 11875528,
    "cumulativeGasUsed": "1943256",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4D6E79013212F10A026A1FB0b926C9Fd0432b96c",
    "0x86fa24508003ee40FBC34385047b665c0Ec9DC55",
    "0xC691F14942B37668C9904b701E3118A133611b3c",
    "0xa7e750C73DE7d19f06D956d704A39fdDfE99D9ea",
    "0xD94D2B2E62738e568E97C783446D965AC078bbEA",
    500
  ],
  "numDeployments": 1,
  "solcInputHash": "529ad0883e9a03cd72f6da9a11e51a0a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC3156FlashLender\",\"name\":\"_flashMinter\",\"type\":\"address\"},{\"internalType\":\"contract ISwapRouter\",\"name\":\"_uniswapV3Router\",\"type\":\"address\"},{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"_addressesProvider\",\"type\":\"address\"},{\"internalType\":\"contract ILendingPool\",\"name\":\"_liquidateLender\",\"type\":\"address\"},{\"internalType\":\"contract IAToken\",\"name\":\"_aDUSD\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slippageTolerance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NoProfitableLiquidation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowedToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"NotSupportingNonDUSD\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyLiquidator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownInitiator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownLender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValueAboveBasisPoints\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolTokenBorrowedAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolTokenCollateralAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seized\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"usingFlashLoan\",\"type\":\"bool\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_liquidatorAdded\",\"type\":\"address\"}],\"name\":\"LiquidatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_liquidatorRemoved\",\"type\":\"address\"}],\"name\":\"LiquidatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTolerance\",\"type\":\"uint256\"}],\"name\":\"SlippageToleranceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlyingAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DUSD_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FLASHLOAN_CALLBACK\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_HUNDER_PCT_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aDUSD\",\"outputs\":[{\"internalType\":\"contract IAToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLiquidator\",\"type\":\"address\"}],\"name\":\"addLiquidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressesProvider\",\"outputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dusd\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashMinter\",\"outputs\":[{\"internalType\":\"contract IERC3156FlashLender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isLiquidator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolTokenBorrowedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolTokenCollateralAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stakeTokens\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidateLender\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onFlashLoan\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidatorToRemove\",\"type\":\"address\"}],\"name\":\"removeLiquidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTolerance\",\"type\":\"uint256\"}],\"name\":\"setSlippageTolerance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV3Router\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_underlyingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onFlashLoan(address,address,uint256,uint256,bytes)\":{\"details\":\"ERC-3156 Flash loan callback\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lending_liquidator/aave-v3/FlashMintLiquidatorBorrowRepayAave.sol\":\"FlashMintLiquidatorBorrowRepayAave\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-4-6/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4-6/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts-4-6/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0240f7703cff32a61ee3e9fbb339e09a944260432a9ef37debf3692b1a6c8049\",\"license\":\"AGPL-3.0-only\"},\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xa28a1515702793c6b56b97272f75e05890fd82aa2e7ec47b41d4d56a81023f69\",\"license\":\"AGPL-3.0-only\"},\"contracts/dex/core/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"contracts/dex/periphery/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport \\\"contracts/dex/core/interfaces/callback/IUniswapV3SwapCallback.sol\\\";\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(\\n        ExactInputSingleParams calldata params\\n    ) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(\\n        ExactInputParams calldata params\\n    ) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(\\n        ExactOutputSingleParams calldata params\\n    ) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(\\n        ExactOutputParams calldata params\\n    ) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0xca3a33b66156dbf37c71aa3998c5eddecfc35469264f66aece20c4017ab2422b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lending/core/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x9f865ae3d19d19b2ed680009d6a83ae7fdd80594a86fccf567523d68760a648e\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\nimport {IInitializableAToken} from \\\"./IInitializableAToken.sol\\\";\\n\\n/**\\n * @title IAToken\\n * @author Aave\\n * @notice Defines the basic interface for an AToken.\\n */\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\n    /**\\n     * @dev Emitted during the transfer action\\n     * @param from The user whose tokens are being transferred\\n     * @param to The recipient\\n     * @param value The scaled amount being transferred\\n     * @param index The next liquidity index of the reserve\\n     */\\n    event BalanceTransfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value,\\n        uint256 index\\n    );\\n\\n    /**\\n     * @notice Mints `amount` aTokens to `user`\\n     * @param caller The address performing the mint\\n     * @param onBehalfOf The address of the user that will receive the minted aTokens\\n     * @param amount The amount of tokens getting minted\\n     * @param index The next liquidity index of the reserve\\n     * @return `true` if the the previous balance of the user was 0\\n     */\\n    function mint(\\n        address caller,\\n        address onBehalfOf,\\n        uint256 amount,\\n        uint256 index\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n     * @dev In some instances, the mint event could be emitted from a burn transaction\\n     * if the amount to burn is less than the interest that the user accrued\\n     * @param from The address from which the aTokens will be burned\\n     * @param receiverOfUnderlying The address that will receive the underlying\\n     * @param amount The amount being burned\\n     * @param index The next liquidity index of the reserve\\n     */\\n    function burn(\\n        address from,\\n        address receiverOfUnderlying,\\n        uint256 amount,\\n        uint256 index\\n    ) external;\\n\\n    /**\\n     * @notice Mints aTokens to the reserve treasury\\n     * @param amount The amount of tokens getting minted\\n     * @param index The next liquidity index of the reserve\\n     */\\n    function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n    /**\\n     * @notice Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n     * @param from The address getting liquidated, current owner of the aTokens\\n     * @param to The recipient\\n     * @param value The amount of tokens getting transferred\\n     */\\n    function transferOnLiquidation(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external;\\n\\n    /**\\n     * @notice Transfers the underlying asset to `target`.\\n     * @dev Used by the Pool to transfer assets in borrow(), withdraw() and flashLoan()\\n     * @param target The recipient of the underlying\\n     * @param amount The amount getting transferred\\n     */\\n    function transferUnderlyingTo(address target, uint256 amount) external;\\n\\n    /**\\n     * @notice Handles the underlying received by the aToken after the transfer has been completed.\\n     * @dev The default implementation is empty as with standard ERC20 tokens, nothing needs to be done after the\\n     * transfer is concluded. However in the future there may be aTokens that allow for example to stake the underlying\\n     * to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.\\n     * @param user The user executing the repayment\\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed\\n     * @param amount The amount getting repaid\\n     */\\n    function handleRepayment(\\n        address user,\\n        address onBehalfOf,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Allow passing a signed message to approve spending\\n     * @dev implements the permit function as for\\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n     * @param owner The owner of the funds\\n     * @param spender The spender\\n     * @param value The amount\\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n     * @param v Signature param\\n     * @param s Signature param\\n     * @param r Signature param\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @notice Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n     * @return The address of the underlying asset\\n     */\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the Aave treasury, receiving the fees on this aToken.\\n     * @return Address of the Aave treasury\\n     */\\n    function RESERVE_TREASURY_ADDRESS() external view returns (address);\\n\\n    /**\\n     * @notice Get the domain separator for the token\\n     * @dev Return cached value if chainId matches cache, otherwise recomputes separator\\n     * @return The domain separator of the token at current chain\\n     */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the nonce for owner.\\n     * @param owner The address of the owner\\n     * @return The nonce of the owner\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @notice Rescue and transfer tokens locked in this contract\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param amount The amount of token to transfer\\n     */\\n    function rescueTokens(address token, address to, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x772842c9cccfd0f0bdf5a7d444fa61e9a0c33f4aba7de37829b87db0f9463f4e\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IAaveIncentivesController\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Incentives Controller.\\n * @dev It only contains one single function, needed as a hook on aToken and debtToken transfers.\\n */\\ninterface IAaveIncentivesController {\\n    /**\\n     * @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.\\n     * @dev The units of `totalSupply` and `userBalance` should be the same.\\n     * @param user The address of the user whose asset balance has changed\\n     * @param totalSupply The total supply of the asset prior to user balance change\\n     * @param userBalance The previous user balance prior to balance change\\n     */\\n    function handleAction(\\n        address user,\\n        uint256 totalSupply,\\n        uint256 userBalance\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc151038fc0fadac268bf9e71ed67d04c6217169f7c18edfea38f0f78edf3dbfd\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IInitializableAToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\nimport {IPool} from \\\"./IPool.sol\\\";\\n\\n/**\\n * @title IInitializableAToken\\n * @author Aave\\n * @notice Interface for the initialize function on AToken\\n */\\ninterface IInitializableAToken {\\n    /**\\n     * @dev Emitted when an aToken is initialized\\n     * @param underlyingAsset The address of the underlying asset\\n     * @param pool The address of the associated pool\\n     * @param treasury The address of the treasury\\n     * @param incentivesController The address of the incentives controller for this aToken\\n     * @param aTokenDecimals The decimals of the underlying\\n     * @param aTokenName The name of the aToken\\n     * @param aTokenSymbol The symbol of the aToken\\n     * @param params A set of encoded parameters for additional initialization\\n     */\\n    event Initialized(\\n        address indexed underlyingAsset,\\n        address indexed pool,\\n        address treasury,\\n        address incentivesController,\\n        uint8 aTokenDecimals,\\n        string aTokenName,\\n        string aTokenSymbol,\\n        bytes params\\n    );\\n\\n    /**\\n     * @notice Initializes the aToken\\n     * @param pool The pool contract that is initializing this contract\\n     * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n     * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n     * @param incentivesController The smart contract managing potential incentives distribution\\n     * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n     * @param aTokenName The name of the aToken\\n     * @param aTokenSymbol The symbol of the aToken\\n     * @param params A set of encoded parameters for additional initialization\\n     */\\n    function initialize(\\n        IPool pool,\\n        address treasury,\\n        address underlyingAsset,\\n        IAaveIncentivesController incentivesController,\\n        uint8 aTokenDecimals,\\n        string calldata aTokenName,\\n        string calldata aTokenSymbol,\\n        bytes calldata params\\n    ) external;\\n}\\n\",\"keccak256\":\"0x83f88dddf1c55903a757d2c4d8d1e8d8c2f99ca2e59ecc974a5a90e1ec946cf1\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n */\\ninterface IPool {\\n    /**\\n     * @dev Emitted on mintUnbacked()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the supply\\n     * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n     * @param amount The amount of supplied assets\\n     * @param referralCode The referral code used\\n     */\\n    event MintUnbacked(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on backUnbacked()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param backer The address paying for the backing\\n     * @param amount The amount added as backing\\n     * @param fee The amount paid in fees\\n     */\\n    event BackUnbacked(\\n        address indexed reserve,\\n        address indexed backer,\\n        uint256 amount,\\n        uint256 fee\\n    );\\n\\n    /**\\n     * @dev Emitted on supply()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the supply\\n     * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n     * @param amount The amount supplied\\n     * @param referralCode The referral code used\\n     */\\n    event Supply(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlying asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of aTokens\\n     * @param to The address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     */\\n    event Withdraw(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n     * initiator of the transaction on flashLoan()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n     * @param referralCode The referral code used\\n     */\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n     */\\n    event Repay(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed repayer,\\n        uint256 amount,\\n        bool useATokens\\n    );\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user swapping his rate mode\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     */\\n    event SwapBorrowRateMode(\\n        address indexed reserve,\\n        address indexed user,\\n        DataTypes.InterestRateMode interestRateMode\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param totalDebt The total isolation mode debt for the reserve\\n     */\\n    event IsolationModeTotalDebtUpdated(\\n        address indexed asset,\\n        uint256 totalDebt\\n    );\\n\\n    /**\\n     * @dev Emitted when the user selects a certain asset category for eMode\\n     * @param user The address of the user\\n     * @param categoryId The category id\\n     */\\n    event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     */\\n    event ReserveUsedAsCollateralEnabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     */\\n    event ReserveUsedAsCollateralDisabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     */\\n    event RebalanceStableBorrowRate(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n     * @param premium The fee flash borrowed\\n     * @param referralCode The referral code used\\n     */\\n    event FlashLoan(\\n        address indexed target,\\n        address initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 premium,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated.\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n     * @param liquidator The address of the liquidator\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     */\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated.\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The next liquidity rate\\n     * @param stableBorrowRate The next stable borrow rate\\n     * @param variableBorrowRate The next variable borrow rate\\n     * @param liquidityIndex The next liquidity index\\n     * @param variableBorrowIndex The next variable borrow index\\n     */\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n     * @param reserve The address of the reserve\\n     * @param amountMinted The amount minted to the treasury\\n     */\\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n    /**\\n     * @notice Mints an `amount` of aTokens to the `onBehalfOf`\\n     * @param asset The address of the underlying asset to mint\\n     * @param amount The amount to mint\\n     * @param onBehalfOf The address that will receive the aTokens\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function mintUnbacked(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Back the current unbacked underlying with `amount` and pay `fee`.\\n     * @param asset The address of the underlying asset to back\\n     * @param amount The amount to back\\n     * @param fee The amount paid in fees\\n     * @return The backed amount\\n     */\\n    function backUnbacked(\\n        address asset,\\n        uint256 amount,\\n        uint256 fee\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     */\\n    function supplyWithPermit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     */\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     */\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     */\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     * @return The final amount repaid\\n     */\\n    function repayWithPermit(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n     * equivalent debt tokens\\n     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n     * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n     * balance is not enough to cover the whole debt\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @return The final amount repaid\\n     */\\n    function repayWithATokens(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     */\\n    function swapBorrowRateMode(\\n        address asset,\\n        uint256 interestRateMode\\n    ) external;\\n\\n    /**\\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n     *        much has been borrowed at a stable rate and suppliers are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     */\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n     * @param asset The address of the underlying asset supplied\\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n     */\\n    function setUserUseReserveAsCollateral(\\n        address asset,\\n        bool useAsCollateral\\n    ) external;\\n\\n    /**\\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     */\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://docs.aave.com/developers/\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts of the assets being flash-borrowed\\n     * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata interestRateModes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://docs.aave.com/developers/\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n     * @param asset The address of the asset being flash-borrowed\\n     * @param amount The amount of the asset being flash-borrowed\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function flashLoanSimple(\\n        address receiverAddress,\\n        address asset,\\n        uint256 amount,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n     * @return currentLiquidationThreshold The liquidation threshold of the user\\n     * @return ltv The loan to value of The user\\n     * @return healthFactor The current health factor of the user\\n     */\\n    function getUserAccountData(\\n        address user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralBase,\\n            uint256 totalDebtBase,\\n            uint256 availableBorrowsBase,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    /**\\n     * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n     * interest rate strategy\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n     * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n     * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n     */\\n    function initReserve(\\n        address asset,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Drop a reserve\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     */\\n    function dropReserve(address asset) external;\\n\\n    /**\\n     * @notice Updates the address of the interest rate strategy contract\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param rateStrategyAddress The address of the interest rate strategy contract\\n     */\\n    function setReserveInterestRateStrategyAddress(\\n        address asset,\\n        address rateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Sets the configuration bitmap of the reserve as a whole\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param configuration The new configuration bitmap\\n     */\\n    function setConfiguration(\\n        address asset,\\n        DataTypes.ReserveConfigurationMap calldata configuration\\n    ) external;\\n\\n    /**\\n     * @notice Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     */\\n    function getConfiguration(\\n        address asset\\n    ) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the configuration of the user across all the reserves\\n     * @param user The user address\\n     * @return The configuration of the user\\n     */\\n    function getUserConfiguration(\\n        address user\\n    ) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(\\n        address asset\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the normalized variable debt per unit of asset\\n     * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n     * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n     * moment (approx. a borrower would get if opening a position). This means that is always used in\\n     * combination with variable debt supply/balances.\\n     * If using this function externally, consider that is possible to have an increasing normalized\\n     * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n     * (e.g. only updates with non-zero variable debt supply)\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(\\n        address asset\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state and configuration data of the reserve\\n     */\\n    function getReserveData(\\n        address asset\\n    ) external view returns (DataTypes.ReserveData memory);\\n\\n    /**\\n     * @notice Validates and finalizes an aToken transfer\\n     * @dev Only callable by the overlying aToken of the `asset`\\n     * @param asset The address of the underlying asset of the aToken\\n     * @param from The user from which the aTokens are transferred\\n     * @param to The user receiving the aTokens\\n     * @param amount The amount being transferred/withdrawn\\n     * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n     * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n     */\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromBefore,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    /**\\n     * @notice Returns the list of the underlying assets of all the initialized reserves\\n     * @dev It does not include dropped reserves\\n     * @return The addresses of the underlying assets of the initialized reserves\\n     */\\n    function getReservesList() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n     * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n     * @return The address of the reserve associated with id\\n     */\\n    function getReserveAddressById(uint16 id) external view returns (address);\\n\\n    /**\\n     * @notice Returns the PoolAddressesProvider connected to this contract\\n     * @return The address of the PoolAddressesProvider\\n     */\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        returns (IPoolAddressesProvider);\\n\\n    /**\\n     * @notice Updates the protocol fee on the bridging\\n     * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n     */\\n    function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n    /**\\n     * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n     * - A part is sent to aToken holders as extra, one time accumulated interest\\n     * - A part is collected by the protocol treasury\\n     * @dev The total premium is calculated on the total borrowed amount\\n     * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param flashLoanPremiumTotal The total premium, expressed in bps\\n     * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n     */\\n    function updateFlashloanPremiums(\\n        uint128 flashLoanPremiumTotal,\\n        uint128 flashLoanPremiumToProtocol\\n    ) external;\\n\\n    /**\\n     * @notice Configures a new category for the eMode.\\n     * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n     * The category 0 is reserved as it's the default for volatile assets\\n     * @param id The id of the category\\n     * @param config The configuration of the category\\n     */\\n    function configureEModeCategory(\\n        uint8 id,\\n        DataTypes.EModeCategory memory config\\n    ) external;\\n\\n    /**\\n     * @notice Returns the data of an eMode category\\n     * @param id The id of the category\\n     * @return The configuration data of the category\\n     */\\n    function getEModeCategoryData(\\n        uint8 id\\n    ) external view returns (DataTypes.EModeCategory memory);\\n\\n    /**\\n     * @notice Allows a user to use the protocol in eMode\\n     * @param categoryId The id of the category\\n     */\\n    function setUserEMode(uint8 categoryId) external;\\n\\n    /**\\n     * @notice Returns the eMode the user is using\\n     * @param user The address of the user\\n     * @return The eMode id\\n     */\\n    function getUserEMode(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Resets the isolation mode total debt of the given asset to zero\\n     * @dev It requires the given asset has zero debt ceiling\\n     * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n     */\\n    function resetIsolationModeTotalDebt(address asset) external;\\n\\n    /**\\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n     * @return The percentage of available liquidity to borrow, expressed in bps\\n     */\\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the total fee on flash loans\\n     * @return The total fee on flashloans\\n     */\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the part of the bridge fees sent to protocol\\n     * @return The bridge fee sent to the protocol treasury\\n     */\\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the part of the flashloan fees sent to protocol\\n     * @return The flashloan fee sent to the protocol treasury\\n     */\\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n     * @return The maximum number of reserves supported\\n     */\\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n    /**\\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n     * @param assets The list of reserves for which the minting needs to be executed\\n     */\\n    function mintToTreasury(address[] calldata assets) external;\\n\\n    /**\\n     * @notice Rescue and transfer tokens locked in this contract\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param amount The amount of token to transfer\\n     */\\n    function rescueTokens(address token, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @dev Deprecated: Use the `supply` function instead\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n}\\n\",\"keccak256\":\"0x787841314e105aa11156c6d7e9e01d935ecaaa496150c86409f037d0654f54ac\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n */\\ninterface IPoolAddressesProvider {\\n    /**\\n     * @dev Emitted when the market identifier is updated.\\n     * @param oldMarketId The old id of the market\\n     * @param newMarketId The new id of the market\\n     */\\n    event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n    /**\\n     * @dev Emitted when the pool is updated.\\n     * @param oldAddress The old address of the Pool\\n     * @param newAddress The new address of the Pool\\n     */\\n    event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the pool configurator is updated.\\n     * @param oldAddress The old address of the PoolConfigurator\\n     * @param newAddress The new address of the PoolConfigurator\\n     */\\n    event PoolConfiguratorUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the price oracle is updated.\\n     * @param oldAddress The old address of the PriceOracle\\n     * @param newAddress The new address of the PriceOracle\\n     */\\n    event PriceOracleUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the ACL manager is updated.\\n     * @param oldAddress The old address of the ACLManager\\n     * @param newAddress The new address of the ACLManager\\n     */\\n    event ACLManagerUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the ACL admin is updated.\\n     * @param oldAddress The old address of the ACLAdmin\\n     * @param newAddress The new address of the ACLAdmin\\n     */\\n    event ACLAdminUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the price oracle sentinel is updated.\\n     * @param oldAddress The old address of the PriceOracleSentinel\\n     * @param newAddress The new address of the PriceOracleSentinel\\n     */\\n    event PriceOracleSentinelUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the pool data provider is updated.\\n     * @param oldAddress The old address of the PoolDataProvider\\n     * @param newAddress The new address of the PoolDataProvider\\n     */\\n    event PoolDataProviderUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a new proxy is created.\\n     * @param id The identifier of the proxy\\n     * @param proxyAddress The address of the created proxy contract\\n     * @param implementationAddress The address of the implementation contract\\n     */\\n    event ProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a new non-proxied contract address is registered.\\n     * @param id The identifier of the contract\\n     * @param oldAddress The address of the old contract\\n     * @param newAddress The address of the new contract\\n     */\\n    event AddressSet(\\n        bytes32 indexed id,\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the implementation of the proxy registered with id is updated\\n     * @param id The identifier of the contract\\n     * @param proxyAddress The address of the proxy contract\\n     * @param oldImplementationAddress The address of the old implementation contract\\n     * @param newImplementationAddress The address of the new implementation contract\\n     */\\n    event AddressSetAsProxy(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address oldImplementationAddress,\\n        address indexed newImplementationAddress\\n    );\\n\\n    /**\\n     * @notice Returns the id of the Aave market to which this contract points to.\\n     * @return The market id\\n     */\\n    function getMarketId() external view returns (string memory);\\n\\n    /**\\n     * @notice Associates an id with a specific PoolAddressesProvider.\\n     * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n     * identify and validate multiple Aave markets.\\n     * @param newMarketId The market id\\n     */\\n    function setMarketId(string calldata newMarketId) external;\\n\\n    /**\\n     * @notice Returns an address by its identifier.\\n     * @dev The returned address might be an EOA or a contract, potentially proxied\\n     * @dev It returns ZERO if there is no registered address with the given id\\n     * @param id The id\\n     * @return The address of the registered for the specified id\\n     */\\n    function getAddressFromID(bytes32 id) external view returns (address);\\n\\n    /**\\n     * @notice General function to update the implementation of a proxy registered with\\n     * certain `id`. If there is no proxy registered, it will instantiate one and\\n     * set as implementation the `newImplementationAddress`.\\n     * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n     * setter function, in order to avoid unexpected consequences\\n     * @param id The id\\n     * @param newImplementationAddress The address of the new implementation\\n     */\\n    function setAddressAsProxy(\\n        bytes32 id,\\n        address newImplementationAddress\\n    ) external;\\n\\n    /**\\n     * @notice Sets an address for an id replacing the address saved in the addresses map.\\n     * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n     * @param id The id\\n     * @param newAddress The address to set\\n     */\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    /**\\n     * @notice Returns the address of the Pool proxy.\\n     * @return The Pool proxy address\\n     */\\n    function getPool() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the Pool, or creates a proxy\\n     * setting the new `pool` implementation when the function is called for the first time.\\n     * @param newPoolImpl The new Pool implementation\\n     */\\n    function setPoolImpl(address newPoolImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the PoolConfigurator proxy.\\n     * @return The PoolConfigurator proxy address\\n     */\\n    function getPoolConfigurator() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n     * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n     * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n     */\\n    function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle.\\n     * @return The address of the PriceOracle\\n     */\\n    function getPriceOracle() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle.\\n     * @param newPriceOracle The address of the new PriceOracle\\n     */\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL manager.\\n     * @return The address of the ACLManager\\n     */\\n    function getACLManager() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL manager.\\n     * @param newAclManager The address of the new ACLManager\\n     */\\n    function setACLManager(address newAclManager) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL admin.\\n     * @return The address of the ACL admin\\n     */\\n    function getACLAdmin() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL admin.\\n     * @param newAclAdmin The address of the new ACL admin\\n     */\\n    function setACLAdmin(address newAclAdmin) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle sentinel.\\n     * @return The address of the PriceOracleSentinel\\n     */\\n    function getPriceOracleSentinel() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle sentinel.\\n     * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n     */\\n    function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n    /**\\n     * @notice Returns the address of the data provider.\\n     * @return The address of the DataProvider\\n     */\\n    function getPoolDataProvider() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the data provider.\\n     * @param newDataProvider The address of the new DataProvider\\n     */\\n    function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0xe77d8d5059b52bb94bf1c3cd9a7a1da1e10ace934ce1ff18b4322206f7dc592a\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IScaledBalanceToken\\n * @author Aave\\n * @notice Defines the basic interface for a scaled-balance token.\\n */\\ninterface IScaledBalanceToken {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param caller The address performing the mint\\n     * @param onBehalfOf The address of the user that will receive the minted tokens\\n     * @param value The scaled-up amount being minted (based on user entered amount and balance increase from interest)\\n     * @param balanceIncrease The increase in scaled-up balance since the last action of 'onBehalfOf'\\n     * @param index The next liquidity index of the reserve\\n     */\\n    event Mint(\\n        address indexed caller,\\n        address indexed onBehalfOf,\\n        uint256 value,\\n        uint256 balanceIncrease,\\n        uint256 index\\n    );\\n\\n    /**\\n     * @dev Emitted after the burn action\\n     * @dev If the burn function does not involve a transfer of the underlying asset, the target defaults to zero address\\n     * @param from The address from which the tokens will be burned\\n     * @param target The address that will receive the underlying, if any\\n     * @param value The scaled-up amount being burned (user entered amount - balance increase from interest)\\n     * @param balanceIncrease The increase in scaled-up balance since the last action of 'from'\\n     * @param index The next liquidity index of the reserve\\n     */\\n    event Burn(\\n        address indexed from,\\n        address indexed target,\\n        uint256 value,\\n        uint256 balanceIncrease,\\n        uint256 index\\n    );\\n\\n    /**\\n     * @notice Returns the scaled balance of the user.\\n     * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\\n     * at the moment of the update\\n     * @param user The user whose balance is calculated\\n     * @return The scaled balance of the user\\n     */\\n    function scaledBalanceOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the scaled balance of the user and the scaled total supply.\\n     * @param user The address of the user\\n     * @return The scaled balance of the user\\n     * @return The scaled total supply\\n     */\\n    function getScaledUserBalanceAndSupply(\\n        address user\\n    ) external view returns (uint256, uint256);\\n\\n    /**\\n     * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\\n     * @return The scaled total supply\\n     */\\n    function scaledTotalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns last index interest was accrued to the user's balance\\n     * @param user The address of the user\\n     * @return The last index interest was accrued to the user's balance, expressed in ray\\n     */\\n    function getPreviousIndex(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xefec728d1fe7d2384e5faf852bad7c5ff6d59d1031900384e1f9c175edff28e4\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        //timestamp of last update\\n        uint40 lastUpdateTimestamp;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint16 id;\\n        //aToken address\\n        address aTokenAddress;\\n        //stableDebtToken address\\n        address stableDebtTokenAddress;\\n        //variableDebtToken address\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the current treasury balance, scaled\\n        uint128 accruedToTreasury;\\n        //the outstanding unbacked aTokens minted through the bridging feature\\n        uint128 unbacked;\\n        //the outstanding debt borrowed against this asset in isolation mode\\n        uint128 isolationModeTotalDebt;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60: asset is paused\\n        //bit 61: borrowing in isolation mode is enabled\\n        //bit 62: siloed borrowing enabled\\n        //bit 63: flashloaning enabled\\n        //bit 64-79: reserve factor\\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n        //bit 152-167 liquidation protocol fee\\n        //bit 168-175 eMode category\\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n        //bit 252-255 unused\\n\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        /**\\n         * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n         * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n         * asset is borrowed by the user.\\n         */\\n        uint256 data;\\n    }\\n\\n    struct EModeCategory {\\n        // each eMode category has a custom ltv and liquidation threshold\\n        uint16 ltv;\\n        uint16 liquidationThreshold;\\n        uint16 liquidationBonus;\\n        // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n        address priceSource;\\n        string label;\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n\\n    struct ReserveCache {\\n        uint256 currScaledVariableDebt;\\n        uint256 nextScaledVariableDebt;\\n        uint256 currPrincipalStableDebt;\\n        uint256 currAvgStableBorrowRate;\\n        uint256 currTotalStableDebt;\\n        uint256 nextAvgStableBorrowRate;\\n        uint256 nextTotalStableDebt;\\n        uint256 currLiquidityIndex;\\n        uint256 nextLiquidityIndex;\\n        uint256 currVariableBorrowIndex;\\n        uint256 nextVariableBorrowIndex;\\n        uint256 currLiquidityRate;\\n        uint256 currVariableBorrowRate;\\n        uint256 reserveFactor;\\n        ReserveConfigurationMap reserveConfiguration;\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        uint40 reserveLastUpdateTimestamp;\\n        uint40 stableDebtLastUpdateTimestamp;\\n    }\\n\\n    struct ExecuteLiquidationCallParams {\\n        uint256 reservesCount;\\n        uint256 debtToCover;\\n        address collateralAsset;\\n        address debtAsset;\\n        address user;\\n        bool receiveAToken;\\n        address priceOracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteSupplyParams {\\n        address asset;\\n        uint256 amount;\\n        address onBehalfOf;\\n        uint16 referralCode;\\n    }\\n\\n    struct ExecuteBorrowParams {\\n        address asset;\\n        address user;\\n        address onBehalfOf;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint16 referralCode;\\n        bool releaseUnderlying;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteRepayParams {\\n        address asset;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        address onBehalfOf;\\n        bool useATokens;\\n    }\\n\\n    struct ExecuteWithdrawParams {\\n        address asset;\\n        uint256 amount;\\n        address to;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ExecuteSetUserEModeParams {\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 categoryId;\\n    }\\n\\n    struct FinalizeTransferParams {\\n        address asset;\\n        address from;\\n        address to;\\n        uint256 amount;\\n        uint256 balanceFromBefore;\\n        uint256 balanceToBefore;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 fromEModeCategory;\\n    }\\n\\n    struct FlashloanParams {\\n        address receiverAddress;\\n        address[] assets;\\n        uint256[] amounts;\\n        uint256[] interestRateModes;\\n        address onBehalfOf;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address addressesProvider;\\n        uint8 userEModeCategory;\\n        bool isAuthorizedFlashBorrower;\\n    }\\n\\n    struct FlashloanSimpleParams {\\n        address receiverAddress;\\n        address asset;\\n        uint256 amount;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n    }\\n\\n    struct FlashLoanRepaymentParams {\\n        uint256 amount;\\n        uint256 totalPremium;\\n        uint256 flashLoanPremiumToProtocol;\\n        address asset;\\n        address receiverAddress;\\n        uint16 referralCode;\\n    }\\n\\n    struct CalculateUserAccountDataParams {\\n        UserConfigurationMap userConfig;\\n        uint256 reservesCount;\\n        address user;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ValidateBorrowParams {\\n        ReserveCache reserveCache;\\n        UserConfigurationMap userConfig;\\n        address asset;\\n        address userAddress;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint256 maxStableLoanPercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n        bool isolationModeActive;\\n        address isolationModeCollateralAddress;\\n        uint256 isolationModeDebtCeiling;\\n    }\\n\\n    struct ValidateLiquidationCallParams {\\n        ReserveCache debtReserveCache;\\n        uint256 totalDebt;\\n        uint256 healthFactor;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct CalculateInterestRatesParams {\\n        uint256 unbacked;\\n        uint256 liquidityAdded;\\n        uint256 liquidityTaken;\\n        uint256 totalStableDebt;\\n        uint256 totalVariableDebt;\\n        uint256 averageStableBorrowRate;\\n        uint256 reserveFactor;\\n        address reserve;\\n        address aToken;\\n    }\\n\\n    struct InitReserveParams {\\n        address asset;\\n        address aTokenAddress;\\n        address stableDebtAddress;\\n        address variableDebtAddress;\\n        address interestRateStrategyAddress;\\n        uint16 reservesCount;\\n        uint16 maxNumberReserves;\\n    }\\n}\\n\",\"keccak256\":\"0xb93629c45e8479d3297ce5adf5efb5e8bddedf4caf5c66c3459d595004d56088\",\"license\":\"BUSL-1.1\"},\"contracts/lending_liquidator/aave-v3/FlashMintLiquidatorBaseAave.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"../interface/IERC3156FlashLender.sol\\\";\\nimport \\\"../interface/IERC3156FlashBorrower.sol\\\";\\nimport \\\"../interface/IWETH.sol\\\";\\nimport \\\"../interface/aave-v3/aave/ILendingPoolAddressesProvider.sol\\\";\\nimport \\\"../interface/aave-v3/aave/IPriceOracleGetter.sol\\\";\\nimport \\\"../../lending/core/interfaces/IAToken.sol\\\";\\nimport \\\"../interface/aave-v3/ILiquidator.sol\\\";\\nimport \\\"../interface/aave-v3/libraries/aave/ReserveConfiguration.sol\\\";\\n\\nimport \\\"../libraries/PercentageMath.sol\\\";\\n\\nimport \\\"../interface/aave-v3/aave/ILendingPool.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-4-6/security/ReentrancyGuard.sol\\\";\\nimport \\\"../common/SharedLiquidator.sol\\\";\\n\\nabstract contract FlashMintLiquidatorBaseAave is\\n    ReentrancyGuard,\\n    SharedLiquidator,\\n    IERC3156FlashBorrower\\n{\\n    using SafeTransferLib for ERC20;\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n    using PercentageMath for uint256;\\n\\n    struct FlashLoanParams {\\n        address collateralUnderlying;\\n        address borrowedUnderlying;\\n        address poolTokenCollateral;\\n        address poolTokenBorrowed;\\n        address liquidator;\\n        address borrower;\\n        uint256 toLiquidate;\\n        bytes path;\\n    }\\n\\n    struct LiquidateParams {\\n        ERC20 collateralUnderlying;\\n        ERC20 borrowedUnderlying;\\n        IAToken poolTokenCollateral;\\n        IAToken poolTokenBorrowed;\\n        address liquidator;\\n        address borrower;\\n        uint256 toRepay;\\n    }\\n\\n    error ValueAboveBasisPoints();\\n\\n    error UnknownLender();\\n\\n    error UnknownInitiator();\\n\\n    error NoProfitableLiquidation();\\n\\n    event Liquidated(\\n        address indexed liquidator,\\n        address borrower,\\n        address indexed poolTokenBorrowedAddress,\\n        address indexed poolTokenCollateralAddress,\\n        uint256 amount,\\n        uint256 seized,\\n        bool usingFlashLoan\\n    );\\n\\n    event FlashLoan(address indexed initiator, uint256 amount);\\n\\n    uint256 public constant ONE_HUNDER_PCT_BPS = 10_000; // 100% in basis points\\n    bytes32 public constant FLASHLOAN_CALLBACK =\\n        keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n    uint256 public immutable DUSD_DECIMALS;\\n    uint256 public slippageTolerance; // in basis points units\\n\\n    IERC3156FlashLender public immutable flashMinter;\\n    ILendingPool public immutable liquidateLender;\\n    ILendingPoolAddressesProvider public immutable addressesProvider;\\n    IAToken public immutable aDUSD;\\n    ERC20 public immutable dusd;\\n\\n    constructor(\\n        IERC3156FlashLender _flashMinter,\\n        ILendingPool _liquidateLender,\\n        ILendingPoolAddressesProvider _addressesProvider,\\n        IAToken _aDUSD\\n    ) SharedLiquidator() {\\n        flashMinter = _flashMinter;\\n        liquidateLender = _liquidateLender;\\n        addressesProvider = _addressesProvider;\\n        aDUSD = _aDUSD;\\n        dusd = ERC20(_aDUSD.UNDERLYING_ASSET_ADDRESS());\\n        DUSD_DECIMALS = dusd.decimals();\\n    }\\n\\n    function _liquidateInternal(\\n        LiquidateParams memory _liquidateParams\\n    ) internal returns (uint256 seized_) {\\n        uint256 balanceBefore = _liquidateParams.collateralUnderlying.balanceOf(\\n            address(this)\\n        );\\n        _liquidateParams.borrowedUnderlying.safeApprove(\\n            address(liquidateLender),\\n            _liquidateParams.toRepay\\n        );\\n        liquidateLender.liquidationCall(\\n            address(\\n                _getUnderlying(address(_liquidateParams.poolTokenCollateral))\\n            ),\\n            address(\\n                _getUnderlying(address(_liquidateParams.poolTokenBorrowed))\\n            ),\\n            _liquidateParams.borrower,\\n            _liquidateParams.toRepay,\\n            false\\n        );\\n        seized_ =\\n            _liquidateParams.collateralUnderlying.balanceOf(address(this)) -\\n            balanceBefore;\\n        emit Liquidated(\\n            msg.sender,\\n            _liquidateParams.borrower,\\n            address(_liquidateParams.poolTokenBorrowed),\\n            address(_liquidateParams.poolTokenCollateral),\\n            _liquidateParams.toRepay,\\n            seized_,\\n            false\\n        );\\n    }\\n\\n    function _liquidateWithFlashLoan(\\n        FlashLoanParams memory _flashLoanParams\\n    ) internal returns (uint256 seized_) {\\n        bytes memory data = _encodeData(_flashLoanParams);\\n\\n        uint256 dusdToFlashLoan = _getDUSDToFlashloan(\\n            _flashLoanParams.borrowedUnderlying,\\n            _flashLoanParams.toLiquidate\\n        );\\n\\n        dusd.safeApprove(\\n            address(flashMinter),\\n            dusdToFlashLoan +\\n                flashMinter.flashFee(address(dusd), dusdToFlashLoan)\\n        );\\n\\n        uint256 balanceBefore = ERC20(_flashLoanParams.collateralUnderlying)\\n            .balanceOf(address(this));\\n\\n        // The liquidation is done in the callback at onFlashLoan()\\n        // - contracts/lending_liquidator/aave-v3/FlashMintLiquidatorBorrowRepayAave.sol\\n        // - The flashLoan() of the minter will call the onFlashLoan() function of the receiver (IERC3156FlashBorrower)\\n        flashMinter.flashLoan(this, address(dusd), dusdToFlashLoan, data);\\n\\n        seized_ =\\n            ERC20(_flashLoanParams.collateralUnderlying).balanceOf(\\n                address(this)\\n            ) -\\n            balanceBefore;\\n\\n        emit FlashLoan(msg.sender, dusdToFlashLoan);\\n    }\\n\\n    function _getDUSDToFlashloan(\\n        address,\\n        uint256\\n    ) internal view returns (uint256 amountToFlashLoan_) {\\n        // As there is no fee for flash minting DUSD, we can flash mint the maximum amount\\n        // Maximum value of uint256\\n        amountToFlashLoan_ = flashMinter.maxFlashLoan(address(dusd));\\n\\n        // This is the old way of calculating the amount to flash loan\\n        //\\n        // if (_underlyingToRepay == address(dusd)) {\\n        //     amountToFlashLoan_ = _amountToRepay;\\n        // } else {\\n        //     IPriceOracleGetter oracle = IPriceOracleGetter(\\n        //         addressesProvider.getPriceOracle()\\n        //     );\\n        //     (uint256 loanToValue, , , , ) = lendingPool\\n        //         .getConfiguration(address(dusd))\\n        //         .getParamsMemory();\\n        //     uint256 dusdPrice = oracle.getAssetPrice(address(dusd));\\n        //     uint256 borrowedTokenPrice = oracle.getAssetPrice(\\n        //         _underlyingToRepay\\n        //     );\\n        //     uint256 underlyingDecimals = ERC20(_underlyingToRepay).decimals();\\n        //     amountToFlashLoan_ =\\n        //         (((_amountToRepay * borrowedTokenPrice * 10 ** DUSD_DECIMALS) /\\n        //             dusdPrice /\\n        //             10 ** underlyingDecimals) * ONE_HUNDER_PCT_BPS) /\\n        //         loanToValue +\\n        //         1e18; // for rounding errors of supply/borrow on aave\\n        // }\\n    }\\n\\n    function _encodeData(\\n        FlashLoanParams memory _flashLoanParams\\n    ) internal pure returns (bytes memory data) {\\n        data = abi.encode(\\n            _flashLoanParams.collateralUnderlying,\\n            _flashLoanParams.borrowedUnderlying,\\n            _flashLoanParams.poolTokenCollateral,\\n            _flashLoanParams.poolTokenBorrowed,\\n            _flashLoanParams.liquidator,\\n            _flashLoanParams.borrower,\\n            _flashLoanParams.toLiquidate,\\n            _flashLoanParams.path\\n        );\\n    }\\n\\n    function _decodeData(\\n        bytes calldata data\\n    ) internal pure returns (FlashLoanParams memory _flashLoanParams) {\\n        // Need to split the decode because of stack too deep error\\n        (\\n            _flashLoanParams.collateralUnderlying,\\n            _flashLoanParams.borrowedUnderlying,\\n            _flashLoanParams.poolTokenCollateral,\\n            _flashLoanParams.poolTokenBorrowed,\\n            ,\\n            ,\\n            ,\\n\\n        ) = abi.decode(\\n            data,\\n            (\\n                address,\\n                address,\\n                address,\\n                address,\\n                address,\\n                address,\\n                uint256,\\n                bytes\\n            )\\n        );\\n        (\\n            ,\\n            ,\\n            ,\\n            ,\\n            _flashLoanParams.liquidator,\\n            _flashLoanParams.borrower,\\n            _flashLoanParams.toLiquidate,\\n            _flashLoanParams.path\\n        ) = abi.decode(\\n            data,\\n            (\\n                address,\\n                address,\\n                address,\\n                address,\\n                address,\\n                address,\\n                uint256,\\n                bytes\\n            )\\n        );\\n    }\\n\\n    function _getUnderlying(\\n        address _poolToken\\n    ) internal view returns (ERC20 underlying_) {\\n        underlying_ = ERC20(IAToken(_poolToken).UNDERLYING_ASSET_ADDRESS());\\n    }\\n}\\n\",\"keccak256\":\"0x81038a4d2dee96486c7d7f9a898c9b838a34781531569b508b065972081f6407\",\"license\":\"GNU AGPLv3\"},\"contracts/lending_liquidator/aave-v3/FlashMintLiquidatorBorrowRepayAave.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"../../dex/periphery/interfaces/ISwapRouter.sol\\\";\\nimport \\\"./FlashMintLiquidatorBaseAave.sol\\\";\\n\\ncontract FlashMintLiquidatorBorrowRepayAave is FlashMintLiquidatorBaseAave {\\n    using SafeTransferLib for ERC20;\\n    using PercentageMath for uint256;\\n\\n    event SlippageToleranceSet(uint256 newTolerance);\\n\\n    error NotSupportingNonDUSD(address borrowedToken, string symbol);\\n\\n    ISwapRouter public immutable uniswapV3Router;\\n\\n    constructor(\\n        IERC3156FlashLender _flashMinter,\\n        ISwapRouter _uniswapV3Router,\\n        ILendingPoolAddressesProvider _addressesProvider,\\n        ILendingPool _liquidateLender,\\n        IAToken _aDUSD,\\n        uint256 _slippageTolerance\\n    )\\n        FlashMintLiquidatorBaseAave(\\n            _flashMinter,\\n            _liquidateLender,\\n            _addressesProvider,\\n            _aDUSD\\n        )\\n    {\\n        uniswapV3Router = _uniswapV3Router;\\n        slippageTolerance = _slippageTolerance;\\n        emit SlippageToleranceSet(_slippageTolerance);\\n    }\\n\\n    function setSlippageTolerance(uint256 _newTolerance) external onlyOwner {\\n        if (_newTolerance > ONE_HUNDER_PCT_BPS) revert ValueAboveBasisPoints();\\n        slippageTolerance = _newTolerance;\\n        emit SlippageToleranceSet(_newTolerance);\\n    }\\n\\n    function liquidate(\\n        address _poolTokenBorrowedAddress,\\n        address _poolTokenCollateralAddress,\\n        address _borrower,\\n        uint256 _repayAmount,\\n        bool _stakeTokens,\\n        bytes memory _path\\n    ) external nonReentrant onlyLiquidator {\\n        LiquidateParams memory liquidateParams = LiquidateParams(\\n            _getUnderlying(_poolTokenCollateralAddress),\\n            _getUnderlying(_poolTokenBorrowedAddress),\\n            IAToken(_poolTokenCollateralAddress),\\n            IAToken(_poolTokenBorrowedAddress),\\n            msg.sender,\\n            _borrower,\\n            _repayAmount\\n        );\\n\\n        uint256 seized;\\n        if (\\n            liquidateParams.borrowedUnderlying.balanceOf(address(this)) >=\\n            _repayAmount\\n        )\\n            // we can liquidate without flash loan by using the contract balance\\n            seized = _liquidateInternal(liquidateParams);\\n        else {\\n            FlashLoanParams memory params = FlashLoanParams(\\n                address(liquidateParams.collateralUnderlying),\\n                address(liquidateParams.borrowedUnderlying),\\n                address(liquidateParams.poolTokenCollateral),\\n                address(liquidateParams.poolTokenBorrowed),\\n                liquidateParams.liquidator,\\n                liquidateParams.borrower,\\n                liquidateParams.toRepay,\\n                _path\\n            );\\n            seized = _liquidateWithFlashLoan(params);\\n        }\\n\\n        if (!_stakeTokens)\\n            liquidateParams.collateralUnderlying.safeTransfer(\\n                msg.sender,\\n                seized\\n            );\\n    }\\n\\n    /// @dev ERC-3156 Flash loan callback\\n    function onFlashLoan(\\n        address _initiator,\\n        address,\\n        uint256, // flashloan amount\\n        uint256,\\n        bytes calldata data\\n    ) external override returns (bytes32) {\\n        if (msg.sender != address(flashMinter)) revert UnknownLender();\\n        if (_initiator != address(this)) revert UnknownInitiator();\\n        FlashLoanParams memory flashLoanParams = _decodeData(data);\\n\\n        _flashLoanInternal(flashLoanParams);\\n        return FLASHLOAN_CALLBACK;\\n    }\\n\\n    function _flashLoanInternal(\\n        FlashLoanParams memory _flashLoanParams\\n    ) internal {\\n        if (_flashLoanParams.borrowedUnderlying != address(dusd)) {\\n            revert NotSupportingNonDUSD(\\n                _flashLoanParams.borrowedUnderlying,\\n                ERC20(_flashLoanParams.borrowedUnderlying).symbol()\\n            );\\n        }\\n\\n        LiquidateParams memory liquidateParams = LiquidateParams(\\n            ERC20(_flashLoanParams.collateralUnderlying),\\n            ERC20(_flashLoanParams.borrowedUnderlying),\\n            IAToken(_flashLoanParams.poolTokenCollateral),\\n            IAToken(_flashLoanParams.poolTokenBorrowed),\\n            _flashLoanParams.liquidator,\\n            _flashLoanParams.borrower,\\n            _flashLoanParams.toLiquidate\\n        );\\n        uint256 seized = _liquidateInternal(liquidateParams);\\n\\n        if (\\n            _flashLoanParams.borrowedUnderlying !=\\n            _flashLoanParams.collateralUnderlying\\n        ) {\\n            // need a swap\\n            // we use aave oracle\\n            IPriceOracleGetter oracle = IPriceOracleGetter(\\n                addressesProvider.getPriceOracle()\\n            );\\n            uint256 maxIn = (((_flashLoanParams.toLiquidate *\\n                10 ** liquidateParams.collateralUnderlying.decimals() *\\n                oracle.getAssetPrice(_flashLoanParams.borrowedUnderlying)) /\\n                oracle.getAssetPrice(_flashLoanParams.collateralUnderlying) /\\n                10 ** liquidateParams.borrowedUnderlying.decimals()) *\\n                (ONE_HUNDER_PCT_BPS + slippageTolerance)) / ONE_HUNDER_PCT_BPS;\\n\\n            ERC20(_flashLoanParams.collateralUnderlying).safeApprove(\\n                address(uniswapV3Router),\\n                maxIn\\n            );\\n\\n            _doSecondSwap(\\n                _flashLoanParams.path,\\n                _flashLoanParams.toLiquidate,\\n                maxIn\\n            );\\n        }\\n        emit Liquidated(\\n            _flashLoanParams.liquidator,\\n            _flashLoanParams.borrower,\\n            _flashLoanParams.poolTokenBorrowed,\\n            _flashLoanParams.poolTokenCollateral,\\n            _flashLoanParams.toLiquidate,\\n            seized,\\n            true\\n        );\\n    }\\n\\n    function _doSecondSwap(\\n        bytes memory _path,\\n        uint256 _amount,\\n        uint256 _maxIn\\n    ) internal returns (uint256 amountIn) {\\n        amountIn = uniswapV3Router.exactOutput(\\n            ISwapRouter.ExactOutputParams(\\n                _path,\\n                address(this),\\n                block.timestamp,\\n                _amount,\\n                _maxIn\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xb379f6ff74583bad103af08bffb19124e221eb9433ed9071df4db41aeaebdca5\",\"license\":\"GNU AGPLv3\"},\"contracts/lending_liquidator/common/SharedLiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts-4-6/access/Ownable.sol\\\";\\n\\ncontract SharedLiquidator is Ownable {\\n    using SafeTransferLib for ERC20;\\n\\n    mapping(address => bool) public isLiquidator;\\n\\n    error OnlyLiquidator();\\n\\n    event LiquidatorAdded(address indexed _liquidatorAdded);\\n\\n    event LiquidatorRemoved(address indexed _liquidatorRemoved);\\n\\n    event Withdrawn(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed underlyingAddress,\\n        uint256 amount\\n    );\\n\\n    modifier onlyLiquidator() {\\n        if (!isLiquidator[msg.sender]) revert OnlyLiquidator();\\n        _;\\n    }\\n\\n    constructor() {\\n        isLiquidator[msg.sender] = true;\\n        emit LiquidatorAdded(msg.sender);\\n    }\\n\\n    function addLiquidator(address _newLiquidator) external onlyOwner {\\n        isLiquidator[_newLiquidator] = true;\\n        emit LiquidatorAdded(_newLiquidator);\\n    }\\n\\n    function removeLiquidator(address _liquidatorToRemove) external onlyOwner {\\n        isLiquidator[_liquidatorToRemove] = false;\\n        emit LiquidatorRemoved(_liquidatorToRemove);\\n    }\\n\\n    function withdraw(\\n        address _underlyingAddress,\\n        address _receiver,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        uint256 amountMax = ERC20(_underlyingAddress).balanceOf(address(this));\\n        uint256 amount = _amount > amountMax ? amountMax : _amount;\\n        ERC20(_underlyingAddress).safeTransfer(_receiver, amount);\\n        emit Withdrawn(msg.sender, _receiver, _underlyingAddress, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xd6df0dc13f1f343c4dfb1566e4bd82eb3cd7a8d52bc96d46445e99553b725dae\",\"license\":\"GNU AGPLv3\"},\"contracts/lending_liquidator/interface/IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\ninterface IERC3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xdc8dc842d4f78209c8939d0cb171c7ff14a4009b1fbc0e2f7da15a13351c33ca\",\"license\":\"GNU AGPLv3\"},\"contracts/lending_liquidator/interface/IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.13;\\n\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\ninterface IERC3156FlashLender {\\n    /**\\n     * @dev The amount of currency available to be lent.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(\\n        address token,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x836c175e83f4fae342cd5b5565b05802b933ff73c09411f038702a03008fb4bc\",\"license\":\"GNU AGPLv3\"},\"contracts/lending_liquidator/interface/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x7c8d841f6478fe8c85c433f3d063087129cf11313413e96a2f8323a50ebaa4a7\",\"license\":\"GNU AGPLv3\"},\"contracts/lending_liquidator/interface/aave-v3/ILiquidator.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.0;\\n\\ninterface ILiquidator {\\n    function liquidate(\\n        address _poolTokenBorrowed,\\n        address _poolTokenCollateral,\\n        address _borrower,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xae5c803c1d52eb6f74d8a7f11a9a381b41c1eda34f84b7a7468a44febb2551ef\",\"license\":\"GNU AGPLv3\"},\"contracts/lending_liquidator/interface/aave-v3/aave/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport \\\"../../../../lending/core/interfaces/IPool.sol\\\";\\n\\ninterface ILendingPool is IPool {}\\n\",\"keccak256\":\"0x3479731a64bcf360bcf230213e23d1e820d4da201d13782f9a2c9b77a466331c\",\"license\":\"agpl-3.0\"},\"contracts/lending_liquidator/interface/aave-v3/aave/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../../../lending/core/interfaces/IPoolAddressesProvider.sol\\\";\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider is IPoolAddressesProvider {}\\n\",\"keccak256\":\"0x44cde4e2f054459fc5e5fc216f7c0c0614c674b3a0ff6cbacdb1ed7513c9b002\",\"license\":\"agpl-3.0\"},\"contracts/lending_liquidator/interface/aave-v3/aave/IPriceOracleGetter.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/************\\n@title IPriceOracleGetter interface\\n@notice Interface for the Aave price oracle.*/\\ninterface IPriceOracleGetter {\\n    /***********\\n    @dev returns the asset price in ETH\\n     */\\n    function getAssetPrice(address _asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb75f6c0114634d19e35364fd7f6ecd4899ace30c87f2aa7f9734160c78d26381\",\"license\":\"UNLICENSED\"},\"contracts/lending_liquidator/interface/aave-v3/libraries/aave/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Errors library\\n * @author Aave\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\\n *  - AT = AToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = LendingPoolAddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolCollateralManager\\n *  - P = Pausable\\n */\\nlibrary Errors {\\n    //common errors\\n    string public constant CALLER_NOT_POOL_ADMIN = \\\"33\\\"; // 'The caller must be the pool admin'\\n    string public constant BORROW_ALLOWANCE_NOT_ENOUGH = \\\"59\\\"; // User borrows on behalf, but allowance are too small\\n\\n    //contract specific errors\\n    string public constant VL_INVALID_AMOUNT = \\\"1\\\"; // 'Amount must be greater than 0'\\n    string public constant VL_NO_ACTIVE_RESERVE = \\\"2\\\"; // 'Action requires an active reserve'\\n    string public constant VL_RESERVE_FROZEN = \\\"3\\\"; // 'Action cannot be performed because the reserve is frozen'\\n    string public constant VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH = \\\"4\\\"; // 'The current liquidity is not enough'\\n    string public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = \\\"5\\\"; // 'User cannot withdraw more than the available balance'\\n    string public constant VL_TRANSFER_NOT_ALLOWED = \\\"6\\\"; // 'Transfer cannot be allowed.'\\n    string public constant VL_BORROWING_NOT_ENABLED = \\\"7\\\"; // 'Borrowing is not enabled'\\n    string public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = \\\"8\\\"; // 'Invalid interest rate mode selected'\\n    string public constant VL_COLLATERAL_BALANCE_IS_0 = \\\"9\\\"; // 'The collateral balance is 0'\\n    string public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD =\\n        \\\"10\\\"; // 'Health factor is lesser than the liquidation threshold'\\n    string public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = \\\"11\\\"; // 'There is not enough collateral to cover a new borrow'\\n    string public constant VL_STABLE_BORROWING_NOT_ENABLED = \\\"12\\\"; // stable borrowing not enabled\\n    string public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = \\\"13\\\"; // collateral is (mostly) the same currency that is being borrowed\\n    string public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = \\\"14\\\"; // 'The requested amount is greater than the max loan size in stable rate mode\\n    string public constant VL_NO_DEBT_OF_SELECTED_TYPE = \\\"15\\\"; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\\n    string public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = \\\"16\\\"; // 'To repay on behalf of an user an explicit amount to repay is needed'\\n    string public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = \\\"17\\\"; // 'User does not have a stable rate loan in progress on this reserve'\\n    string public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = \\\"18\\\"; // 'User does not have a variable rate loan in progress on this reserve'\\n    string public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = \\\"19\\\"; // 'The underlying balance needs to be greater than 0'\\n    string public constant VL_DEPOSIT_ALREADY_IN_USE = \\\"20\\\"; // 'User deposit is already being used as collateral'\\n    string public constant LP_NOT_ENOUGH_STABLE_BORROW_BALANCE = \\\"21\\\"; // 'User does not have any stable rate loan for this reserve'\\n    string public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = \\\"22\\\"; // 'Interest rate rebalance conditions were not met'\\n    string public constant LP_LIQUIDATION_CALL_FAILED = \\\"23\\\"; // 'Liquidation call failed'\\n    string public constant LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW = \\\"24\\\"; // 'There is not enough liquidity available to borrow'\\n    string public constant LP_REQUESTED_AMOUNT_TOO_SMALL = \\\"25\\\"; // 'The requested amount is too small for a FlashLoan.'\\n    string public constant LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE = \\\"26\\\"; // 'The actual balance of the protocol is inconsistent'\\n    string public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = \\\"27\\\"; // 'The caller of the function is not the lending pool configurator'\\n    string public constant LP_INCONSISTENT_FLASHLOAN_PARAMS = \\\"28\\\";\\n    string public constant CT_CALLER_MUST_BE_LENDING_POOL = \\\"29\\\"; // 'The caller of this function must be a lending pool'\\n    string public constant CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF = \\\"30\\\"; // 'User cannot give allowance to himself'\\n    string public constant CT_TRANSFER_AMOUNT_NOT_GT_0 = \\\"31\\\"; // 'Transferred amount needs to be greater than zero'\\n    string public constant RL_RESERVE_ALREADY_INITIALIZED = \\\"32\\\"; // 'Reserve has already been initialized'\\n    string public constant LPC_RESERVE_LIQUIDITY_NOT_0 = \\\"34\\\"; // 'The liquidity of the reserve needs to be 0'\\n    string public constant LPC_INVALID_ATOKEN_POOL_ADDRESS = \\\"35\\\"; // 'The liquidity of the reserve needs to be 0'\\n    string public constant LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS = \\\"36\\\"; // 'The liquidity of the reserve needs to be 0'\\n    string public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS = \\\"37\\\"; // 'The liquidity of the reserve needs to be 0'\\n    string public constant LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS =\\n        \\\"38\\\"; // 'The liquidity of the reserve needs to be 0'\\n    string public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS =\\n        \\\"39\\\"; // 'The liquidity of the reserve needs to be 0'\\n    string public constant LPC_INVALID_ADDRESSES_PROVIDER_ID = \\\"40\\\"; // 'The liquidity of the reserve needs to be 0'\\n    string public constant LPC_INVALID_CONFIGURATION = \\\"75\\\"; // 'Invalid risk parameters for the reserve'\\n    string public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = \\\"76\\\"; // 'The caller must be the emergency admin'\\n    string public constant LPAPR_PROVIDER_NOT_REGISTERED = \\\"41\\\"; // 'Provider is not registered'\\n    string public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = \\\"42\\\"; // 'Health factor is not below the threshold'\\n    string public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = \\\"43\\\"; // 'The collateral chosen cannot be liquidated'\\n    string public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \\\"44\\\"; // 'User did not borrow the specified currency'\\n    string public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = \\\"45\\\"; // \\\"There isn't enough liquidity available to liquidate\\\"\\n    string public constant LPCM_NO_ERRORS = \\\"46\\\"; // 'No errors'\\n    string public constant LP_INVALID_FLASHLOAN_MODE = \\\"47\\\"; //Invalid flashloan mode selected\\n    string public constant MATH_MULTIPLICATION_OVERFLOW = \\\"48\\\";\\n    string public constant MATH_ADDITION_OVERFLOW = \\\"49\\\";\\n    string public constant MATH_DIVISION_BY_ZERO = \\\"50\\\";\\n    string public constant RL_LIQUIDITY_INDEX_OVERFLOW = \\\"51\\\"; //  Liquidity index overflows uint128\\n    string public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = \\\"52\\\"; //  Variable borrow index overflows uint128\\n    string public constant RL_LIQUIDITY_RATE_OVERFLOW = \\\"53\\\"; //  Liquidity rate overflows uint128\\n    string public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = \\\"54\\\"; //  Variable borrow rate overflows uint128\\n    string public constant RL_STABLE_BORROW_RATE_OVERFLOW = \\\"55\\\"; //  Stable borrow rate overflows uint128\\n    string public constant CT_INVALID_MINT_AMOUNT = \\\"56\\\"; //invalid amount to mint\\n    string public constant LP_FAILED_REPAY_WITH_COLLATERAL = \\\"57\\\";\\n    string public constant CT_INVALID_BURN_AMOUNT = \\\"58\\\"; //invalid amount to burn\\n    string public constant LP_FAILED_COLLATERAL_SWAP = \\\"60\\\";\\n    string public constant LP_INVALID_EQUAL_ASSETS_TO_SWAP = \\\"61\\\";\\n    string public constant LP_REENTRANCY_NOT_ALLOWED = \\\"62\\\";\\n    string public constant LP_CALLER_MUST_BE_AN_ATOKEN = \\\"63\\\";\\n    string public constant LP_IS_PAUSED = \\\"64\\\"; // 'Pool is paused'\\n    string public constant LP_NO_MORE_RESERVES_ALLOWED = \\\"65\\\";\\n    string public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = \\\"66\\\";\\n    string public constant RC_INVALID_LTV = \\\"67\\\";\\n    string public constant RC_INVALID_LIQ_THRESHOLD = \\\"68\\\";\\n    string public constant RC_INVALID_LIQ_BONUS = \\\"69\\\";\\n    string public constant RC_INVALID_DECIMALS = \\\"70\\\";\\n    string public constant RC_INVALID_RESERVE_FACTOR = \\\"71\\\";\\n    string public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = \\\"72\\\";\\n    string public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = \\\"73\\\";\\n    string public constant LP_INCONSISTENT_PARAMS_LENGTH = \\\"74\\\";\\n    string public constant UL_INVALID_INDEX = \\\"77\\\";\\n    string public constant LP_NOT_CONTRACT = \\\"78\\\";\\n    string public constant SDT_STABLE_DEBT_OVERFLOW = \\\"79\\\";\\n    string public constant SDT_BURN_EXCEEDS_BALANCE = \\\"80\\\";\\n\\n    enum CollateralManagerErrors {\\n        NO_ERROR,\\n        NO_COLLATERAL_AVAILABLE,\\n        COLLATERAL_CANNOT_BE_LIQUIDATED,\\n        CURRRENCY_NOT_BORROWED,\\n        HEALTH_FACTOR_ABOVE_THRESHOLD,\\n        NOT_ENOUGH_LIQUIDITY,\\n        NO_ACTIVE_RESERVE,\\n        HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,\\n        INVALID_EQUAL_ASSETS_TO_SWAP,\\n        FROZEN_RESERVE\\n    }\\n}\\n\",\"keccak256\":\"0xa2b960ecc15923a1a7fe987534dc85161e944b298246659a904a1b355561439c\",\"license\":\"agpl-3.0\"},\"contracts/lending_liquidator/interface/aave-v3/libraries/aave/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.0;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\nimport {DataTypes} from \\\"../../../../../lending/core/protocol/libraries/types/DataTypes.sol\\\";\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Aave\\n * @notice Implements the bitmap logic to handle the reserve configuration\\n */\\nlibrary ReserveConfiguration {\\n    uint256 constant LTV_MASK =                   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n    uint256 constant LIQUIDATION_THRESHOLD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\n    uint256 constant LIQUIDATION_BONUS_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\n    uint256 constant DECIMALS_MASK =              0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\n    uint256 constant ACTIVE_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 constant FROZEN_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 constant BORROWING_MASK =             0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 constant STABLE_BORROWING_MASK =      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 constant RESERVE_FACTOR_MASK =        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n    /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\n    uint256 constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\n    uint256 constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\n    uint256 constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\n    uint256 constant IS_ACTIVE_START_BIT_POSITION = 56;\\n    uint256 constant IS_FROZEN_START_BIT_POSITION = 57;\\n    uint256 constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\n    uint256 constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\n    uint256 constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\n\\n    uint256 constant MAX_VALID_LTV = 65535;\\n    uint256 constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\n    uint256 constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\n    uint256 constant MAX_VALID_DECIMALS = 255;\\n    uint256 constant MAX_VALID_RESERVE_FACTOR = 65535;\\n\\n    /**\\n     * @dev Sets the Loan to Value of the reserve\\n     * @param self The reserve configuration\\n     * @param ltv the new ltv\\n     **/\\n    function setLtv(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 ltv\\n    ) internal pure {\\n        require(ltv <= MAX_VALID_LTV, Errors.RC_INVALID_LTV);\\n\\n        self.data = (self.data & LTV_MASK) | ltv;\\n    }\\n\\n    /**\\n     * @dev Gets the Loan to Value of the reserve\\n     * @param self The reserve configuration\\n     * @return The loan to value\\n     **/\\n    function getLtv(\\n        DataTypes.ReserveConfigurationMap storage self\\n    ) internal view returns (uint256) {\\n        return self.data & ~LTV_MASK;\\n    }\\n\\n    /**\\n     * @dev Sets the liquidation threshold of the reserve\\n     * @param self The reserve configuration\\n     * @param threshold The new liquidation threshold\\n     **/\\n    function setLiquidationThreshold(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 threshold\\n    ) internal pure {\\n        require(\\n            threshold <= MAX_VALID_LIQUIDATION_THRESHOLD,\\n            Errors.RC_INVALID_LIQ_THRESHOLD\\n        );\\n\\n        self.data =\\n            (self.data & LIQUIDATION_THRESHOLD_MASK) |\\n            (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the liquidation threshold of the reserve\\n     * @param self The reserve configuration\\n     * @return The liquidation threshold\\n     **/\\n    function getLiquidationThreshold(\\n        DataTypes.ReserveConfigurationMap storage self\\n    ) internal view returns (uint256) {\\n        return\\n            (self.data & ~LIQUIDATION_THRESHOLD_MASK) >>\\n            LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @dev Sets the liquidation bonus of the reserve\\n     * @param self The reserve configuration\\n     * @param bonus The new liquidation bonus\\n     **/\\n    function setLiquidationBonus(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 bonus\\n    ) internal pure {\\n        require(\\n            bonus <= MAX_VALID_LIQUIDATION_BONUS,\\n            Errors.RC_INVALID_LIQ_BONUS\\n        );\\n\\n        self.data =\\n            (self.data & LIQUIDATION_BONUS_MASK) |\\n            (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the liquidation bonus of the reserve\\n     * @param self The reserve configuration\\n     * @return The liquidation bonus\\n     **/\\n    function getLiquidationBonus(\\n        DataTypes.ReserveConfigurationMap storage self\\n    ) internal view returns (uint256) {\\n        return\\n            (self.data & ~LIQUIDATION_BONUS_MASK) >>\\n            LIQUIDATION_BONUS_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @dev Sets the decimals of the underlying asset of the reserve\\n     * @param self The reserve configuration\\n     * @param decimals The decimals\\n     **/\\n    function setDecimals(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 decimals\\n    ) internal pure {\\n        require(decimals <= MAX_VALID_DECIMALS, Errors.RC_INVALID_DECIMALS);\\n\\n        self.data =\\n            (self.data & DECIMALS_MASK) |\\n            (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the decimals of the underlying asset of the reserve\\n     * @param self The reserve configuration\\n     * @return The decimals of the asset\\n     **/\\n    function getDecimals(\\n        DataTypes.ReserveConfigurationMap storage self\\n    ) internal view returns (uint256) {\\n        return\\n            (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @dev Sets the active state of the reserve\\n     * @param self The reserve configuration\\n     * @param active The active state\\n     **/\\n    function setActive(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool active\\n    ) internal pure {\\n        self.data =\\n            (self.data & ACTIVE_MASK) |\\n            (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the active state of the reserve\\n     * @param self The reserve configuration\\n     * @return The active state\\n     **/\\n    function getActive(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~ACTIVE_MASK) != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the frozen state of the reserve\\n     * @param self The reserve configuration\\n     * @param frozen The frozen state\\n     **/\\n    function setFrozen(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool frozen\\n    ) internal pure {\\n        self.data =\\n            (self.data & FROZEN_MASK) |\\n            (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the frozen state of the reserve\\n     * @param self The reserve configuration\\n     * @return The frozen state\\n     **/\\n    function getFrozen(\\n        DataTypes.ReserveConfigurationMap storage self\\n    ) internal view returns (bool) {\\n        return (self.data & ~FROZEN_MASK) != 0;\\n    }\\n\\n    /**\\n     * @dev Enables or disables borrowing on the reserve\\n     * @param self The reserve configuration\\n     * @param enabled True if the borrowing needs to be enabled, false otherwise\\n     **/\\n    function setBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool enabled\\n    ) internal pure {\\n        self.data =\\n            (self.data & BORROWING_MASK) |\\n            (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the borrowing state of the reserve\\n     * @param self The reserve configuration\\n     * @return The borrowing state\\n     **/\\n    function getBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~BORROWING_MASK) != 0;\\n    }\\n\\n    /**\\n     * @dev Enables or disables stable rate borrowing on the reserve\\n     * @param self The reserve configuration\\n     * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\n     **/\\n    function setStableRateBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool enabled\\n    ) internal pure {\\n        self.data =\\n            (self.data & STABLE_BORROWING_MASK) |\\n            (uint256(enabled ? 1 : 0) <<\\n                STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the stable rate borrowing state of the reserve\\n     * @param self The reserve configuration\\n     * @return The stable rate borrowing state\\n     **/\\n    function getStableRateBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap storage self\\n    ) internal view returns (bool) {\\n        return (self.data & ~STABLE_BORROWING_MASK) != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the reserve factor of the reserve\\n     * @param self The reserve configuration\\n     * @param reserveFactor The reserve factor\\n     **/\\n    function setReserveFactor(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 reserveFactor\\n    ) internal pure {\\n        require(\\n            reserveFactor <= MAX_VALID_RESERVE_FACTOR,\\n            Errors.RC_INVALID_RESERVE_FACTOR\\n        );\\n\\n        self.data =\\n            (self.data & RESERVE_FACTOR_MASK) |\\n            (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the reserve factor of the reserve\\n     * @param self The reserve configuration\\n     * @return The reserve factor\\n     **/\\n    function getReserveFactor(\\n        DataTypes.ReserveConfigurationMap storage self\\n    ) internal view returns (uint256) {\\n        return\\n            (self.data & ~RESERVE_FACTOR_MASK) >>\\n            RESERVE_FACTOR_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @dev Gets the configuration flags of the reserve\\n     * @param self The reserve configuration\\n     * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\\n     **/\\n    function getFlags(\\n        DataTypes.ReserveConfigurationMap storage self\\n    ) internal view returns (bool, bool, bool, bool) {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            (dataLocal & ~ACTIVE_MASK) != 0,\\n            (dataLocal & ~FROZEN_MASK) != 0,\\n            (dataLocal & ~BORROWING_MASK) != 0,\\n            (dataLocal & ~STABLE_BORROWING_MASK) != 0\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets the configuration paramters of the reserve\\n     * @param self The reserve configuration\\n     * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\\n     **/\\n    function getParams(\\n        DataTypes.ReserveConfigurationMap storage self\\n    ) internal view returns (uint256, uint256, uint256, uint256, uint256) {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            dataLocal & ~LTV_MASK,\\n            (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >>\\n                LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n            (dataLocal & ~LIQUIDATION_BONUS_MASK) >>\\n                LIQUIDATION_BONUS_START_BIT_POSITION,\\n            (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n            (dataLocal & ~RESERVE_FACTOR_MASK) >>\\n                RESERVE_FACTOR_START_BIT_POSITION\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets the configuration paramters of the reserve from a memory object\\n     * @param self The reserve configuration\\n     * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\\n     **/\\n    function getParamsMemory(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256, uint256, uint256, uint256, uint256) {\\n        return (\\n            self.data & ~LTV_MASK,\\n            (self.data & ~LIQUIDATION_THRESHOLD_MASK) >>\\n                LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n            (self.data & ~LIQUIDATION_BONUS_MASK) >>\\n                LIQUIDATION_BONUS_START_BIT_POSITION,\\n            (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n            (self.data & ~RESERVE_FACTOR_MASK) >>\\n                RESERVE_FACTOR_START_BIT_POSITION\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets the configuration flags of the reserve from a memory object\\n     * @param self The reserve configuration\\n     * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\\n     **/\\n    function getFlagsMemory(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool, bool, bool, bool) {\\n        return (\\n            (self.data & ~ACTIVE_MASK) != 0,\\n            (self.data & ~FROZEN_MASK) != 0,\\n            (self.data & ~BORROWING_MASK) != 0,\\n            (self.data & ~STABLE_BORROWING_MASK) != 0\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x9500efc02c22af71f7735ec3a34bd94fdbeb6246ef79955138c78dfc680c1a6c\",\"license\":\"agpl-3.0\"},\"contracts/lending_liquidator/libraries/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary PercentageMath {\\n    // Maximum percentage factor (100.00%)\\n    uint256 internal constant PERCENTAGE_FACTOR = 1e4;\\n\\n    // Half percentage factor (50.00%)\\n    uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\\n\\n    /**\\n     * @notice Executes a percentage multiplication\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentmul percentage\\n     **/\\n    function percentMul(\\n        uint256 value,\\n        uint256 percentage\\n    ) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\\n        assembly {\\n            if iszero(\\n                or(\\n                    iszero(percentage),\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, percentage), HALF_PERCENTAGE_FACTOR),\\n                PERCENTAGE_FACTOR\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a percentage division\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentdiv percentage\\n     **/\\n    function percentDiv(\\n        uint256 value,\\n        uint256 percentage\\n    ) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\\n        assembly {\\n            if or(\\n                iszero(percentage),\\n                iszero(\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(\\n                                sub(not(0), div(percentage, 2)),\\n                                PERCENTAGE_FACTOR\\n                            )\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)),\\n                percentage\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xee75a17b862c197abcf1f79c87efef29c4202f00d98c7933d0d9aa7a0ac44e1e\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6101608060405234620001265760c081620022bc80380380916200002482856200012b565b833981010312620001265780516200008e91620000418262000165565b6020810151620000518162000165565b6040820151620000618162000165565b606083015191620000728362000165565b60a0608085015194620000858662000165565b01519462000177565b604051611f199081620003a3823960805181610936015260a0518181816109fe0152818161123a0152818161145501526115cd015260c0518181816102d00152610e59015260e0518181816109b80152611aaf01526101005181610886015261012051818181610b58015281816111f90152818161142301526118b701526101405181818161035201528181611c300152611e9a0152f35b600080fd5b601f909101601f19168101906001600160401b038211908210176200014f57604052565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116036200012657565b9360ff91927f84cb977e2a9a6a9b1fc0d73c4b02cd51695c09eb0d3008d61019a7c0a7406c4c96946200024296620001ae62000312565b60a05260c05260e052806101005260046040516358b50cef60e11b815260209281848185829560018060a01b038096165afa908115620002bf575b6000916200028b575b501680610120526040519283809263313ce56760e01b82525afa9182156200027b575b60009262000247575b505016608052610140526200023281600355565b6040519081529081906020820190565b0390a1565b6200026b9250803d1062000273575b6200026281836200012b565b810190620002f7565b38806200021e565b503d62000256565b62000285620002ea565b62000215565b620002b09150833d8511620002b7575b620002a781836200012b565b810190620002cf565b38620001f2565b503d6200029b565b620002c9620002ea565b620001e9565b90816020910312620001265751620002e78162000165565b90565b506040513d6000823e3d90fd5b9081602091031262000126575160ff81168103620001265790565b600160008181558154336001600160a01b03198216811790935560405192916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09084a33360005260026020526040600020600160ff198254161790557fb0a258c58bd721bcb64542ee0e4e4c843ae58242f908c0681ad82d40d688f1fa60003392a256fe60806040526004361015610013575b600080fd5b60003560e01c8063117da1ee146101a357806323e30c8b1461019a5780632a6b0c24146101915780632ae18104146101885780632c76d7a61461017f5780634c4e7f6f14610176578063529a356f1461016d5780635e45b473146101645780636333b5691461015b578063715018a61461015257806373d190db146101495780638da5cb5b14610140578063ab42c9b314610137578063c72c4d101461012e578063cd955ace14610125578063d03153aa1461011c578063d9caed1214610113578063de1409ce1461010a578063efb74400146101015763f2fde38b146100f957600080fd5b61000e610bff565b5061000e610b87565b5061000e610b41565b5061000e610a4c565b5061000e610a2d565b5061000e6109e7565b5061000e6109a1565b5061000e610983565b5061000e610959565b5061000e61091d565b5061000e6108b5565b5061000e61086f565b5061000e610561565b5061000e6103fc565b5061000e610381565b5061000e61033b565b5061000e6102ff565b5061000e6102b9565b5061000e61022a565b503461000e57602036600319011261000e576004356101cd60018060a01b03600154163314610c9c565b6127108111610207576020817f84cb977e2a9a6a9b1fc0d73c4b02cd51695c09eb0d3008d61019a7c0a7406c4c92600355604051908152a1005b60405163cf8c412760e01b8152600490fd5b6001600160a01b0381160361000e57565b503461000e5760a036600319011261000e5760043561024881610219565b610253602435610219565b60843567ffffffffffffffff80821161000e573660238301121561000e57816004013590811161000e57366024828401011161000e576102aa92602461029a9301906115c2565b6040519081529081906020820190565b0390f35b600091031261000e57565b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57600036600319011261000e5760206040517f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd98152f35b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57602036600319011261000e5760006004356103a181610219565b6001546001600160a01b0391906103bb9083163314610c9c565b1680825260026020526040808320805460ff1916600117905551907fb0a258c58bd721bcb64542ee0e4e4c843ae58242f908c0681ad82d40d688f1fa8383a2f35b503461000e57602036600319011261000e5760043561041a81610219565b60018060a01b03166000526002602052602060ff604060002054166040519015158152f35b8015150361000e57565b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161047457604052565b61047c610449565b604052565b610100810190811067ffffffffffffffff82111761047457604052565b90601f8019910116810190811067ffffffffffffffff82111761047457604052565b6040519060e0820182811067ffffffffffffffff82111761047457604052565b604051906104ed82610481565b565b60209067ffffffffffffffff811161050d575b601f01601f19160190565b610515610449565b610502565b81601f8201121561000e57803590610531826104ef565b9261053f604051948561049e565b8284526020838301011161000e57816000926020809301838601378301015290565b503461000e5760c036600319011261000e5760043561057f81610219565b60243561058b81610219565b6044359061059882610219565b60643592608435906105a98261043f565b60a43567ffffffffffffffff811161000e576105c990369060040161051a565b600095600287541461082a57600287553387526020906002825260409660ff888a20541615610819576105fb87611551565b9661060586611551565b956106206106116104c0565b6001600160a01b03909a168a52565b6001600160a01b03968716858a019081529187168a8a019081529616606089019081529095903360808a01908152916001600160a01b0390931660a08a019081529260c08a01948086528c8c8861068c6106808d5160018060a01b031690565b6001600160a01b031690565b91516370a0823160e01b815230600482015291829060249082905afa91821561080c575b916107df575b50106107025750505050505050506106cd82610df2565b905b156106e4575b50506106e16001600055565b51f35b90516106fb919033906001600160a01b0316610d53565b38806106d5565b89516001600160a01b03166001600160a01b031697516001600160a01b03166001600160a01b031690516001600160a01b03166001600160a01b031691516001600160a01b03166001600160a01b031692516001600160a01b031693516001600160a01b03169451956107736104e0565b6001600160a01b0390991689526001600160a01b03909116908801526001600160a01b0316868a01526001600160a01b031660608601526001600160a01b031660808501526001600160a01b031660a084015260c083015260e08201526107d9906111d4565b906106cf565b6107ff9150883d8a11610805575b6107f7818361049e565b810190610d37565b386106b6565b503d6107ed565b610814610d46565b6106b0565b87516399b01c4760e01b8152600490fd5b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e5760008060031936011261091a576001546001600160a01b038116906108e1338314610c9c565b6001600160a01b0319166001556040519082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600036600319011261000e5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b503461000e57600036600319011261000e576001546040516001600160a01b039091168152602090f35b503461000e57600036600319011261000e5760206040516127108152f35b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57600036600319011261000e576020600354604051908152f35b503461000e57606036600319011261000e57600435610a6a81610219565b602435610a7681610219565b604435917fa4195c37c2947bbe89165f03e320b6903116f0b10d8cfdb522330f7ce6f9fa2460018060a01b038092610ab382600154163314610c9c565b6040516370a0823160e01b8152306004820152911694602082602481895afa918215610b34575b600092610b14575b5081811115610b0c5750915b610af9838587610d53565b60405192835292909216913391602090a4005b905091610aee565b610b2d91925060203d8111610805576107f7818361049e565b9038610ae2565b610b3c610d46565b610ada565b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57602036600319011261000e576000600435610ba781610219565b6001546001600160a01b039190610bc19083163314610c9c565b1680825260026020526040808320805460ff1916905551907f06091797105e9997e06a57873c81a60a419050caf1d0ffedacc53ffc767f84f58383a2f35b503461000e57602036600319011261000e57600435610c1d81610219565b6001546001600160a01b0390610c369082163314610c9c565b811615610c4857610c4690610ce7565b005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b15610ca357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001549060018060a01b0380911691826bffffffffffffffffffffffff60a01b821617600155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b9081602091031261000e575190565b506040513d6000823e3d90fd5b600091826044926020956040519363a9059cbb60e01b8552600485015260248401525af13d15601f3d1160016000511416171615610d8d57565b60405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606490fd5b50634e487b7160e01b600052601160045260246000fd5b818110610de6570390565b610dee610dc4565b0390565b8051909190610e09906001600160a01b0316610680565b6040516370a0823160e01b80825230600483015260209491929091908590849060249082905afa92831561108d575b60009361106e575b50808501516001600160a01b03169160018060a01b03807f00000000000000000000000000000000000000000000000000000000000000001694610e8b60c08501958787519161109a565b6040840195610eae610680610ea96106808a5160018060a01b031690565b611551565b986060860195610ecd610680610ea96106808a5160018060a01b031690565b60a082018051909c919391906001600160a01b0316958a5192863b1561000e577fe96c57864e490909fadd8ddc506e391bc4946ed905e39f7e71321861c798d3e69981610f9a61068061068098610fd4986000610fe29e6106809e610fd49e83610fc69d610f7c6040519788968795869462a718a960e01b86526004860190949360809260009460a084019760018060a01b039283809216865216602085015216604083015260608201520152565b03925af18015611061575b611048575b50516001600160a01b031690565b604051928352306004840152829060249082905afa91821561103b575b60009261101e575b5050610ddb565b9b516001600160a01b031690565b96516001600160a01b031690565b9351604080516001600160a01b03909516855260208501919091528301879052600060608401529283169390921691339180608081015b0390a4565b6110349250803d10610805576107f7818361049e565b3880610fbf565b611043610d46565b610fb7565b8061105561105b92610460565b806102ae565b38610f8c565b611069610d46565b610f87565b611086919350853d8711610805576107f7818361049e565b9138610e40565b611095610d46565b610e38565b600091826044926020956040519363095ea7b360e01b8552600485015260248401525af13d15601f3d11600160005114161716156110d457565b60405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b6044820152606490fd5b61271081198111611119570190565b611121610dc4565b0190565b81198111611119570190565b9081602091031261000e57516111468161043f565b90565b918091926000905b828210611169575011611162575050565b6000910152565b91508060209183015181860152018291611151565b9060209161119781518092818552858086019101611149565b601f01601f1916010190565b6001600160a01b0391821681529116602082015260408101919091526080606082018190526111469291019061117e565b9061132c6111e1836114af565b926111ea61140c565b604051633676633960e21b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b038181166004840181905260248401859052939793946020947f000000000000000000000000000000000000000000000000000000000000000090921693909261128e918590611288908881604481865afa9081156113ff575b6000916113e2575b508c611125565b9161109a565b81516112a490610680906001600160a01b031681565b6040516370a0823160e01b80825230600483015290969094918a91908790899060249082905afa9788156113d5575b600098611397575b509361130f87610f9a9561068095610680956000849a60405196879586948593632e7ff4ef60e11b855230600486016111a3565b03925af1801561138a575b61135d5750516001600160a01b031690565b6040519283529133907f134bde118562a60dcf2d8c52965f586e25cf88a371592e44b78c4aa03bcbac8490602090a2565b61137c90863d8811611383575b611374818361049e565b810190611131565b5038610f8c565b503d61136a565b611392610d46565b61131a565b878096929950610f9a95610680956106809560006113c461130f96863d8811610805576107f7818361049e565b9d969a5050955095509550506112db565b6113dd610d46565b6112d3565b6113f99150893d8b11610805576107f7818361049e565b38611281565b611407610d46565b611279565b60405163613255ab60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602090829060249082907f0000000000000000000000000000000000000000000000000000000000000000165afa9081156114a2575b60009161148a575090565b611146915060203d8111610805576107f7818361049e565b6114aa610d46565b61147f565b61114660018060a01b0361152e8184511691806020860151169481604082015116918060608301511690806080840151169060a0840151169160e060c085015194015194604051998a9860208a015260408901526060880152608087015260a086015260c085015260e08401526101008084015261012083019061117e565b03601f19810183528261049e565b9081602091031261000e575161114681610219565b6040516358b50cef60e11b81526001600160a01b03916020908290600490829086165afa9081156115b5575b60009161158957501690565b6115aa915060203d81116115ae575b6115a2818361049e565b81019061153c565b1690565b503d611598565b6115bd610d46565b61157d565b6001600160a01b03907f0000000000000000000000000000000000000000000000000000000000000000821633036117045781309116036116f2576040519261160a84610481565b6000808552826020860191808352604087019581875260608801968288528360808a0198848a5260a08b019685885282808d60c0810198895260e0019a60608c5287019581611659888a611716565b505050509095166001600160a01b03169097529592166001600160a01b03169052166001600160a01b03169052166001600160a01b0316895261169b91611716565b945095509593509790505252166116b9919060018060a01b03169052565b166001600160a01b031690526116ce90611897565b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd990565b604051634ac321c360e11b8152600490fd5b604051631e4a393d60e31b8152600490fd5b9190916101008184031261000e57803561172f81610219565b92602082013561173e81610219565b92604083013561174d81610219565b92606081013561175c81610219565b92608082013561176b81610219565b9260a083013561177a81610219565b9260c08101359260e082013567ffffffffffffffff811161000e57611146920161051a565b60208183031261000e5780519067ffffffffffffffff821161000e570181601f8201121561000e5780516117d2816104ef565b926117e0604051948561049e565b8184526020828401011161000e576111469160208085019101611149565b6001600160a01b0390911681526040602082018190526111469291019061117e565b9081602091031261000e575160ff8116810361000e5790565b60ff16604d811161184b575b600a0a90565b611853610dc4565b611845565b806000190482118115151661186b570290565b611873610dc4565b0290565b8115611881570490565b634e487b7160e01b600052601260045260246000fd5b6020810180519091906001600160a01b03166001600160a01b03818116907f0000000000000000000000000000000000000000000000000000000000000000168103611d795750508051825160408301805160608501805160808701805160a08901805160c08b018051989c929b969a94996001600160a01b039586169991989397969195928316948316939183169291821691166119346104c0565b6001600160a01b03909a168a526001600160a01b031660208a01526001600160a01b031660408901526001600160a01b031660608801526001600160a01b031660808701526001600160a01b031660a086015260c08501528261199685610df2565b83519095906001600160a01b031683516001600160a01b03166001600160a01b031690600160a01b600190031614157fe96c57864e490909fadd8ddc506e391bc4946ed905e39f7e71321861c798d3e69761101995611a2f95611a2195610fd495611a1395611a6b575b505091516001600160a01b031692915050565b98516001600160a01b031690565b97516001600160a01b031690565b9151604080516001600160a01b039788168152602081019290925281019390935260016060840152908416958416949093169281906080820190565b611c0e611c0382611bfd60046020611bd661068082611bc7611bad8d611c689f849060e09f611c169f60405191631f94a27560e31b835284838e8160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa928315611d6c575b600093611d2a575b50611b48611b3a611b8a938f611b349089611b0a610680611b3a9851955160018060a01b031690565b60405163313ce56760e01b815292839182905afa908115611d1d575b600091611d06575b50611839565b90611858565b94516001600160a01b031690565b60405163b3596f0760e01b8082526001600160a01b0392831660048301529594909116938682602481885afa918215611cf9575b600092611cda575b50611858565b6040519283526001600160a01b03168b8301908152919485928391829160200190565b03915afa918215611ccd575b600092611cae575b50611877565b9601516001600160a01b031690565b6040519283809263313ce5678c1b82525afa908115611ca1575b600091611c725750611839565b90611877565b611b3460035461110a565b612710900490565b91611c5e83611c2e610680845160018060a01b031690565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169061109a565b0151895190611e3d565b5038808881611a00565b611c94915060203d602011611c9a575b611c8c818361049e565b810190611820565b38611b2e565b503d611c82565b611ca9610d46565b611bf0565b611cc6919250843d8611610805576107f7818361049e565b9038611bc1565b611cd5610d46565b611bb9565b611cf2919250873d8911610805576107f7818361049e565b9038611b84565b611d01610d46565b611b7c565b611c9491508a3d8c11611c9a57611c8c818361049e565b611d25610d46565b611b26565b611b3a919350611b3a611b8a938f611b349089611b0a610680611d5c611b4898843d86116115ae576115a2818361049e565b9a98505050505050935050611ae1565b611d74610d46565b611ad9565b906000600492604051938480926395d89b4160e01b82525afa918215611de6575b600092611dc3575b50611dbf604051928392635620c2dd60e01b8452600484016117fe565b0390fd5b611ddf91923d8091833e611dd7818361049e565b81019061179f565b9082611da2565b611dee610d46565b611d9a565b6020815260a06080611e10845183602086015260c085019061117e565b93600180841b03602082015116604085015260408101516060850152606081015182850152015191015290565b611e94926020926040519260a0840184811067ffffffffffffffff821117611ed6575b604052835230848401524260408401526060830152608082015260405180938192631e51809360e31b835260048301611df3565b038160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19081156114a25760009161148a575090565b611ede610449565b611e6056fea264697066735822122035d4eb154ed0e858e1741f5c6013ac53d89df3dc3063ce94d96ff39469b08dfb64736f6c634300080d0033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c8063117da1ee146101a357806323e30c8b1461019a5780632a6b0c24146101915780632ae18104146101885780632c76d7a61461017f5780634c4e7f6f14610176578063529a356f1461016d5780635e45b473146101645780636333b5691461015b578063715018a61461015257806373d190db146101495780638da5cb5b14610140578063ab42c9b314610137578063c72c4d101461012e578063cd955ace14610125578063d03153aa1461011c578063d9caed1214610113578063de1409ce1461010a578063efb74400146101015763f2fde38b146100f957600080fd5b61000e610bff565b5061000e610b87565b5061000e610b41565b5061000e610a4c565b5061000e610a2d565b5061000e6109e7565b5061000e6109a1565b5061000e610983565b5061000e610959565b5061000e61091d565b5061000e6108b5565b5061000e61086f565b5061000e610561565b5061000e6103fc565b5061000e610381565b5061000e61033b565b5061000e6102ff565b5061000e6102b9565b5061000e61022a565b503461000e57602036600319011261000e576004356101cd60018060a01b03600154163314610c9c565b6127108111610207576020817f84cb977e2a9a6a9b1fc0d73c4b02cd51695c09eb0d3008d61019a7c0a7406c4c92600355604051908152a1005b60405163cf8c412760e01b8152600490fd5b6001600160a01b0381160361000e57565b503461000e5760a036600319011261000e5760043561024881610219565b610253602435610219565b60843567ffffffffffffffff80821161000e573660238301121561000e57816004013590811161000e57366024828401011161000e576102aa92602461029a9301906115c2565b6040519081529081906020820190565b0390f35b600091031261000e57565b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57600036600319011261000e5760206040517f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd98152f35b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57602036600319011261000e5760006004356103a181610219565b6001546001600160a01b0391906103bb9083163314610c9c565b1680825260026020526040808320805460ff1916600117905551907fb0a258c58bd721bcb64542ee0e4e4c843ae58242f908c0681ad82d40d688f1fa8383a2f35b503461000e57602036600319011261000e5760043561041a81610219565b60018060a01b03166000526002602052602060ff604060002054166040519015158152f35b8015150361000e57565b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161047457604052565b61047c610449565b604052565b610100810190811067ffffffffffffffff82111761047457604052565b90601f8019910116810190811067ffffffffffffffff82111761047457604052565b6040519060e0820182811067ffffffffffffffff82111761047457604052565b604051906104ed82610481565b565b60209067ffffffffffffffff811161050d575b601f01601f19160190565b610515610449565b610502565b81601f8201121561000e57803590610531826104ef565b9261053f604051948561049e565b8284526020838301011161000e57816000926020809301838601378301015290565b503461000e5760c036600319011261000e5760043561057f81610219565b60243561058b81610219565b6044359061059882610219565b60643592608435906105a98261043f565b60a43567ffffffffffffffff811161000e576105c990369060040161051a565b600095600287541461082a57600287553387526020906002825260409660ff888a20541615610819576105fb87611551565b9661060586611551565b956106206106116104c0565b6001600160a01b03909a168a52565b6001600160a01b03968716858a019081529187168a8a019081529616606089019081529095903360808a01908152916001600160a01b0390931660a08a019081529260c08a01948086528c8c8861068c6106808d5160018060a01b031690565b6001600160a01b031690565b91516370a0823160e01b815230600482015291829060249082905afa91821561080c575b916107df575b50106107025750505050505050506106cd82610df2565b905b156106e4575b50506106e16001600055565b51f35b90516106fb919033906001600160a01b0316610d53565b38806106d5565b89516001600160a01b03166001600160a01b031697516001600160a01b03166001600160a01b031690516001600160a01b03166001600160a01b031691516001600160a01b03166001600160a01b031692516001600160a01b031693516001600160a01b03169451956107736104e0565b6001600160a01b0390991689526001600160a01b03909116908801526001600160a01b0316868a01526001600160a01b031660608601526001600160a01b031660808501526001600160a01b031660a084015260c083015260e08201526107d9906111d4565b906106cf565b6107ff9150883d8a11610805575b6107f7818361049e565b810190610d37565b386106b6565b503d6107ed565b610814610d46565b6106b0565b87516399b01c4760e01b8152600490fd5b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e5760008060031936011261091a576001546001600160a01b038116906108e1338314610c9c565b6001600160a01b0319166001556040519082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600036600319011261000e5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b503461000e57600036600319011261000e576001546040516001600160a01b039091168152602090f35b503461000e57600036600319011261000e5760206040516127108152f35b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57600036600319011261000e576020600354604051908152f35b503461000e57606036600319011261000e57600435610a6a81610219565b602435610a7681610219565b604435917fa4195c37c2947bbe89165f03e320b6903116f0b10d8cfdb522330f7ce6f9fa2460018060a01b038092610ab382600154163314610c9c565b6040516370a0823160e01b8152306004820152911694602082602481895afa918215610b34575b600092610b14575b5081811115610b0c5750915b610af9838587610d53565b60405192835292909216913391602090a4005b905091610aee565b610b2d91925060203d8111610805576107f7818361049e565b9038610ae2565b610b3c610d46565b610ada565b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57602036600319011261000e576000600435610ba781610219565b6001546001600160a01b039190610bc19083163314610c9c565b1680825260026020526040808320805460ff1916905551907f06091797105e9997e06a57873c81a60a419050caf1d0ffedacc53ffc767f84f58383a2f35b503461000e57602036600319011261000e57600435610c1d81610219565b6001546001600160a01b0390610c369082163314610c9c565b811615610c4857610c4690610ce7565b005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b15610ca357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001549060018060a01b0380911691826bffffffffffffffffffffffff60a01b821617600155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b9081602091031261000e575190565b506040513d6000823e3d90fd5b600091826044926020956040519363a9059cbb60e01b8552600485015260248401525af13d15601f3d1160016000511416171615610d8d57565b60405162461bcd60e51b815260206004820152600f60248201526e1514905394d1915497d19052531151608a1b6044820152606490fd5b50634e487b7160e01b600052601160045260246000fd5b818110610de6570390565b610dee610dc4565b0390565b8051909190610e09906001600160a01b0316610680565b6040516370a0823160e01b80825230600483015260209491929091908590849060249082905afa92831561108d575b60009361106e575b50808501516001600160a01b03169160018060a01b03807f00000000000000000000000000000000000000000000000000000000000000001694610e8b60c08501958787519161109a565b6040840195610eae610680610ea96106808a5160018060a01b031690565b611551565b986060860195610ecd610680610ea96106808a5160018060a01b031690565b60a082018051909c919391906001600160a01b0316958a5192863b1561000e577fe96c57864e490909fadd8ddc506e391bc4946ed905e39f7e71321861c798d3e69981610f9a61068061068098610fd4986000610fe29e6106809e610fd49e83610fc69d610f7c6040519788968795869462a718a960e01b86526004860190949360809260009460a084019760018060a01b039283809216865216602085015216604083015260608201520152565b03925af18015611061575b611048575b50516001600160a01b031690565b604051928352306004840152829060249082905afa91821561103b575b60009261101e575b5050610ddb565b9b516001600160a01b031690565b96516001600160a01b031690565b9351604080516001600160a01b03909516855260208501919091528301879052600060608401529283169390921691339180608081015b0390a4565b6110349250803d10610805576107f7818361049e565b3880610fbf565b611043610d46565b610fb7565b8061105561105b92610460565b806102ae565b38610f8c565b611069610d46565b610f87565b611086919350853d8711610805576107f7818361049e565b9138610e40565b611095610d46565b610e38565b600091826044926020956040519363095ea7b360e01b8552600485015260248401525af13d15601f3d11600160005114161716156110d457565b60405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b6044820152606490fd5b61271081198111611119570190565b611121610dc4565b0190565b81198111611119570190565b9081602091031261000e57516111468161043f565b90565b918091926000905b828210611169575011611162575050565b6000910152565b91508060209183015181860152018291611151565b9060209161119781518092818552858086019101611149565b601f01601f1916010190565b6001600160a01b0391821681529116602082015260408101919091526080606082018190526111469291019061117e565b9061132c6111e1836114af565b926111ea61140c565b604051633676633960e21b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b038181166004840181905260248401859052939793946020947f000000000000000000000000000000000000000000000000000000000000000090921693909261128e918590611288908881604481865afa9081156113ff575b6000916113e2575b508c611125565b9161109a565b81516112a490610680906001600160a01b031681565b6040516370a0823160e01b80825230600483015290969094918a91908790899060249082905afa9788156113d5575b600098611397575b509361130f87610f9a9561068095610680956000849a60405196879586948593632e7ff4ef60e11b855230600486016111a3565b03925af1801561138a575b61135d5750516001600160a01b031690565b6040519283529133907f134bde118562a60dcf2d8c52965f586e25cf88a371592e44b78c4aa03bcbac8490602090a2565b61137c90863d8811611383575b611374818361049e565b810190611131565b5038610f8c565b503d61136a565b611392610d46565b61131a565b878096929950610f9a95610680956106809560006113c461130f96863d8811610805576107f7818361049e565b9d969a5050955095509550506112db565b6113dd610d46565b6112d3565b6113f99150893d8b11610805576107f7818361049e565b38611281565b611407610d46565b611279565b60405163613255ab60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602090829060249082907f0000000000000000000000000000000000000000000000000000000000000000165afa9081156114a2575b60009161148a575090565b611146915060203d8111610805576107f7818361049e565b6114aa610d46565b61147f565b61114660018060a01b0361152e8184511691806020860151169481604082015116918060608301511690806080840151169060a0840151169160e060c085015194015194604051998a9860208a015260408901526060880152608087015260a086015260c085015260e08401526101008084015261012083019061117e565b03601f19810183528261049e565b9081602091031261000e575161114681610219565b6040516358b50cef60e11b81526001600160a01b03916020908290600490829086165afa9081156115b5575b60009161158957501690565b6115aa915060203d81116115ae575b6115a2818361049e565b81019061153c565b1690565b503d611598565b6115bd610d46565b61157d565b6001600160a01b03907f0000000000000000000000000000000000000000000000000000000000000000821633036117045781309116036116f2576040519261160a84610481565b6000808552826020860191808352604087019581875260608801968288528360808a0198848a5260a08b019685885282808d60c0810198895260e0019a60608c5287019581611659888a611716565b505050509095166001600160a01b03169097529592166001600160a01b03169052166001600160a01b03169052166001600160a01b0316895261169b91611716565b945095509593509790505252166116b9919060018060a01b03169052565b166001600160a01b031690526116ce90611897565b7f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd990565b604051634ac321c360e11b8152600490fd5b604051631e4a393d60e31b8152600490fd5b9190916101008184031261000e57803561172f81610219565b92602082013561173e81610219565b92604083013561174d81610219565b92606081013561175c81610219565b92608082013561176b81610219565b9260a083013561177a81610219565b9260c08101359260e082013567ffffffffffffffff811161000e57611146920161051a565b60208183031261000e5780519067ffffffffffffffff821161000e570181601f8201121561000e5780516117d2816104ef565b926117e0604051948561049e565b8184526020828401011161000e576111469160208085019101611149565b6001600160a01b0390911681526040602082018190526111469291019061117e565b9081602091031261000e575160ff8116810361000e5790565b60ff16604d811161184b575b600a0a90565b611853610dc4565b611845565b806000190482118115151661186b570290565b611873610dc4565b0290565b8115611881570490565b634e487b7160e01b600052601260045260246000fd5b6020810180519091906001600160a01b03166001600160a01b03818116907f0000000000000000000000000000000000000000000000000000000000000000168103611d795750508051825160408301805160608501805160808701805160a08901805160c08b018051989c929b969a94996001600160a01b039586169991989397969195928316948316939183169291821691166119346104c0565b6001600160a01b03909a168a526001600160a01b031660208a01526001600160a01b031660408901526001600160a01b031660608801526001600160a01b031660808701526001600160a01b031660a086015260c08501528261199685610df2565b83519095906001600160a01b031683516001600160a01b03166001600160a01b031690600160a01b600190031614157fe96c57864e490909fadd8ddc506e391bc4946ed905e39f7e71321861c798d3e69761101995611a2f95611a2195610fd495611a1395611a6b575b505091516001600160a01b031692915050565b98516001600160a01b031690565b97516001600160a01b031690565b9151604080516001600160a01b039788168152602081019290925281019390935260016060840152908416958416949093169281906080820190565b611c0e611c0382611bfd60046020611bd661068082611bc7611bad8d611c689f849060e09f611c169f60405191631f94a27560e31b835284838e8160018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165afa928315611d6c575b600093611d2a575b50611b48611b3a611b8a938f611b349089611b0a610680611b3a9851955160018060a01b031690565b60405163313ce56760e01b815292839182905afa908115611d1d575b600091611d06575b50611839565b90611858565b94516001600160a01b031690565b60405163b3596f0760e01b8082526001600160a01b0392831660048301529594909116938682602481885afa918215611cf9575b600092611cda575b50611858565b6040519283526001600160a01b03168b8301908152919485928391829160200190565b03915afa918215611ccd575b600092611cae575b50611877565b9601516001600160a01b031690565b6040519283809263313ce5678c1b82525afa908115611ca1575b600091611c725750611839565b90611877565b611b3460035461110a565b612710900490565b91611c5e83611c2e610680845160018060a01b031690565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169061109a565b0151895190611e3d565b5038808881611a00565b611c94915060203d602011611c9a575b611c8c818361049e565b810190611820565b38611b2e565b503d611c82565b611ca9610d46565b611bf0565b611cc6919250843d8611610805576107f7818361049e565b9038611bc1565b611cd5610d46565b611bb9565b611cf2919250873d8911610805576107f7818361049e565b9038611b84565b611d01610d46565b611b7c565b611c9491508a3d8c11611c9a57611c8c818361049e565b611d25610d46565b611b26565b611b3a919350611b3a611b8a938f611b349089611b0a610680611d5c611b4898843d86116115ae576115a2818361049e565b9a98505050505050935050611ae1565b611d74610d46565b611ad9565b906000600492604051938480926395d89b4160e01b82525afa918215611de6575b600092611dc3575b50611dbf604051928392635620c2dd60e01b8452600484016117fe565b0390fd5b611ddf91923d8091833e611dd7818361049e565b81019061179f565b9082611da2565b611dee610d46565b611d9a565b6020815260a06080611e10845183602086015260c085019061117e565b93600180841b03602082015116604085015260408101516060850152606081015182850152015191015290565b611e94926020926040519260a0840184811067ffffffffffffffff821117611ed6575b604052835230848401524260408401526060830152608082015260405180938192631e51809360e31b835260048301611df3565b038160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af19081156114a25760009161148a575090565b611ede610449565b611e6056fea264697066735822122035d4eb154ed0e858e1741f5c6013ac53d89df3dc3063ce94d96ff39469b08dfb64736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onFlashLoan(address,address,uint256,uint256,bytes)": {
        "details": "ERC-3156 Flash loan callback"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 115,
        "contract": "contracts/lending_liquidator/aave-v3/FlashMintLiquidatorBorrowRepayAave.sol:FlashMintLiquidatorBorrowRepayAave",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/lending_liquidator/aave-v3/FlashMintLiquidatorBorrowRepayAave.sol:FlashMintLiquidatorBorrowRepayAave",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3256,
        "contract": "contracts/lending_liquidator/aave-v3/FlashMintLiquidatorBorrowRepayAave.sol:FlashMintLiquidatorBorrowRepayAave",
        "label": "isLiquidator",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2408,
        "contract": "contracts/lending_liquidator/aave-v3/FlashMintLiquidatorBorrowRepayAave.sol:FlashMintLiquidatorBorrowRepayAave",
        "label": "slippageTolerance",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}