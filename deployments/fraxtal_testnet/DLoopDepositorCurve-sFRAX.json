{
  "address": "0x899a5F28E6ad1a1af3C9AC635687cb17392b14B5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "_underlyingAsset",
          "type": "address"
        },
        {
          "internalType": "contract ERC20",
          "name": "_dStable",
          "type": "address"
        },
        {
          "internalType": "contract IERC3156FlashLender",
          "name": "_flashLender",
          "type": "address"
        },
        {
          "internalType": "contract DLoopCoreBase",
          "name": "_dLoopCore",
          "type": "address"
        },
        {
          "internalType": "contract ICurveRouterNgPoolsOnlyV1",
          "name": "_curveRouter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_swapSlippageTolerance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSlippageSurplusSwapBps",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "inputToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outputToken",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address[11]",
                  "name": "route",
                  "type": "address[11]"
                },
                {
                  "internalType": "uint256[4][5]",
                  "name": "swapParams",
                  "type": "uint256[4][5]"
                },
                {
                  "internalType": "uint256",
                  "name": "swapSlippageBufferBps",
                  "type": "uint256"
                }
              ],
              "internalType": "struct CurveHelper.CurveSwapExtraParams",
              "name": "swapExtraParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address[11]",
                  "name": "route",
                  "type": "address[11]"
                },
                {
                  "internalType": "uint256[4][5]",
                  "name": "swapParams",
                  "type": "uint256[4][5]"
                },
                {
                  "internalType": "uint256",
                  "name": "swapSlippageBufferBps",
                  "type": "uint256"
                }
              ],
              "internalType": "struct CurveHelper.CurveSwapExtraParams",
              "name": "reverseSwapExtraParams",
              "type": "tuple"
            }
          ],
          "internalType": "struct CurveSwapLogic.CurveSwapExtraParamsDefaultConfig[]",
          "name": "_defaultSwapParamsList",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sharesBeforeDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sharesAfterDeposit",
          "type": "uint256"
        }
      ],
      "name": "SharesNotIncreasedAfterFlashLoan",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnknownInitiator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnknownLender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnknownToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FLASHLOAN_CALLBACK",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curveRouter",
      "outputs": [
        {
          "internalType": "contract ICurveRouterNgPoolsOnlyV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dLoopCore",
      "outputs": [
        {
          "internalType": "contract DLoopCoreBase",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dStable",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "defaultSwapParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "swapSlippageBufferBps",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "slippageTolerance",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "dStableToUnderlyingSwapData",
          "type": "bytes"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flashLender",
      "outputs": [
        {
          "internalType": "contract IERC3156FlashLender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "isSwapParamsSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSlippageSurplusSwapBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "slippageTolerance",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "dStableToUnderlyingSwapData",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onFlashLoan",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "rescueToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "inputToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "outputToken",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address[11]",
                  "name": "route",
                  "type": "address[11]"
                },
                {
                  "internalType": "uint256[4][5]",
                  "name": "swapParams",
                  "type": "uint256[4][5]"
                },
                {
                  "internalType": "uint256",
                  "name": "swapSlippageBufferBps",
                  "type": "uint256"
                }
              ],
              "internalType": "struct CurveHelper.CurveSwapExtraParams",
              "name": "swapExtraParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address[11]",
                  "name": "route",
                  "type": "address[11]"
                },
                {
                  "internalType": "uint256[4][5]",
                  "name": "swapParams",
                  "type": "uint256[4][5]"
                },
                {
                  "internalType": "uint256",
                  "name": "swapSlippageBufferBps",
                  "type": "uint256"
                }
              ],
              "internalType": "struct CurveHelper.CurveSwapExtraParams",
              "name": "reverseSwapExtraParams",
              "type": "tuple"
            }
          ],
          "internalType": "struct CurveSwapLogic.CurveSwapExtraParamsDefaultConfig",
          "name": "_swapExtraParamsConfig",
          "type": "tuple"
        }
      ],
      "name": "setSwapExtraParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlyingAsset",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7af03802fb303fa6d55d6f7445cc84342b44a5df8ea674f67c0073293a0801f2",
  "receipt": {
    "to": null,
    "from": "0xd2f775Ff2cD41bfe43C7A8c016eD10393553fe44",
    "contractAddress": "0x899a5F28E6ad1a1af3C9AC635687cb17392b14B5",
    "transactionIndex": 1,
    "gasUsed": "2249607",
    "logsBloom": "0x
    "blockHash": "0xe650445426ada3fee43cba959d707ee193b0dfb8d504557b6a4d65415764147f",
    "transactionHash": "0x7af03802fb303fa6d55d6f7445cc84342b44a5df8ea674f67c0073293a0801f2",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 22139904,
        "transactionHash": "0x7af03802fb303fa6d55d6f7445cc84342b44a5df8ea674f67c0073293a0801f2",
        "address": "0x899a5F28E6ad1a1af3C9AC635687cb17392b14B5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d2f775ff2cd41bfe43c7a8c016ed10393553fe44"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe650445426ada3fee43cba959d707ee193b0dfb8d504557b6a4d65415764147f"
      }
    ],
    "blockNumber": 22139904,
    "cumulativeGasUsed": "2295588",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0Dbf64462FEC588df32FC5C9941421F7d93e0Fb3",
    "0x4D6E79013212F10A026A1FB0b926C9Fd0432b96c",
    "0x4D6E79013212F10A026A1FB0b926C9Fd0432b96c",
    "0x64474f3447911DcA644E62A8EED3c422C5B7eFef",
    "0xF66c3Ef85BceafaEcE9171E25Eee2972b10e1958",
    200000,
    200000,
    [
      {
        "inputToken": "0x4D6E79013212F10A026A1FB0b926C9Fd0432b96c",
        "outputToken": "0x0Dbf64462FEC588df32FC5C9941421F7d93e0Fb3",
        "swapExtraParams": {
          "route": [
            "0x4D6E79013212F10A026A1FB0b926C9Fd0432b96c",
            "0x93f785642837e082ff95bB69E64e5B6967857c74",
            "0x2CAb811d351B4eF492D8C197E09939F1C9f54330",
            "0x6a7173EA306983f3721Cc9A3c6EA7f0a3a2f3c13",
            "0x0Dbf64462FEC588df32FC5C9941421F7d93e0Fb3",
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000"
          ],
          "swapParams": [
            [
              0,
              1,
              1,
              2
            ],
            [
              0,
              1,
              1,
              2
            ],
            [
              0,
              0,
              0,
              0
            ],
            [
              0,
              0,
              0,
              0
            ],
            [
              0,
              0,
              0,
              0
            ]
          ],
          "swapSlippageBufferBps": 500000
        },
        "reverseSwapExtraParams": {
          "route": [
            "0x0Dbf64462FEC588df32FC5C9941421F7d93e0Fb3",
            "0x6a7173EA306983f3721Cc9A3c6EA7f0a3a2f3c13",
            "0x2CAb811d351B4eF492D8C197E09939F1C9f54330",
            "0x93f785642837e082ff95bB69E64e5B6967857c74",
            "0x4D6E79013212F10A026A1FB0b926C9Fd0432b96c",
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000",
            "0x0000000000000000000000000000000000000000"
          ],
          "swapParams": [
            [
              1,
              0,
              1,
              2
            ],
            [
              1,
              0,
              1,
              2
            ],
            [
              0,
              0,
              0,
              0
            ],
            [
              0,
              0,
              0,
              0
            ],
            [
              0,
              0,
              0,
              0
            ]
          ],
          "swapSlippageBufferBps": 500000
        }
      }
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "2d1bff231d9c5ddb6fe0f19f244c2cfb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"contract ERC20\",\"name\":\"_dStable\",\"type\":\"address\"},{\"internalType\":\"contract IERC3156FlashLender\",\"name\":\"_flashLender\",\"type\":\"address\"},{\"internalType\":\"contract DLoopCoreBase\",\"name\":\"_dLoopCore\",\"type\":\"address\"},{\"internalType\":\"contract ICurveRouterNgPoolsOnlyV1\",\"name\":\"_curveRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swapSlippageTolerance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSlippageSurplusSwapBps\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[11]\",\"name\":\"route\",\"type\":\"address[11]\"},{\"internalType\":\"uint256[4][5]\",\"name\":\"swapParams\",\"type\":\"uint256[4][5]\"},{\"internalType\":\"uint256\",\"name\":\"swapSlippageBufferBps\",\"type\":\"uint256\"}],\"internalType\":\"struct CurveHelper.CurveSwapExtraParams\",\"name\":\"swapExtraParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[11]\",\"name\":\"route\",\"type\":\"address[11]\"},{\"internalType\":\"uint256[4][5]\",\"name\":\"swapParams\",\"type\":\"uint256[4][5]\"},{\"internalType\":\"uint256\",\"name\":\"swapSlippageBufferBps\",\"type\":\"uint256\"}],\"internalType\":\"struct CurveHelper.CurveSwapExtraParams\",\"name\":\"reverseSwapExtraParams\",\"type\":\"tuple\"}],\"internalType\":\"struct CurveSwapLogic.CurveSwapExtraParamsDefaultConfig[]\",\"name\":\"_defaultSwapParamsList\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sharesBeforeDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharesAfterDeposit\",\"type\":\"uint256\"}],\"name\":\"SharesNotIncreasedAfterFlashLoan\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownInitiator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownLender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FLASHLOAN_CALLBACK\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveRouter\",\"outputs\":[{\"internalType\":\"contract ICurveRouterNgPoolsOnlyV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dLoopCore\",\"outputs\":[{\"internalType\":\"contract DLoopCoreBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dStable\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"defaultSwapParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"swapSlippageBufferBps\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slippageTolerance\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dStableToUnderlyingSwapData\",\"type\":\"bytes\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flashLender\",\"outputs\":[{\"internalType\":\"contract IERC3156FlashLender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"isSwapParamsSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSlippageSurplusSwapBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slippageTolerance\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"dStableToUnderlyingSwapData\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onFlashLoan\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[11]\",\"name\":\"route\",\"type\":\"address[11]\"},{\"internalType\":\"uint256[4][5]\",\"name\":\"swapParams\",\"type\":\"uint256[4][5]\"},{\"internalType\":\"uint256\",\"name\":\"swapSlippageBufferBps\",\"type\":\"uint256\"}],\"internalType\":\"struct CurveHelper.CurveSwapExtraParams\",\"name\":\"swapExtraParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[11]\",\"name\":\"route\",\"type\":\"address[11]\"},{\"internalType\":\"uint256[4][5]\",\"name\":\"swapParams\",\"type\":\"uint256[4][5]\"},{\"internalType\":\"uint256\",\"name\":\"swapSlippageBufferBps\",\"type\":\"uint256\"}],\"internalType\":\"struct CurveHelper.CurveSwapExtraParams\",\"name\":\"reverseSwapExtraParams\",\"type\":\"tuple\"}],\"internalType\":\"struct CurveSwapLogic.CurveSwapExtraParamsDefaultConfig\",\"name\":\"_swapExtraParamsConfig\",\"type\":\"tuple\"}],\"name\":\"setSwapExtraParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlyingAsset\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of DLoopDepositorBase with Curve swap functionality\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor for the DLoopDepositorCurve contract\",\"params\":{\"_curveRouter\":\"Address of the Curve router\",\"_dLoopCore\":\"Address of the dLoopCore contract\",\"_dStable\":\"Address of the dStable token\",\"_defaultSwapParamsList\":\"List of default swap parameters\",\"_flashLender\":\"Address of the flash loan provider\",\"_maxSlippageSurplusSwapBps\":\"Maximum slippage for surplus swap in basis points\",\"_swapSlippageTolerance\":\"Swap slippage tolerance in basis points\",\"_underlyingAsset\":\"Address of the underlying asset\"}},\"deposit(uint256,address,uint256,bytes)\":{\"details\":\"Deposits assets into the core vault\",\"params\":{\"assets\":\"Amount of assets to deposit\",\"dStableToUnderlyingSwapData\":\"Swap data from dStable to underlying asset\",\"receiver\":\"Address to receive the minted shares\",\"slippageTolerance\":\"Slippage tolerance for the swap\"},\"returns\":{\"shares\":\"Amount of shares minted\"}},\"mint(uint256,address,uint256,bytes)\":{\"details\":\"Mints shares to the receiver by depositing assets to the core vault\",\"params\":{\"dStableToUnderlyingSwapData\":\"Swap data from dStable to underlying asset\",\"receiver\":\"Address to receive the minted shares\",\"shares\":\"Amount of shares to mint\",\"slippageTolerance\":\"Slippage tolerance for the swap\"},\"returns\":{\"assets\":\"Amount of assets deposited\"}},\"onFlashLoan(address,address,uint256,uint256,bytes)\":{\"details\":\"Callback function for flash loans\",\"params\":{\"data\":\"Additional data passed to the flash loan\",\"initiator\":\"Address that initiated the flash loan\",\"token\":\"Address of the flash-borrowed token\"},\"returns\":{\"_0\":\"bytes32 The flash loan callback success bytes\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"rescueToken(address,address)\":{\"details\":\"Rescues tokens accidentally sent to the contract\",\"params\":{\"receiver\":\"Address to receive the rescued tokens\",\"token\":\"Address of the token to rescue\"}},\"setSwapExtraParams((address,address,(address[11],uint256[4][5],uint256),(address[11],uint256[4][5],uint256)))\":{\"details\":\"Sets the swap extra params for a given input and output token\",\"params\":{\"_swapExtraParamsConfig\":\"The swap extra params config\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"DLoopDepositorCurve\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vault/dLOOP/periphery/venue/curve/DLoopDepositorCurve.sol\":\"DLoopDepositorCurve\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-5/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/extensions/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20, IERC20Metadata, ERC20} from \\\"../ERC20.sol\\\";\\nimport {SafeERC20} from \\\"../utils/SafeERC20.sol\\\";\\nimport {IERC4626} from \\\"../../../interfaces/IERC4626.sol\\\";\\nimport {Math} from \\\"../../../utils/math/Math.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC4626 \\\"Tokenized Vault Standard\\\" as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\\n *\\n * This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC20 inheritance) in exchange for\\n * underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\\n * the ERC20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this\\n * contract and not the \\\"assets\\\" token which is an independent contract.\\n *\\n * [CAUTION]\\n * ====\\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\\n * with a \\\"donation\\\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\\n *\\n * Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`\\n * corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault\\n * decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself\\n * determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset\\n * (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's\\n * donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more\\n * expensive than it is profitable. More details about the underlying math can be found\\n * xref:erc4626.adoc#inflation-attack[here].\\n *\\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\\n * `_convertToShares` and `_convertToAssets` functions.\\n *\\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\\n * ====\\n */\\nabstract contract ERC4626 is ERC20, IERC4626 {\\n    using Math for uint256;\\n\\n    IERC20 private immutable _asset;\\n    uint8 private immutable _underlyingDecimals;\\n\\n    /**\\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxDeposit(\\n        address receiver,\\n        uint256 assets,\\n        uint256 max\\n    );\\n\\n    /**\\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\\n\\n    /**\\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxWithdraw(\\n        address owner,\\n        uint256 assets,\\n        uint256 max\\n    );\\n\\n    /**\\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\\n\\n    /**\\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\\n     */\\n    constructor(IERC20 asset_) {\\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\\n        _underlyingDecimals = success ? assetDecimals : 18;\\n        _asset = asset_;\\n    }\\n\\n    /**\\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\\n     */\\n    function _tryGetAssetDecimals(\\n        IERC20 asset_\\n    ) private view returns (bool, uint8) {\\n        (bool success, bytes memory encodedDecimals) = address(asset_)\\n            .staticcall(abi.encodeCall(IERC20Metadata.decimals, ()));\\n        if (success && encodedDecimals.length >= 32) {\\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\\n            if (returnedDecimals <= type(uint8).max) {\\n                return (true, uint8(returnedDecimals));\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\\n     * \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\\n     *\\n     * See {IERC20Metadata-decimals}.\\n     */\\n    function decimals()\\n        public\\n        view\\n        virtual\\n        override(IERC20Metadata, ERC20)\\n        returns (uint8)\\n    {\\n        return _underlyingDecimals + _decimalsOffset();\\n    }\\n\\n    /** @dev See {IERC4626-asset}. */\\n    function asset() public view virtual returns (address) {\\n        return address(_asset);\\n    }\\n\\n    /** @dev See {IERC4626-totalAssets}. */\\n    function totalAssets() public view virtual returns (uint256) {\\n        return _asset.balanceOf(address(this));\\n    }\\n\\n    /** @dev See {IERC4626-convertToShares}. */\\n    function convertToShares(\\n        uint256 assets\\n    ) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-convertToAssets}. */\\n    function convertToAssets(\\n        uint256 shares\\n    ) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-maxDeposit}. */\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxMint}. */\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxWithdraw}. */\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-maxRedeem}. */\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /** @dev See {IERC4626-previewDeposit}. */\\n    function previewDeposit(\\n        uint256 assets\\n    ) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-previewMint}. */\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Ceil);\\n    }\\n\\n    /** @dev See {IERC4626-previewWithdraw}. */\\n    function previewWithdraw(\\n        uint256 assets\\n    ) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Ceil);\\n    }\\n\\n    /** @dev See {IERC4626-previewRedeem}. */\\n    function previewRedeem(\\n        uint256 shares\\n    ) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-deposit}. */\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    ) public virtual returns (uint256) {\\n        uint256 maxAssets = maxDeposit(receiver);\\n        if (assets > maxAssets) {\\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\\n        }\\n\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-mint}.\\n     *\\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\\n     * In this case, the shares will be minted without requiring any assets to be deposited.\\n     */\\n    function mint(\\n        uint256 shares,\\n        address receiver\\n    ) public virtual returns (uint256) {\\n        uint256 maxShares = maxMint(receiver);\\n        if (shares > maxShares) {\\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\\n        }\\n\\n        uint256 assets = previewMint(shares);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /** @dev See {IERC4626-withdraw}. */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256) {\\n        uint256 maxAssets = maxWithdraw(owner);\\n        if (assets > maxAssets) {\\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\\n        }\\n\\n        uint256 shares = previewWithdraw(assets);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-redeem}. */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256) {\\n        uint256 maxShares = maxRedeem(owner);\\n        if (shares > maxShares) {\\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\\n        }\\n\\n        uint256 assets = previewRedeem(shares);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     */\\n    function _convertToShares(\\n        uint256 assets,\\n        Math.Rounding rounding\\n    ) internal view virtual returns (uint256) {\\n        return\\n            assets.mulDiv(\\n                totalSupply() + 10 ** _decimalsOffset(),\\n                totalAssets() + 1,\\n                rounding\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(\\n        uint256 shares,\\n        Math.Rounding rounding\\n    ) internal view virtual returns (uint256) {\\n        return\\n            shares.mulDiv(\\n                totalAssets() + 1,\\n                totalSupply() + 10 ** _decimalsOffset(),\\n                rounding\\n            );\\n    }\\n\\n    /**\\n     * @dev Deposit/mint common workflow.\\n     */\\n    function _deposit(\\n        address caller,\\n        address receiver,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        // If _asset is ERC777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transferred and before the shares are minted, which is a valid state.\\n        // slither-disable-next-line reentrancy-no-eth\\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw/redeem common workflow.\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\\n        // shares are burned and after the assets are transferred, which is a valid state.\\n        _burn(owner, shares);\\n        SafeERC20.safeTransfer(_asset, receiver, assets);\\n\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    function _decimalsOffset() internal view virtual returns (uint8) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xd9d8f111f3aa485a3d6ad20046298061cbf83e6191a4a2a0346cf04d2b8904b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0240f7703cff32a61ee3e9fbb339e09a944260432a9ef37debf3692b1a6c8049\",\"license\":\"AGPL-3.0-only\"},\"contracts/curve/CurveHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity 0.8.20;\\n\\nimport {ICurveRouterNgPoolsOnlyV1} from \\\"contracts/curve/interfaces/ICurveRouterNgPoolsOnlyV1.sol\\\";\\nimport {ICurveRouterWrapper} from \\\"contracts/curve/interfaces/ICurveRouterWrapper.sol\\\";\\nimport {Constants} from \\\"contracts/shared/Constants.sol\\\";\\nimport {ERC20} from \\\"@rari-capital/solmate/src/tokens/ERC20.sol\\\";\\n\\nlibrary CurveHelper {\\n    /// @notice Get the last non-zero token in the route\\n    function getLastTokenInRoute(\\n        address[11] memory route\\n    ) public pure returns (address) {\\n        for (uint256 i = route.length - 1; i >= 0; i--) {\\n            if (route[i] != address(0)) {\\n                return route[i];\\n            }\\n        }\\n        revert(\\\"No token in route\\\");\\n    }\\n\\n    struct CurveSwapExtraParams {\\n        address[11] route;\\n        uint256[4][5] swapParams;\\n        uint256 swapSlippageBufferBps;\\n    }\\n\\n    function decodeCurveSwapExtraParams(\\n        bytes memory data\\n    ) public pure returns (CurveSwapExtraParams memory _swapExtraParams) {\\n        (\\n            _swapExtraParams.route,\\n            _swapExtraParams.swapParams,\\n            _swapExtraParams.swapSlippageBufferBps\\n        ) = abi.decode(data, (address[11], uint256[4][5], uint256));\\n    }\\n\\n    function swapExactOutput(\\n        ICurveRouterNgPoolsOnlyV1 _curveRouter,\\n        address[11] memory _route,\\n        uint256[4][5] memory _swapParams,\\n        address[11] memory _reverseRoute,\\n        uint256[4][5] memory _reverseSwapParams,\\n        uint256 swapSlippageBufferBps,\\n        uint256 maxSlippageSurplusSwapBps,\\n        uint256 _amountOutput,\\n        uint256 _maxInputAmount\\n    ) public returns (uint256) {\\n        // As Curve does not support exact output swaps, we need to calculate the required input amount\\n        // and add a buffer to account for potential slippage. Then swapping back the surplus amount\\n\\n        address inputToken = _route[0];\\n\\n        // Calculate the required input amount\\n        uint256 estimatedAmountIn = _curveRouter.get_dx(\\n            _route,\\n            _swapParams,\\n            _amountOutput\\n        );\\n\\n        // Add a buffer to account for potential slippage\\n        uint256 amountIn = (estimatedAmountIn *\\n            (Constants.ONE_HUNDRED_PERCENT_BPS + swapSlippageBufferBps)) /\\n            Constants.ONE_HUNDRED_PERCENT_BPS;\\n\\n        // amountIn cannot exceed current balance of input token\\n        uint256 inputTokenBalance = ERC20(inputToken).balanceOf(address(this));\\n        if (amountIn > inputTokenBalance) {\\n            amountIn = inputTokenBalance;\\n        }\\n\\n        if (amountIn > _maxInputAmount) {\\n            revert ICurveRouterWrapper.InputAmountExceedsMaximum(\\n                amountIn,\\n                _maxInputAmount\\n            );\\n        }\\n\\n        // Input token balance before the swap\\n        uint256 inputTokenBalanceBefore = ERC20(inputToken).balanceOf(\\n            address(this)\\n        );\\n\\n        // Approve the router to spend our tokens\\n        ERC20(inputToken).approve(address(_curveRouter), _maxInputAmount);\\n\\n        // Execute the swap\\n        uint256 actualAmountOut = _curveRouter.exchange(\\n            _route,\\n            _swapParams,\\n            amountIn,\\n            _amountOutput, // This is now our minimum expected output\\n            address(this) // The receiver of the output tokens\\n        );\\n\\n        // Get the difference between the actual and expected output\\n        uint256 redundantAmount = actualAmountOut - _amountOutput;\\n\\n        // Swap the redundant amount back to the input token with the reverse route\\n        if (redundantAmount > 0) {\\n            // Calculate estimated amount out for the swap back\\n            uint256 estimatedSwapBackAmountOut = _curveRouter.get_dy(\\n                _reverseRoute,\\n                _reverseSwapParams,\\n                redundantAmount\\n            );\\n\\n            // Calculate minimum output amount using maxSlippageSurplusSwapBps\\n            uint256 minSwapBackAmountOut = (estimatedSwapBackAmountOut *\\n                (Constants.ONE_HUNDRED_PERCENT_BPS -\\n                    maxSlippageSurplusSwapBps)) /\\n                Constants.ONE_HUNDRED_PERCENT_BPS;\\n\\n            address outputToken = getLastTokenInRoute(_route);\\n\\n            ERC20(outputToken).approve(address(_curveRouter), redundantAmount);\\n            _curveRouter.exchange(\\n                _reverseRoute,\\n                _reverseSwapParams,\\n                redundantAmount,\\n                minSwapBackAmountOut,\\n                address(this)\\n            );\\n        }\\n\\n        // Input token balance after the swap\\n        uint256 inputTokenBalanceAfter = ERC20(inputToken).balanceOf(\\n            address(this)\\n        );\\n\\n        if (inputTokenBalanceAfter < inputTokenBalanceBefore) {\\n            uint256 usedInputAmount = inputTokenBalanceBefore -\\n                inputTokenBalanceAfter;\\n\\n            return usedInputAmount;\\n        } else {\\n            return 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a8aeb8779bc8cbe236d87db1297f270f05de3ada68d71a6b45d92918d8b0b5e\",\"license\":\"GNU AGPLv3\"},\"contracts/curve/interfaces/ICurveRouterNgPoolsOnlyV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface for Curve.Fi RouterNG contract (pools-only version 1).\\n * @dev Generated from original ABI: https://fraxscan.com/address/0x9f2Fa7709B30c75047980a0d70A106728f0Ef2db#code\\n */\\n\\ninterface ICurveRouterNgPoolsOnlyV1 {\\n    event Exchange(\\n        address indexed sender,\\n        address indexed receiver,\\n        address[11] route,\\n        uint256[4][5] swap_params,\\n        uint256 in_amount,\\n        uint256 out_amount\\n    );\\n\\n    function exchange(\\n        address[11] calldata _route,\\n        uint256[4][5] calldata _swap_params,\\n        uint256 _amount,\\n        uint256 _min_dy\\n    ) external payable returns (uint256);\\n\\n    function exchange(\\n        address[11] calldata _route,\\n        uint256[4][5] calldata _swap_params,\\n        uint256 _amount,\\n        uint256 _min_dy,\\n        address _receiver\\n    ) external payable returns (uint256);\\n\\n    function get_dy(\\n        address[11] calldata _route,\\n        uint256[4][5] calldata _swap_params,\\n        uint256 _amount\\n    ) external view returns (uint256);\\n\\n    function get_dx(\\n        address[11] calldata _route,\\n        uint256[4][5] calldata _swap_params,\\n        uint256 _out_amount\\n    ) external view returns (uint256);\\n\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x1856b6ab2e9e5446f4f3052a776625ca39569a9844f4c5936f539dab3036cb1f\",\"license\":\"MIT\"},\"contracts/curve/interfaces/ICurveRouterWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"./IRouterNG.sol\\\";\\n\\ninterface ICurveRouterWrapper {\\n    error InsufficientOutputAmount(uint256 amountOut, uint256 minAmountOut);\\n    error InputAmountExceedsMaximum(uint256 amountIn, uint256 maxAmountIn);\\n    error InvalidRouteLength(address[11] route);\\n    error InvalidInputTokenInRoute(address tokenIn, address[11] route);\\n    error NotFoundKeyForSwapExtraParams(\\n        address inputToken,\\n        address outputToken,\\n        string key\\n    );\\n    error DuplicateKeyForSwapExtraParams(\\n        address inputToken,\\n        address outputToken,\\n        string key\\n    );\\n\\n    function router() external view returns (ICurveRouterNG);\\n\\n    /**\\n     * @dev Executes a token swap on Curve with exact input\\n     * @param route The route of the swap\\n     * @param swapParams The swap parameters\\n     * @param amountIn The exact amount of input tokens\\n     * @param minAmountOut The minimum amount of output tokens to receive\\n     * @param pools The pools to use for the swap\\n     * @param tokenIn The address of the input token\\n     * @return The amount of output tokens received\\n     */\\n    function swapExactIn(\\n        address[11] calldata route,\\n        uint256[5][5] calldata swapParams,\\n        uint256 amountIn,\\n        uint256 minAmountOut,\\n        address[5] calldata pools,\\n        address tokenIn\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Executes a token swap on Curve with exact output\\n     * @param route The route of the swap\\n     * @param swapParams The swap parameters\\n     * @param amountOut The exact amount of output tokens to receive\\n     * @param maxAmountIn The maximum amount of input tokens to spend\\n     * @param pools The pools to use for the swap\\n     * @param tokenIn The address of the input token\\n     * @return The amount of input tokens spent\\n     */\\n    function swapExactOutput(\\n        address[11] calldata route,\\n        uint256[5][5] calldata swapParams,\\n        uint256 amountOut,\\n        uint256 maxAmountIn,\\n        address[5] calldata pools,\\n        address tokenIn\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Gets the expected output amount for a swap\\n     * @param route The route of the swap\\n     * @param swapParams The swap parameters\\n     * @param amountIn The amount of input tokens\\n     * @param pools The pools to use for the swap\\n     * @return The expected amount of output tokens\\n     */\\n    function getExpectedOutput(\\n        address[11] calldata route,\\n        uint256[5][5] calldata swapParams,\\n        uint256 amountIn,\\n        address[5] calldata pools\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Gets the expected input amount for a desired output amount\\n     * @param route The route of the swap\\n     * @param swapParams The swap parameters\\n     * @param amountOut The desired amount of output tokens\\n     * @param pools The pools to use for the swap\\n     * @return The expected amount of input tokens required\\n     */\\n    function getExpectedInput(\\n        address[11] calldata route,\\n        uint256[5][5] calldata swapParams,\\n        uint256 amountOut,\\n        address[5] calldata pools\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaf6a6edbfa6766fc0180120ccf3b8e699afa10f704bcf44bf9fb9a62bf6460c2\",\"license\":\"MIT\"},\"contracts/curve/interfaces/IRouterNG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface for Curve.Fi RouterNG contract.\\n * @dev See original implementation in official repository:\\n * https://github.com/curvefi/curve-router-ng/blob/master/contracts/Router.vy\\n * ABI: https://etherscan.io/address/0x16C6521Dff6baB339122a0FE25a9116693265353#code\\n */\\n\\ninterface ICurveRouterNG {\\n    event Exchange(\\n        address indexed sender,\\n        address indexed receiver,\\n        address[11] route,\\n        uint256[5][5] swap_params,\\n        address[5] pools,\\n        uint256 in_amount,\\n        uint256 out_amount\\n    );\\n\\n    fallback() external payable;\\n\\n    receive() external payable;\\n\\n    function exchange(\\n        address[11] calldata _route,\\n        uint256[5][5] calldata _swap_params,\\n        uint256 _amount,\\n        uint256 _min_dy\\n    ) external payable returns (uint256);\\n\\n    function exchange(\\n        address[11] calldata _route,\\n        uint256[5][5] calldata _swap_params,\\n        uint256 _amount,\\n        uint256 _min_dy,\\n        address[5] calldata _pools\\n    ) external payable returns (uint256);\\n\\n    function exchange(\\n        address[11] calldata _route,\\n        uint256[5][5] calldata _swap_params,\\n        uint256 _amount,\\n        uint256 _min_dy,\\n        address[5] calldata _pools,\\n        address _receiver\\n    ) external payable returns (uint256);\\n\\n    function get_dy(\\n        address[11] calldata _route,\\n        uint256[5][5] calldata _swap_params,\\n        uint256 _amount\\n    ) external view returns (uint256);\\n\\n    function get_dy(\\n        address[11] calldata _route,\\n        uint256[5][5] calldata _swap_params,\\n        uint256 _amount,\\n        address[5] calldata _pools\\n    ) external view returns (uint256);\\n\\n    function get_dx(\\n        address[11] calldata _route,\\n        uint256[5][5] calldata _swap_params,\\n        uint256 _out_amount,\\n        address[5] calldata _pools\\n    ) external view returns (uint256);\\n\\n    function get_dx(\\n        address[11] calldata _route,\\n        uint256[5][5] calldata _swap_params,\\n        uint256 _out_amount,\\n        address[5] calldata _pools,\\n        address[5] calldata _base_pools\\n    ) external view returns (uint256);\\n\\n    function get_dx(\\n        address[11] calldata _route,\\n        uint256[5][5] calldata _swap_params,\\n        uint256 _out_amount,\\n        address[5] calldata _pools,\\n        address[5] calldata _base_pools,\\n        address[5] calldata _base_tokens\\n    ) external view returns (uint256);\\n\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe4f1c83dcb86b1da6558bc1b4f2e87ad9771fcaf5f813a836dfdc36acb89a925\",\"license\":\"MIT\"},\"contracts/shared/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Constants {\\n    // Shared definitions of how we represent percentages and basis points\\n    uint16 public constant ONE_BPS = 100; // 1 basis point with 2 decimals\\n    uint32 public constant ONE_PERCENT_BPS = ONE_BPS * 100;\\n    uint32 public constant ONE_HUNDRED_PERCENT_BPS = ONE_PERCENT_BPS * 100;\\n\\n    uint32 public constant ORACLE_BASE_CURRENCY_UNIT = 1e8;\\n}\\n\",\"keccak256\":\"0xcc25566eb9a2e10e6861ef828987039329e61385929384237cd3cf4429c8d819\",\"license\":\"MIT\"},\"contracts/vault/dLOOP/core/DLoopCoreBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity 0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts-5/access/Ownable.sol\\\";\\nimport {Constants} from \\\"contracts/shared/Constants.sol\\\";\\nimport {ERC4626, ERC20, SafeERC20} from \\\"@openzeppelin/contracts-5/token/ERC20/extensions/ERC4626.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts-5/utils/math/Math.sol\\\";\\n\\n/**\\n * @title DLoopCoreBase\\n * @dev A leveraged vault contract\\n */\\nabstract contract DLoopCoreBase is ERC4626, Ownable {\\n    using Math for uint256;\\n    using SafeERC20 for ERC20;\\n\\n    /* Core state */\\n\\n    uint32 public immutable TARGET_LEVERAGE_BPS; // ie. 30000 = 300% over 100% in basis points, means 3x leverage\\n    uint32 public lowerBoundTargetLeverageBps;\\n    uint32 public upperBoundTargetLeverageBps;\\n\\n    ERC20 public immutable underlyingAsset;\\n    ERC20 public immutable dStable;\\n    uint256 private _defaultMaxSubsidyBps;\\n\\n    /* Errors */\\n\\n    error TooImbalanced(\\n        uint256 currentLeverageBps,\\n        uint256 lowerBoundTargetLeverageBps,\\n        uint256 upperBoundTargetLeverageBps\\n    );\\n    error InvalidTotalSupplyAndAssets(uint256 totalAssets, uint256 totalSupply);\\n    error DepositInsufficientToSupply(\\n        uint256 currentBalance,\\n        uint256 newTotalAssets\\n    );\\n    error UnexpectedLossOfPrincipal(\\n        uint256 principalBefore,\\n        uint256 principalAfter\\n    );\\n    error CollateralLessThanDebt(\\n        uint256 totalCollateralBase,\\n        uint256 totalDebtBase\\n    );\\n    error InsufficientShareBalanceToRedeem(\\n        address owner,\\n        uint256 sharesToRedeem,\\n        uint256 shareBalance\\n    );\\n    error InvalidMaxWithdrawAfterRepay(\\n        address token,\\n        uint256 maxWithdrawUnderlyingBeforeRepay,\\n        uint256 maxWithdrawUnderlyingAfterRepay\\n    );\\n    error WithdrawableIsLessThanRequired(\\n        address token,\\n        uint256 assetToRemoveFromLending,\\n        uint256 withdrawableAmount\\n    );\\n    error ExceedMaxPrice(uint256 assetPrice, uint256 maxPrice);\\n    error BelowMinPrice(uint256 assetPrice, uint256 minPrice);\\n    error DecreaseLeverageOutOfRange(\\n        uint256 newLeverageBps,\\n        uint256 targetLeverageBps, // lower bound\\n        uint256 currentLeverageBps // upper bound\\n    );\\n    error IncreaseLeverageOutOfRange(\\n        uint256 newLeverageBps,\\n        uint256 targetLeverageBps, // upper bound\\n        uint256 currentLeverageBps // lower bound\\n    );\\n    error MaxDStableToBorrowNotIncreasedAfterSupply(\\n        uint256 maxDStableToBorrowBeforeSupply,\\n        uint256 maxDStableToBorrowAfterSupply\\n    );\\n    error UnexpectedLossOfWithdrawableAmount(\\n        uint256 withdrawableAmount,\\n        uint256 receivedAmount\\n    );\\n    error UnexpectedBorrowAmountFromPool(\\n        uint256 borrowedAmountBefore,\\n        uint256 borrowedAmountAfter,\\n        uint256 expectedBorrowedAmount\\n    );\\n    error InvalidLeverageBounds(\\n        uint256 lowerBound,\\n        uint256 targetLeverage,\\n        uint256 upperBound\\n    );\\n\\n    /**\\n     * @dev Constructor for the DLoopCore contract\\n     * @param _name Name of the vault token\\n     * @param _symbol Symbol of the vault token\\n     * @param _underlyingAsset Address of the underlying asset\\n     * @param _dStable Address of the dStable token\\n     * @param _targetLeverageBps Target leverage in basis points\\n     * @param _lowerBoundTargetLeverageBps Lower bound of target leverage in basis points\\n     * @param _upperBoundTargetLeverageBps Upper bound of target leverage in basis points\\n     * @param _maxSubsidyBps Maximum subsidy in basis points\\n     */\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        ERC20 _underlyingAsset,\\n        ERC20 _dStable,\\n        uint32 _targetLeverageBps,\\n        uint32 _lowerBoundTargetLeverageBps,\\n        uint32 _upperBoundTargetLeverageBps,\\n        uint256 _maxSubsidyBps\\n    ) ERC20(_name, _symbol) ERC4626(_underlyingAsset) Ownable(msg.sender) {\\n        dStable = _dStable;\\n        underlyingAsset = _underlyingAsset;\\n\\n        if (_targetLeverageBps < Constants.ONE_HUNDRED_PERCENT_BPS) {\\n            revert(\\\"Target leverage must be at least 100% in basis points\\\");\\n        }\\n\\n        if (\\n            _lowerBoundTargetLeverageBps >= _targetLeverageBps ||\\n            _targetLeverageBps >= _upperBoundTargetLeverageBps\\n        ) {\\n            revert InvalidLeverageBounds(\\n                _lowerBoundTargetLeverageBps,\\n                _targetLeverageBps,\\n                _upperBoundTargetLeverageBps\\n            );\\n        }\\n\\n        TARGET_LEVERAGE_BPS = _targetLeverageBps;\\n        lowerBoundTargetLeverageBps = _lowerBoundTargetLeverageBps;\\n        upperBoundTargetLeverageBps = _upperBoundTargetLeverageBps;\\n        _defaultMaxSubsidyBps = _maxSubsidyBps;\\n    }\\n\\n    /* Virtual Methods - Required to be implemented by derived contracts */\\n\\n    /**\\n     * @dev Gets the asset price from the oracle\\n     * @param asset Address of the asset\\n     * @return uint256 Price of the asset\\n     */\\n    function getAssetPriceFromOracle(\\n        address asset\\n    ) public view virtual returns (uint256);\\n\\n    /**\\n     * @dev Supply tokens to the lending pool\\n     * @param token Address of the token\\n     * @param amount Amount of tokens to supply\\n     * @param onBehalfOf Address to supply on behalf of\\n     */\\n    function _supplyToPool(\\n        address token,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) internal virtual;\\n\\n    /**\\n     * @dev Borrow tokens from the lending pool\\n     * @param token Address of the token\\n     * @param amount Amount of tokens to borrow\\n     * @param onBehalfOf Address to borrow on behalf of\\n     */\\n    function _borrowFromPool(\\n        address token,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) internal virtual;\\n\\n    /**\\n     * @dev Repay debt to the lending pool\\n     * @param token Address of the token\\n     * @param amount Amount of tokens to repay\\n     * @param onBehalfOf Address to repay on behalf of\\n     */\\n    function _repayDebt(\\n        address token,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) internal virtual;\\n\\n    /**\\n     * @dev Withdraw tokens from the lending pool\\n     * @param token Address of the token\\n     * @param amount Amount of tokens to withdraw\\n     * @param onBehalfOf Address to withdraw on behalf of\\n     */\\n    function _withdrawFromPool(\\n        address token,\\n        uint256 amount,\\n        address onBehalfOf\\n    ) internal virtual;\\n\\n    /**\\n     * @dev Gets the base asset address and symbol\\n     * @return address Base asset address\\n     * @return string Base asset symbol\\n     */\\n    function _getBaseAssetAddressAndSymbol()\\n        internal\\n        view\\n        virtual\\n        returns (address, string memory);\\n\\n    /**\\n     * @dev Gets the total collateral and debt of a user in base currency\\n     * @param user Address of the user\\n     * @return totalCollateralBase Total collateral in base currency\\n     * @return totalDebtBase Total debt in base currency\\n     */\\n    function _getTotalCollateralAndDebtOfUserInBase(\\n        address user\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (uint256 totalCollateralBase, uint256 totalDebtBase);\\n\\n    /* Helper Functions */\\n\\n    /**\\n     * @dev Gets the maximum withdrawable amount of an asset\\n     * @param user Address of the user\\n     * @param asset Address of the asset\\n     * @return uint256 Maximum withdrawable amount of the asset\\n     */\\n    function _getMaxWithdrawAmount(\\n        address user,\\n        address asset\\n    ) internal view returns (uint256) {\\n        (\\n            uint256 totalCollateralBase,\\n            uint256 totalDebtBase\\n        ) = _getTotalCollateralAndDebtOfUserInBase(user);\\n\\n        uint256 assetPriceInBase = getAssetPriceFromOracle(asset);\\n        uint256 maxWithdrawInBase = totalCollateralBase - totalDebtBase;\\n\\n        uint256 assetTokenUnit = 10 ** ERC20(asset).decimals();\\n        return (maxWithdrawInBase * assetTokenUnit) / assetPriceInBase;\\n    }\\n\\n    /**\\n     * @dev Override of totalAssets from ERC4626\\n     * @return uint256 Total assets in the vault\\n     */\\n    function totalAssets() public view virtual override returns (uint256) {\\n        // We override this function to return the total assets in the vault\\n        // with respect to the position in the lending pool\\n        // The dLend interest will be distributed to the dToken\\n        return _getMaxWithdrawAmount(address(this), address(underlyingAsset));\\n    }\\n\\n    /* Safety */\\n\\n    /**\\n     * @dev Returns whether the current leverage is too imbalanced\\n     * @return bool True if leverage is too imbalanced, false otherwise\\n     */\\n    function isTooImbalanced() public view returns (bool) {\\n        uint256 currentLeverageBps = getCurrentLeverageBps();\\n        // If there is no deposit yet, we don't need to rebalance, thus it is not too imbalanced\\n        return\\n            currentLeverageBps != 0 &&\\n            (currentLeverageBps < lowerBoundTargetLeverageBps ||\\n                currentLeverageBps > upperBoundTargetLeverageBps);\\n    }\\n\\n    /**\\n     * @dev Rescues tokens accidentally sent to the contract\\n     * @param token Address of the token to rescue\\n     * @param receiver Address to receive the rescued tokens\\n     */\\n    function rescueToken(address token, address receiver) public onlyOwner {\\n        ERC20(token).safeTransfer(\\n            receiver,\\n            ERC20(token).balanceOf(address(this))\\n        );\\n    }\\n\\n    /**\\n     * @dev Calculates the leveraged amount of the assets\\n     * @param assets Amount of assets\\n     * @return leveragedAssets Amount of leveraged assets\\n     */\\n    function getLeveragedAssets(uint256 assets) public view returns (uint256) {\\n        return\\n            (assets * TARGET_LEVERAGE_BPS) / Constants.ONE_HUNDRED_PERCENT_BPS;\\n    }\\n\\n    /* Deposit and Mint */\\n\\n    /**\\n     * @dev Deposits assets into the vault (it actually requires to spent the leveraged amount of the assets, ie. if assets=1, and leverage=2, it means 2 assets are required to be spent)\\n     * @param caller Address of the caller\\n     * @param receiver Address to receive the minted shares\\n     * @param assets Amount of assets to deposit\\n     * @param shares Amount of shares to mint\\n     */\\n    function _deposit(\\n        address caller,\\n        address receiver,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal override {\\n        // Make sure the current leverage is within the target range\\n        if (isTooImbalanced()) {\\n            revert TooImbalanced(\\n                getCurrentLeverageBps(),\\n                lowerBoundTargetLeverageBps,\\n                upperBoundTargetLeverageBps\\n            );\\n        }\\n\\n        // Calculate the leveraged amount of the assets to be deposited to the pool\\n        uint256 leveragedAssets = getLeveragedAssets(assets);\\n\\n        // Transfer the assets to the vault (need the allowance before calling this function)\\n        underlyingAsset.safeTransferFrom(\\n            caller,\\n            address(this),\\n            leveragedAssets\\n        );\\n\\n        _depositToPoolImplementation(leveragedAssets, receiver);\\n\\n        // Mint the vault's shares to the depositor\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    function _depositToPoolImplementation(\\n        uint256 newTotalAssets, // deposit amount\\n        address receiver\\n    ) private {\\n        // At this step, we assume that the funds from the depositor are already in the vault\\n\\n        // Make sure we have enough balance to supply before supplying\\n        uint256 currentUnderlyingAssetBalance = underlyingAsset.balanceOf(\\n            address(this)\\n        );\\n        if (currentUnderlyingAssetBalance < newTotalAssets) {\\n            revert DepositInsufficientToSupply(\\n                currentUnderlyingAssetBalance,\\n                newTotalAssets\\n            );\\n        }\\n\\n        uint256 maxDStableToBorrowBeforeSupply = _getMaxWithdrawAmount(\\n            address(this),\\n            address(dStable)\\n        );\\n\\n        // Supply the underlying asset to the lending pool\\n        _supplyToPool(address(underlyingAsset), newTotalAssets, address(this));\\n\\n        uint256 maxDStableToBorrowAfterSupply = _getMaxWithdrawAmount(\\n            address(this),\\n            address(dStable)\\n        );\\n\\n        if (maxDStableToBorrowAfterSupply <= maxDStableToBorrowBeforeSupply) {\\n            revert MaxDStableToBorrowNotIncreasedAfterSupply(\\n                maxDStableToBorrowBeforeSupply,\\n                maxDStableToBorrowAfterSupply\\n            );\\n        }\\n\\n        // Now, this value > 0\\n        uint256 maxDStableToBorrow = maxDStableToBorrowAfterSupply -\\n            maxDStableToBorrowBeforeSupply;\\n\\n        uint256 dStableBalanceBeforeBorrow = dStable.balanceOf(address(this));\\n\\n        // Borrow the max amount of dStable\\n        _borrowFromPool(address(dStable), maxDStableToBorrow, address(this));\\n\\n        uint256 dStableBalanceAfterBorrow = dStable.balanceOf(address(this));\\n\\n        if (\\n            dStableBalanceAfterBorrow - dStableBalanceBeforeBorrow <\\n            maxDStableToBorrow\\n        ) {\\n            revert UnexpectedBorrowAmountFromPool(\\n                dStableBalanceBeforeBorrow,\\n                dStableBalanceAfterBorrow,\\n                maxDStableToBorrow\\n            );\\n        }\\n\\n        // Transfer the dStable to the receiver\\n        dStable.safeTransfer(receiver, maxDStableToBorrow);\\n    }\\n\\n    /* Withdraw and Redeem */\\n\\n    /**\\n     * @dev Withdraws assets from the vault (it actually requires to spent the leveraged amount of the assets, ie. if assets=1, and leverage=2, it means 2 assets are required to be spent)\\n     * @param caller Address of the caller\\n     * @param receiver Address to receive the withdrawn assets\\n     * @param owner Address of the owner\\n     * @param principalAssetsToRemove Amount of assets to remove from the lending pool\\n     * @param shares Amount of shares to burn\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 principalAssetsToRemove,\\n        uint256 shares\\n    ) internal override {\\n        // Note that we need the allowance before calling this function\\n        // - Allowance for the message sender to spend the shares on behalf of the owner\\n        // - Allowance for the vault to burn the shares\\n\\n        // If the owner is not the caller, then we need to spend the allowance\\n        // so that the caller can spend the shares on behalf of the owner\\n        if (owner != caller) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // Check user's balance before burning shares\\n        uint256 userShares = balanceOf(owner);\\n        if (userShares < shares) {\\n            revert InsufficientShareBalanceToRedeem(owner, shares, userShares);\\n        }\\n\\n        // Burn the shares\\n        _burn(owner, shares);\\n\\n        // Make sure the current leverage is within the target range\\n        if (isTooImbalanced()) {\\n            revert TooImbalanced(\\n                getCurrentLeverageBps(),\\n                lowerBoundTargetLeverageBps,\\n                upperBoundTargetLeverageBps\\n            );\\n        }\\n\\n        // Calculate the leveraged amount of the assets to be removed from the lending pool\\n        uint256 assetsToRemoveFromLending = (principalAssetsToRemove *\\n            TARGET_LEVERAGE_BPS) / Constants.ONE_HUNDRED_PERCENT_BPS;\\n\\n        uint256 underlyingAssetBalanceBefore = underlyingAsset.balanceOf(\\n            address(this)\\n        );\\n\\n        // The remaining logic will be in the _onFlashLoanRedeem() function\\n        uint256 maxWithdrawUnderlyingBeforeRepay = _getMaxWithdrawAmount(\\n            address(this),\\n            address(underlyingAsset)\\n        );\\n\\n        // The repay amount with repay slippage tolerance (overhead in the repay amount to make sure\\n        // we can withdraw the exact amount of collateral)\\n        uint256 dStableToRepay = ((assetsToRemoveFromLending *\\n            (getAssetPriceFromOracle(address(underlyingAsset)) *\\n                10 ** dStable.decimals())) /\\n            (getAssetPriceFromOracle(address(dStable)) *\\n                10 ** underlyingAsset.decimals()));\\n\\n        uint256 currentLeverageBps = getCurrentLeverageBps();\\n\\n        // Repay the debt to withdraw the collateral\\n        // The repaidDStableAmount can be less than dStableToRepay in case the\\n        // actual debt is less than the repay amount\\n        _repayDebt(address(dStable), dStableToRepay, address(this));\\n\\n        uint256 maxWithdrawUnderlyingAfterRepay = _getMaxWithdrawAmount(\\n            address(this),\\n            address(underlyingAsset)\\n        );\\n\\n        // Make sure the max withdraw amount of underlying asset is not decreased after repaying the debt\\n        if (\\n            maxWithdrawUnderlyingAfterRepay < maxWithdrawUnderlyingBeforeRepay\\n        ) {\\n            revert InvalidMaxWithdrawAfterRepay(\\n                address(underlyingAsset),\\n                maxWithdrawUnderlyingBeforeRepay,\\n                maxWithdrawUnderlyingAfterRepay\\n            );\\n        }\\n\\n        // The difference between the max withdraw amount before and after repaying the debt is the withdrawable amount without considering\\n        // any pre-existing amount\\n        uint256 withdrawableUnderlyingAmount = _getWithdrawAmountThatKeepCurrentLeverage(\\n                maxWithdrawUnderlyingBeforeRepay,\\n                maxWithdrawUnderlyingAfterRepay,\\n                currentLeverageBps\\n            );\\n\\n        // The assertion to make sure the withdrawable amount is not less than the required amount\\n        if (withdrawableUnderlyingAmount < assetsToRemoveFromLending) {\\n            revert WithdrawableIsLessThanRequired(\\n                address(underlyingAsset),\\n                assetsToRemoveFromLending,\\n                withdrawableUnderlyingAmount\\n            );\\n        }\\n\\n        // Withdraw the collateral\\n        // The actual withdrawn amount can be less than withdrawableUnderlyingAmount in case the\\n        // actual collateral is less than the withdraw amount\\n        _withdrawFromPool(\\n            address(underlyingAsset),\\n            withdrawableUnderlyingAmount,\\n            address(this)\\n        );\\n\\n        uint256 underlyingAssetBalanceAfter = underlyingAsset.balanceOf(\\n            address(this)\\n        );\\n\\n        // It is to make sure we did receive the collateral\\n        if (underlyingAssetBalanceAfter < underlyingAssetBalanceBefore) {\\n            revert UnexpectedLossOfPrincipal(\\n                underlyingAssetBalanceBefore,\\n                underlyingAssetBalanceAfter\\n            );\\n        }\\n\\n        uint256 receivedUnderlyingAmount = underlyingAssetBalanceAfter -\\n            underlyingAssetBalanceBefore;\\n\\n        // It is to make sure we did receive the collateral\\n        // It is to avoid the case when the lending pool has some issues\\n        // and send less collateral than expected\\n        if (receivedUnderlyingAmount < withdrawableUnderlyingAmount) {\\n            revert UnexpectedLossOfWithdrawableAmount(\\n                withdrawableUnderlyingAmount,\\n                receivedUnderlyingAmount\\n            );\\n        }\\n\\n        // Transfer the remaining assets to the receiver\\n        underlyingAsset.safeTransfer(receiver, receivedUnderlyingAmount);\\n\\n        emit Withdraw(\\n            caller,\\n            receiver,\\n            owner,\\n            receivedUnderlyingAmount,\\n            shares\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets the withdrawable amount that keeps the current leverage\\n     * @param maxWithdrawAmountBeforeRepay Maximum withdrawable amount before repaying\\n     * @param maxWithdrawAmountAfterRepay Maximum withdrawable amount after repaying\\n     * @param currentLeverageBps Current leverage in basis points\\n     * @return uint256 Withdrawable amount that keeps the current leverage\\n     */\\n    function _getWithdrawAmountThatKeepCurrentLeverage(\\n        uint256 maxWithdrawAmountBeforeRepay,\\n        uint256 maxWithdrawAmountAfterRepay,\\n        uint256 currentLeverageBps\\n    ) internal pure returns (uint256) {\\n        // Assume the maxWithdrawAmountBeforeRepay and maxWithdrawAmountAfterRepay are in the same unit\\n        //\\n        // Formula definition:\\n        // - C1: totalCollateralBase before repay\\n        // - D1: totalDebtBase before repay\\n        // - C2: totalCollateralBase after repay\\n        // - D2: totalDebtBase after repay\\n        // - T: target leverage\\n        // - x: withdraw amount\\n        // - y: repay amount\\n        //\\n        // We have:\\n        //        C1 / (C1-D1) = C2 / (C2-D2)\\n        //        C2 = C1-x\\n        //        D2 = D1-y\\n        //        C1 / (C1-D1) = T <=> C1 = (C1-D1) * T <=> C1 = C1*T - D1*T <=> C1*T - C1 = D1*T <=> C1 = D1*T/(T-1)\\n        //\\n        // Formula expression:\\n        //        C1 / (C1-D1) = (C1-x) / (C1-x-D1+y)\\n        //    <=> C1 * (C1-x-D1+y) = (C1-x) * (C1-D1)\\n        //    <=> C1^2 - C1*x - C1*D1 + C1*y = C1^2 - C1*D1 - C1*x + D1*x\\n        //    <=> C1^2 - C1*x - C1*D1 + C1*y = C1^2 - C1*x - C1*D1 + D1*x\\n        //    <=> C1*y = x*D1\\n        //    <=> y = x*D1 / C1\\n        //    <=> y = x*D1 / [D1*T / (T-1)]\\n        //    <=> y = x * (T-1)/T\\n        //    <=> x = y * T/(T-1)\\n        //\\n        uint256 difference = maxWithdrawAmountAfterRepay -\\n            maxWithdrawAmountBeforeRepay;\\n\\n        // Instead of using TARGET_LEVERAGE_BPS, we use the current leverage to calculate the withdrawable amount to avoid\\n        // unexpectedly changing the current leverage (which may cause loss to the user)\\n        if (currentLeverageBps <= Constants.ONE_HUNDRED_PERCENT_BPS) {\\n            // If there is no more debt, withdraw as much as possible\\n            return type(uint256).max;\\n        }\\n\\n        return\\n            (difference * currentLeverageBps) /\\n            (currentLeverageBps - Constants.ONE_HUNDRED_PERCENT_BPS);\\n    }\\n\\n    /* Rebalance */\\n\\n    function increaseLeverage(\\n        uint256 assetAmount,\\n        uint256 minPriceInBase\\n    ) public {\\n        uint256 assetPriceInBase = getAssetPriceFromOracle(\\n            address(underlyingAsset)\\n        );\\n        if (assetPriceInBase < minPriceInBase) {\\n            revert BelowMinPrice(assetPriceInBase, minPriceInBase);\\n        }\\n\\n        uint256 assetAmountInBase = (assetAmount * assetPriceInBase) /\\n            (10 ** underlyingAsset.decimals());\\n\\n        (\\n            uint256 totalCollateralBase,\\n            uint256 totalDebtBase\\n        ) = _getTotalCollateralAndDebtOfUserInBase(address(this));\\n\\n        uint256 currentSubsidyBps = _getCurrentSubsidyBps();\\n\\n        uint256 dStablePriceInBase = getAssetPriceFromOracle(address(dStable));\\n        uint256 borrowedDStableInBase = (assetAmountInBase *\\n            (Constants.ONE_HUNDRED_PERCENT_BPS + currentSubsidyBps)) /\\n            Constants.ONE_HUNDRED_PERCENT_BPS;\\n\\n        uint256 newLeverageBps = ((totalCollateralBase + assetAmountInBase) *\\n            Constants.ONE_HUNDRED_PERCENT_BPS) /\\n            (totalCollateralBase +\\n                assetAmountInBase -\\n                totalDebtBase -\\n                borrowedDStableInBase);\\n\\n        uint256 currentLeverageBps = getCurrentLeverageBps();\\n\\n        if (\\n            newLeverageBps > TARGET_LEVERAGE_BPS ||\\n            newLeverageBps <= currentLeverageBps\\n        ) {\\n            revert IncreaseLeverageOutOfRange(\\n                newLeverageBps,\\n                TARGET_LEVERAGE_BPS,\\n                currentLeverageBps\\n            );\\n        }\\n\\n        // Transfer the asset to the vault to supply\\n        underlyingAsset.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            assetAmount\\n        );\\n\\n        // Supply the asset to the lending pool\\n        _supplyToPool(address(underlyingAsset), assetAmount, address(this));\\n\\n        // Borrow more dStable\\n        uint256 borrowedDStable = (borrowedDStableInBase *\\n            (10 ** dStable.decimals())) / dStablePriceInBase;\\n        _borrowFromPool(address(dStable), borrowedDStable, address(this));\\n\\n        // Transfer the dStable to the user\\n        dStable.safeTransfer(msg.sender, borrowedDStable);\\n    }\\n\\n    function decreaseLeverage(\\n        uint256 dStableAmount,\\n        uint256 maxPriceInBase\\n    ) public {\\n        uint256 assetPriceInBase = getAssetPriceFromOracle(\\n            address(underlyingAsset)\\n        );\\n        if (assetPriceInBase > maxPriceInBase) {\\n            revert ExceedMaxPrice(assetPriceInBase, maxPriceInBase);\\n        }\\n\\n        uint256 dStableAmountInBase = (dStableAmount *\\n            getAssetPriceFromOracle(address(dStable))) /\\n            (10 ** dStable.decimals());\\n\\n        (\\n            uint256 totalCollateralBase,\\n            uint256 totalDebtBase\\n        ) = _getTotalCollateralAndDebtOfUserInBase(address(this));\\n\\n        uint256 currentSubsidyBps = _getCurrentSubsidyBps();\\n        uint256 withdrawnAssetsBase = (dStableAmountInBase *\\n            (Constants.ONE_HUNDRED_PERCENT_BPS + currentSubsidyBps)) /\\n            Constants.ONE_HUNDRED_PERCENT_BPS;\\n\\n        uint256 newLeverageBps = ((totalCollateralBase - withdrawnAssetsBase) *\\n            Constants.ONE_HUNDRED_PERCENT_BPS) /\\n            (totalCollateralBase -\\n                withdrawnAssetsBase -\\n                totalDebtBase +\\n                dStableAmountInBase);\\n\\n        uint256 currentLeverageBps = getCurrentLeverageBps();\\n        if (\\n            newLeverageBps < TARGET_LEVERAGE_BPS ||\\n            newLeverageBps >= currentLeverageBps\\n        ) {\\n            revert DecreaseLeverageOutOfRange(\\n                newLeverageBps,\\n                TARGET_LEVERAGE_BPS,\\n                currentLeverageBps\\n            );\\n        }\\n\\n        // Transfer the dStable to the vault to repay the debt\\n        dStable.safeTransferFrom(msg.sender, address(this), dStableAmount);\\n\\n        _repayDebt(address(dStable), dStableAmount, address(this));\\n\\n        // Withdraw collateral\\n        uint256 withdrawnAssets = (withdrawnAssetsBase *\\n            (10 ** underlyingAsset.decimals())) / assetPriceInBase;\\n\\n        uint256 underlyingAssetBalanceBefore = underlyingAsset.balanceOf(\\n            address(this)\\n        );\\n\\n        _withdrawFromPool(\\n            address(underlyingAsset),\\n            withdrawnAssets,\\n            address(this)\\n        );\\n\\n        uint256 underlyingAssetBalanceAfter = underlyingAsset.balanceOf(\\n            address(this)\\n        );\\n\\n        if (underlyingAssetBalanceAfter < underlyingAssetBalanceBefore) {\\n            revert UnexpectedLossOfPrincipal(\\n                underlyingAssetBalanceBefore,\\n                underlyingAssetBalanceAfter\\n            );\\n        }\\n\\n        uint256 receivedUnderlyingAmount = underlyingAssetBalanceAfter -\\n            underlyingAssetBalanceBefore;\\n\\n        if (receivedUnderlyingAmount < withdrawnAssets) {\\n            revert UnexpectedLossOfWithdrawableAmount(\\n                withdrawnAssets,\\n                receivedUnderlyingAmount\\n            );\\n        }\\n\\n        // Transfer the withdrawn assets to the user\\n        underlyingAsset.safeTransfer(msg.sender, withdrawnAssets);\\n    }\\n\\n    function _getCurrentSubsidyBps() internal view returns (uint256) {\\n        uint256 currentLeverageBps = getCurrentLeverageBps();\\n\\n        uint256 subsidyBps;\\n        if (currentLeverageBps > TARGET_LEVERAGE_BPS) {\\n            subsidyBps =\\n                ((currentLeverageBps - TARGET_LEVERAGE_BPS) *\\n                    Constants.ONE_HUNDRED_PERCENT_BPS) /\\n                TARGET_LEVERAGE_BPS;\\n        } else {\\n            subsidyBps =\\n                ((TARGET_LEVERAGE_BPS - currentLeverageBps) *\\n                    Constants.ONE_HUNDRED_PERCENT_BPS) /\\n                TARGET_LEVERAGE_BPS;\\n        }\\n        if (subsidyBps > _defaultMaxSubsidyBps) {\\n            return _defaultMaxSubsidyBps;\\n        }\\n        return subsidyBps;\\n    }\\n\\n    /* Informational */\\n\\n    /**\\n     * @dev Gets the current leverage in basis points\\n     * @return uint256 The current leverage in basis points\\n     */\\n    function getCurrentLeverageBps() public view returns (uint256) {\\n        (\\n            uint256 totalCollateralBase,\\n            uint256 totalDebtBase\\n        ) = _getTotalCollateralAndDebtOfUserInBase(address(this));\\n\\n        if (totalCollateralBase < totalDebtBase) {\\n            revert CollateralLessThanDebt(totalCollateralBase, totalDebtBase);\\n        }\\n        if (totalCollateralBase == 0) {\\n            return 0;\\n        }\\n        if (totalCollateralBase == totalDebtBase) {\\n            return type(uint256).max; // infinite leverage\\n        }\\n        // The leverage will be 1 if totalDebtBase is 0 (no more debt)\\n        return ((totalCollateralBase * Constants.ONE_HUNDRED_PERCENT_BPS) /\\n            (totalCollateralBase - totalDebtBase));\\n    }\\n\\n    function getUnderlyingAssetAddress() public view returns (address) {\\n        return this.asset();\\n    }\\n\\n    function getDStableAddress() public view returns (address) {\\n        return address(dStable);\\n    }\\n\\n    function getDefaultMaxSubsidyBps() public view returns (uint256) {\\n        return _defaultMaxSubsidyBps;\\n    }\\n\\n    /* Admin */\\n\\n    /**\\n     * @dev Sets the maximum subsidy in basis points\\n     * @param _maxSubsidyBps New maximum subsidy in basis points\\n     */\\n    function setMaxSubsidyBps(uint256 _maxSubsidyBps) public onlyOwner {\\n        _defaultMaxSubsidyBps = _maxSubsidyBps;\\n    }\\n\\n    /**\\n     * @dev Sets the lower and upper bounds of target leverage\\n     * @param _lowerBoundTargetLeverageBps New lower bound of target leverage in basis points\\n     * @param _upperBoundTargetLeverageBps New upper bound of target leverage in basis points\\n     */\\n    function setLeverageBounds(\\n        uint32 _lowerBoundTargetLeverageBps,\\n        uint32 _upperBoundTargetLeverageBps\\n    ) public onlyOwner {\\n        if (\\n            _lowerBoundTargetLeverageBps >= TARGET_LEVERAGE_BPS ||\\n            TARGET_LEVERAGE_BPS >= _upperBoundTargetLeverageBps\\n        ) {\\n            revert InvalidLeverageBounds(\\n                _lowerBoundTargetLeverageBps,\\n                TARGET_LEVERAGE_BPS,\\n                _upperBoundTargetLeverageBps\\n            );\\n        }\\n\\n        lowerBoundTargetLeverageBps = _lowerBoundTargetLeverageBps;\\n        upperBoundTargetLeverageBps = _upperBoundTargetLeverageBps;\\n    }\\n\\n    function maxDeposit(address _user) public view override returns (uint256) {\\n        // Don't allow deposit if the leverage is too imbalanced\\n        if (isTooImbalanced()) {\\n            return 0;\\n        }\\n        return super.maxDeposit(_user);\\n    }\\n\\n    function maxMint(address _user) public view override returns (uint256) {\\n        // Don't allow mint if the leverage is too imbalanced\\n        if (isTooImbalanced()) {\\n            return 0;\\n        }\\n        return super.maxMint(_user);\\n    }\\n\\n    function maxWithdraw(address _user) public view override returns (uint256) {\\n        // Don't allow withdraw if the leverage is too imbalanced\\n        if (isTooImbalanced()) {\\n            return 0;\\n        }\\n        return super.maxWithdraw(_user);\\n    }\\n\\n    function maxRedeem(address _user) public view override returns (uint256) {\\n        // Don't allow redeem if the leverage is too imbalanced\\n        if (isTooImbalanced()) {\\n            return 0;\\n        }\\n        return super.maxRedeem(_user);\\n    }\\n}\\n\",\"keccak256\":\"0xb3149d6513ffb6f07249d16d8582d1c65566599442056453221489cc8a9c279d\",\"license\":\"MIT\"},\"contracts/vault/dLOOP/periphery/DLoopDepositorBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity 0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts-5/access/Ownable.sol\\\";\\nimport {ERC20, SafeERC20} from \\\"@openzeppelin/contracts-5/token/ERC20/extensions/ERC4626.sol\\\";\\nimport {Constants} from \\\"contracts/shared/Constants.sol\\\";\\n\\nimport {IERC3156FlashBorrower} from \\\"./interface/flashloan/IERC3156FlashBorrower.sol\\\";\\nimport {IERC3156FlashLender} from \\\"./interface/flashloan/IERC3156FlashLender.sol\\\";\\nimport {DLoopCoreBase} from \\\"../core/DLoopCoreBase.sol\\\";\\n\\n/**\\n * @title DLoopDepositorBase\\n * @dev A helper contract for depositing leveraged assets into the core vault with flash loans\\n */\\nabstract contract DLoopDepositorBase is IERC3156FlashBorrower, Ownable {\\n    using SafeERC20 for ERC20;\\n\\n    /* Constants */\\n\\n    bytes32 public constant FLASHLOAN_CALLBACK =\\n        keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n\\n    /* Core state */\\n\\n    uint256 private _defaultSwapSlippageTolerance; // ie. 1000 = 10%\\n\\n    IERC3156FlashLender public immutable flashLender;\\n    ERC20 public immutable underlyingAsset;\\n    ERC20 public immutable dStable;\\n    DLoopCoreBase public immutable dLoopCore;\\n\\n    /* Errors */\\n\\n    error UnknownLender();\\n    error UnknownInitiator();\\n    error UnknownToken();\\n    error SharesNotIncreasedAfterFlashLoan(\\n        uint256 sharesBeforeDeposit,\\n        uint256 sharesAfterDeposit\\n    );\\n\\n    /* Structs */\\n\\n    struct FlashLoanParams {\\n        address receiver;\\n        uint256 depositAssetAmount;\\n        uint256 newTotalAssets;\\n        uint256 slippageTolerance; // ie. 1000 = 10%\\n        bytes dStableToUnderlyingSwapData;\\n    }\\n\\n    /**\\n     * @dev Constructor for the DLoopDepositorBase contract\\n     * @param _underlyingAsset Address of the underlying asset\\n     * @param _dStable Address of the dStable token\\n     * @param _flashLender Address of the flash loan provider\\n     * @param _swapSlippageTolerance Swap slippage tolerance in basis points\\n     */\\n    constructor(\\n        ERC20 _underlyingAsset,\\n        ERC20 _dStable,\\n        IERC3156FlashLender _flashLender,\\n        DLoopCoreBase _dLoopCore,\\n        uint256 _swapSlippageTolerance\\n    ) Ownable(msg.sender) {\\n        dStable = _dStable;\\n        flashLender = _flashLender;\\n        underlyingAsset = _underlyingAsset;\\n        dLoopCore = _dLoopCore;\\n        _defaultSwapSlippageTolerance = _swapSlippageTolerance;\\n    }\\n\\n    /* Swap functions - Need to override in the child contract */\\n\\n    /**\\n     * @dev Swaps an exact amount of input assets for as much output assets as possible\\n     * @param inputToken Input asset\\n     * @param outputToken Output asset\\n     * @param amountOut Amount of input assets\\n     * @param amountInMaximum Minimum amount of output assets (slippage protection)\\n     * @param receiver Address to receive the output assets\\n     * @param deadline Deadline for the swap\\n     * @param extraData Additional data for the swap\\n     * @return amountIn Amount of input assets used for the swap\\n     */\\n    function _swapExactOutput(\\n        ERC20 inputToken,\\n        ERC20 outputToken,\\n        uint256 amountOut,\\n        uint256 amountInMaximum,\\n        address receiver,\\n        uint256 deadline,\\n        bytes memory extraData\\n    ) internal virtual returns (uint256);\\n\\n    /**\\n     * @dev Rescues tokens accidentally sent to the contract\\n     * @param token Address of the token to rescue\\n     * @param receiver Address to receive the rescued tokens\\n     */\\n    function rescueToken(address token, address receiver) public onlyOwner {\\n        ERC20(token).safeTransfer(\\n            receiver,\\n            ERC20(token).balanceOf(address(this))\\n        );\\n    }\\n\\n    /* Deposit */\\n\\n    /**\\n     * @dev Deposits assets into the core vault\\n     * @param assets Amount of assets to deposit\\n     * @param receiver Address to receive the minted shares\\n     * @param slippageTolerance Slippage tolerance for the swap\\n     * @param dStableToUnderlyingSwapData Swap data from dStable to underlying asset\\n     * @return shares Amount of shares minted\\n     */\\n    function deposit(\\n        uint256 assets, // deposit amount\\n        address receiver,\\n        uint256 slippageTolerance,\\n        bytes memory dStableToUnderlyingSwapData\\n    ) public returns (uint256 shares) {\\n        // Transfer the assets to the vault (need the allowance before calling this function)\\n        underlyingAsset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        FlashLoanParams memory params = FlashLoanParams(\\n            receiver,\\n            assets,\\n            dLoopCore.getLeveragedAssets(assets),\\n            slippageTolerance,\\n            dStableToUnderlyingSwapData\\n        );\\n        bytes memory data = _encodeParamsToData(params);\\n        uint256 maxFlashLoanAmount = flashLender.maxFlashLoan(address(dStable));\\n\\n        // Shares before deposit\\n        uint256 sharesBeforeDeposit = dLoopCore.balanceOf(receiver);\\n\\n        // The remaining logic will be in the _onFlashLoan() function\\n        flashLender.flashLoan(this, address(dStable), maxFlashLoanAmount, data);\\n\\n        // Shares after deposit\\n        uint256 sharesAfterDeposit = dLoopCore.balanceOf(receiver);\\n\\n        if (sharesAfterDeposit <= sharesBeforeDeposit) {\\n            revert SharesNotIncreasedAfterFlashLoan(\\n                sharesBeforeDeposit,\\n                sharesAfterDeposit\\n            );\\n        }\\n\\n        return sharesAfterDeposit - sharesBeforeDeposit;\\n    }\\n\\n    /**\\n     * @dev Mints shares to the receiver by depositing assets to the core vault\\n     * @param shares Amount of shares to mint\\n     * @param receiver Address to receive the minted shares\\n     * @param slippageTolerance Slippage tolerance for the swap\\n     * @param dStableToUnderlyingSwapData Swap data from dStable to underlying asset\\n     * @return assets Amount of assets deposited\\n     */\\n    function mint(\\n        uint256 shares,\\n        address receiver,\\n        uint256 slippageTolerance,\\n        bytes memory dStableToUnderlyingSwapData\\n    ) public returns (uint256 assets) {\\n        assets = dLoopCore.convertToAssets(shares);\\n        deposit(\\n            assets,\\n            receiver,\\n            slippageTolerance,\\n            dStableToUnderlyingSwapData\\n        );\\n        return assets;\\n    }\\n\\n    /* Flash loan entrypoint */\\n\\n    /**\\n     * @dev Callback function for flash loans\\n     * @param initiator Address that initiated the flash loan\\n     * @param token Address of the flash-borrowed token\\n     * @param data Additional data passed to the flash loan\\n     * @return bytes32 The flash loan callback success bytes\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256, // amount (flash loan amount)\\n        uint256, // fee (flash loan fee)\\n        bytes calldata data\\n    ) public returns (bytes32) {\\n        if (msg.sender != address(flashLender)) revert UnknownLender();\\n        if (initiator != address(this)) revert UnknownInitiator();\\n        if (token != address(dStable)) revert UnknownToken();\\n\\n        FlashLoanParams memory flashLoanParams = _decodeDataToParams(data);\\n\\n        uint256 requiredAdditionalAssets = flashLoanParams.newTotalAssets -\\n            flashLoanParams.depositAssetAmount;\\n\\n        uint256 estimatedInputAmount = (requiredAdditionalAssets *\\n            (\\n                (dLoopCore.getAssetPriceFromOracle(address(underlyingAsset)) *\\n                    (10 ** dStable.decimals()))\\n            )) /\\n            (dLoopCore.getAssetPriceFromOracle(address(dStable)) *\\n                (10 ** underlyingAsset.decimals()));\\n\\n        // Calculate the max input amount with slippage tolerance\\n        uint256 maxIn = (estimatedInputAmount *\\n            (Constants.ONE_HUNDRED_PERCENT_BPS +\\n                flashLoanParams.slippageTolerance)) /\\n            Constants.ONE_HUNDRED_PERCENT_BPS;\\n        require(maxIn > 0, \\\"maxIn is not positive\\\");\\n\\n        // Swap from dStable to the underlying asset\\n        _swapExactOutput(\\n            dStable,\\n            underlyingAsset,\\n            requiredAdditionalAssets,\\n            maxIn,\\n            address(this),\\n            block.timestamp,\\n            flashLoanParams.dStableToUnderlyingSwapData\\n        );\\n\\n        // Approve the dLoopCore to spend leveraged assets\\n        underlyingAsset.approve(\\n            address(dLoopCore),\\n            flashLoanParams.newTotalAssets\\n        );\\n\\n        dLoopCore.deposit(\\n            flashLoanParams.depositAssetAmount,\\n            flashLoanParams.receiver\\n        );\\n\\n        return FLASHLOAN_CALLBACK;\\n    }\\n\\n    /**\\n     * @dev Encodes flash loan parameters to data\\n     * @param _flashLoanParams Flash loan parameters\\n     * @return data Encoded data\\n     */\\n    function _encodeParamsToData(\\n        FlashLoanParams memory _flashLoanParams\\n    ) internal pure returns (bytes memory data) {\\n        data = abi.encode(\\n            _flashLoanParams.receiver,\\n            _flashLoanParams.depositAssetAmount,\\n            _flashLoanParams.newTotalAssets,\\n            _flashLoanParams.slippageTolerance,\\n            _flashLoanParams.dStableToUnderlyingSwapData\\n        );\\n    }\\n\\n    /**\\n     * @dev Decodes data to flash loan deposit parameters\\n     * @param data Encoded data\\n     * @return _flashLoanParams Decoded flash loan parameters\\n     */\\n    function _decodeDataToParams(\\n        bytes memory data\\n    ) internal pure returns (FlashLoanParams memory _flashLoanParams) {\\n        (\\n            _flashLoanParams.receiver,\\n            _flashLoanParams.depositAssetAmount,\\n            _flashLoanParams.newTotalAssets,\\n            _flashLoanParams.slippageTolerance,\\n            _flashLoanParams.dStableToUnderlyingSwapData\\n        ) = abi.decode(data, (address, uint256, uint256, uint256, bytes));\\n    }\\n}\\n\",\"keccak256\":\"0x590a6f548a7c709ff70fe26a17b2058789a63d57389fab7d5c496cb77776ae7d\",\"license\":\"MIT\"},\"contracts/vault/dLOOP/periphery/interface/flashloan/IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity 0.8.20;\\n\\ninterface IERC3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xfd9ef1fa32aeca04e3911d712ba4a4a87d7a1b5a3a216adc857dcc79579b2aa9\",\"license\":\"GNU AGPLv3\"},\"contracts/vault/dLOOP/periphery/interface/flashloan/IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\ninterface IERC3156FlashLender {\\n    /**\\n     * @dev The amount of currency available to be lent.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(\\n        address token,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x01621dcebe463f5e1651009923207cf5ab0bb5e64f2aba227f1b860afe606e7c\",\"license\":\"GNU AGPLv3\"},\"contracts/vault/dLOOP/periphery/venue/curve/CurveSwapLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity 0.8.20;\\n\\nimport {ERC20, SafeERC20} from \\\"@openzeppelin/contracts-5/token/ERC20/extensions/ERC4626.sol\\\";\\nimport {ICurveRouterNgPoolsOnlyV1} from \\\"contracts/curve/interfaces/ICurveRouterNgPoolsOnlyV1.sol\\\";\\nimport {ICurveRouterWrapper} from \\\"contracts/curve/interfaces/ICurveRouterWrapper.sol\\\";\\nimport {CurveHelper} from \\\"contracts/curve/CurveHelper.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts-5/utils/Strings.sol\\\";\\n\\n/**\\n * @title CurveSwapLogic\\n * @dev Library for common Curve-related functions used in dLOOP contracts\\n */\\nlibrary CurveSwapLogic {\\n    using SafeERC20 for ERC20;\\n\\n    /**\\n     * @dev Error thrown when custom swap data is provided but not supported\\n     */\\n    error NotSupportedCustomSwapData(\\n        address _inputToken,\\n        address _outputToken,\\n        bytes _swapData\\n    );\\n\\n    /**\\n     * @dev Configuration structure for Curve swap parameters and their reversals\\n     */\\n    struct CurveSwapExtraParamsDefaultConfig {\\n        address inputToken;\\n        address outputToken;\\n        CurveHelper.CurveSwapExtraParams swapExtraParams;\\n        CurveHelper.CurveSwapExtraParams reverseSwapExtraParams;\\n    }\\n\\n    /**\\n     * @dev Swaps an exact amount of output tokens for input tokens using Curve protocol\\n     * @param inputToken Input token to be swapped\\n     * @param outputToken Output token to receive\\n     * @param amountOut Exact amount of output tokens to receive\\n     * @param amountInMaximum Maximum amount of input tokens to spend\\n     * @param receiver Address to receive the output tokens\\n     * @param extraData Additional data for the swap (not supported)\\n     * @param curveRouter Curve router to use for the swap\\n     * @param defaultSwapParams Mapping of default swap parameters\\n     * @param isSwapParamsSet Mapping indicating if swap parameters are set\\n     * @param maxSlippageSurplusSwapBps Maximum slippage for surplus swap in basis points\\n     * @return uint256 Amount of input tokens used\\n     */\\n    function swapExactOutput(\\n        ERC20 inputToken,\\n        ERC20 outputToken,\\n        uint256 amountOut,\\n        uint256 amountInMaximum,\\n        address receiver,\\n        bytes memory extraData,\\n        ICurveRouterNgPoolsOnlyV1 curveRouter,\\n        mapping(string => CurveHelper.CurveSwapExtraParams)\\n            storage defaultSwapParams,\\n        mapping(string => bool) storage isSwapParamsSet,\\n        uint256 maxSlippageSurplusSwapBps\\n    ) external returns (uint256) {\\n        // If custom swap data is provided, revert as it's not supported\\n        if (extraData.length != 0) {\\n            revert NotSupportedCustomSwapData(\\n                address(inputToken),\\n                address(outputToken),\\n                extraData\\n            );\\n        }\\n\\n        // Get the swap parameters for the given input and output tokens\\n        CurveHelper.CurveSwapExtraParams\\n            memory extraParams = getSwapExtraParams(\\n                address(inputToken),\\n                address(outputToken),\\n                defaultSwapParams,\\n                isSwapParamsSet\\n            );\\n\\n        CurveHelper.CurveSwapExtraParams\\n            memory reverseExtraParams = getSwapExtraParams(\\n                address(outputToken),\\n                address(inputToken),\\n                defaultSwapParams,\\n                isSwapParamsSet\\n            );\\n\\n        // Double check input token is the first token in the route\\n        if (address(inputToken) != extraParams.route[0]) {\\n            revert ICurveRouterWrapper.InvalidInputTokenInRoute(\\n                address(inputToken),\\n                extraParams.route\\n            );\\n        }\\n\\n        // Approve the router to spend our tokens\\n        inputToken.approve(address(curveRouter), amountInMaximum);\\n\\n        // Execute the swap using the CurveHelper library\\n        uint256 amountIn = CurveHelper.swapExactOutput(\\n            curveRouter,\\n            extraParams.route,\\n            extraParams.swapParams,\\n            reverseExtraParams.route,\\n            reverseExtraParams.swapParams,\\n            extraParams.swapSlippageBufferBps,\\n            maxSlippageSurplusSwapBps,\\n            amountOut,\\n            amountInMaximum\\n        );\\n\\n        // If recipient is different from the caller, transfer the output tokens\\n        if (receiver != address(this)) {\\n            address lastToken = CurveHelper.getLastTokenInRoute(\\n                extraParams.route\\n            );\\n            ERC20(lastToken).safeTransfer(receiver, amountOut);\\n        }\\n\\n        return amountIn;\\n    }\\n\\n    /**\\n     * @dev Initialize default swap parameters for a list of token pairs\\n     * @param defaultSwapParamsList List of default swap parameters\\n     * @param defaultSwapParams Mapping to store default swap parameters\\n     * @param isSwapParamsSet Mapping to track which parameters are set\\n     */\\n    function initializeDefaultSwapParams(\\n        CurveSwapExtraParamsDefaultConfig[] memory defaultSwapParamsList,\\n        mapping(string => CurveHelper.CurveSwapExtraParams)\\n            storage defaultSwapParams,\\n        mapping(string => bool) storage isSwapParamsSet\\n    ) external {\\n        for (uint256 i = 0; i < defaultSwapParamsList.length; i++) {\\n            // Set for forward swap\\n            string memory key = getSwapExtraParamsKey(\\n                defaultSwapParamsList[i].inputToken,\\n                defaultSwapParamsList[i].outputToken\\n            );\\n            if (isSwapParamsSet[key]) {\\n                revert ICurveRouterWrapper.DuplicateKeyForSwapExtraParams(\\n                    defaultSwapParamsList[i].inputToken,\\n                    defaultSwapParamsList[i].outputToken,\\n                    key\\n                );\\n            }\\n            isSwapParamsSet[key] = true;\\n            defaultSwapParams[key] = defaultSwapParamsList[i].swapExtraParams;\\n\\n            // Set for reverse swap\\n            string memory reverseKey = getSwapExtraParamsKey(\\n                defaultSwapParamsList[i].outputToken,\\n                defaultSwapParamsList[i].inputToken\\n            );\\n            if (isSwapParamsSet[reverseKey]) {\\n                revert ICurveRouterWrapper.DuplicateKeyForSwapExtraParams(\\n                    defaultSwapParamsList[i].outputToken,\\n                    defaultSwapParamsList[i].inputToken,\\n                    reverseKey\\n                );\\n            }\\n            isSwapParamsSet[reverseKey] = true;\\n            defaultSwapParams[reverseKey] = defaultSwapParamsList[i]\\n                .reverseSwapExtraParams;\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets swap parameters for a token pair\\n     * @param swapExtraParamsConfig Configuration for the swap parameters\\n     * @param defaultSwapParams Mapping to store swap parameters\\n     * @param isSwapParamsSet Mapping to track which parameters are set\\n     */\\n    function setSwapExtraParams(\\n        CurveSwapExtraParamsDefaultConfig memory swapExtraParamsConfig,\\n        mapping(string => CurveHelper.CurveSwapExtraParams)\\n            storage defaultSwapParams,\\n        mapping(string => bool) storage isSwapParamsSet\\n    ) external {\\n        string memory key = getSwapExtraParamsKey(\\n            swapExtraParamsConfig.inputToken,\\n            swapExtraParamsConfig.outputToken\\n        );\\n        isSwapParamsSet[key] = true;\\n        defaultSwapParams[key] = swapExtraParamsConfig.swapExtraParams;\\n\\n        string memory reverseKey = getSwapExtraParamsKey(\\n            swapExtraParamsConfig.outputToken,\\n            swapExtraParamsConfig.inputToken\\n        );\\n        isSwapParamsSet[reverseKey] = true;\\n        defaultSwapParams[reverseKey] = swapExtraParamsConfig\\n            .reverseSwapExtraParams;\\n    }\\n\\n    /**\\n     * @dev Gets the key for swap parameters based on input and output tokens\\n     * @param inputToken Address of the input token\\n     * @param outputToken Address of the output token\\n     * @return string The key for the swap parameters\\n     */\\n    function getSwapExtraParamsKey(\\n        address inputToken,\\n        address outputToken\\n    ) public pure returns (string memory) {\\n        string memory key = string.concat(\\n            Strings.toHexString(uint160(inputToken), 20),\\n            \\\"-\\\",\\n            Strings.toHexString(uint160(outputToken), 20)\\n        );\\n        return key;\\n    }\\n\\n    /**\\n     * @dev Gets the swap parameters for a token pair\\n     * @param inputToken Address of the input token\\n     * @param outputToken Address of the output token\\n     * @param defaultSwapParams Mapping of default swap parameters\\n     * @param isSwapParamsSet Mapping indicating if swap parameters are set\\n     * @return CurveHelper.CurveSwapExtraParams The swap parameters\\n     */\\n    function getSwapExtraParams(\\n        address inputToken,\\n        address outputToken,\\n        mapping(string => CurveHelper.CurveSwapExtraParams)\\n            storage defaultSwapParams,\\n        mapping(string => bool) storage isSwapParamsSet\\n    ) public view returns (CurveHelper.CurveSwapExtraParams memory) {\\n        string memory key = getSwapExtraParamsKey(inputToken, outputToken);\\n        // If the key is not found, revert\\n        if (!isSwapParamsSet[key]) {\\n            revert ICurveRouterWrapper.NotFoundKeyForSwapExtraParams(\\n                inputToken,\\n                outputToken,\\n                key\\n            );\\n        }\\n        return defaultSwapParams[key];\\n    }\\n}\\n\",\"keccak256\":\"0xda07c898e9519a786977030b08e8458b7d48496a77395f3d2ecf96830bc175cb\",\"license\":\"MIT\"},\"contracts/vault/dLOOP/periphery/venue/curve/DLoopDepositorCurve.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity 0.8.20;\\n\\nimport {DLoopDepositorBase, ERC20, IERC3156FlashLender, DLoopCoreBase} from \\\"../../DLoopDepositorBase.sol\\\";\\nimport {CurveSwapLogic, CurveHelper, ICurveRouterNgPoolsOnlyV1} from \\\"./CurveSwapLogic.sol\\\";\\n\\n/**\\n * @title DLoopDepositorCurve\\n * @dev Implementation of DLoopDepositorBase with Curve swap functionality\\n */\\ncontract DLoopDepositorCurve is DLoopDepositorBase {\\n    ICurveRouterNgPoolsOnlyV1 public immutable curveRouter;\\n    uint256 public immutable maxSlippageSurplusSwapBps;\\n\\n    mapping(string => CurveHelper.CurveSwapExtraParams)\\n        public defaultSwapParams;\\n    mapping(string => bool) public isSwapParamsSet;\\n\\n    struct CurveSwapExtraParamsDefaultConfig {\\n        address inputToken;\\n        address outputToken;\\n        CurveHelper.CurveSwapExtraParams swapExtraParams;\\n        CurveHelper.CurveSwapExtraParams reverseSwapExtraParams;\\n    }\\n\\n    /**\\n     * @dev Constructor for the DLoopDepositorCurve contract\\n     * @param _underlyingAsset Address of the underlying asset\\n     * @param _dStable Address of the dStable token\\n     * @param _flashLender Address of the flash loan provider\\n     * @param _dLoopCore Address of the dLoopCore contract\\n     * @param _curveRouter Address of the Curve router\\n     * @param _swapSlippageTolerance Swap slippage tolerance in basis points\\n     * @param _maxSlippageSurplusSwapBps Maximum slippage for surplus swap in basis points\\n     * @param _defaultSwapParamsList List of default swap parameters\\n     */\\n    constructor(\\n        ERC20 _underlyingAsset,\\n        ERC20 _dStable,\\n        IERC3156FlashLender _flashLender,\\n        DLoopCoreBase _dLoopCore,\\n        ICurveRouterNgPoolsOnlyV1 _curveRouter,\\n        uint256 _swapSlippageTolerance,\\n        uint256 _maxSlippageSurplusSwapBps,\\n        CurveSwapLogic.CurveSwapExtraParamsDefaultConfig[]\\n            memory _defaultSwapParamsList\\n    )\\n        DLoopDepositorBase(\\n            _underlyingAsset,\\n            _dStable,\\n            _flashLender,\\n            _dLoopCore,\\n            _swapSlippageTolerance\\n        )\\n    {\\n        curveRouter = ICurveRouterNgPoolsOnlyV1(_curveRouter);\\n        maxSlippageSurplusSwapBps = _maxSlippageSurplusSwapBps;\\n\\n        // Initialize default swap parameters\\n        CurveSwapLogic.initializeDefaultSwapParams(\\n            _defaultSwapParamsList,\\n            defaultSwapParams,\\n            isSwapParamsSet\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc DLoopDepositorBase\\n     * @dev Swaps an exact amount of output tokens for the minimum input tokens\\n     */\\n    function _swapExactOutput(\\n        ERC20 inputToken,\\n        ERC20 outputToken,\\n        uint256 amountOut,\\n        uint256 amountInMaximum,\\n        address receiver,\\n        uint256, // deadline (not used in Curve)\\n        bytes memory extraData\\n    ) internal override returns (uint256) {\\n        return\\n            CurveSwapLogic.swapExactOutput(\\n                inputToken,\\n                outputToken,\\n                amountOut,\\n                amountInMaximum,\\n                receiver,\\n                extraData,\\n                curveRouter,\\n                defaultSwapParams,\\n                isSwapParamsSet,\\n                maxSlippageSurplusSwapBps\\n            );\\n    }\\n\\n    /**\\n     * @dev Sets the swap extra params for a given input and output token\\n     * @param _swapExtraParamsConfig The swap extra params config\\n     */\\n    function setSwapExtraParams(\\n        CurveSwapLogic.CurveSwapExtraParamsDefaultConfig\\n            memory _swapExtraParamsConfig\\n    ) external onlyOwner {\\n        CurveSwapLogic.setSwapExtraParams(\\n            _swapExtraParamsConfig,\\n            defaultSwapParams,\\n            isSwapParamsSet\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x157ddfe3a59a75988e451f56c63b484c2d560e2214a8f8ee654ace623924efe6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c9081630cc2f8d2146110a3575080631423feba1461107e57806323e30c8b146108b25780632ae18104146108775780632b4481ca1461084a578063313c9b8d1461080f5780634707d00014610724578063715018a6146106ca5780637158da7c1461068557806382e9dd9e146106475780638da5cb5b14610620578063a104a32f146105db578063a771445814610596578063c77b66c2146104d2578063cda90b881461048d578063f2fde38b146104075763f5a58663146100dc57600080fd5b3461040457610840366003190112610404576040516080919067ffffffffffffffff838201818111838210176103f0576040526101176110e6565b8252610121611101565b916020808201938452610400938460431936011261038457604051946101468661115d565b36606312156103805760405161015b81611179565b806101a49136831161037c57856044915b8483106103d8575050508752366101c312156103605760405161018e8161112b565b806104249236841161035c57905b83821061038857505084880152356040870152604084019586526104431936011261038457604051916101ce8361115d565b36610463121561038057604051906101e582611179565b816105a49236841161037c5782610444915b858310610364575050508452366105c31215610360576040519061021a8261112b565b816108249336851161035c57905b84821061030857505088995084989697980152356040830152606083019182526102506112e2565b73__$f28b1f6ff12e759e9f5435a81d18aeeda6$__803b15610304576102b6610884936102aa604051998a978896631abe72a160e31b885260018060a01b0380925116600489015251166024870152516044860190611833565b51610444840190611833565b600261084483015260036108648301525af480156102f9576102d6578280f35b81116102e55760405238808280f35b634e487b7160e01b82526041600452602482fd5b6040513d85823e3d90fd5b8480fd5b36601f8301121561035c5760405161031f81611196565b828d018136821161035857918e9391869386905b82821061034857505050815201910190610228565b8135815288959182019101610333565b8d80fd5b8a80fd5b8780fd5b819061036f84611117565b81520191019083906101f7565b8980fd5b8680fd5b8580fd5b36601f8301121561035c5760405161039f81611196565b828d018136821161035857918e93918a9386905b8282106103c85750505081520191019061019c565b813581528c9591820191016103b3565b81906103e384611117565b815201910190869061016c565b634e487b7160e01b84526041600452602484fd5b80fd5b5034610404576020366003190112610404576104216110e6565b6104296112e2565b6001600160a01b039081169081156104745782546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b604051631e4fbdf760e01b815260048101849052602490fd5b50346104045780600319360112610404576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5034610404576104e136611227565b6040516303d1689d60e11b8152600481019490945293929091906020816024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa93841561058a578094610553575b60208561054a8887878461146c565b50604051908152f35b909193506020823d8211610582575b8161056f602093836111b2565b810103126104045750519181602061053b565b3d9150610562565b604051903d90823e3d90fd5b50346104045780600319360112610404576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346104045780600319360112610404576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5034610404578060031936011261040457546040516001600160a01b039091168152602090f35b5034610404576020601f6106718261065e36611283565b81604051938285809451938492016112bf565b810160028152030190200154604051908152f35b50346104045780600319360112610404576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346104045780600319360112610404576106e36112e2565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346104045760403660031901126104045761073e6110e6565b610746611101565b9061074f6112e2565b6040516370a0823160e01b8152306004820152906001600160a01b0316602082602481845afa9182156108045784926107c9575b5060405163a9059cbb60e01b60208201526001600160a01b039390931660248401526044808401929092529082526107c691906107c16064836111b2565b611326565b80f35b9291506020833d82116107fc575b816107e4602093836111b2565b810103126107f857915190916107c1610783565b8380fd5b3d91506107d7565b6040513d86823e3d90fd5b503461040457806003193601126104045760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b503461040457602060ff6108618261065e36611283565b8101600381520301902054166040519015158152f35b503461040457806003193601126104045760206040517f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd98152f35b50346104045760a0366003190112610404576108cc6110e6565b6108d4611101565b9060843567ffffffffffffffff92838211610304573660238301121561030457816004013592848411610384573660248585010111610384577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361106c57306001600160a01b039091160361105a576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169116036110485761098e9160243692016111f0565b6040519161099b8361112b565b838352836020840152836040840152836060840152606060808401528151820160a0838203126103045760208301516001600160a01b03811681036103845760408401519260608501519260808601519160a08701519081116110445760208201603f82890101121561104457602081880101516020610a1a826111d4565b93610a2860405195866111b2565b82855201604082848b0101011161037c57610a77976040610a4f93602086019201016112bf565b6080870152606086015260408501829052602085018390526001600160a01b03168452611449565b6040516363880e0960e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602090829060249082907f0000000000000000000000000000000000000000000000000000000000000000165afa908115610804578491611012575b5060405163313ce56760e01b8152906020826004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561100757610b50610b5692610b5c948891610f9b575b5061180f565b90611820565b82611820565b6040516363880e0960e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602090829060249082907f0000000000000000000000000000000000000000000000000000000000000000165afa908115611007578591610fd5575b5060405163313ce56760e01b8152906020826004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa918215610fca57610c3192610b50918891610f9b575061180f565b908115610f8757606084015191620f424092830191828411610f735790610c59929104611820565b048015610f36576080830151604051631be9861560e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f00000000000000000000000000000000000000000000000000000000000000001660248201526044810193909352606483019190915230608483015261014060a483015260209082908190610cfd90610144830190611424565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031660c4830152600260e483015260036101048301527f0000000000000000000000000000000000000000000000000000000000000000610124830152038173__$f28b1f6ff12e759e9f5435a81d18aeeda6$__5af480156102f957610f07575b50604081810151905163095ea7b360e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166004820152602481019190915260208180604481010381867f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af180156102f957610ed8575b506020818101519151604051636e553f6560e01b815260048101939093526001600160a01b0390811660248401528290604490829086907f0000000000000000000000000000000000000000000000000000000000000000165af18015610ecd57610ea2575b60206040517f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd98152f35b602090813d8311610ec6575b610eb881836111b2565b810103126104045780610e78565b503d610eae565b6040513d84823e3d90fd5b610ef99060203d602011610f00575b610ef181836111b2565b81019061130e565b5038610e12565b503d610ee7565b602090813d8311610f2f575b610f1d81836111b2565b81010312610f2b5738610d86565b5080fd5b503d610f13565b60405162461bcd60e51b81526020600482015260156024820152746d6178496e206973206e6f7420706f73697469766560581b6044820152606490fd5b634e487b7160e01b87526011600452602487fd5b634e487b7160e01b85526012600452602485fd5b610fbd915060203d602011610fc3575b610fb581836111b2565b8101906117f6565b38610b4a565b503d610fab565b6040513d88823e3d90fd5b90506020813d602011610fff575b81610ff0602093836111b2565b81010312610304575138610bd5565b3d9150610fe3565b6040513d87823e3d90fd5b90506020813d60201161103c575b8161102d602093836111b2565b810103126107f8575138610af0565b3d9150611020565b8880fd5b604051638698bf3760e01b8152600490fd5b604051634ac321c360e11b8152600490fd5b604051631e4a393d60e31b8152600490fd5b503461040457602061109b61109236611227565b9291909161146c565b604051908152f35b905034610f2b5781600319360112610f2b577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b600435906001600160a01b03821682036110fc57565b600080fd5b602435906001600160a01b03821682036110fc57565b35906001600160a01b03821682036110fc57565b60a0810190811067ffffffffffffffff82111761114757604052565b634e487b7160e01b600052604160045260246000fd5b6060810190811067ffffffffffffffff82111761114757604052565b610160810190811067ffffffffffffffff82111761114757604052565b6080810190811067ffffffffffffffff82111761114757604052565b90601f8019910116810190811067ffffffffffffffff82111761114757604052565b67ffffffffffffffff811161114757601f01601f191660200190565b9291926111fc826111d4565b9161120a60405193846111b2565b8294818452818301116110fc578281602093846000960137010152565b9060806003198301126110fc57600435916024356001600160a01b03811681036110fc5791604435916064359067ffffffffffffffff82116110fc57806023830112156110fc57816024611280936004013591016111f0565b90565b60206003198201126110fc576004359067ffffffffffffffff82116110fc57806023830112156110fc57816024611280936004013591016111f0565b60005b8381106112d25750506000910152565b81810151838201526020016112c2565b6000546001600160a01b031633036112f657565b60405163118cdaa760e01b8152336004820152602490fd5b908160209103126110fc575180151581036110fc5790565b6000806113709260018060a01b03169360208151910182865af13d156113b9573d90611351826111d4565b9161135f60405193846111b2565b82523d6000602084013e5b836113c1565b805190811515918261139e575b50506113865750565b60249060405190635274afe760e01b82526004820152fd5b6113b1925060208091830101910161130e565b15388061137d565b60609061136a565b906113e857508051156113d657805190602001fd5b604051630a12f52160e11b8152600490fd5b8151158061141b575b6113f9575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b156113f1565b9060209161143d815180928185528580860191016112bf565b601f01601f1916010190565b9190820391821161145657565b634e487b7160e01b600052601160045260246000fd5b919260408051946020946323b872dd60e01b868801526024933385890152306044890152816064890152606488526114a38861112b565b6001600160a01b03976114d8907f00000000000000000000000000000000000000000000000000000000000000008a16611326565b877f000000000000000000000000000000000000000000000000000000000000000016928451926348631af960e01b8452600497818986015289858981895afa9485156117eb57918a93918c8996946000986117aa575b5084926115979695608061158996948b948b519161154c8361112b565b169b8c9b8c8352858b84015282015285606082015201528a519788968701528a8601526060850152608084015260a08084015260c0830190611424565b03601f1981018352826111b2565b877f000000000000000000000000000000000000000000000000000000000000000016977f00000000000000000000000000000000000000000000000000000000000000001684519063613255ab60e01b82528088830152888288818d5afa91821561179f57600092611770575b508551996370a0823160e01b93848c52858a8d01528a8c8a818a5afa9b8c156117655760009c611736575b50908860008b61166d8e96958c5198899788968795632e7ff4ef60e11b875230908701528501526044840152608060648401526084830190611424565b03925af1801561172b5791869189949361170e575b50855194859384928352898301525afa948515611703576000956116d2575b5050848411156116b8575050509061128091611449565b908460449492519363f51cd51560e01b8552840152820152fd5b8181969293963d83116116fc575b6116ea81836111b2565b810103126104045750519238806116a1565b503d6116e0565b82513d6000823e3d90fd5b61172490853d8711610f0057610ef181836111b2565b5038611682565b85513d6000823e3d90fd5b909b8b82813d831161175e575b61174d81836111b2565b810103126104045750519a88611630565b503d611743565b88513d6000823e3d90fd5b90918982813d8311611798575b61178781836111b2565b810103126104045750519038611605565b503d61177d565b86513d6000823e3d90fd5b9395809298939597508491503d83116117e4575b6117c881836111b2565b810103126104045750519386938a93909290918c61159761152f565b503d6117be565b87513d6000823e3d90fd5b908160209103126110fc575160ff811681036110fc5790565b60ff16604d811161145657600a0a90565b8181029291811591840414171561145657565b8051600090835b600b83106118a85750505060208181015190600061016085015b6005821061186d575050505060406103e0910151910152565b82845182906000915b6004831061189257505050608060019201940191019092611854565b8151815286936001909301929182019101611876565b81516001600160a01b03168152600192909201916020918201910161183a56fea2646970667358221220088f29702bb02b4990fd023fe17f27aad98be19e6131c3bdf91853d589e6690c64736f6c63430008140033",
  "libraries": {
    "CurveSwapLogic": "0x3BbD619EB2DB0d14f724FD6ee333Cc616c490549"
  },
  "devdoc": {
    "details": "Implementation of DLoopDepositorBase with Curve swap functionality",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor for the DLoopDepositorCurve contract",
        "params": {
          "_curveRouter": "Address of the Curve router",
          "_dLoopCore": "Address of the dLoopCore contract",
          "_dStable": "Address of the dStable token",
          "_defaultSwapParamsList": "List of default swap parameters",
          "_flashLender": "Address of the flash loan provider",
          "_maxSlippageSurplusSwapBps": "Maximum slippage for surplus swap in basis points",
          "_swapSlippageTolerance": "Swap slippage tolerance in basis points",
          "_underlyingAsset": "Address of the underlying asset"
        }
      },
      "deposit(uint256,address,uint256,bytes)": {
        "details": "Deposits assets into the core vault",
        "params": {
          "assets": "Amount of assets to deposit",
          "dStableToUnderlyingSwapData": "Swap data from dStable to underlying asset",
          "receiver": "Address to receive the minted shares",
          "slippageTolerance": "Slippage tolerance for the swap"
        },
        "returns": {
          "shares": "Amount of shares minted"
        }
      },
      "mint(uint256,address,uint256,bytes)": {
        "details": "Mints shares to the receiver by depositing assets to the core vault",
        "params": {
          "dStableToUnderlyingSwapData": "Swap data from dStable to underlying asset",
          "receiver": "Address to receive the minted shares",
          "shares": "Amount of shares to mint",
          "slippageTolerance": "Slippage tolerance for the swap"
        },
        "returns": {
          "assets": "Amount of assets deposited"
        }
      },
      "onFlashLoan(address,address,uint256,uint256,bytes)": {
        "details": "Callback function for flash loans",
        "params": {
          "data": "Additional data passed to the flash loan",
          "initiator": "Address that initiated the flash loan",
          "token": "Address of the flash-borrowed token"
        },
        "returns": {
          "_0": "bytes32 The flash loan callback success bytes"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "rescueToken(address,address)": {
        "details": "Rescues tokens accidentally sent to the contract",
        "params": {
          "receiver": "Address to receive the rescued tokens",
          "token": "Address of the token to rescue"
        }
      },
      "setSwapExtraParams((address,address,(address[11],uint256[4][5],uint256),(address[11],uint256[4][5],uint256)))": {
        "details": "Sets the swap extra params for a given input and output token",
        "params": {
          "_swapExtraParamsConfig": "The swap extra params config"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "DLoopDepositorCurve",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/vault/dLOOP/periphery/venue/curve/DLoopDepositorCurve.sol:DLoopDepositorCurve",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6615,
        "contract": "contracts/vault/dLOOP/periphery/venue/curve/DLoopDepositorCurve.sol:DLoopDepositorCurve",
        "label": "_defaultSwapSlippageTolerance",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 8336,
        "contract": "contracts/vault/dLOOP/periphery/venue/curve/DLoopDepositorCurve.sol:DLoopDepositorCurve",
        "label": "defaultSwapParams",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_struct(CurveSwapExtraParams)4236_storage)"
      },
      {
        "astId": 8340,
        "contract": "contracts/vault/dLOOP/periphery/venue/curve/DLoopDepositorCurve.sol:DLoopDepositorCurve",
        "label": "isSwapParamsSet",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)11_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[11]",
        "numberOfBytes": "352"
      },
      "t_array(t_array(t_uint256)4_storage)5_storage": {
        "base": "t_array(t_uint256)4_storage",
        "encoding": "inplace",
        "label": "uint256[4][5]",
        "numberOfBytes": "640"
      },
      "t_array(t_uint256)4_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[4]",
        "numberOfBytes": "128"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_struct(CurveSwapExtraParams)4236_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct CurveHelper.CurveSwapExtraParams)",
        "numberOfBytes": "32",
        "value": "t_struct(CurveSwapExtraParams)4236_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CurveSwapExtraParams)4236_storage": {
        "encoding": "inplace",
        "label": "struct CurveHelper.CurveSwapExtraParams",
        "members": [
          {
            "astId": 4227,
            "contract": "contracts/vault/dLOOP/periphery/venue/curve/DLoopDepositorCurve.sol:DLoopDepositorCurve",
            "label": "route",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)11_storage"
          },
          {
            "astId": 4233,
            "contract": "contracts/vault/dLOOP/periphery/venue/curve/DLoopDepositorCurve.sol:DLoopDepositorCurve",
            "label": "swapParams",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_array(t_uint256)4_storage)5_storage"
          },
          {
            "astId": 4235,
            "contract": "contracts/vault/dLOOP/periphery/venue/curve/DLoopDepositorCurve.sol:DLoopDepositorCurve",
            "label": "swapSlippageBufferBps",
            "offset": 0,
            "slot": "31",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "1024"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}