{
  "address": "0xf97e103F05B6a58eD581DAdf9a21B9Ed8b778372",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "aaveGovShortTimelock",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collector",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collector",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "cancelStream",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stopTime",
          "type": "uint256"
        }
      ],
      "name": "createStream",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collector",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collector",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "funds",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromStream",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdfdb26a9cc3462450b75274b64f11ddb3d0dc8eff1e419b44819a909826f88d5",
  "receipt": {
    "to": null,
    "from": "0x53Ae1433Ab4563d7D5a84d27524784837259f105",
    "contractAddress": "0xf97e103F05B6a58eD581DAdf9a21B9Ed8b778372",
    "transactionIndex": 1,
    "gasUsed": "426185",
    "logsBloom": "0x
    "blockHash": "0x82dde6c512ceee56ac4a7b1f909427026a60636e8cf5d0368d5ba3fa8ed1ddd4",
    "transactionHash": "0xdfdb26a9cc3462450b75274b64f11ddb3d0dc8eff1e419b44819a909826f88d5",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 10336075,
        "transactionHash": "0xdfdb26a9cc3462450b75274b64f11ddb3d0dc8eff1e419b44819a909826f88d5",
        "address": "0xf97e103F05B6a58eD581DAdf9a21B9Ed8b778372",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000053ae1433ab4563d7d5a84d27524784837259f105"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x82dde6c512ceee56ac4a7b1f909427026a60636e8cf5d0368d5ba3fa8ed1ddd4"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 10336075,
        "transactionHash": "0xdfdb26a9cc3462450b75274b64f11ddb3d0dc8eff1e419b44819a909826f88d5",
        "address": "0xf97e103F05B6a58eD581DAdf9a21B9Ed8b778372",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000053ae1433ab4563d7d5a84d27524784837259f105",
          "0x00000000000000000000000053ae1433ab4563d7d5a84d27524784837259f105"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x82dde6c512ceee56ac4a7b1f909427026a60636e8cf5d0368d5ba3fa8ed1ddd4"
      }
    ],
    "blockNumber": 10336075,
    "cumulativeGasUsed": "498760",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x53Ae1433Ab4563d7D5a84d27524784837259f105"
  ],
  "numDeployments": 1,
  "solcInputHash": "4a6a3ab49a41002471a76f77fc4e04dd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aaveGovShortTimelock\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"cancelStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"}],\"name\":\"createStream\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collector\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"funds\",\"type\":\"uint256\"}],\"name\":\"withdrawFromStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,address,address,uint256)\":{\"params\":{\"amount\":\"Allowance to approve*\",\"collector\":\"The collector contract with funds (Aave ecosystem reserve)\",\"recipient\":\"Allowance's recipient\",\"token\":\"The asset address\"}},\"cancelStream(address,uint256)\":{\"params\":{\"collector\":\"The collector contract with funds (Aave ecosystem reserve)\",\"streamId\":\"The id of the stream to cancel\"},\"returns\":{\"_0\":\"bool If the cancellation happened correctly*\"}},\"constructor\":{\"params\":{\"aaveGovShortTimelock\":\"The address of the Aave's governance executor, owning this contract\"}},\"createStream(address,address,uint256,address,uint256,uint256)\":{\"params\":{\"collector\":\"The collector contract with funds (Aave ecosystem reserve)\",\"deposit\":\"Total amount to be streamed\",\"recipient\":\"The recipient of the stream of token\",\"startTime\":\"The unix timestamp for when the stream starts\",\"stopTime\":\"The unix timestamp for when the stream stops\",\"tokenAddress\":\"The ERC20 token to use as streaming asset\"},\"returns\":{\"_0\":\"uint256 The stream id created*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transfer(address,address,address,uint256)\":{\"params\":{\"amount\":\"Amount to transfer*\",\"collector\":\"The collector contract with funds (Aave ecosystem reserve)\",\"recipient\":\"Transfer's recipient\",\"token\":\"The asset address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawFromStream(address,uint256,uint256)\":{\"params\":{\"collector\":\"The collector contract with funds (Aave ecosystem reserve)\",\"funds\":\"Amount to withdraw\",\"streamId\":\"The id of the stream to withdraw tokens from\"},\"returns\":{\"_0\":\"bool If the withdrawal finished properly*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,address,address,uint256)\":{\"notice\":\"Proxy function for ERC20's approve(), pointing to a specific collector contract\"},\"cancelStream(address,uint256)\":{\"notice\":\"Proxy function to cancel a stream of token on a specific collector contract\"},\"constructor\":{\"notice\":\"Constructor.\"},\"createStream(address,address,uint256,address,uint256,uint256)\":{\"notice\":\"Proxy function to create a stream of token on a specific collector contract\"},\"transfer(address,address,address,uint256)\":{\"notice\":\"Proxy function for ERC20's transfer(), pointing to a specific collector contract\"},\"withdrawFromStream(address,uint256,uint256)\":{\"notice\":\"Proxy function to withdraw from a stream of token on a specific collector contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lending/periphery/treasury/AaveEcosystemReserveController.sol\":\"AaveEcosystemReserveController\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/lending/core/dependencies/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe71338fab940e0974f207798e845b4ede5bc7ee4e354a9b29571744faa5535bc\",\"license\":\"MIT\"},\"contracts/lending/core/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x9f865ae3d19d19b2ed680009d6a83ae7fdd80594a86fccf567523d68760a648e\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/dependencies/openzeppelin/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x3b03851c13a8580ce9cd82e4b1e1bc8e52a05ea2c11c5d078741b184fdac82ea\",\"license\":\"MIT\"},\"contracts/lending/periphery/treasury/AaveEcosystemReserveController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {Ownable} from \\\"contracts/lending/core/dependencies/openzeppelin/contracts/Ownable.sol\\\";\\nimport {IStreamable} from \\\"./interfaces/IStreamable.sol\\\";\\nimport {IAdminControlledEcosystemReserve} from \\\"./interfaces/IAdminControlledEcosystemReserve.sol\\\";\\nimport {IAaveEcosystemReserveController} from \\\"./interfaces/IAaveEcosystemReserveController.sol\\\";\\nimport {IERC20} from \\\"contracts/lending/core/dependencies/openzeppelin/contracts/IERC20.sol\\\";\\n\\ncontract AaveEcosystemReserveController is\\n    Ownable,\\n    IAaveEcosystemReserveController\\n{\\n    /**\\n     * @notice Constructor.\\n     * @param aaveGovShortTimelock The address of the Aave's governance executor, owning this contract\\n     */\\n    constructor(address aaveGovShortTimelock) {\\n        transferOwnership(aaveGovShortTimelock);\\n    }\\n\\n    /// @inheritdoc IAaveEcosystemReserveController\\n    function approve(\\n        address collector,\\n        IERC20 token,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyOwner {\\n        IAdminControlledEcosystemReserve(collector).approve(\\n            token,\\n            recipient,\\n            amount\\n        );\\n    }\\n\\n    /// @inheritdoc IAaveEcosystemReserveController\\n    function transfer(\\n        address collector,\\n        IERC20 token,\\n        address recipient,\\n        uint256 amount\\n    ) external onlyOwner {\\n        IAdminControlledEcosystemReserve(collector).transfer(\\n            token,\\n            recipient,\\n            amount\\n        );\\n    }\\n\\n    /// @inheritdoc IAaveEcosystemReserveController\\n    function createStream(\\n        address collector,\\n        address recipient,\\n        uint256 deposit,\\n        IERC20 tokenAddress,\\n        uint256 startTime,\\n        uint256 stopTime\\n    ) external onlyOwner returns (uint256) {\\n        return\\n            IStreamable(collector).createStream(\\n                recipient,\\n                deposit,\\n                address(tokenAddress),\\n                startTime,\\n                stopTime\\n            );\\n    }\\n\\n    /// @inheritdoc IAaveEcosystemReserveController\\n    function withdrawFromStream(\\n        address collector,\\n        uint256 streamId,\\n        uint256 funds\\n    ) external onlyOwner returns (bool) {\\n        return IStreamable(collector).withdrawFromStream(streamId, funds);\\n    }\\n\\n    /// @inheritdoc IAaveEcosystemReserveController\\n    function cancelStream(\\n        address collector,\\n        uint256 streamId\\n    ) external onlyOwner returns (bool) {\\n        return IStreamable(collector).cancelStream(streamId);\\n    }\\n}\\n\",\"keccak256\":\"0x6d786760007f87b7269f4b6373c18970a120dfd8d275483f448168a040ca00a6\",\"license\":\"MIT\"},\"contracts/lending/periphery/treasury/interfaces/IAaveEcosystemReserveController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"contracts/lending/core/dependencies/openzeppelin/contracts/IERC20.sol\\\";\\n\\ninterface IAaveEcosystemReserveController {\\n    /**\\n     * @notice Proxy function for ERC20's approve(), pointing to a specific collector contract\\n     * @param collector The collector contract with funds (Aave ecosystem reserve)\\n     * @param token The asset address\\n     * @param recipient Allowance's recipient\\n     * @param amount Allowance to approve\\n     **/\\n    function approve(\\n        address collector,\\n        IERC20 token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Proxy function for ERC20's transfer(), pointing to a specific collector contract\\n     * @param collector The collector contract with funds (Aave ecosystem reserve)\\n     * @param token The asset address\\n     * @param recipient Transfer's recipient\\n     * @param amount Amount to transfer\\n     **/\\n    function transfer(\\n        address collector,\\n        IERC20 token,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Proxy function to create a stream of token on a specific collector contract\\n     * @param collector The collector contract with funds (Aave ecosystem reserve)\\n     * @param recipient The recipient of the stream of token\\n     * @param deposit Total amount to be streamed\\n     * @param tokenAddress The ERC20 token to use as streaming asset\\n     * @param startTime The unix timestamp for when the stream starts\\n     * @param stopTime The unix timestamp for when the stream stops\\n     * @return uint256 The stream id created\\n     **/\\n    function createStream(\\n        address collector,\\n        address recipient,\\n        uint256 deposit,\\n        IERC20 tokenAddress,\\n        uint256 startTime,\\n        uint256 stopTime\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Proxy function to withdraw from a stream of token on a specific collector contract\\n     * @param collector The collector contract with funds (Aave ecosystem reserve)\\n     * @param streamId The id of the stream to withdraw tokens from\\n     * @param funds Amount to withdraw\\n     * @return bool If the withdrawal finished properly\\n     **/\\n    function withdrawFromStream(\\n        address collector,\\n        uint256 streamId,\\n        uint256 funds\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice Proxy function to cancel a stream of token on a specific collector contract\\n     * @param collector The collector contract with funds (Aave ecosystem reserve)\\n     * @param streamId The id of the stream to cancel\\n     * @return bool If the cancellation happened correctly\\n     **/\\n    function cancelStream(\\n        address collector,\\n        uint256 streamId\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x20563c4485d7d8aaf54610a8fad4c148031b7015e6500cca88fa79ec5981242c\",\"license\":\"MIT\"},\"contracts/lending/periphery/treasury/interfaces/IAdminControlledEcosystemReserve.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"contracts/lending/core/dependencies/openzeppelin/contracts/IERC20.sol\\\";\\n\\ninterface IAdminControlledEcosystemReserve {\\n    /** @notice Emitted when the funds admin changes\\n     * @param fundsAdmin The new funds admin\\n     **/\\n    event NewFundsAdmin(address indexed fundsAdmin);\\n\\n    /** @notice Returns the mock ETH reference address\\n     * @return address The address\\n     **/\\n    function ETH_MOCK_ADDRESS() external pure returns (address);\\n\\n    /**\\n     * @notice Return the funds admin, only entity to be able to interact with this contract (controller of reserve)\\n     * @return address The address of the funds admin\\n     **/\\n    function getFundsAdmin() external view returns (address);\\n\\n    /**\\n     * @dev Function for the funds admin to give ERC20 allowance to other parties\\n     * @param token The address of the token to give allowance from\\n     * @param recipient Allowance's recipient\\n     * @param amount Allowance to approve\\n     **/\\n    function approve(IERC20 token, address recipient, uint256 amount) external;\\n\\n    /**\\n     * @notice Function for the funds admin to transfer ERC20 tokens to other parties\\n     * @param token The address of the token to transfer\\n     * @param recipient Transfer's recipient\\n     * @param amount Amount to transfer\\n     **/\\n    function transfer(IERC20 token, address recipient, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xb6d5d627fdad611dab0377649266640962d095aaa1dd891662b7500ce0f40e25\",\"license\":\"GPL-3.0\"},\"contracts/lending/periphery/treasury/interfaces/IStreamable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\ninterface IStreamable {\\n    struct Stream {\\n        uint256 deposit;\\n        uint256 ratePerSecond;\\n        uint256 remainingBalance;\\n        uint256 startTime;\\n        uint256 stopTime;\\n        address recipient;\\n        address sender;\\n        address tokenAddress;\\n        bool isEntity;\\n    }\\n\\n    event CreateStream(\\n        uint256 indexed streamId,\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 deposit,\\n        address tokenAddress,\\n        uint256 startTime,\\n        uint256 stopTime\\n    );\\n\\n    event WithdrawFromStream(\\n        uint256 indexed streamId,\\n        address indexed recipient,\\n        uint256 amount\\n    );\\n\\n    event CancelStream(\\n        uint256 indexed streamId,\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 senderBalance,\\n        uint256 recipientBalance\\n    );\\n\\n    function balanceOf(\\n        uint256 streamId,\\n        address who\\n    ) external view returns (uint256 balance);\\n\\n    function getStream(\\n        uint256 streamId\\n    )\\n        external\\n        view\\n        returns (\\n            address sender,\\n            address recipient,\\n            uint256 deposit,\\n            address token,\\n            uint256 startTime,\\n            uint256 stopTime,\\n            uint256 remainingBalance,\\n            uint256 ratePerSecond\\n        );\\n\\n    function createStream(\\n        address recipient,\\n        uint256 deposit,\\n        address tokenAddress,\\n        uint256 startTime,\\n        uint256 stopTime\\n    ) external returns (uint256 streamId);\\n\\n    function withdrawFromStream(\\n        uint256 streamId,\\n        uint256 funds\\n    ) external returns (bool);\\n\\n    function cancelStream(uint256 streamId) external returns (bool);\\n\\n    function initialize(address fundsAdmin) external;\\n}\\n\",\"keccak256\":\"0xce1d8db98912f72f58cf570dd39731663e39078bf6de5b04409566f97cd1c586\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461010157601f61074f38819003918201601f19168301916001600160401b038311848410176101065780849260209460405283398101031261010157516001600160a01b0381169081900361010157600080547f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e092906001600160a01b0319908116903384868180a382156100ad57826040519533908680a3331617179055610632908161011d8239f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe60406080815260048036101561001457600080fd5b600091823560e01c80632f436bfa1461048457806359eba454146103f4578063715018a6146103985780637dc14a8e146102ff5780638da5cb5b146102d357838163f18d03cc1461022957508063f2fde38b146101625763fd59e1341461007a57600080fd5b346101475760c0366003190112610147576100936104f6565b6024356001600160a01b038181169182900361015d576064359481861680960361015d5786826020956100cc60a495845416331461054d565b8751988996879563660da5fb60e11b875286015260443560248601526044850152608435606485015284356084850152165af1918215610153578392610117575b6020838351908152f35b9091506020813d60201161014b575b81610133602093836105c2565b81010312610147576020925051903861010d565b8280fd5b3d9150610126565b81513d85823e3d90fd5b600080fd5b5090346101475760203660031901126101475761017d6104f6565b8354916001600160a01b038084169261019733851461054d565b169384156101d757505082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08580a36001600160a01b03191617815580f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b808484346102cf5761023a3661050c565b86549095939192916001600160a01b0391610258908316331461054d565b1690813b156102cb5784516317d5759960e31b81526001600160a01b0391821694810194855292166020840152604083019490945292849184919082908490829060600103925af19081156102c257506102af5750f35b6102b890610598565b6102bf5780f35b80fd5b513d84823e3d90fd5b8680fd5b5050fd5b8382346102fb57816003193601126102fb57905490516001600160a01b039091168152602090f35b5080fd5b5034610147578060031936011261014757602061031a6104f6565b84546001600160a01b0394602491610335908716331461054d565b8685519687948593636db9241b60e01b8552853590850152165af19182156101535760209392610369575b50519015158152f35b61038a919250833d8511610391575b61038281836105c2565b8101906105e4565b9038610360565b503d610378565b83346102bf57806003193601126102bf578054816001600160a01b0382166103c133821461054d565b7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a36001600160a01b031916815580f35b503461014757826104043661050c565b9591909260018060a01b039061041e82875416331461054d565b1691823b1561048057855163e1f21c6760e01b81526001600160a01b039283169181019182529190931660208401526040830195909552849182908490829060600103925af19081156102c25750610474575080f35b61047d90610598565b80f35b8480fd5b50346101475760603660031901126101475760206104a06104f6565b84546001600160a01b03946044916104bb908716331461054d565b8685519687948593631ea6cb1b60e21b85526024359085015284356024850152165af191821561015357602093926103695750519015158152f35b600435906001600160a01b038216820361015d57565b608090600319011261015d576001600160a01b03600435818116810361015d5791602435828116810361015d5791604435908116810361015d579060643590565b1561055457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b67ffffffffffffffff81116105ac57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176105ac57604052565b9081602091031261015d5751801515810361015d579056fea264697066735822122051ddb40b10a98a5343c001c264715cf60468a6e57ab515f7afdab6ebd175efb764736f6c63430008180033",
  "deployedBytecode": "0x60406080815260048036101561001457600080fd5b600091823560e01c80632f436bfa1461048457806359eba454146103f4578063715018a6146103985780637dc14a8e146102ff5780638da5cb5b146102d357838163f18d03cc1461022957508063f2fde38b146101625763fd59e1341461007a57600080fd5b346101475760c0366003190112610147576100936104f6565b6024356001600160a01b038181169182900361015d576064359481861680960361015d5786826020956100cc60a495845416331461054d565b8751988996879563660da5fb60e11b875286015260443560248601526044850152608435606485015284356084850152165af1918215610153578392610117575b6020838351908152f35b9091506020813d60201161014b575b81610133602093836105c2565b81010312610147576020925051903861010d565b8280fd5b3d9150610126565b81513d85823e3d90fd5b600080fd5b5090346101475760203660031901126101475761017d6104f6565b8354916001600160a01b038084169261019733851461054d565b169384156101d757505082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08580a36001600160a01b03191617815580f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b808484346102cf5761023a3661050c565b86549095939192916001600160a01b0391610258908316331461054d565b1690813b156102cb5784516317d5759960e31b81526001600160a01b0391821694810194855292166020840152604083019490945292849184919082908490829060600103925af19081156102c257506102af5750f35b6102b890610598565b6102bf5780f35b80fd5b513d84823e3d90fd5b8680fd5b5050fd5b8382346102fb57816003193601126102fb57905490516001600160a01b039091168152602090f35b5080fd5b5034610147578060031936011261014757602061031a6104f6565b84546001600160a01b0394602491610335908716331461054d565b8685519687948593636db9241b60e01b8552853590850152165af19182156101535760209392610369575b50519015158152f35b61038a919250833d8511610391575b61038281836105c2565b8101906105e4565b9038610360565b503d610378565b83346102bf57806003193601126102bf578054816001600160a01b0382166103c133821461054d565b7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a36001600160a01b031916815580f35b503461014757826104043661050c565b9591909260018060a01b039061041e82875416331461054d565b1691823b1561048057855163e1f21c6760e01b81526001600160a01b039283169181019182529190931660208401526040830195909552849182908490829060600103925af19081156102c25750610474575080f35b61047d90610598565b80f35b8480fd5b50346101475760603660031901126101475760206104a06104f6565b84546001600160a01b03946044916104bb908716331461054d565b8685519687948593631ea6cb1b60e21b85526024359085015284356024850152165af191821561015357602093926103695750519015158152f35b600435906001600160a01b038216820361015d57565b608090600319011261015d576001600160a01b03600435818116810361015d5791602435828116810361015d5791604435908116810361015d579060643590565b1561055457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b67ffffffffffffffff81116105ac57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176105ac57604052565b9081602091031261015d5751801515810361015d579056fea264697066735822122051ddb40b10a98a5343c001c264715cf60468a6e57ab515f7afdab6ebd175efb764736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,address,address,uint256)": {
        "params": {
          "amount": "Allowance to approve*",
          "collector": "The collector contract with funds (Aave ecosystem reserve)",
          "recipient": "Allowance's recipient",
          "token": "The asset address"
        }
      },
      "cancelStream(address,uint256)": {
        "params": {
          "collector": "The collector contract with funds (Aave ecosystem reserve)",
          "streamId": "The id of the stream to cancel"
        },
        "returns": {
          "_0": "bool If the cancellation happened correctly*"
        }
      },
      "constructor": {
        "params": {
          "aaveGovShortTimelock": "The address of the Aave's governance executor, owning this contract"
        }
      },
      "createStream(address,address,uint256,address,uint256,uint256)": {
        "params": {
          "collector": "The collector contract with funds (Aave ecosystem reserve)",
          "deposit": "Total amount to be streamed",
          "recipient": "The recipient of the stream of token",
          "startTime": "The unix timestamp for when the stream starts",
          "stopTime": "The unix timestamp for when the stream stops",
          "tokenAddress": "The ERC20 token to use as streaming asset"
        },
        "returns": {
          "_0": "uint256 The stream id created*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transfer(address,address,address,uint256)": {
        "params": {
          "amount": "Amount to transfer*",
          "collector": "The collector contract with funds (Aave ecosystem reserve)",
          "recipient": "Transfer's recipient",
          "token": "The asset address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawFromStream(address,uint256,uint256)": {
        "params": {
          "collector": "The collector contract with funds (Aave ecosystem reserve)",
          "funds": "Amount to withdraw",
          "streamId": "The id of the stream to withdraw tokens from"
        },
        "returns": {
          "_0": "bool If the withdrawal finished properly*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,address,address,uint256)": {
        "notice": "Proxy function for ERC20's approve(), pointing to a specific collector contract"
      },
      "cancelStream(address,uint256)": {
        "notice": "Proxy function to cancel a stream of token on a specific collector contract"
      },
      "constructor": {
        "notice": "Constructor."
      },
      "createStream(address,address,uint256,address,uint256,uint256)": {
        "notice": "Proxy function to create a stream of token on a specific collector contract"
      },
      "transfer(address,address,address,uint256)": {
        "notice": "Proxy function for ERC20's transfer(), pointing to a specific collector contract"
      },
      "withdrawFromStream(address,uint256,uint256)": {
        "notice": "Proxy function to withdraw from a stream of token on a specific collector contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11450,
        "contract": "contracts/lending/periphery/treasury/AaveEcosystemReserveController.sol:AaveEcosystemReserveController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}