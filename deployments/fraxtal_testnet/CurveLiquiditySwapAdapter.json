{
  "address": "0xa993551401377FeAd33AcAE6533DC7d39079b3d8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPoolAddressesProvider",
          "name": "addressesProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "contract ICurveRouterNgPoolsOnlyV1",
          "name": "swapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "CallerMustBePool",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "expectedInitiator",
          "type": "address"
        }
      ],
      "name": "InitiatorMustBeThis",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalanceBeforeSwap",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "received",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "InsufficientOutputAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromAsset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountSold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receivedAmount",
          "type": "uint256"
        }
      ],
      "name": "Bought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromAsset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "receivedAmount",
          "type": "uint256"
        }
      ],
      "name": "Swapped",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADDRESSES_PROVIDER",
      "outputs": [
        {
          "internalType": "contract IPoolAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POOL",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REFERRER",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "premiums",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "rescueTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "collateralAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmountToSwap",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "newCollateralAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "newCollateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "withFlashLoan",
              "type": "bool"
            },
            {
              "internalType": "address[11]",
              "name": "route",
              "type": "address[11]"
            },
            {
              "internalType": "uint256[4][5]",
              "name": "swapParams",
              "type": "uint256[4][5]"
            }
          ],
          "internalType": "struct ICurveLiquiditySwapAdapter.LiquiditySwapParams",
          "name": "liquiditySwapParams",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20WithPermit",
              "name": "aToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IBaseCurveAdapter.PermitInput",
          "name": "collateralATokenPermit",
          "type": "tuple"
        }
      ],
      "name": "swapLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "contract ICurveRouterNgPoolsOnlyV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x243c8af33ec1ba97fc7633ee17d770566dfe09bd98afe6cb4b486c20de67af77",
  "receipt": {
    "to": null,
    "from": "0x53Ae1433Ab4563d7D5a84d27524784837259f105",
    "contractAddress": "0xa993551401377FeAd33AcAE6533DC7d39079b3d8",
    "transactionIndex": 1,
    "gasUsed": "1969909",
    "logsBloom": "0x
    "blockHash": "0xdc8c34213088b9e7b630bd71f89646361e2e3f05281ed7911d6db95f1516d5c1",
    "transactionHash": "0x243c8af33ec1ba97fc7633ee17d770566dfe09bd98afe6cb4b486c20de67af77",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 15382017,
        "transactionHash": "0x243c8af33ec1ba97fc7633ee17d770566dfe09bd98afe6cb4b486c20de67af77",
        "address": "0xa993551401377FeAd33AcAE6533DC7d39079b3d8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000053ae1433ab4563d7d5a84d27524784837259f105"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdc8c34213088b9e7b630bd71f89646361e2e3f05281ed7911d6db95f1516d5c1"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 15382017,
        "transactionHash": "0x243c8af33ec1ba97fc7633ee17d770566dfe09bd98afe6cb4b486c20de67af77",
        "address": "0xa993551401377FeAd33AcAE6533DC7d39079b3d8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000053ae1433ab4563d7d5a84d27524784837259f105",
          "0x00000000000000000000000053ae1433ab4563d7d5a84d27524784837259f105"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xdc8c34213088b9e7b630bd71f89646361e2e3f05281ed7911d6db95f1516d5c1"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 15382017,
        "transactionHash": "0x243c8af33ec1ba97fc7633ee17d770566dfe09bd98afe6cb4b486c20de67af77",
        "address": "0xFC00000000000000000000000000000000000006",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a993551401377fead33acae6533dc7d39079b3d8",
          "0x000000000000000000000000a7e750c73de7d19f06d956d704a39fddfe99d9ea"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0xdc8c34213088b9e7b630bd71f89646361e2e3f05281ed7911d6db95f1516d5c1"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 15382017,
        "transactionHash": "0x243c8af33ec1ba97fc7633ee17d770566dfe09bd98afe6cb4b486c20de67af77",
        "address": "0x4D6E79013212F10A026A1FB0b926C9Fd0432b96c",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a993551401377fead33acae6533dc7d39079b3d8",
          "0x000000000000000000000000a7e750c73de7d19f06d956d704a39fddfe99d9ea"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 3,
        "blockHash": "0xdc8c34213088b9e7b630bd71f89646361e2e3f05281ed7911d6db95f1516d5c1"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 15382017,
        "transactionHash": "0x243c8af33ec1ba97fc7633ee17d770566dfe09bd98afe6cb4b486c20de67af77",
        "address": "0x0Dbf64462FEC588df32FC5C9941421F7d93e0Fb3",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a993551401377fead33acae6533dc7d39079b3d8",
          "0x000000000000000000000000a7e750c73de7d19f06d956d704a39fddfe99d9ea"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 4,
        "blockHash": "0xdc8c34213088b9e7b630bd71f89646361e2e3f05281ed7911d6db95f1516d5c1"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 15382017,
        "transactionHash": "0x243c8af33ec1ba97fc7633ee17d770566dfe09bd98afe6cb4b486c20de67af77",
        "address": "0x98182ec55Be5091d653F9Df016fb1070add7a16E",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a993551401377fead33acae6533dc7d39079b3d8",
          "0x000000000000000000000000a7e750c73de7d19f06d956d704a39fddfe99d9ea"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 5,
        "blockHash": "0xdc8c34213088b9e7b630bd71f89646361e2e3f05281ed7911d6db95f1516d5c1"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 15382017,
        "transactionHash": "0x243c8af33ec1ba97fc7633ee17d770566dfe09bd98afe6cb4b486c20de67af77",
        "address": "0x05A09C8BF515D0035e1Af22b24487928913475Bd",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a993551401377fead33acae6533dc7d39079b3d8",
          "0x000000000000000000000000a7e750c73de7d19f06d956d704a39fddfe99d9ea"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 6,
        "blockHash": "0xdc8c34213088b9e7b630bd71f89646361e2e3f05281ed7911d6db95f1516d5c1"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 15382017,
        "transactionHash": "0x243c8af33ec1ba97fc7633ee17d770566dfe09bd98afe6cb4b486c20de67af77",
        "address": "0x99Df29568C899D0854017de5D265aAF42Cb123fA",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a993551401377fead33acae6533dc7d39079b3d8",
          "0x000000000000000000000000a7e750c73de7d19f06d956d704a39fddfe99d9ea"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 7,
        "blockHash": "0xdc8c34213088b9e7b630bd71f89646361e2e3f05281ed7911d6db95f1516d5c1"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 15382017,
        "transactionHash": "0x243c8af33ec1ba97fc7633ee17d770566dfe09bd98afe6cb4b486c20de67af77",
        "address": "0x4CB47b0FD8f8EfF846889D3BEaD1c33bc93C7FD6",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a993551401377fead33acae6533dc7d39079b3d8",
          "0x000000000000000000000000a7e750c73de7d19f06d956d704a39fddfe99d9ea"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 8,
        "blockHash": "0xdc8c34213088b9e7b630bd71f89646361e2e3f05281ed7911d6db95f1516d5c1"
      }
    ],
    "blockNumber": 15382017,
    "cumulativeGasUsed": "2015875",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC691F14942B37668C9904b701E3118A133611b3c",
    "0xa7e750C73DE7d19f06D956d704A39fdDfE99D9ea",
    "0xF66c3Ef85BceafaEcE9171E25Eee2972b10e1958",
    "0x53Ae1433Ab4563d7D5a84d27524784837259f105"
  ],
  "numDeployments": 1,
  "solcInputHash": "f00a3bff6ef7632fe264d485660833a0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"addressesProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"contract ICurveRouterNgPoolsOnlyV1\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"CallerMustBePool\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expectedInitiator\",\"type\":\"address\"}],\"name\":\"InitiatorMustBeThis\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalanceBeforeSwap\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"InsufficientOutputAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"}],\"name\":\"Bought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"}],\"name\":\"Swapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADDRESSES_PROVIDER\",\"outputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRER\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmountToSwap\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newCollateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newCollateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"withFlashLoan\",\"type\":\"bool\"},{\"internalType\":\"address[11]\",\"name\":\"route\",\"type\":\"address[11]\"},{\"internalType\":\"uint256[4][5]\",\"name\":\"swapParams\",\"type\":\"uint256[4][5]\"}],\"internalType\":\"struct ICurveLiquiditySwapAdapter.LiquiditySwapParams\",\"name\":\"liquiditySwapParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"contract IERC20WithPermit\",\"name\":\"aToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct IBaseCurveAdapter.PermitInput\",\"name\":\"collateralATokenPermit\",\"type\":\"tuple\"}],\"name\":\"swapLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract ICurveRouterNgPoolsOnlyV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Bought(address,address,uint256,uint256)\":{\"details\":\"Emitted after a buy of an asset is made\",\"params\":{\"amountSold\":\"The amount of asset provided for the buy\",\"fromAsset\":\"The address of the asset provided in exchange\",\"receivedAmount\":\"The amount of asset bought\",\"toAsset\":\"The address of the asset bought\"}},\"Swapped(address,address,uint256,uint256)\":{\"details\":\"Emitted after a sell of an asset is made\",\"params\":{\"fromAmount\":\"The amount of asset sold\",\"fromAsset\":\"The address of the asset sold\",\"receivedAmount\":\"The amount received from the sell\",\"toAsset\":\"The address of the asset received in exchange\"}}},\"kind\":\"dev\",\"methods\":{\"executeOperation(address[],uint256[],uint256[],address,bytes)\":{\"details\":\"Executes the collateral swap after receiving the flash-borrowed assetsWorkflow: 1. Sell flash-borrowed asset for new collateral asset 2. Supply new collateral asset 3. Pull aToken collateral from user and withdraw from Pool 4. Repay flashloan\",\"params\":{\"amounts\":\"The amounts of the flash-borrowed assets\",\"assets\":\"The addresses of the flash-borrowed assets\",\"initiator\":\"The address of the flashloan initiator\",\"params\":\"The byte-encoded params passed when initiating the flashloan\",\"premiums\":\"The premiums of the flash-borrowed assets\"},\"returns\":{\"_0\":\"True if the execution of the operation succeeds, false otherwise\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rescueTokens(address)\":{\"details\":\"Emergency rescue for token stucked on this contract, as failsafe mechanism - Funds should never remain in this contract more time than during transactions - Only callable by the owner\"},\"swapLiquidity((address,uint256,address,uint256,address,bool,address[11],uint256[4][5]),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"params\":{\"collateralATokenPermit\":\"optional permit for collateral aToken\",\"liquiditySwapParams\":\"struct describing the liquidity swap\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"CurveLiquiditySwapAdapter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"ADDRESSES_PROVIDER()\":{\"notice\":\"The address of the Aave PoolAddressesProvider contract\"},\"POOL()\":{\"notice\":\"The address of the Aave Pool contract\"},\"swapLiquidity((address,uint256,address,uint256,address,bool,address[11],uint256[4][5]),(address,uint256,uint256,uint8,bytes32,bytes32))\":{\"notice\":\"Swaps liquidity(collateral) from one asset to another\"},\"swapRouter()\":{\"notice\":\"The address of the Curve RouterNG\"}},\"notice\":\"Adapter to swap liquidity using Curve\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lending/periphery/adapters/curve/CurveLiquiditySwapAdapter.sol\":\"CurveLiquiditySwapAdapter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/curve/interfaces/ICurveRouterNgPoolsOnlyV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface for Curve.Fi RouterNG contract (pools-only version 1).\\n * @dev Generated from original ABI: https://fraxscan.com/address/0x9f2Fa7709B30c75047980a0d70A106728f0Ef2db#code\\n */\\n\\ninterface ICurveRouterNgPoolsOnlyV1 {\\n    event Exchange(\\n        address indexed sender,\\n        address indexed receiver,\\n        address[11] route,\\n        uint256[4][5] swap_params,\\n        uint256 in_amount,\\n        uint256 out_amount\\n    );\\n\\n    function exchange(\\n        address[11] calldata _route,\\n        uint256[4][5] calldata _swap_params,\\n        uint256 _amount,\\n        uint256 _min_dy\\n    ) external payable returns (uint256);\\n\\n    function exchange(\\n        address[11] calldata _route,\\n        uint256[4][5] calldata _swap_params,\\n        uint256 _amount,\\n        uint256 _min_dy,\\n        address _receiver\\n    ) external payable returns (uint256);\\n\\n    function get_dy(\\n        address[11] calldata _route,\\n        uint256[4][5] calldata _swap_params,\\n        uint256 _amount\\n    ) external view returns (uint256);\\n\\n    function get_dx(\\n        address[11] calldata _route,\\n        uint256[4][5] calldata _swap_params,\\n        uint256 _out_amount\\n    ) external view returns (uint256);\\n\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x02f244c107c37a3d480120ad7d1536fd07fe35e77d17181e7679a8f5ea71bbd0\",\"license\":\"MIT\"},\"contracts/lending/core/dependencies/openzeppelin/contracts/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data\\n    ) internal view returns (bytes memory) {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4ab8ca5064cf230337feaa22c261ac66e49ec5bb79e35297ffc21564efde5d86\",\"license\":\"MIT\"},\"contracts/lending/core/dependencies/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe71338fab940e0974f207798e845b4ede5bc7ee4e354a9b29571744faa5535bc\",\"license\":\"MIT\"},\"contracts/lending/core/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x9f865ae3d19d19b2ed680009d6a83ae7fdd80594a86fccf567523d68760a648e\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/dependencies/openzeppelin/contracts/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Detailed is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x376d894f8cc108e8aaba1aba2876e1d3259e317d3acded79c09a40b81f78963f\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/dependencies/openzeppelin/contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x3b03851c13a8580ce9cd82e4b1e1bc8e52a05ea2c11c5d078741b184fdac82ea\",\"license\":\"MIT\"},\"contracts/lending/core/dependencies/openzeppelin/contracts/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(\\n                oldAllowance >= value,\\n                \\\"SafeERC20: decreased allowance below zero\\\"\\n            );\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(\\n                    token.approve.selector,\\n                    spender,\\n                    newAllowance\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            \\\"SafeERC20: low-level call failed\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(\\n                abi.decode(returndata, (bool)),\\n                \\\"SafeERC20: ERC20 operation did not succeed\\\"\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x157efcaafe1f4636f1b7c87805ed726254eb07fcca970d87474732fb933c4fc2\",\"license\":\"MIT\"},\"contracts/lending/core/interfaces/IERC20WithPermit.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title IERC20WithPermit\\n * @author Aave\\n * @notice Interface for the permit function (EIP-2612)\\n */\\ninterface IERC20WithPermit is IERC20 {\\n    /**\\n     * @notice Allow passing a signed message to approve spending\\n     * @dev implements the permit function as for\\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n     * @param owner The owner of the funds\\n     * @param spender The spender\\n     * @param value The amount\\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n     * @param v Signature param\\n     * @param s Signature param\\n     * @param r Signature param\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb4bccf157c458492734675806b8fff5389026316b9b1a97328f65a1c32139c57\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n */\\ninterface IPool {\\n    /**\\n     * @dev Emitted on mintUnbacked()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the supply\\n     * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n     * @param amount The amount of supplied assets\\n     * @param referralCode The referral code used\\n     */\\n    event MintUnbacked(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on backUnbacked()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param backer The address paying for the backing\\n     * @param amount The amount added as backing\\n     * @param fee The amount paid in fees\\n     */\\n    event BackUnbacked(\\n        address indexed reserve,\\n        address indexed backer,\\n        uint256 amount,\\n        uint256 fee\\n    );\\n\\n    /**\\n     * @dev Emitted on supply()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the supply\\n     * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n     * @param amount The amount supplied\\n     * @param referralCode The referral code used\\n     */\\n    event Supply(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlying asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of aTokens\\n     * @param to The address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     */\\n    event Withdraw(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n     * initiator of the transaction on flashLoan()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n     * @param referralCode The referral code used\\n     */\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n     */\\n    event Repay(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed repayer,\\n        uint256 amount,\\n        bool useATokens\\n    );\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user swapping his rate mode\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     */\\n    event SwapBorrowRateMode(\\n        address indexed reserve,\\n        address indexed user,\\n        DataTypes.InterestRateMode interestRateMode\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param totalDebt The total isolation mode debt for the reserve\\n     */\\n    event IsolationModeTotalDebtUpdated(\\n        address indexed asset,\\n        uint256 totalDebt\\n    );\\n\\n    /**\\n     * @dev Emitted when the user selects a certain asset category for eMode\\n     * @param user The address of the user\\n     * @param categoryId The category id\\n     */\\n    event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     */\\n    event ReserveUsedAsCollateralEnabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     */\\n    event ReserveUsedAsCollateralDisabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     */\\n    event RebalanceStableBorrowRate(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n     * @param premium The fee flash borrowed\\n     * @param referralCode The referral code used\\n     */\\n    event FlashLoan(\\n        address indexed target,\\n        address initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 premium,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated.\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n     * @param liquidator The address of the liquidator\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     */\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated.\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The next liquidity rate\\n     * @param stableBorrowRate The next stable borrow rate\\n     * @param variableBorrowRate The next variable borrow rate\\n     * @param liquidityIndex The next liquidity index\\n     * @param variableBorrowIndex The next variable borrow index\\n     */\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n     * @param reserve The address of the reserve\\n     * @param amountMinted The amount minted to the treasury\\n     */\\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n    /**\\n     * @notice Mints an `amount` of aTokens to the `onBehalfOf`\\n     * @param asset The address of the underlying asset to mint\\n     * @param amount The amount to mint\\n     * @param onBehalfOf The address that will receive the aTokens\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function mintUnbacked(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Back the current unbacked underlying with `amount` and pay `fee`.\\n     * @param asset The address of the underlying asset to back\\n     * @param amount The amount to back\\n     * @param fee The amount paid in fees\\n     * @return The backed amount\\n     */\\n    function backUnbacked(\\n        address asset,\\n        uint256 amount,\\n        uint256 fee\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     */\\n    function supplyWithPermit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     */\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     */\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     */\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     * @return The final amount repaid\\n     */\\n    function repayWithPermit(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n     * equivalent debt tokens\\n     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n     * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n     * balance is not enough to cover the whole debt\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @return The final amount repaid\\n     */\\n    function repayWithATokens(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     */\\n    function swapBorrowRateMode(\\n        address asset,\\n        uint256 interestRateMode\\n    ) external;\\n\\n    /**\\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n     *        much has been borrowed at a stable rate and suppliers are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     */\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n     * @param asset The address of the underlying asset supplied\\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n     */\\n    function setUserUseReserveAsCollateral(\\n        address asset,\\n        bool useAsCollateral\\n    ) external;\\n\\n    /**\\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     */\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://docs.aave.com/developers/\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts of the assets being flash-borrowed\\n     * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata interestRateModes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://docs.aave.com/developers/\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n     * @param asset The address of the asset being flash-borrowed\\n     * @param amount The amount of the asset being flash-borrowed\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function flashLoanSimple(\\n        address receiverAddress,\\n        address asset,\\n        uint256 amount,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n     * @return currentLiquidationThreshold The liquidation threshold of the user\\n     * @return ltv The loan to value of The user\\n     * @return healthFactor The current health factor of the user\\n     */\\n    function getUserAccountData(\\n        address user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralBase,\\n            uint256 totalDebtBase,\\n            uint256 availableBorrowsBase,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    /**\\n     * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n     * interest rate strategy\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n     * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n     * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n     */\\n    function initReserve(\\n        address asset,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Drop a reserve\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     */\\n    function dropReserve(address asset) external;\\n\\n    /**\\n     * @notice Updates the address of the interest rate strategy contract\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param rateStrategyAddress The address of the interest rate strategy contract\\n     */\\n    function setReserveInterestRateStrategyAddress(\\n        address asset,\\n        address rateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Sets the configuration bitmap of the reserve as a whole\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param configuration The new configuration bitmap\\n     */\\n    function setConfiguration(\\n        address asset,\\n        DataTypes.ReserveConfigurationMap calldata configuration\\n    ) external;\\n\\n    /**\\n     * @notice Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     */\\n    function getConfiguration(\\n        address asset\\n    ) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the configuration of the user across all the reserves\\n     * @param user The user address\\n     * @return The configuration of the user\\n     */\\n    function getUserConfiguration(\\n        address user\\n    ) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(\\n        address asset\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the normalized variable debt per unit of asset\\n     * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n     * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n     * moment (approx. a borrower would get if opening a position). This means that is always used in\\n     * combination with variable debt supply/balances.\\n     * If using this function externally, consider that is possible to have an increasing normalized\\n     * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n     * (e.g. only updates with non-zero variable debt supply)\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(\\n        address asset\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state and configuration data of the reserve\\n     */\\n    function getReserveData(\\n        address asset\\n    ) external view returns (DataTypes.ReserveData memory);\\n\\n    /**\\n     * @notice Validates and finalizes an aToken transfer\\n     * @dev Only callable by the overlying aToken of the `asset`\\n     * @param asset The address of the underlying asset of the aToken\\n     * @param from The user from which the aTokens are transferred\\n     * @param to The user receiving the aTokens\\n     * @param amount The amount being transferred/withdrawn\\n     * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n     * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n     */\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromBefore,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    /**\\n     * @notice Returns the list of the underlying assets of all the initialized reserves\\n     * @dev It does not include dropped reserves\\n     * @return The addresses of the underlying assets of the initialized reserves\\n     */\\n    function getReservesList() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n     * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n     * @return The address of the reserve associated with id\\n     */\\n    function getReserveAddressById(uint16 id) external view returns (address);\\n\\n    /**\\n     * @notice Returns the PoolAddressesProvider connected to this contract\\n     * @return The address of the PoolAddressesProvider\\n     */\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        returns (IPoolAddressesProvider);\\n\\n    /**\\n     * @notice Updates the protocol fee on the bridging\\n     * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n     */\\n    function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n    /**\\n     * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n     * - A part is sent to aToken holders as extra, one time accumulated interest\\n     * - A part is collected by the protocol treasury\\n     * @dev The total premium is calculated on the total borrowed amount\\n     * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param flashLoanPremiumTotal The total premium, expressed in bps\\n     * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n     */\\n    function updateFlashloanPremiums(\\n        uint128 flashLoanPremiumTotal,\\n        uint128 flashLoanPremiumToProtocol\\n    ) external;\\n\\n    /**\\n     * @notice Configures a new category for the eMode.\\n     * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n     * The category 0 is reserved as it's the default for volatile assets\\n     * @param id The id of the category\\n     * @param config The configuration of the category\\n     */\\n    function configureEModeCategory(\\n        uint8 id,\\n        DataTypes.EModeCategory memory config\\n    ) external;\\n\\n    /**\\n     * @notice Returns the data of an eMode category\\n     * @param id The id of the category\\n     * @return The configuration data of the category\\n     */\\n    function getEModeCategoryData(\\n        uint8 id\\n    ) external view returns (DataTypes.EModeCategory memory);\\n\\n    /**\\n     * @notice Allows a user to use the protocol in eMode\\n     * @param categoryId The id of the category\\n     */\\n    function setUserEMode(uint8 categoryId) external;\\n\\n    /**\\n     * @notice Returns the eMode the user is using\\n     * @param user The address of the user\\n     * @return The eMode id\\n     */\\n    function getUserEMode(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Resets the isolation mode total debt of the given asset to zero\\n     * @dev It requires the given asset has zero debt ceiling\\n     * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n     */\\n    function resetIsolationModeTotalDebt(address asset) external;\\n\\n    /**\\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n     * @return The percentage of available liquidity to borrow, expressed in bps\\n     */\\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the total fee on flash loans\\n     * @return The total fee on flashloans\\n     */\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the part of the bridge fees sent to protocol\\n     * @return The bridge fee sent to the protocol treasury\\n     */\\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the part of the flashloan fees sent to protocol\\n     * @return The flashloan fee sent to the protocol treasury\\n     */\\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n     * @return The maximum number of reserves supported\\n     */\\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n    /**\\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n     * @param assets The list of reserves for which the minting needs to be executed\\n     */\\n    function mintToTreasury(address[] calldata assets) external;\\n\\n    /**\\n     * @notice Rescue and transfer tokens locked in this contract\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param amount The amount of token to transfer\\n     */\\n    function rescueTokens(address token, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @dev Deprecated: Use the `supply` function instead\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n}\\n\",\"keccak256\":\"0x787841314e105aa11156c6d7e9e01d935ecaaa496150c86409f037d0654f54ac\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n */\\ninterface IPoolAddressesProvider {\\n    /**\\n     * @dev Emitted when the market identifier is updated.\\n     * @param oldMarketId The old id of the market\\n     * @param newMarketId The new id of the market\\n     */\\n    event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n    /**\\n     * @dev Emitted when the pool is updated.\\n     * @param oldAddress The old address of the Pool\\n     * @param newAddress The new address of the Pool\\n     */\\n    event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the pool configurator is updated.\\n     * @param oldAddress The old address of the PoolConfigurator\\n     * @param newAddress The new address of the PoolConfigurator\\n     */\\n    event PoolConfiguratorUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the price oracle is updated.\\n     * @param oldAddress The old address of the PriceOracle\\n     * @param newAddress The new address of the PriceOracle\\n     */\\n    event PriceOracleUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the ACL manager is updated.\\n     * @param oldAddress The old address of the ACLManager\\n     * @param newAddress The new address of the ACLManager\\n     */\\n    event ACLManagerUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the ACL admin is updated.\\n     * @param oldAddress The old address of the ACLAdmin\\n     * @param newAddress The new address of the ACLAdmin\\n     */\\n    event ACLAdminUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the price oracle sentinel is updated.\\n     * @param oldAddress The old address of the PriceOracleSentinel\\n     * @param newAddress The new address of the PriceOracleSentinel\\n     */\\n    event PriceOracleSentinelUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the pool data provider is updated.\\n     * @param oldAddress The old address of the PoolDataProvider\\n     * @param newAddress The new address of the PoolDataProvider\\n     */\\n    event PoolDataProviderUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a new proxy is created.\\n     * @param id The identifier of the proxy\\n     * @param proxyAddress The address of the created proxy contract\\n     * @param implementationAddress The address of the implementation contract\\n     */\\n    event ProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a new non-proxied contract address is registered.\\n     * @param id The identifier of the contract\\n     * @param oldAddress The address of the old contract\\n     * @param newAddress The address of the new contract\\n     */\\n    event AddressSet(\\n        bytes32 indexed id,\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the implementation of the proxy registered with id is updated\\n     * @param id The identifier of the contract\\n     * @param proxyAddress The address of the proxy contract\\n     * @param oldImplementationAddress The address of the old implementation contract\\n     * @param newImplementationAddress The address of the new implementation contract\\n     */\\n    event AddressSetAsProxy(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address oldImplementationAddress,\\n        address indexed newImplementationAddress\\n    );\\n\\n    /**\\n     * @notice Returns the id of the Aave market to which this contract points to.\\n     * @return The market id\\n     */\\n    function getMarketId() external view returns (string memory);\\n\\n    /**\\n     * @notice Associates an id with a specific PoolAddressesProvider.\\n     * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n     * identify and validate multiple Aave markets.\\n     * @param newMarketId The market id\\n     */\\n    function setMarketId(string calldata newMarketId) external;\\n\\n    /**\\n     * @notice Returns an address by its identifier.\\n     * @dev The returned address might be an EOA or a contract, potentially proxied\\n     * @dev It returns ZERO if there is no registered address with the given id\\n     * @param id The id\\n     * @return The address of the registered for the specified id\\n     */\\n    function getAddressFromID(bytes32 id) external view returns (address);\\n\\n    /**\\n     * @notice General function to update the implementation of a proxy registered with\\n     * certain `id`. If there is no proxy registered, it will instantiate one and\\n     * set as implementation the `newImplementationAddress`.\\n     * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n     * setter function, in order to avoid unexpected consequences\\n     * @param id The id\\n     * @param newImplementationAddress The address of the new implementation\\n     */\\n    function setAddressAsProxy(\\n        bytes32 id,\\n        address newImplementationAddress\\n    ) external;\\n\\n    /**\\n     * @notice Sets an address for an id replacing the address saved in the addresses map.\\n     * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n     * @param id The id\\n     * @param newAddress The address to set\\n     */\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    /**\\n     * @notice Returns the address of the Pool proxy.\\n     * @return The Pool proxy address\\n     */\\n    function getPool() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the Pool, or creates a proxy\\n     * setting the new `pool` implementation when the function is called for the first time.\\n     * @param newPoolImpl The new Pool implementation\\n     */\\n    function setPoolImpl(address newPoolImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the PoolConfigurator proxy.\\n     * @return The PoolConfigurator proxy address\\n     */\\n    function getPoolConfigurator() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n     * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n     * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n     */\\n    function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle.\\n     * @return The address of the PriceOracle\\n     */\\n    function getPriceOracle() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle.\\n     * @param newPriceOracle The address of the new PriceOracle\\n     */\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL manager.\\n     * @return The address of the ACLManager\\n     */\\n    function getACLManager() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL manager.\\n     * @param newAclManager The address of the new ACLManager\\n     */\\n    function setACLManager(address newAclManager) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL admin.\\n     * @return The address of the ACL admin\\n     */\\n    function getACLAdmin() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL admin.\\n     * @param newAclAdmin The address of the new ACL admin\\n     */\\n    function setACLAdmin(address newAclAdmin) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle sentinel.\\n     * @return The address of the PriceOracleSentinel\\n     */\\n    function getPriceOracleSentinel() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle sentinel.\\n     * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n     */\\n    function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n    /**\\n     * @notice Returns the address of the data provider.\\n     * @return The address of the DataProvider\\n     */\\n    function getPoolDataProvider() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the data provider.\\n     * @param newDataProvider The address of the new DataProvider\\n     */\\n    function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0xe77d8d5059b52bb94bf1c3cd9a7a1da1e10ace934ce1ff18b4322206f7dc592a\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/protocol/libraries/math/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n */\\nlibrary PercentageMath {\\n    // Maximum percentage factor (100.00%)\\n    uint256 internal constant PERCENTAGE_FACTOR = 1e4;\\n\\n    // Half percentage factor (50.00%)\\n    uint256 internal constant HALF_PERCENTAGE_FACTOR = 0.5e4;\\n\\n    /**\\n     * @notice Executes a percentage multiplication\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentmul percentage\\n     */\\n    function percentMul(\\n        uint256 value,\\n        uint256 percentage\\n    ) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - HALF_PERCENTAGE_FACTOR) / percentage\\n        assembly {\\n            if iszero(\\n                or(\\n                    iszero(percentage),\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(sub(not(0), HALF_PERCENTAGE_FACTOR), percentage)\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, percentage), HALF_PERCENTAGE_FACTOR),\\n                PERCENTAGE_FACTOR\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice Executes a percentage division\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param value The value of which the percentage needs to be calculated\\n     * @param percentage The percentage of the value to be calculated\\n     * @return result value percentdiv percentage\\n     */\\n    function percentDiv(\\n        uint256 value,\\n        uint256 percentage\\n    ) internal pure returns (uint256 result) {\\n        // to avoid overflow, value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR\\n        assembly {\\n            if or(\\n                iszero(percentage),\\n                iszero(\\n                    iszero(\\n                        gt(\\n                            value,\\n                            div(\\n                                sub(not(0), div(percentage, 2)),\\n                                PERCENTAGE_FACTOR\\n                            )\\n                        )\\n                    )\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            result := div(\\n                add(mul(value, PERCENTAGE_FACTOR), div(percentage, 2)),\\n                percentage\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xca74deb7d5b6cb30610f2c476c122c03b259a22e6a88ee30ed40bfd241d83d7a\",\"license\":\"BUSL-1.1\"},\"contracts/lending/core/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        //timestamp of last update\\n        uint40 lastUpdateTimestamp;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint16 id;\\n        //aToken address\\n        address aTokenAddress;\\n        //stableDebtToken address\\n        address stableDebtTokenAddress;\\n        //variableDebtToken address\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the current treasury balance, scaled\\n        uint128 accruedToTreasury;\\n        //the outstanding unbacked aTokens minted through the bridging feature\\n        uint128 unbacked;\\n        //the outstanding debt borrowed against this asset in isolation mode\\n        uint128 isolationModeTotalDebt;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60: asset is paused\\n        //bit 61: borrowing in isolation mode is enabled\\n        //bit 62: siloed borrowing enabled\\n        //bit 63: flashloaning enabled\\n        //bit 64-79: reserve factor\\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n        //bit 152-167 liquidation protocol fee\\n        //bit 168-175 eMode category\\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n        //bit 252-255 unused\\n\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        /**\\n         * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n         * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n         * asset is borrowed by the user.\\n         */\\n        uint256 data;\\n    }\\n\\n    struct EModeCategory {\\n        // each eMode category has a custom ltv and liquidation threshold\\n        uint16 ltv;\\n        uint16 liquidationThreshold;\\n        uint16 liquidationBonus;\\n        // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n        address priceSource;\\n        string label;\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n\\n    struct ReserveCache {\\n        uint256 currScaledVariableDebt;\\n        uint256 nextScaledVariableDebt;\\n        uint256 currPrincipalStableDebt;\\n        uint256 currAvgStableBorrowRate;\\n        uint256 currTotalStableDebt;\\n        uint256 nextAvgStableBorrowRate;\\n        uint256 nextTotalStableDebt;\\n        uint256 currLiquidityIndex;\\n        uint256 nextLiquidityIndex;\\n        uint256 currVariableBorrowIndex;\\n        uint256 nextVariableBorrowIndex;\\n        uint256 currLiquidityRate;\\n        uint256 currVariableBorrowRate;\\n        uint256 reserveFactor;\\n        ReserveConfigurationMap reserveConfiguration;\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        uint40 reserveLastUpdateTimestamp;\\n        uint40 stableDebtLastUpdateTimestamp;\\n    }\\n\\n    struct ExecuteLiquidationCallParams {\\n        uint256 reservesCount;\\n        uint256 debtToCover;\\n        address collateralAsset;\\n        address debtAsset;\\n        address user;\\n        bool receiveAToken;\\n        address priceOracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteSupplyParams {\\n        address asset;\\n        uint256 amount;\\n        address onBehalfOf;\\n        uint16 referralCode;\\n    }\\n\\n    struct ExecuteBorrowParams {\\n        address asset;\\n        address user;\\n        address onBehalfOf;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint16 referralCode;\\n        bool releaseUnderlying;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteRepayParams {\\n        address asset;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        address onBehalfOf;\\n        bool useATokens;\\n    }\\n\\n    struct ExecuteWithdrawParams {\\n        address asset;\\n        uint256 amount;\\n        address to;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ExecuteSetUserEModeParams {\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 categoryId;\\n    }\\n\\n    struct FinalizeTransferParams {\\n        address asset;\\n        address from;\\n        address to;\\n        uint256 amount;\\n        uint256 balanceFromBefore;\\n        uint256 balanceToBefore;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 fromEModeCategory;\\n    }\\n\\n    struct FlashloanParams {\\n        address receiverAddress;\\n        address[] assets;\\n        uint256[] amounts;\\n        uint256[] interestRateModes;\\n        address onBehalfOf;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address addressesProvider;\\n        uint8 userEModeCategory;\\n        bool isAuthorizedFlashBorrower;\\n    }\\n\\n    struct FlashloanSimpleParams {\\n        address receiverAddress;\\n        address asset;\\n        uint256 amount;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n    }\\n\\n    struct FlashLoanRepaymentParams {\\n        uint256 amount;\\n        uint256 totalPremium;\\n        uint256 flashLoanPremiumToProtocol;\\n        address asset;\\n        address receiverAddress;\\n        uint16 referralCode;\\n    }\\n\\n    struct CalculateUserAccountDataParams {\\n        UserConfigurationMap userConfig;\\n        uint256 reservesCount;\\n        address user;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ValidateBorrowParams {\\n        ReserveCache reserveCache;\\n        UserConfigurationMap userConfig;\\n        address asset;\\n        address userAddress;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint256 maxStableLoanPercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n        bool isolationModeActive;\\n        address isolationModeCollateralAddress;\\n        uint256 isolationModeDebtCeiling;\\n    }\\n\\n    struct ValidateLiquidationCallParams {\\n        ReserveCache debtReserveCache;\\n        uint256 totalDebt;\\n        uint256 healthFactor;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct CalculateInterestRatesParams {\\n        uint256 unbacked;\\n        uint256 liquidityAdded;\\n        uint256 liquidityTaken;\\n        uint256 totalStableDebt;\\n        uint256 totalVariableDebt;\\n        uint256 averageStableBorrowRate;\\n        uint256 reserveFactor;\\n        address reserve;\\n        address aToken;\\n    }\\n\\n    struct InitReserveParams {\\n        address asset;\\n        address aTokenAddress;\\n        address stableDebtAddress;\\n        address variableDebtAddress;\\n        address interestRateStrategyAddress;\\n        uint16 reservesCount;\\n        uint16 maxNumberReserves;\\n    }\\n}\\n\",\"keccak256\":\"0xb93629c45e8479d3297ce5adf5efb5e8bddedf4caf5c66c3459d595004d56088\",\"license\":\"BUSL-1.1\"},\"contracts/lending/periphery/adapters/curve/BaseCurveAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"contracts/lending/core/dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"contracts/lending/core/dependencies/openzeppelin/contracts/SafeERC20.sol\\\";\\nimport {IERC20Detailed} from \\\"contracts/lending/core/dependencies/openzeppelin/contracts/IERC20Detailed.sol\\\";\\nimport {IERC20WithPermit} from \\\"contracts/lending/core/interfaces/IERC20WithPermit.sol\\\";\\nimport {IPoolAddressesProvider} from \\\"contracts/lending/core/interfaces/IPoolAddressesProvider.sol\\\";\\nimport {IPool} from \\\"contracts/lending/core/interfaces/IPool.sol\\\";\\nimport {Ownable} from \\\"contracts/lending/core/dependencies/openzeppelin/contracts/Ownable.sol\\\";\\nimport {IBaseCurveAdapter} from \\\"./interfaces/IBaseCurveAdapter.sol\\\";\\n/**\\n * @title BaseCurveSwapAdapter\\n * @notice Utility functions for adapters using Curve\\n */\\nabstract contract BaseCurveSwapAdapter is Ownable, IBaseCurveAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    /* State Variables */\\n    /// The address of the Aave PoolAddressesProvider contract\\n    IPoolAddressesProvider public immutable ADDRESSES_PROVIDER;\\n\\n    /// The address of the Aave Pool contract\\n    IPool public immutable POOL;\\n\\n    /**\\n     * @dev Constructor\\n     * @param addressesProvider The address of the Aave PoolAddressesProvider contract\\n     * @param pool The address of the Aave Pool contract\\n     */\\n    constructor(IPoolAddressesProvider addressesProvider, address pool) {\\n        ADDRESSES_PROVIDER = addressesProvider;\\n        POOL = IPool(pool);\\n    }\\n\\n    /**\\n     * @dev Get the vToken, sToken and aToken associated to the asset\\n     * @param asset The address of the asset\\n     * @return address The address of the VariableDebtToken, vToken\\n     * @return address The address of the StableDebtToken, sToken\\n     * @return address The address of the aToken\\n     */\\n    function _getReserveData(\\n        address asset\\n    ) internal view virtual returns (address, address, address);\\n\\n    /**\\n     * @dev Supply an amount of asset to the Aave Pool\\n     * @param asset The address of the asset to be supplied\\n     * @param amount The amount of the asset to be supplied\\n     * @param to The address receiving the aTokens\\n     * @param referralCode The referral code to pass to Aave\\n     */\\n    function _supply(\\n        address asset,\\n        uint256 amount,\\n        address to,\\n        uint16 referralCode\\n    ) internal virtual;\\n\\n    /**\\n     * @dev Pull the ATokens from the user and withdraws the underlying asset from the Aave Pool\\n     * @param reserve The address of the asset\\n     * @param user The address of the user to pull aTokens from\\n     * @param amount The amount of tokens to be pulled and withdrawn\\n     * @param permitInput struct containing the permit signature\\n     */\\n    function _pullATokenAndWithdraw(\\n        address reserve,\\n        address user,\\n        uint256 amount,\\n        PermitInput memory permitInput\\n    ) internal returns (uint256) {\\n        // If deadline is set to zero, assume there is no signature for permit\\n        if (permitInput.deadline != 0) {\\n            permitInput.aToken.permit(\\n                user,\\n                address(this),\\n                permitInput.value,\\n                permitInput.deadline,\\n                permitInput.v,\\n                permitInput.r,\\n                permitInput.s\\n            );\\n        }\\n\\n        (, , address aToken) = _getReserveData(reserve);\\n\\n        uint256 aTokenBalanceBefore = IERC20(aToken).balanceOf(address(this));\\n        IERC20(aToken).safeTransferFrom(user, address(this), amount);\\n        uint256 aTokenBalanceDiff = IERC20(aToken).balanceOf(address(this)) -\\n            aTokenBalanceBefore;\\n\\n        POOL.withdraw(reserve, aTokenBalanceDiff, address(this));\\n        return aTokenBalanceDiff;\\n    }\\n\\n    /**\\n     * @dev Renews the asset allowance in case the current allowance is below a given threshold\\n     * @param asset The address of the asset\\n     * @param minAmount The minimum required allowance to the Aave Pool\\n     */\\n    function _conditionalRenewAllowance(\\n        address asset,\\n        uint256 minAmount\\n    ) internal {\\n        uint256 allowance = IERC20(asset).allowance(\\n            address(this),\\n            address(POOL)\\n        );\\n        if (allowance < minAmount) {\\n            IERC20(asset).safeApprove(address(POOL), 0);\\n            IERC20(asset).safeApprove(address(POOL), type(uint256).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Emergency rescue for token stucked on this contract, as failsafe mechanism\\n     * - Funds should never remain in this contract more time than during transactions\\n     * - Only callable by the owner\\n     */\\n    function rescueTokens(IERC20 token) external onlyOwner {\\n        token.safeTransfer(owner(), token.balanceOf(address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0x0d713a9ec0c409dd7d7da4d06a7c50b6578dbe982cb89e3da23783b7ccf4ec6d\",\"license\":\"AGPL-3.0\"},\"contracts/lending/periphery/adapters/curve/BaseCurveSellAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport {SafeERC20} from \\\"contracts/lending/core/dependencies/openzeppelin/contracts/SafeERC20.sol\\\";\\nimport {PercentageMath} from \\\"contracts/lending/core/protocol/libraries/math/PercentageMath.sol\\\";\\nimport {IPoolAddressesProvider} from \\\"contracts/lending/core/interfaces/IPoolAddressesProvider.sol\\\";\\nimport {IERC20Detailed} from \\\"contracts/lending/core/dependencies/openzeppelin/contracts/IERC20Detailed.sol\\\";\\nimport {ICurveRouterNgPoolsOnlyV1} from \\\"contracts/curve/interfaces/ICurveRouterNgPoolsOnlyV1.sol\\\";\\nimport {BaseCurveSwapAdapter} from \\\"./BaseCurveAdapter.sol\\\";\\n\\n/**\\n * @title BaseCurveSellAdapter\\n * @notice Implements the logic for selling tokens on Curve\\n */\\nabstract contract BaseCurveSellAdapter is BaseCurveSwapAdapter {\\n    using PercentageMath for uint256;\\n    using SafeERC20 for IERC20Detailed;\\n\\n    /// @notice The address of the Curve RouterNG\\n    ICurveRouterNgPoolsOnlyV1 public immutable swapRouter;\\n\\n    /**\\n     * @dev Constructor\\n     * @param addressesProvider The address of the Aave PoolAddressesProvider contract\\n     * @param pool The address of the Aave Pool contract\\n     * @param _swapRouter The address of the Curve RouterNG\\n     */\\n    constructor(\\n        IPoolAddressesProvider addressesProvider,\\n        address pool,\\n        ICurveRouterNgPoolsOnlyV1 _swapRouter\\n    ) BaseCurveSwapAdapter(addressesProvider, pool) {\\n        swapRouter = _swapRouter;\\n    }\\n\\n    /**\\n     * @dev Swaps a token for another using Curve RouterNG\\n     * @param assetToSwapFrom Address of the asset to be swapped from\\n     * @param assetToSwapTo Address of the asset to be swapped to\\n     * @param amountToSwap Amount to be swapped\\n     * @param minAmountToReceive Minimum amount to be received from the swap\\n     * @param route Multi-hop path of the swap\\n     * @param swapParams Swap parameters\\n     * @return amountReceived The amount received from the swap\\n     */\\n    function _sellOnCurve(\\n        IERC20Detailed assetToSwapFrom,\\n        IERC20Detailed assetToSwapTo,\\n        uint256 amountToSwap,\\n        uint256 minAmountToReceive,\\n        address[11] memory route,\\n        uint256[4][5] memory swapParams\\n    ) internal returns (uint256 amountReceived) {\\n        uint256 balanceBeforeAssetFrom = assetToSwapFrom.balanceOf(\\n            address(this)\\n        );\\n        if (balanceBeforeAssetFrom < amountToSwap) {\\n            revert InsufficientBalanceBeforeSwap(\\n                balanceBeforeAssetFrom,\\n                amountToSwap\\n            );\\n        }\\n\\n        address tokenIn = address(assetToSwapFrom);\\n        address tokenOut = address(assetToSwapTo);\\n\\n        // Approve the router to spend our tokens\\n        assetToSwapFrom.safeApprove(address(swapRouter), amountToSwap);\\n\\n        // Execute the swap\\n        amountReceived = swapRouter.exchange(\\n            route,\\n            swapParams,\\n            amountToSwap,\\n            minAmountToReceive,\\n            address(this)\\n        );\\n\\n        // Ensure we received the minimum expected amount\\n        if (amountReceived < minAmountToReceive) {\\n            revert InsufficientOutputAmount(amountReceived, minAmountToReceive);\\n        }\\n\\n        emit Bought(tokenIn, tokenOut, amountToSwap, amountReceived);\\n    }\\n}\\n\",\"keccak256\":\"0x94b787b306a9bf7265024768db4f3c50d5d81c6b5ef98d08fe55cbbf5171ad6a\",\"license\":\"AGPL-3.0\"},\"contracts/lending/periphery/adapters/curve/CurveLiquiditySwapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.10;\\n\\nimport {IERC20Detailed} from \\\"contracts/lending/core/dependencies/openzeppelin/contracts/IERC20Detailed.sol\\\";\\nimport {IPoolAddressesProvider} from \\\"contracts/lending/core/interfaces/IPoolAddressesProvider.sol\\\";\\nimport {SafeERC20} from \\\"contracts/lending/core/dependencies/openzeppelin/contracts/SafeERC20.sol\\\";\\nimport {BaseCurveSellAdapter} from \\\"./BaseCurveSellAdapter.sol\\\";\\nimport {ReentrancyGuard} from \\\"../../dependencies/openzeppelin/ReentrancyGuard.sol\\\";\\nimport {ICurveRouterNgPoolsOnlyV1} from \\\"contracts/curve/interfaces/ICurveRouterNgPoolsOnlyV1.sol\\\";\\nimport {DataTypes} from \\\"contracts/lending/core/protocol/libraries/types/DataTypes.sol\\\";\\nimport {IAaveFlashLoanReceiver} from \\\"./interfaces/IAaveFlashLoanReceiver.sol\\\";\\nimport {ICurveLiquiditySwapAdapter} from \\\"./interfaces/ICurveLiquiditySwapAdapter.sol\\\";\\nimport {IERC20} from \\\"contracts/lending/core/dependencies/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title CurveLiquiditySwapAdapter\\n * @notice Adapter to swap liquidity using Curve\\n */\\ncontract CurveLiquiditySwapAdapter is\\n    BaseCurveSellAdapter,\\n    ReentrancyGuard,\\n    IAaveFlashLoanReceiver,\\n    ICurveLiquiditySwapAdapter\\n{\\n    using SafeERC20 for IERC20;\\n\\n    // unique identifier to track usage via flashloan events\\n    uint16 public constant REFERRER = 43980; // uint16(uint256(keccak256(abi.encode('liquidity-swap-adapter'))) / type(uint16).max)\\n\\n    constructor(\\n        IPoolAddressesProvider addressesProvider,\\n        address pool,\\n        ICurveRouterNgPoolsOnlyV1 swapRouter,\\n        address owner\\n    ) BaseCurveSellAdapter(addressesProvider, pool, swapRouter) {\\n        transferOwnership(owner);\\n        // set initial approval for all reserves\\n        address[] memory reserves = POOL.getReservesList();\\n        for (uint256 i = 0; i < reserves.length; i++) {\\n            IERC20(reserves[i]).safeApprove(address(POOL), type(uint256).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Implementation of the reserve data getter from the base adapter\\n     * @param asset The address of the asset\\n     * @return The address of the vToken, sToken and aToken\\n     */\\n    function _getReserveData(\\n        address asset\\n    ) internal view override returns (address, address, address) {\\n        DataTypes.ReserveData memory reserveData = POOL.getReserveData(asset);\\n        return (\\n            reserveData.variableDebtTokenAddress,\\n            reserveData.stableDebtTokenAddress,\\n            reserveData.aTokenAddress\\n        );\\n    }\\n\\n    /**\\n     * @dev Implementation of the supply function from the base adapter\\n     * @param asset The address of the asset to be supplied\\n     * @param amount The amount of the asset to be supplied\\n     * @param to The address receiving the aTokens\\n     * @param referralCode The referral code to pass to Aave\\n     */\\n    function _supply(\\n        address asset,\\n        uint256 amount,\\n        address to,\\n        uint16 referralCode\\n    ) internal override {\\n        POOL.supply(asset, amount, to, referralCode);\\n    }\\n\\n    /// @inheritdoc ICurveLiquiditySwapAdapter\\n    function swapLiquidity(\\n        LiquiditySwapParams memory liquiditySwapParams,\\n        PermitInput memory collateralATokenPermit\\n    ) external nonReentrant {\\n        // true if flashloan is needed to swap liquidity\\n        if (!liquiditySwapParams.withFlashLoan) {\\n            _swapAndDeposit(liquiditySwapParams, collateralATokenPermit);\\n        } else {\\n            // flashloan of the current collateral asset\\n            _flash(liquiditySwapParams, collateralATokenPermit);\\n        }\\n    }\\n\\n    /**\\n     * @dev Executes the collateral swap after receiving the flash-borrowed assets\\n     * @dev Workflow:\\n     * 1. Sell flash-borrowed asset for new collateral asset\\n     * 2. Supply new collateral asset\\n     * 3. Pull aToken collateral from user and withdraw from Pool\\n     * 4. Repay flashloan\\n     * @param assets The addresses of the flash-borrowed assets\\n     * @param amounts The amounts of the flash-borrowed assets\\n     * @param premiums The premiums of the flash-borrowed assets\\n     * @param initiator The address of the flashloan initiator\\n     * @param params The byte-encoded params passed when initiating the flashloan\\n     * @return True if the execution of the operation succeeds, false otherwise\\n     */\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata params\\n    ) external returns (bool) {\\n        if (msg.sender != address(POOL)) {\\n            revert CallerMustBePool(msg.sender, address(POOL));\\n        }\\n        if (initiator != address(this)) {\\n            revert InitiatorMustBeThis(initiator, address(this));\\n        }\\n\\n        (\\n            LiquiditySwapParams memory liquiditySwapParams,\\n            PermitInput memory collateralATokenPermit\\n        ) = abi.decode(params, (LiquiditySwapParams, PermitInput));\\n\\n        address flashLoanAsset = assets[0];\\n        uint256 flashLoanAmount = amounts[0];\\n        uint256 flashLoanPremium = premiums[0];\\n\\n        // sell the flashLoanAmount minus the premium, so flashloan repayment is guaranteed\\n        // flashLoan premium stays in the contract\\n        uint256 amountReceived = _sellOnCurve(\\n            IERC20Detailed(flashLoanAsset),\\n            IERC20Detailed(liquiditySwapParams.newCollateralAsset),\\n            flashLoanAmount - flashLoanPremium,\\n            liquiditySwapParams.newCollateralAmount,\\n            liquiditySwapParams.route,\\n            liquiditySwapParams.swapParams\\n        );\\n\\n        // supplies the received asset(newCollateralAsset) from swap to Aave Pool\\n        _conditionalRenewAllowance(\\n            liquiditySwapParams.newCollateralAsset,\\n            amountReceived\\n        );\\n        _supply(\\n            liquiditySwapParams.newCollateralAsset,\\n            amountReceived,\\n            liquiditySwapParams.user,\\n            REFERRER\\n        );\\n\\n        // pulls flashLoanAmount amount of flash-borrowed asset from the user\\n        _pullATokenAndWithdraw(\\n            flashLoanAsset,\\n            liquiditySwapParams.user,\\n            flashLoanAmount,\\n            collateralATokenPermit\\n        );\\n\\n        // flashloan repayment\\n        _conditionalRenewAllowance(\\n            flashLoanAsset,\\n            flashLoanAmount + flashLoanPremium\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Swaps the collateral asset and supplies the received asset to the Aave Pool\\n     * @dev Workflow:\\n     * 1. Pull aToken collateral from user and withdraw from Pool\\n     * 2. Sell asset for new collateral asset\\n     * 3. Supply new collateral asset\\n     * @param liquiditySwapParams struct describing the liquidity swap\\n     * @param collateralATokenPermit Permit for aToken corresponding to old collateral asset from the user\\n     * @return The amount received from the swap of new collateral asset, that is now supplied to the Aave Pool\\n     */\\n    function _swapAndDeposit(\\n        LiquiditySwapParams memory liquiditySwapParams,\\n        PermitInput memory collateralATokenPermit\\n    ) internal returns (uint256) {\\n        uint256 collateralAmountReceived = _pullATokenAndWithdraw(\\n            liquiditySwapParams.collateralAsset,\\n            liquiditySwapParams.user,\\n            liquiditySwapParams.collateralAmountToSwap,\\n            collateralATokenPermit\\n        );\\n\\n        // sell(exact in) old collateral asset to new collateral asset\\n        uint256 amountReceived = _sellOnCurve(\\n            IERC20Detailed(liquiditySwapParams.collateralAsset),\\n            IERC20Detailed(liquiditySwapParams.newCollateralAsset),\\n            collateralAmountReceived,\\n            liquiditySwapParams.newCollateralAmount,\\n            liquiditySwapParams.route,\\n            liquiditySwapParams.swapParams\\n        );\\n\\n        // supply the received asset(newCollateralAsset) from swap to the Aave Pool\\n        _conditionalRenewAllowance(\\n            liquiditySwapParams.newCollateralAsset,\\n            amountReceived\\n        );\\n        _supply(\\n            liquiditySwapParams.newCollateralAsset,\\n            amountReceived,\\n            liquiditySwapParams.user,\\n            REFERRER\\n        );\\n\\n        return amountReceived;\\n    }\\n\\n    /**\\n     * @dev Triggers the flashloan passing encoded params for the collateral swap\\n     * @param liquiditySwapParams struct describing the liquidity swap\\n     * @param collateralATokenPermit optional permit for old collateral's aToken\\n     */\\n    function _flash(\\n        LiquiditySwapParams memory liquiditySwapParams,\\n        PermitInput memory collateralATokenPermit\\n    ) internal virtual {\\n        bytes memory params = abi.encode(\\n            liquiditySwapParams,\\n            collateralATokenPermit\\n        );\\n        address[] memory assets = new address[](1);\\n        assets[0] = liquiditySwapParams.collateralAsset;\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = liquiditySwapParams.collateralAmountToSwap;\\n        uint256[] memory interestRateModes = new uint256[](1);\\n        interestRateModes[0] = 0;\\n\\n        POOL.flashLoan(\\n            address(this),\\n            assets,\\n            amounts,\\n            interestRateModes,\\n            address(this),\\n            params,\\n            REFERRER\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5583947a7d60bb19b4ae99a87129a1a9dcf0801b764186897a6f5f96e71afe2a\",\"license\":\"AGPL-3.0\"},\"contracts/lending/periphery/adapters/curve/interfaces/IAaveFlashLoanReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IAaveFlashLoanReceiver\\n * @author Aave Labs\\n * @notice Defines the basic interface of an Aave flashloan-receiver contract.\\n * @dev Altered version of the official Aave Interface IFlashLoanReceiver, keeping the minimal functionality to receive the flashloan execution\\n **/\\ninterface IAaveFlashLoanReceiver {\\n    /**\\n     * @notice Executes an operation after receiving the flash-borrowed assets\\n     * @dev Ensure that the contract can return the debt + premium, e.g., has\\n     *      enough funds to repay and has approved the Pool to pull the total amount\\n     * @param assets The addresses of the flash-borrowed assets\\n     * @param amounts The amounts of the flash-borrowed assets\\n     * @param premiums The fee of each flash-borrowed asset\\n     * @param initiator The address of the flashloan initiator\\n     * @param params The byte-encoded params passed when initiating the flashloan\\n     * @return True if the execution of the operation succeeds, false otherwise\\n     */\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata params\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd8d5896c7cf0c266cadeaf31e85feca2192df486d22fd575219aeb5f353980d2\",\"license\":\"MIT\"},\"contracts/lending/periphery/adapters/curve/interfaces/IBaseCurveAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"contracts/lending/core/dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport {IERC20WithPermit} from \\\"contracts/lending/core/interfaces/IERC20WithPermit.sol\\\";\\n\\n/**\\n * @title IBaseCurveAdapter\\n * @notice Defines the basic interface of Curve adapter\\n * @dev Implement this interface to provide functionality of swapping one asset to another asset\\n **/\\ninterface IBaseCurveAdapter {\\n    /* Structs */\\n    struct PermitInput {\\n        IERC20WithPermit aToken; // the asset to give allowance for\\n        uint256 value; // the amount of asset for the allowance\\n        uint256 deadline; // expiration unix timestamp\\n        uint8 v; // sig v\\n        bytes32 r; // sig r\\n        bytes32 s; // sig s\\n    }\\n\\n    /* Events */\\n    /**\\n     * @dev Emitted after a sell of an asset is made\\n     * @param fromAsset The address of the asset sold\\n     * @param toAsset The address of the asset received in exchange\\n     * @param fromAmount The amount of asset sold\\n     * @param receivedAmount The amount received from the sell\\n     */\\n    event Swapped(\\n        address indexed fromAsset,\\n        address indexed toAsset,\\n        uint256 fromAmount,\\n        uint256 receivedAmount\\n    );\\n\\n    /**\\n     * @dev Emitted after a buy of an asset is made\\n     * @param fromAsset The address of the asset provided in exchange\\n     * @param toAsset The address of the asset bought\\n     * @param amountSold The amount of asset provided for the buy\\n     * @param receivedAmount The amount of asset bought\\n     */\\n    event Bought(\\n        address indexed fromAsset,\\n        address indexed toAsset,\\n        uint256 amountSold,\\n        uint256 receivedAmount\\n    );\\n\\n    /* Custom Errors */\\n    error InsufficientBalanceBeforeSwap(uint256 balance, uint256 required);\\n    error InsufficientOutputAmount(uint256 received, uint256 required);\\n    error CallerMustBePool(address caller, address pool);\\n    error InitiatorMustBeThis(address initiator, address expectedInitiator);\\n\\n    /**\\n     * @notice Emergency rescue for token stucked on this contract, as failsafe mechanism\\n     * @dev Funds should never remain in this contract more time than during transactions\\n     * @dev Only callable by the owner\\n     * @param token The address of the stucked token to rescue\\n     */\\n    function rescueTokens(IERC20 token) external;\\n}\\n\",\"keccak256\":\"0x20906889a7f7e769036af2bec496c8b556891c57c797e2eb37e29dc3e8c2c276\",\"license\":\"MIT\"},\"contracts/lending/periphery/adapters/curve/interfaces/ICurveLiquiditySwapAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {IBaseCurveAdapter} from \\\"./IBaseCurveAdapter.sol\\\";\\n\\n/**\\n * @title ICurveLiquiditySwapAdapter\\n * @notice Defines the basic interface for CurveLiquiditySwapAdapter\\n * @dev Implement this interface to provide functionality of swapping one collateral asset to another collateral asset\\n **/\\ninterface ICurveLiquiditySwapAdapter is IBaseCurveAdapter {\\n    struct LiquiditySwapParams {\\n        address collateralAsset; // the asset to swap collateral from\\n        uint256 collateralAmountToSwap; // the amount of asset to swap from\\n        address newCollateralAsset; // the asset to swap collateral to\\n        uint256 newCollateralAmount; // the minimum amount of new collateral asset to receive\\n        address user; // the address of user\\n        bool withFlashLoan; // true if flashloan is needed to swap collateral, otherwise false\\n        address[11] route; // the route to swap the collateral asset to the debt asset on Curve\\n        uint256[4][5] swapParams; // the swap parameters on Curve\\n    }\\n\\n    /**\\n     * @notice Swaps liquidity(collateral) from one asset to another\\n     * @param liquiditySwapParams struct describing the liquidity swap\\n     * @param collateralATokenPermit optional permit for collateral aToken\\n     */\\n    function swapLiquidity(\\n        LiquiditySwapParams memory liquiditySwapParams,\\n        PermitInput memory collateralATokenPermit\\n    ) external;\\n}\\n\",\"keccak256\":\"0x42ef8571f23b716a87a2555b9774c7a7477e823bf7f89b1964acdb6d89d612a7\",\"license\":\"MIT\"},\"contracts/lending/periphery/dependencies/openzeppelin/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x391e297dd61f5f0e84545f9ad0174b81765403219c4b8012982383754e317308\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c908162ae3bf8146100b9575080630542975c146100b4578063715018a6146100af5780637535d246146100aa5780638da5cb5b146100a5578063920f5c84146100a0578063c05603741461009b578063c31c9c0714610096578063e1722943146100915763f2fde38b1461008c57600080fd5b610adf565b610964565b610439565b61041c565b61036a565b6102b0565b61026b565b61020e565b6101c9565b346101a55760203660031901126101a55760246004356100d8816101a8565b82546001600160a01b0390811691906020906100f5338514610bbe565b6040516370a0823160e01b8152306004820152948591829085165afa9182156101a05761016893859361016b575b5060405163a9059cbb60e01b60208201526001600160a01b039091166024820152604481019290925261016382606481015b03601f198101845283610519565b6116c9565b80f35b6101639193506101929060203d602011610199575b61018a8183610519565b810190610c09565b9290610123565b503d610180565b610c18565b80fd5b6001600160a01b038116036101b957565b600080fd5b60009103126101b957565b346101b95760003660031901126101b9576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346101b9576000806003193601126101a5578054816001600160a01b038216610238338214610bbe565b7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a36001600160a01b031916815580f35b346101b95760003660031901126101b9576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346101b95760003660031901126101b9576000546040516001600160a01b039091168152602090f35b9181601f840112156101b9578235916001600160401b0383116101b9576020808501948460051b0101116101b957565b60043590610316826101a8565b565b60443590610316826101a8565b60843590610316826101a8565b3590610316826101a8565b9181601f840112156101b9578235916001600160401b0383116101b957602083818601950101116101b957565b346101b95760a03660031901126101b9576001600160401b036004358181116101b95761039b9036906004016102d9565b6024929192358281116101b9576103b69036906004016102d9565b6044949194358481116101b9576103d19036906004016102d9565b90606435926103df846101a8565b6084359687116101b957610418976103fe61040698369060040161033d565b979096610c87565b60405190151581529081906020820190565b0390f35b346101b95760003660031901126101b957602060405161abcc8152f35b346101b95760003660031901126101b9576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b634e487b7160e01b600052604160045260246000fd5b6001600160401b0381116104a757604052565b61047e565b61016081019081106001600160401b038211176104a757604052565b60a081019081106001600160401b038211176104a757604052565b608081019081106001600160401b038211176104a757604052565b604081019081106001600160401b038211176104a757604052565b90601f801991011681019081106001600160401b038211176104a757604052565b6040519061010082018281106001600160401b038211176104a757604052565b604051906101e082018281106001600160401b038211176104a757604052565b801515036101b957565b60a435906103168261057a565b35906103168261057a565b8060e312156101b957604051906105b2826104ac565b816102249182116101b95760c4905b8282106105ce5750505090565b6020809183356105dd816101a8565b8152019101906105c1565b9080601f830112156101b95760405191610601836104ac565b829061016081019283116101b957905b82821061061e5750505090565b60208091833561062d816101a8565b815201910190610611565b8061024312156101b95760409060405191610652836104c8565b826104a4918383116101b957610224915b83831061067257505050505090565b84601f840112156101b9578151610688816104e3565b80608085018781116101b95785915b8183106106b257505050816020916080935201920191610663565b8235815260209283019201610697565b90601f9181601f820112156101b957604092604051936106e1856104c8565b84916102808401938585116101b957925b8484106107025750505050505090565b8582850112156101b9578251610717816104e3565b80608086018881116101b95786915b818310610741575050508160209160809352019301926106f2565b8235815260209283019201610726565b60c0906104a31901126101b9576040519060c082018281106001600160401b038211176104a757604052816104a435610789816101a8565b81526104c43560208201526104e43560408201526105043560ff811681036101b957606082015261052435608082015260a061054435910152565b91908260c09103126101b95760405160c081018181106001600160401b038211176104a757604052809280356107f9816101a8565b82526020810135602083015260408101356040830152606081013560ff811681036101b95760a09182916060850152608081013560808501520135910152565b90600319820161056081126101b9576104a0136101b9576108be61085b61053a565b610863610309565b81526024356020820152610875610318565b6040820152606435606082015261088a610325565b6080820152610897610584565b60a08201526108a58461059c565b60c08201526108b384610638565b60e082015292610751565b90565b91908281039061056082126101b9576104a08092126101b9576108be916108e661053a565b6108ef86610332565b81526020860135602082015261090760408701610332565b60408201526060860135606082015261092260808701610332565b608082015261093360a08701610591565b60a08201526109458360c088016105e8565b60c08201526109588361022088016106c2565b60e082015294016107c4565b346101b95761097236610839565b90600260015414610a9a57600260015560a08101516109a25790610995916115e7565b505b6109a060018055565b005b6109b96101559260405193849184602084016113da565b6109c161149c565b81516109e8906001600160a01b03166109d9836114b6565b6001600160a01b039091169052565b60206109f261149c565b9201516109fe836114b6565b52610a0761149c565b6000610a12826114b6565b527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690813b156101b95760008094610a6c6040519788968795869463ab9c4b5d60e01b865230923060048801611537565b03925af180156101a057610a81575b50610997565b80610a8e610a9492610494565b806101be565b38610a7b565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b346101b95760203660031901126101b957600435610afc816101a8565b6000546001600160a01b039081169190610b17338414610bbe565b81168015610b6a576109a0927f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a360018060a01b03166bffffffffffffffffffffffff60a01b6000541617600055565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b15610bc557565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b908160209103126101b9575190565b6040513d6000823e3d90fd5b634e487b7160e01b600052603260045260246000fd5b9015610c435790565b610c24565b356108be816101a8565b634e487b7160e01b600052601160045260246000fd5b91908203918211610c7557565b610c52565b91908201809211610c7557565b9690949592919760018060a01b0393847f000000000000000000000000000000000000000000000000000000000000000016803303610de957503085821603610dbc5750610dab93610d82610d17610d0e610db79c9b9996610d08610d03610cfb89610db19f9d9a99610da59a01906108c1565b9a909d610c3a565b610c48565b9c610c3a565b35978895610c3a565b35976080610d8f610d698d60408501968d610d51610d4a610d3e8b5160018060a01b031690565b6001600160a01b031690565b918c610c68565b60608801519160c08901519360e08a01519516610ecf565b8551909590610d829087906001600160a01b0316611040565b516001600160a01b031690565b910180519093906001600160a01b031691611106565b87611188565b50610c7a565b90611040565b600190565b60405163fdbc12a560e01b81526001600160a01b03919091166004820152306024820152604490fd5b0390fd5b6040516303c3463f60e31b81523360048201526001600160a01b03919091166024820152604490fd5b906000916000915b60058310610e285750505050565b815184825b60048210610e4b575050506020608060019201920192019190610e1a565b600190835181526020809101930191019091610e2d565b9391959492909561044085019685906000915b600b8310610eaf5750505090610e95610420949392610160870190610e12565b6103e08501526104008401526001600160a01b0316910152565b81516001600160a01b031681526001929092019160209182019101610e75565b6040516370a0823160e01b815230600482015293969592946001600160a01b0391821694919360209283816024818a5afa9081156101a057600091611023575b508781106110025750888391886000887f00000000000000000000000000000000000000000000000000000000000000001692610f4d83858d6118a4565b610f6f60405197889687958694633f51256760e21b8652309360048701610e62565b03925af19182156101a057600092610fe5575b50508096808210610fc657506040805195865260208601919091529116927fbf77fd13a39d14dc0da779342c14105c38d9a5d0c60f2caa22f5fd1d5525416d9190a3565b60405163d28d3eb560e01b815260048101929092526024820152604490fd5b610ffb9250803d106101995761018a8183610519565b3880610f82565b60405163b6554a4960e01b8152600481019190915260248101889052604490fd5b61103a9150843d86116101995761018a8183610519565b38610f0f565b604051636eb1769f60e11b81523060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830181905292169290602081604481875afa9081156101a0576000916110e7575b50106110ab575050565b610316916110e260405163095ea7b360e01b602082015283602482015260006044820152604481526110dc816104e3565b826116c9565b611809565b611100915060203d6020116101995761018a8183610519565b386110a1565b9091906001600160a01b03907f0000000000000000000000000000000000000000000000000000000000000000821690813b156101b9576000608492848296604051988997889663617ba03760e01b8852166004870152602486015216604484015261abcc60648401525af180156101a05761117f5750565b61031690610494565b926040810151806112f1575b505061119f836119e8565b6040516370a0823160e01b8082523060048301526020966001600160a01b0393841696955092935090918683602481895afa9485156101a05787936000966112cc575b50906111f091309088611bc1565b60405190815230600482015293849060249082905afa9081156101a05761122685936112609360009687916112af575b50610c68565b604051631a4ca37b60e21b81526001600160a01b039097166004880152602487018190523060448801529593849283919082906064820190565b03927f0000000000000000000000000000000000000000000000000000000000000000165af180156101a05761129557505090565b816112ab92903d106101995761018a8183610519565b5090565b6112c69150863d88116101995761018a8183610519565b38611220565b6111f0929196506112e990853d87116101995761018a8183610519565b9590916111e2565b8151611305906001600160a01b0316610d3e565b9060208301519161131a606085015160ff1690565b9160a06080860151950151823b156101b95760405163d505accf60e01b81526001600160a01b03881660048201523060248201526044810195909552606485019190915260ff92909216608484015260a483019390935260c482015290600090829060e490829084905af180156101a057611396575b80611194565b80610a8e6113a392610494565b38611390565b6000915b600b83106113ba57505050565b81516001600160a01b0316815260019290920191602091820191016113ad565b916104a061031692949361145960e061056083019760018060a01b038082511685526020820151602086015280604083015116604086015260608201516060860152608082015116608085015261143a60a082015160a086019015159052565b61144c60c082015160c08601906113a9565b0151610220830190610e12565b019060a08091600180831b038151168452602081015160208501526040810151604085015260ff6060820151166060850152608081015160808501520151910152565b604051906114a9826104fe565b6001825260203681840137565b805115610c435760200190565b90815180825260208080930193019160005b8281106114e3575050505090565b8351855293810193928101926001016114d5565b919082519283825260005b848110611523575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611502565b969593929060e0880160018060a01b038092168952602060e060208b0152845180925260206101008b019501926000905b8382106115ce575050505050926115b86115a66115c5946115988560c0988c6040816103169d9a039101526114c3565b908a820360608c01526114c3565b6001600160a01b039093166080890152565b86820360a08801526114f7565b930161abcc9052565b8451811687529582019593820193600190910190611568565b906108be9060018060a01b03928361163a6116148284511694608085019584875116602087015191611188565b9282815116906040810194848651169060608301519160e060c085015194015194610ecf565b948261164a878381965116611040565b511692511691611106565b908160209103126101b957516108be8161057a565b1561167157565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b6040516001600160a01b0391909116916116e2826104fe565b6020928383527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656484840152803b1561175957600082819282876117349796519301915af161172e611c03565b90611c42565b8051908161174157505050565b8261031693611754938301019101611655565b61166a565b60405162461bcd60e51b815260048101859052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b156117a557565b60405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608490fd5b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152909291906020846044818585165afa9384156101a0576103169461185991600091611885575b501561179e565b6040519263095ea7b360e01b6020850152166024830152600019604483015260448252610163826104e3565b61189e915060203d6020116101995761018a8183610519565b38611852565b919091811580156118f2575b610316936118c06101639261179e565b60405163095ea7b360e01b60208201526001600160a01b03909116602482015260448101939093528260648101610155565b50604051636eb1769f60e11b81523060048201526001600160a01b038416602482015292602084806044810103816001600160a01b0386165afa9081156101a0576118c06101639261031696600091611952575b501592505093506118b0565b61196b915060203d6020116101995761018a8183610519565b38611946565b91908260209103126101b957604051602081018181106001600160401b038211176104a75760405291518252565b51906fffffffffffffffffffffffffffffffff821682036101b957565b519064ffffffffff821682036101b957565b519061ffff821682036101b957565b5190610316826101a8565b6040516335ea6a7560e01b81526001600160a01b03918216600482015291906101e0908190849060249082907f0000000000000000000000000000000000000000000000000000000000000000165afa9283156101a057600093611a87575b50506101408201516001600160a01b0316610120830151909190611a8190610100906001600160a01b03169401516001600160a01b031690565b91929190565b909192823d8411611bba575b611a9d8184610519565b820192828403126101a55750611abb611ab461055a565b9282611971565b8252611ac96020820161199f565b6020830152611ada6040820161199f565b6040830152611aeb6060820161199f565b6060830152611afc6080820161199f565b6080830152611b0d60a0820161199f565b60a0830152611b1e60c082016119bc565b60c0830152611b2f60e082016119ce565b60e0830152610100611b428183016119dd565b90830152610120611b548183016119dd565b90830152610140611b668183016119dd565b90830152610160611b788183016119dd565b90830152610180611b8a81830161199f565b908301526101a0611b9c81830161199f565b90830152611bae6101c080920161199f565b90820152903880611a47565b503d611a93565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815261031691610163826104c8565b3d15611c3d573d906001600160401b0382116104a75760405191611c31601f8201601f191660200184610519565b82523d6000602084013e565b606090565b90919015611c4e575090565b815115611c5e5750805190602001fd5b60405162461bcd60e51b815260206004820152908190610de59060248301906114f756fea2646970667358221220e7fe9a4aeeb3fa55f6d3ad50f6a73279dcbbcffcd427ce44dcd81edf9f695aea64736f6c63430008180033",
  "devdoc": {
    "events": {
      "Bought(address,address,uint256,uint256)": {
        "details": "Emitted after a buy of an asset is made",
        "params": {
          "amountSold": "The amount of asset provided for the buy",
          "fromAsset": "The address of the asset provided in exchange",
          "receivedAmount": "The amount of asset bought",
          "toAsset": "The address of the asset bought"
        }
      },
      "Swapped(address,address,uint256,uint256)": {
        "details": "Emitted after a sell of an asset is made",
        "params": {
          "fromAmount": "The amount of asset sold",
          "fromAsset": "The address of the asset sold",
          "receivedAmount": "The amount received from the sell",
          "toAsset": "The address of the asset received in exchange"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "executeOperation(address[],uint256[],uint256[],address,bytes)": {
        "details": "Executes the collateral swap after receiving the flash-borrowed assetsWorkflow: 1. Sell flash-borrowed asset for new collateral asset 2. Supply new collateral asset 3. Pull aToken collateral from user and withdraw from Pool 4. Repay flashloan",
        "params": {
          "amounts": "The amounts of the flash-borrowed assets",
          "assets": "The addresses of the flash-borrowed assets",
          "initiator": "The address of the flashloan initiator",
          "params": "The byte-encoded params passed when initiating the flashloan",
          "premiums": "The premiums of the flash-borrowed assets"
        },
        "returns": {
          "_0": "True if the execution of the operation succeeds, false otherwise"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rescueTokens(address)": {
        "details": "Emergency rescue for token stucked on this contract, as failsafe mechanism - Funds should never remain in this contract more time than during transactions - Only callable by the owner"
      },
      "swapLiquidity((address,uint256,address,uint256,address,bool,address[11],uint256[4][5]),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "params": {
          "collateralATokenPermit": "optional permit for collateral aToken",
          "liquiditySwapParams": "struct describing the liquidity swap"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "CurveLiquiditySwapAdapter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "ADDRESSES_PROVIDER()": {
        "notice": "The address of the Aave PoolAddressesProvider contract"
      },
      "POOL()": {
        "notice": "The address of the Aave Pool contract"
      },
      "swapLiquidity((address,uint256,address,uint256,address,bool,address[11],uint256[4][5]),(address,uint256,uint256,uint8,bytes32,bytes32))": {
        "notice": "Swaps liquidity(collateral) from one asset to another"
      },
      "swapRouter()": {
        "notice": "The address of the Curve RouterNG"
      }
    },
    "notice": "Adapter to swap liquidity using Curve",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 533,
        "contract": "contracts/lending/periphery/adapters/curve/CurveLiquiditySwapAdapter.sol:CurveLiquiditySwapAdapter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5136,
        "contract": "contracts/lending/periphery/adapters/curve/CurveLiquiditySwapAdapter.sol:CurveLiquiditySwapAdapter",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}