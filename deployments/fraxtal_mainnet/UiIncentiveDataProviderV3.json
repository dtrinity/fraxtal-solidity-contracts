{
  "address": "0x21bD81b33D4B04B94bd30C6f015484E830b68830",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPoolAddressesProvider",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getFullReservesIncentiveData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "incentiveControllerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "rewardTokenSymbol",
                      "type": "string"
                    },
                    {
                      "internalType": "address",
                      "name": "rewardTokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "rewardOracleAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "emissionPerSecond",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "incentivesLastUpdateTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenIncentivesIndex",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "emissionEndTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "int256",
                      "name": "rewardPriceFeed",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint8",
                      "name": "rewardTokenDecimals",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "precision",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "priceFeedDecimals",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IUiIncentiveDataProviderV3.RewardInfo[]",
                  "name": "rewardsTokenInformation",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IUiIncentiveDataProviderV3.IncentiveData",
              "name": "aIncentiveData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "incentiveControllerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "rewardTokenSymbol",
                      "type": "string"
                    },
                    {
                      "internalType": "address",
                      "name": "rewardTokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "rewardOracleAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "emissionPerSecond",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "incentivesLastUpdateTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenIncentivesIndex",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "emissionEndTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "int256",
                      "name": "rewardPriceFeed",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint8",
                      "name": "rewardTokenDecimals",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "precision",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "priceFeedDecimals",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IUiIncentiveDataProviderV3.RewardInfo[]",
                  "name": "rewardsTokenInformation",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IUiIncentiveDataProviderV3.IncentiveData",
              "name": "vIncentiveData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "incentiveControllerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "rewardTokenSymbol",
                      "type": "string"
                    },
                    {
                      "internalType": "address",
                      "name": "rewardTokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "rewardOracleAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "emissionPerSecond",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "incentivesLastUpdateTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenIncentivesIndex",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "emissionEndTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "int256",
                      "name": "rewardPriceFeed",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint8",
                      "name": "rewardTokenDecimals",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "precision",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "priceFeedDecimals",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IUiIncentiveDataProviderV3.RewardInfo[]",
                  "name": "rewardsTokenInformation",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IUiIncentiveDataProviderV3.IncentiveData",
              "name": "sIncentiveData",
              "type": "tuple"
            }
          ],
          "internalType": "struct IUiIncentiveDataProviderV3.AggregatedReserveIncentiveData[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "incentiveControllerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "rewardTokenSymbol",
                      "type": "string"
                    },
                    {
                      "internalType": "address",
                      "name": "rewardOracleAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "rewardTokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "userUnclaimedRewards",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenIncentivesUserIndex",
                      "type": "uint256"
                    },
                    {
                      "internalType": "int256",
                      "name": "rewardPriceFeed",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint8",
                      "name": "priceFeedDecimals",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "rewardTokenDecimals",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IUiIncentiveDataProviderV3.UserRewardInfo[]",
                  "name": "userRewardsInformation",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IUiIncentiveDataProviderV3.UserIncentiveData",
              "name": "aTokenIncentivesUserData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "incentiveControllerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "rewardTokenSymbol",
                      "type": "string"
                    },
                    {
                      "internalType": "address",
                      "name": "rewardOracleAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "rewardTokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "userUnclaimedRewards",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenIncentivesUserIndex",
                      "type": "uint256"
                    },
                    {
                      "internalType": "int256",
                      "name": "rewardPriceFeed",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint8",
                      "name": "priceFeedDecimals",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "rewardTokenDecimals",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IUiIncentiveDataProviderV3.UserRewardInfo[]",
                  "name": "userRewardsInformation",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IUiIncentiveDataProviderV3.UserIncentiveData",
              "name": "vTokenIncentivesUserData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "incentiveControllerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "rewardTokenSymbol",
                      "type": "string"
                    },
                    {
                      "internalType": "address",
                      "name": "rewardOracleAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "rewardTokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "userUnclaimedRewards",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenIncentivesUserIndex",
                      "type": "uint256"
                    },
                    {
                      "internalType": "int256",
                      "name": "rewardPriceFeed",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint8",
                      "name": "priceFeedDecimals",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "rewardTokenDecimals",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IUiIncentiveDataProviderV3.UserRewardInfo[]",
                  "name": "userRewardsInformation",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IUiIncentiveDataProviderV3.UserIncentiveData",
              "name": "sTokenIncentivesUserData",
              "type": "tuple"
            }
          ],
          "internalType": "struct IUiIncentiveDataProviderV3.UserReserveIncentiveData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPoolAddressesProvider",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "getReservesIncentivesData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "incentiveControllerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "rewardTokenSymbol",
                      "type": "string"
                    },
                    {
                      "internalType": "address",
                      "name": "rewardTokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "rewardOracleAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "emissionPerSecond",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "incentivesLastUpdateTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenIncentivesIndex",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "emissionEndTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "int256",
                      "name": "rewardPriceFeed",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint8",
                      "name": "rewardTokenDecimals",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "precision",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "priceFeedDecimals",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IUiIncentiveDataProviderV3.RewardInfo[]",
                  "name": "rewardsTokenInformation",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IUiIncentiveDataProviderV3.IncentiveData",
              "name": "aIncentiveData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "incentiveControllerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "rewardTokenSymbol",
                      "type": "string"
                    },
                    {
                      "internalType": "address",
                      "name": "rewardTokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "rewardOracleAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "emissionPerSecond",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "incentivesLastUpdateTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenIncentivesIndex",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "emissionEndTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "int256",
                      "name": "rewardPriceFeed",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint8",
                      "name": "rewardTokenDecimals",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "precision",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "priceFeedDecimals",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IUiIncentiveDataProviderV3.RewardInfo[]",
                  "name": "rewardsTokenInformation",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IUiIncentiveDataProviderV3.IncentiveData",
              "name": "vIncentiveData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "incentiveControllerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "rewardTokenSymbol",
                      "type": "string"
                    },
                    {
                      "internalType": "address",
                      "name": "rewardTokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "rewardOracleAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "emissionPerSecond",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "incentivesLastUpdateTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenIncentivesIndex",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "emissionEndTimestamp",
                      "type": "uint256"
                    },
                    {
                      "internalType": "int256",
                      "name": "rewardPriceFeed",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint8",
                      "name": "rewardTokenDecimals",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "precision",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "priceFeedDecimals",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IUiIncentiveDataProviderV3.RewardInfo[]",
                  "name": "rewardsTokenInformation",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IUiIncentiveDataProviderV3.IncentiveData",
              "name": "sIncentiveData",
              "type": "tuple"
            }
          ],
          "internalType": "struct IUiIncentiveDataProviderV3.AggregatedReserveIncentiveData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPoolAddressesProvider",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserReservesIncentivesData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "incentiveControllerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "rewardTokenSymbol",
                      "type": "string"
                    },
                    {
                      "internalType": "address",
                      "name": "rewardOracleAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "rewardTokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "userUnclaimedRewards",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenIncentivesUserIndex",
                      "type": "uint256"
                    },
                    {
                      "internalType": "int256",
                      "name": "rewardPriceFeed",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint8",
                      "name": "priceFeedDecimals",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "rewardTokenDecimals",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IUiIncentiveDataProviderV3.UserRewardInfo[]",
                  "name": "userRewardsInformation",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IUiIncentiveDataProviderV3.UserIncentiveData",
              "name": "aTokenIncentivesUserData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "incentiveControllerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "rewardTokenSymbol",
                      "type": "string"
                    },
                    {
                      "internalType": "address",
                      "name": "rewardOracleAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "rewardTokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "userUnclaimedRewards",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenIncentivesUserIndex",
                      "type": "uint256"
                    },
                    {
                      "internalType": "int256",
                      "name": "rewardPriceFeed",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint8",
                      "name": "priceFeedDecimals",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "rewardTokenDecimals",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IUiIncentiveDataProviderV3.UserRewardInfo[]",
                  "name": "userRewardsInformation",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IUiIncentiveDataProviderV3.UserIncentiveData",
              "name": "vTokenIncentivesUserData",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "incentiveControllerAddress",
                  "type": "address"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "rewardTokenSymbol",
                      "type": "string"
                    },
                    {
                      "internalType": "address",
                      "name": "rewardOracleAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "rewardTokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "userUnclaimedRewards",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "tokenIncentivesUserIndex",
                      "type": "uint256"
                    },
                    {
                      "internalType": "int256",
                      "name": "rewardPriceFeed",
                      "type": "int256"
                    },
                    {
                      "internalType": "uint8",
                      "name": "priceFeedDecimals",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint8",
                      "name": "rewardTokenDecimals",
                      "type": "uint8"
                    }
                  ],
                  "internalType": "struct IUiIncentiveDataProviderV3.UserRewardInfo[]",
                  "name": "userRewardsInformation",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IUiIncentiveDataProviderV3.UserIncentiveData",
              "name": "sTokenIncentivesUserData",
              "type": "tuple"
            }
          ],
          "internalType": "struct IUiIncentiveDataProviderV3.UserReserveIncentiveData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1890621d0a675a76b5734f1eb8b1220793b47c3fe23ca73ae863eaab1085a787",
  "receipt": {
    "to": null,
    "from": "0x0f5e3D9AEe7Ab5fDa909Af1ef147D98a7f4B3022",
    "contractAddress": "0x21bD81b33D4B04B94bd30C6f015484E830b68830",
    "transactionIndex": 1,
    "gasUsed": "2426891",
    "logsBloom": "0x
    "blockHash": "0x43e507a75ddfb8945f62c5795488fca503f9dc8911d41b162c421e28bbcce715",
    "transactionHash": "0x1890621d0a675a76b5734f1eb8b1220793b47c3fe23ca73ae863eaab1085a787",
    "logs": [],
    "blockNumber": 12854605,
    "cumulativeGasUsed": "2472972",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8ed37bb5fee79f55dbb8814c36c24c8d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getFullReservesIncentiveData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentiveControllerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"rewardTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardOracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"emissionPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incentivesLastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIncentivesIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emissionEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardPriceFeed\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"rewardTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"precision\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"priceFeedDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.RewardInfo[]\",\"name\":\"rewardsTokenInformation\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.IncentiveData\",\"name\":\"aIncentiveData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentiveControllerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"rewardTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardOracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"emissionPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incentivesLastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIncentivesIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emissionEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardPriceFeed\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"rewardTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"precision\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"priceFeedDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.RewardInfo[]\",\"name\":\"rewardsTokenInformation\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.IncentiveData\",\"name\":\"vIncentiveData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentiveControllerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"rewardTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardOracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"emissionPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incentivesLastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIncentivesIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emissionEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardPriceFeed\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"rewardTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"precision\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"priceFeedDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.RewardInfo[]\",\"name\":\"rewardsTokenInformation\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.IncentiveData\",\"name\":\"sIncentiveData\",\"type\":\"tuple\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.AggregatedReserveIncentiveData[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentiveControllerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"rewardTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"rewardOracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userUnclaimedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIncentivesUserIndex\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardPriceFeed\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"priceFeedDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rewardTokenDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.UserRewardInfo[]\",\"name\":\"userRewardsInformation\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.UserIncentiveData\",\"name\":\"aTokenIncentivesUserData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentiveControllerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"rewardTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"rewardOracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userUnclaimedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIncentivesUserIndex\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardPriceFeed\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"priceFeedDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rewardTokenDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.UserRewardInfo[]\",\"name\":\"userRewardsInformation\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.UserIncentiveData\",\"name\":\"vTokenIncentivesUserData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentiveControllerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"rewardTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"rewardOracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userUnclaimedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIncentivesUserIndex\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardPriceFeed\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"priceFeedDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rewardTokenDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.UserRewardInfo[]\",\"name\":\"userRewardsInformation\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.UserIncentiveData\",\"name\":\"sTokenIncentivesUserData\",\"type\":\"tuple\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.UserReserveIncentiveData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"getReservesIncentivesData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentiveControllerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"rewardTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardOracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"emissionPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incentivesLastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIncentivesIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emissionEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardPriceFeed\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"rewardTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"precision\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"priceFeedDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.RewardInfo[]\",\"name\":\"rewardsTokenInformation\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.IncentiveData\",\"name\":\"aIncentiveData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentiveControllerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"rewardTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardOracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"emissionPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incentivesLastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIncentivesIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emissionEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardPriceFeed\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"rewardTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"precision\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"priceFeedDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.RewardInfo[]\",\"name\":\"rewardsTokenInformation\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.IncentiveData\",\"name\":\"vIncentiveData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentiveControllerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"rewardTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardOracleAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"emissionPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"incentivesLastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIncentivesIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emissionEndTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardPriceFeed\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"rewardTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"precision\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"priceFeedDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.RewardInfo[]\",\"name\":\"rewardsTokenInformation\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.IncentiveData\",\"name\":\"sIncentiveData\",\"type\":\"tuple\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.AggregatedReserveIncentiveData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserReservesIncentivesData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentiveControllerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"rewardTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"rewardOracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userUnclaimedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIncentivesUserIndex\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardPriceFeed\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"priceFeedDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rewardTokenDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.UserRewardInfo[]\",\"name\":\"userRewardsInformation\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.UserIncentiveData\",\"name\":\"aTokenIncentivesUserData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentiveControllerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"rewardTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"rewardOracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userUnclaimedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIncentivesUserIndex\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardPriceFeed\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"priceFeedDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rewardTokenDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.UserRewardInfo[]\",\"name\":\"userRewardsInformation\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.UserIncentiveData\",\"name\":\"vTokenIncentivesUserData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"incentiveControllerAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"rewardTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"rewardOracleAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userUnclaimedRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIncentivesUserIndex\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardPriceFeed\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"priceFeedDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rewardTokenDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.UserRewardInfo[]\",\"name\":\"userRewardsInformation\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.UserIncentiveData\",\"name\":\"sTokenIncentivesUserData\",\"type\":\"tuple\"}],\"internalType\":\"struct IUiIncentiveDataProviderV3.UserReserveIncentiveData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lending/periphery/misc/UiIncentiveDataProviderV3.sol\":\"UiIncentiveDataProviderV3\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/lending/core/dependencies/openzeppelin/contracts/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x561af518dd6d4dd566cd8a21e62337a53bd155bfe751e368089fda5c13bddb19\",\"license\":\"MIT\"},\"contracts/lending/core/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x72f14adac771243499fbb4d00a0a0841be06922b86b2dd5f9db14460d9c455e8\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/dependencies/openzeppelin/contracts/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\n\\ninterface IERC20Detailed is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8f112a2c01cef7467d0897ab4d40f03cdea20c49757894b61ad8978760dd3952\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/dependencies/openzeppelin/contracts/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(\\n            value <= type(uint224).max,\\n            \\\"SafeCast: value doesn't fit in 224 bits\\\"\\n        );\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(\\n            value <= type(uint128).max,\\n            \\\"SafeCast: value doesn't fit in 128 bits\\\"\\n        );\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(\\n            value <= type(uint96).max,\\n            \\\"SafeCast: value doesn't fit in 96 bits\\\"\\n        );\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(\\n            value <= type(uint64).max,\\n            \\\"SafeCast: value doesn't fit in 64 bits\\\"\\n        );\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(\\n            value <= type(uint32).max,\\n            \\\"SafeCast: value doesn't fit in 32 bits\\\"\\n        );\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(\\n            value <= type(uint16).max,\\n            \\\"SafeCast: value doesn't fit in 16 bits\\\"\\n        );\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(\\n            value <= type(uint8).max,\\n            \\\"SafeCast: value doesn't fit in 8 bits\\\"\\n        );\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(\\n            value >= type(int128).min && value <= type(int128).max,\\n            \\\"SafeCast: value doesn't fit in 128 bits\\\"\\n        );\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(\\n            value >= type(int64).min && value <= type(int64).max,\\n            \\\"SafeCast: value doesn't fit in 64 bits\\\"\\n        );\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(\\n            value >= type(int32).min && value <= type(int32).max,\\n            \\\"SafeCast: value doesn't fit in 32 bits\\\"\\n        );\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(\\n            value >= type(int16).min && value <= type(int16).max,\\n            \\\"SafeCast: value doesn't fit in 16 bits\\\"\\n        );\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(\\n            value >= type(int8).min && value <= type(int8).max,\\n            \\\"SafeCast: value doesn't fit in 8 bits\\\"\\n        );\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(\\n            value <= uint256(type(int256).max),\\n            \\\"SafeCast: value doesn't fit in an int256\\\"\\n        );\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x757f2eee2c313c6ac62a666e2acf87dea31d26e32257b674fb891b88857d4c8b\",\"license\":\"MIT\"},\"contracts/lending/core/interfaces/IACLManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\n\\n/**\\n * @title IACLManager\\n * @author Aave\\n * @notice Defines the basic interface for the ACL Manager\\n */\\ninterface IACLManager {\\n    /**\\n     * @notice Returns the contract address of the PoolAddressesProvider\\n     * @return The address of the PoolAddressesProvider\\n     */\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        returns (IPoolAddressesProvider);\\n\\n    /**\\n     * @notice Returns the identifier of the PoolAdmin role\\n     * @return The id of the PoolAdmin role\\n     */\\n    function POOL_ADMIN_ROLE() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the identifier of the EmergencyAdmin role\\n     * @return The id of the EmergencyAdmin role\\n     */\\n    function EMERGENCY_ADMIN_ROLE() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the identifier of the RiskAdmin role\\n     * @return The id of the RiskAdmin role\\n     */\\n    function RISK_ADMIN_ROLE() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the identifier of the FlashBorrower role\\n     * @return The id of the FlashBorrower role\\n     */\\n    function FLASH_BORROWER_ROLE() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the identifier of the Bridge role\\n     * @return The id of the Bridge role\\n     */\\n    function BRIDGE_ROLE() external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the identifier of the AssetListingAdmin role\\n     * @return The id of the AssetListingAdmin role\\n     */\\n    function ASSET_LISTING_ADMIN_ROLE() external view returns (bytes32);\\n\\n    /**\\n     * @notice Set the role as admin of a specific role.\\n     * @dev By default the admin role for all roles is `DEFAULT_ADMIN_ROLE`.\\n     * @param role The role to be managed by the admin role\\n     * @param adminRole The admin role\\n     */\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n    /**\\n     * @notice Adds a new admin as PoolAdmin\\n     * @param admin The address of the new admin\\n     */\\n    function addPoolAdmin(address admin) external;\\n\\n    /**\\n     * @notice Removes an admin as PoolAdmin\\n     * @param admin The address of the admin to remove\\n     */\\n    function removePoolAdmin(address admin) external;\\n\\n    /**\\n     * @notice Returns true if the address is PoolAdmin, false otherwise\\n     * @param admin The address to check\\n     * @return True if the given address is PoolAdmin, false otherwise\\n     */\\n    function isPoolAdmin(address admin) external view returns (bool);\\n\\n    /**\\n     * @notice Adds a new admin as EmergencyAdmin\\n     * @param admin The address of the new admin\\n     */\\n    function addEmergencyAdmin(address admin) external;\\n\\n    /**\\n     * @notice Removes an admin as EmergencyAdmin\\n     * @param admin The address of the admin to remove\\n     */\\n    function removeEmergencyAdmin(address admin) external;\\n\\n    /**\\n     * @notice Returns true if the address is EmergencyAdmin, false otherwise\\n     * @param admin The address to check\\n     * @return True if the given address is EmergencyAdmin, false otherwise\\n     */\\n    function isEmergencyAdmin(address admin) external view returns (bool);\\n\\n    /**\\n     * @notice Adds a new admin as RiskAdmin\\n     * @param admin The address of the new admin\\n     */\\n    function addRiskAdmin(address admin) external;\\n\\n    /**\\n     * @notice Removes an admin as RiskAdmin\\n     * @param admin The address of the admin to remove\\n     */\\n    function removeRiskAdmin(address admin) external;\\n\\n    /**\\n     * @notice Returns true if the address is RiskAdmin, false otherwise\\n     * @param admin The address to check\\n     * @return True if the given address is RiskAdmin, false otherwise\\n     */\\n    function isRiskAdmin(address admin) external view returns (bool);\\n\\n    /**\\n     * @notice Adds a new address as FlashBorrower\\n     * @param borrower The address of the new FlashBorrower\\n     */\\n    function addFlashBorrower(address borrower) external;\\n\\n    /**\\n     * @notice Removes an address as FlashBorrower\\n     * @param borrower The address of the FlashBorrower to remove\\n     */\\n    function removeFlashBorrower(address borrower) external;\\n\\n    /**\\n     * @notice Returns true if the address is FlashBorrower, false otherwise\\n     * @param borrower The address to check\\n     * @return True if the given address is FlashBorrower, false otherwise\\n     */\\n    function isFlashBorrower(address borrower) external view returns (bool);\\n\\n    /**\\n     * @notice Adds a new address as Bridge\\n     * @param bridge The address of the new Bridge\\n     */\\n    function addBridge(address bridge) external;\\n\\n    /**\\n     * @notice Removes an address as Bridge\\n     * @param bridge The address of the bridge to remove\\n     */\\n    function removeBridge(address bridge) external;\\n\\n    /**\\n     * @notice Returns true if the address is Bridge, false otherwise\\n     * @param bridge The address to check\\n     * @return True if the given address is Bridge, false otherwise\\n     */\\n    function isBridge(address bridge) external view returns (bool);\\n\\n    /**\\n     * @notice Adds a new admin as AssetListingAdmin\\n     * @param admin The address of the new admin\\n     */\\n    function addAssetListingAdmin(address admin) external;\\n\\n    /**\\n     * @notice Removes an admin as AssetListingAdmin\\n     * @param admin The address of the admin to remove\\n     */\\n    function removeAssetListingAdmin(address admin) external;\\n\\n    /**\\n     * @notice Returns true if the address is AssetListingAdmin, false otherwise\\n     * @param admin The address to check\\n     * @return True if the given address is AssetListingAdmin, false otherwise\\n     */\\n    function isAssetListingAdmin(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7319bb0f310b06eaf91188ce4aa8c7dfa2a7a7d97e5a5609c31b038fef43e6c8\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IAaveIncentivesController\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Incentives Controller.\\n * @dev It only contains one single function, needed as a hook on aToken and debtToken transfers.\\n */\\ninterface IAaveIncentivesController {\\n    /**\\n     * @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.\\n     * @dev The units of `totalSupply` and `userBalance` should be the same.\\n     * @param user The address of the user whose asset balance has changed\\n     * @param totalSupply The total supply of the asset prior to user balance change\\n     * @param userBalance The previous user balance prior to balance change\\n     */\\n    function handleAction(\\n        address user,\\n        uint256 totalSupply,\\n        uint256 userBalance\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5671d1bb9aaf96f60ab079d8e0fc8186d0351560b8dfd3641e945fa7f65ff71f\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IAaveOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\nimport {IPriceOracleGetter} from \\\"./IPriceOracleGetter.sol\\\";\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\n\\n/**\\n * @title IAaveOracle\\n * @author Aave\\n * @notice Defines the basic interface for the Aave Oracle\\n */\\ninterface IAaveOracle is IPriceOracleGetter {\\n    /**\\n     * @dev Emitted after the base currency is set\\n     * @param baseCurrency The base currency of used for price quotes\\n     * @param baseCurrencyUnit The unit of the base currency\\n     */\\n    event BaseCurrencySet(\\n        address indexed baseCurrency,\\n        uint256 baseCurrencyUnit\\n    );\\n\\n    /**\\n     * @dev Emitted after the price source of an asset is updated\\n     * @param asset The address of the asset\\n     * @param source The price source of the asset\\n     */\\n    event AssetSourceUpdated(address indexed asset, address indexed source);\\n\\n    /**\\n     * @dev Emitted after the address of fallback oracle is updated\\n     * @param fallbackOracle The address of the fallback oracle\\n     */\\n    event FallbackOracleUpdated(address indexed fallbackOracle);\\n\\n    /**\\n     * @notice Returns the PoolAddressesProvider\\n     * @return The address of the PoolAddressesProvider contract\\n     */\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        returns (IPoolAddressesProvider);\\n\\n    /**\\n     * @notice Sets or replaces price sources of assets\\n     * @param assets The addresses of the assets\\n     * @param sources The addresses of the price sources\\n     */\\n    function setAssetSources(\\n        address[] calldata assets,\\n        address[] calldata sources\\n    ) external;\\n\\n    /**\\n     * @notice Sets the fallback oracle\\n     * @param fallbackOracle The address of the fallback oracle\\n     */\\n    function setFallbackOracle(address fallbackOracle) external;\\n\\n    /**\\n     * @notice Returns a list of prices from a list of assets addresses\\n     * @param assets The list of assets addresses\\n     * @return The prices of the given assets\\n     */\\n    function getAssetsPrices(\\n        address[] calldata assets\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Returns the address of the source for an asset address\\n     * @param asset The address of the asset\\n     * @return The address of the source\\n     */\\n    function getSourceOfAsset(address asset) external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the fallback oracle\\n     * @return The address of the fallback oracle\\n     */\\n    function getFallbackOracle() external view returns (address);\\n}\\n\",\"keccak256\":\"0x73790ac866b0fdf26e5a5a21bc9f4a6cc20459af2b5954b9cdf4ef42a22195d4\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n */\\ninterface IPool {\\n    /**\\n     * @dev Emitted on mintUnbacked()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the supply\\n     * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n     * @param amount The amount of supplied assets\\n     * @param referralCode The referral code used\\n     */\\n    event MintUnbacked(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on backUnbacked()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param backer The address paying for the backing\\n     * @param amount The amount added as backing\\n     * @param fee The amount paid in fees\\n     */\\n    event BackUnbacked(\\n        address indexed reserve,\\n        address indexed backer,\\n        uint256 amount,\\n        uint256 fee\\n    );\\n\\n    /**\\n     * @dev Emitted on supply()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the supply\\n     * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n     * @param amount The amount supplied\\n     * @param referralCode The referral code used\\n     */\\n    event Supply(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlying asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of aTokens\\n     * @param to The address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     */\\n    event Withdraw(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n     * initiator of the transaction on flashLoan()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n     * @param referralCode The referral code used\\n     */\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n     */\\n    event Repay(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed repayer,\\n        uint256 amount,\\n        bool useATokens\\n    );\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user swapping his rate mode\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     */\\n    event SwapBorrowRateMode(\\n        address indexed reserve,\\n        address indexed user,\\n        DataTypes.InterestRateMode interestRateMode\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param totalDebt The total isolation mode debt for the reserve\\n     */\\n    event IsolationModeTotalDebtUpdated(\\n        address indexed asset,\\n        uint256 totalDebt\\n    );\\n\\n    /**\\n     * @dev Emitted when the user selects a certain asset category for eMode\\n     * @param user The address of the user\\n     * @param categoryId The category id\\n     */\\n    event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     */\\n    event ReserveUsedAsCollateralEnabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     */\\n    event ReserveUsedAsCollateralDisabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     */\\n    event RebalanceStableBorrowRate(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n     * @param premium The fee flash borrowed\\n     * @param referralCode The referral code used\\n     */\\n    event FlashLoan(\\n        address indexed target,\\n        address initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 premium,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated.\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n     * @param liquidator The address of the liquidator\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     */\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated.\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The next liquidity rate\\n     * @param stableBorrowRate The next stable borrow rate\\n     * @param variableBorrowRate The next variable borrow rate\\n     * @param liquidityIndex The next liquidity index\\n     * @param variableBorrowIndex The next variable borrow index\\n     */\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n     * @param reserve The address of the reserve\\n     * @param amountMinted The amount minted to the treasury\\n     */\\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n    /**\\n     * @notice Mints an `amount` of aTokens to the `onBehalfOf`\\n     * @param asset The address of the underlying asset to mint\\n     * @param amount The amount to mint\\n     * @param onBehalfOf The address that will receive the aTokens\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function mintUnbacked(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Back the current unbacked underlying with `amount` and pay `fee`.\\n     * @param asset The address of the underlying asset to back\\n     * @param amount The amount to back\\n     * @param fee The amount paid in fees\\n     * @return The backed amount\\n     */\\n    function backUnbacked(\\n        address asset,\\n        uint256 amount,\\n        uint256 fee\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     */\\n    function supplyWithPermit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     */\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     */\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     */\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     * @return The final amount repaid\\n     */\\n    function repayWithPermit(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n     * equivalent debt tokens\\n     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n     * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n     * balance is not enough to cover the whole debt\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @return The final amount repaid\\n     */\\n    function repayWithATokens(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     */\\n    function swapBorrowRateMode(\\n        address asset,\\n        uint256 interestRateMode\\n    ) external;\\n\\n    /**\\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n     *        much has been borrowed at a stable rate and suppliers are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     */\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n     * @param asset The address of the underlying asset supplied\\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n     */\\n    function setUserUseReserveAsCollateral(\\n        address asset,\\n        bool useAsCollateral\\n    ) external;\\n\\n    /**\\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     */\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://docs.aave.com/developers/\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts of the assets being flash-borrowed\\n     * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata interestRateModes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://docs.aave.com/developers/\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n     * @param asset The address of the asset being flash-borrowed\\n     * @param amount The amount of the asset being flash-borrowed\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function flashLoanSimple(\\n        address receiverAddress,\\n        address asset,\\n        uint256 amount,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n     * @return currentLiquidationThreshold The liquidation threshold of the user\\n     * @return ltv The loan to value of The user\\n     * @return healthFactor The current health factor of the user\\n     */\\n    function getUserAccountData(\\n        address user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralBase,\\n            uint256 totalDebtBase,\\n            uint256 availableBorrowsBase,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    /**\\n     * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n     * interest rate strategy\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n     * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n     * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n     */\\n    function initReserve(\\n        address asset,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Drop a reserve\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     */\\n    function dropReserve(address asset) external;\\n\\n    /**\\n     * @notice Updates the address of the interest rate strategy contract\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param rateStrategyAddress The address of the interest rate strategy contract\\n     */\\n    function setReserveInterestRateStrategyAddress(\\n        address asset,\\n        address rateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Sets the configuration bitmap of the reserve as a whole\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param configuration The new configuration bitmap\\n     */\\n    function setConfiguration(\\n        address asset,\\n        DataTypes.ReserveConfigurationMap calldata configuration\\n    ) external;\\n\\n    /**\\n     * @notice Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     */\\n    function getConfiguration(\\n        address asset\\n    ) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the configuration of the user across all the reserves\\n     * @param user The user address\\n     * @return The configuration of the user\\n     */\\n    function getUserConfiguration(\\n        address user\\n    ) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(\\n        address asset\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the normalized variable debt per unit of asset\\n     * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n     * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n     * moment (approx. a borrower would get if opening a position). This means that is always used in\\n     * combination with variable debt supply/balances.\\n     * If using this function externally, consider that is possible to have an increasing normalized\\n     * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n     * (e.g. only updates with non-zero variable debt supply)\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(\\n        address asset\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state and configuration data of the reserve\\n     */\\n    function getReserveData(\\n        address asset\\n    ) external view returns (DataTypes.ReserveData memory);\\n\\n    /**\\n     * @notice Validates and finalizes an aToken transfer\\n     * @dev Only callable by the overlying aToken of the `asset`\\n     * @param asset The address of the underlying asset of the aToken\\n     * @param from The user from which the aTokens are transferred\\n     * @param to The user receiving the aTokens\\n     * @param amount The amount being transferred/withdrawn\\n     * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n     * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n     */\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromBefore,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    /**\\n     * @notice Returns the list of the underlying assets of all the initialized reserves\\n     * @dev It does not include dropped reserves\\n     * @return The addresses of the underlying assets of the initialized reserves\\n     */\\n    function getReservesList() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n     * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n     * @return The address of the reserve associated with id\\n     */\\n    function getReserveAddressById(uint16 id) external view returns (address);\\n\\n    /**\\n     * @notice Returns the PoolAddressesProvider connected to this contract\\n     * @return The address of the PoolAddressesProvider\\n     */\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        returns (IPoolAddressesProvider);\\n\\n    /**\\n     * @notice Updates the protocol fee on the bridging\\n     * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n     */\\n    function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n    /**\\n     * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n     * - A part is sent to aToken holders as extra, one time accumulated interest\\n     * - A part is collected by the protocol treasury\\n     * @dev The total premium is calculated on the total borrowed amount\\n     * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param flashLoanPremiumTotal The total premium, expressed in bps\\n     * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n     */\\n    function updateFlashloanPremiums(\\n        uint128 flashLoanPremiumTotal,\\n        uint128 flashLoanPremiumToProtocol\\n    ) external;\\n\\n    /**\\n     * @notice Configures a new category for the eMode.\\n     * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n     * The category 0 is reserved as it's the default for volatile assets\\n     * @param id The id of the category\\n     * @param config The configuration of the category\\n     */\\n    function configureEModeCategory(\\n        uint8 id,\\n        DataTypes.EModeCategory memory config\\n    ) external;\\n\\n    /**\\n     * @notice Returns the data of an eMode category\\n     * @param id The id of the category\\n     * @return The configuration data of the category\\n     */\\n    function getEModeCategoryData(\\n        uint8 id\\n    ) external view returns (DataTypes.EModeCategory memory);\\n\\n    /**\\n     * @notice Allows a user to use the protocol in eMode\\n     * @param categoryId The id of the category\\n     */\\n    function setUserEMode(uint8 categoryId) external;\\n\\n    /**\\n     * @notice Returns the eMode the user is using\\n     * @param user The address of the user\\n     * @return The eMode id\\n     */\\n    function getUserEMode(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Resets the isolation mode total debt of the given asset to zero\\n     * @dev It requires the given asset has zero debt ceiling\\n     * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n     */\\n    function resetIsolationModeTotalDebt(address asset) external;\\n\\n    /**\\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n     * @return The percentage of available liquidity to borrow, expressed in bps\\n     */\\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the total fee on flash loans\\n     * @return The total fee on flashloans\\n     */\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the part of the bridge fees sent to protocol\\n     * @return The bridge fee sent to the protocol treasury\\n     */\\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the part of the flashloan fees sent to protocol\\n     * @return The flashloan fee sent to the protocol treasury\\n     */\\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n     * @return The maximum number of reserves supported\\n     */\\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n    /**\\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n     * @param assets The list of reserves for which the minting needs to be executed\\n     */\\n    function mintToTreasury(address[] calldata assets) external;\\n\\n    /**\\n     * @notice Rescue and transfer tokens locked in this contract\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param amount The amount of token to transfer\\n     */\\n    function rescueTokens(address token, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @dev Deprecated: Use the `supply` function instead\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n}\\n\",\"keccak256\":\"0x73a1016b2ba313d571baee697f5537e6d59f5a84ea12af31df2bd3f54b18862a\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n */\\ninterface IPoolAddressesProvider {\\n    /**\\n     * @dev Emitted when the market identifier is updated.\\n     * @param oldMarketId The old id of the market\\n     * @param newMarketId The new id of the market\\n     */\\n    event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n    /**\\n     * @dev Emitted when the pool is updated.\\n     * @param oldAddress The old address of the Pool\\n     * @param newAddress The new address of the Pool\\n     */\\n    event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the pool configurator is updated.\\n     * @param oldAddress The old address of the PoolConfigurator\\n     * @param newAddress The new address of the PoolConfigurator\\n     */\\n    event PoolConfiguratorUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the price oracle is updated.\\n     * @param oldAddress The old address of the PriceOracle\\n     * @param newAddress The new address of the PriceOracle\\n     */\\n    event PriceOracleUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the ACL manager is updated.\\n     * @param oldAddress The old address of the ACLManager\\n     * @param newAddress The new address of the ACLManager\\n     */\\n    event ACLManagerUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the ACL admin is updated.\\n     * @param oldAddress The old address of the ACLAdmin\\n     * @param newAddress The new address of the ACLAdmin\\n     */\\n    event ACLAdminUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the price oracle sentinel is updated.\\n     * @param oldAddress The old address of the PriceOracleSentinel\\n     * @param newAddress The new address of the PriceOracleSentinel\\n     */\\n    event PriceOracleSentinelUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the pool data provider is updated.\\n     * @param oldAddress The old address of the PoolDataProvider\\n     * @param newAddress The new address of the PoolDataProvider\\n     */\\n    event PoolDataProviderUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a new proxy is created.\\n     * @param id The identifier of the proxy\\n     * @param proxyAddress The address of the created proxy contract\\n     * @param implementationAddress The address of the implementation contract\\n     */\\n    event ProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a new non-proxied contract address is registered.\\n     * @param id The identifier of the contract\\n     * @param oldAddress The address of the old contract\\n     * @param newAddress The address of the new contract\\n     */\\n    event AddressSet(\\n        bytes32 indexed id,\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the implementation of the proxy registered with id is updated\\n     * @param id The identifier of the contract\\n     * @param proxyAddress The address of the proxy contract\\n     * @param oldImplementationAddress The address of the old implementation contract\\n     * @param newImplementationAddress The address of the new implementation contract\\n     */\\n    event AddressSetAsProxy(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address oldImplementationAddress,\\n        address indexed newImplementationAddress\\n    );\\n\\n    /**\\n     * @notice Returns the id of the Aave market to which this contract points to.\\n     * @return The market id\\n     */\\n    function getMarketId() external view returns (string memory);\\n\\n    /**\\n     * @notice Associates an id with a specific PoolAddressesProvider.\\n     * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n     * identify and validate multiple Aave markets.\\n     * @param newMarketId The market id\\n     */\\n    function setMarketId(string calldata newMarketId) external;\\n\\n    /**\\n     * @notice Returns an address by its identifier.\\n     * @dev The returned address might be an EOA or a contract, potentially proxied\\n     * @dev It returns ZERO if there is no registered address with the given id\\n     * @param id The id\\n     * @return The address of the registered for the specified id\\n     */\\n    function getAddressFromID(bytes32 id) external view returns (address);\\n\\n    /**\\n     * @notice General function to update the implementation of a proxy registered with\\n     * certain `id`. If there is no proxy registered, it will instantiate one and\\n     * set as implementation the `newImplementationAddress`.\\n     * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n     * setter function, in order to avoid unexpected consequences\\n     * @param id The id\\n     * @param newImplementationAddress The address of the new implementation\\n     */\\n    function setAddressAsProxy(\\n        bytes32 id,\\n        address newImplementationAddress\\n    ) external;\\n\\n    /**\\n     * @notice Sets an address for an id replacing the address saved in the addresses map.\\n     * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n     * @param id The id\\n     * @param newAddress The address to set\\n     */\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    /**\\n     * @notice Returns the address of the Pool proxy.\\n     * @return The Pool proxy address\\n     */\\n    function getPool() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the Pool, or creates a proxy\\n     * setting the new `pool` implementation when the function is called for the first time.\\n     * @param newPoolImpl The new Pool implementation\\n     */\\n    function setPoolImpl(address newPoolImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the PoolConfigurator proxy.\\n     * @return The PoolConfigurator proxy address\\n     */\\n    function getPoolConfigurator() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n     * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n     * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n     */\\n    function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle.\\n     * @return The address of the PriceOracle\\n     */\\n    function getPriceOracle() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle.\\n     * @param newPriceOracle The address of the new PriceOracle\\n     */\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL manager.\\n     * @return The address of the ACLManager\\n     */\\n    function getACLManager() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL manager.\\n     * @param newAclManager The address of the new ACLManager\\n     */\\n    function setACLManager(address newAclManager) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL admin.\\n     * @return The address of the ACL admin\\n     */\\n    function getACLAdmin() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL admin.\\n     * @param newAclAdmin The address of the new ACL admin\\n     */\\n    function setACLAdmin(address newAclAdmin) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle sentinel.\\n     * @return The address of the PriceOracleSentinel\\n     */\\n    function getPriceOracleSentinel() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle sentinel.\\n     * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n     */\\n    function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n    /**\\n     * @notice Returns the address of the data provider.\\n     * @return The address of the DataProvider\\n     */\\n    function getPoolDataProvider() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the data provider.\\n     * @param newDataProvider The address of the new DataProvider\\n     */\\n    function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0xf10e68d63d751e48a4adfd8a527b1d7f0710dcdf23a1c28b118fcba1044866cc\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IPriceOracleGetter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPriceOracleGetter\\n * @author Aave\\n * @notice Interface for the Aave price oracle.\\n */\\ninterface IPriceOracleGetter {\\n    /**\\n     * @notice Returns the base currency address\\n     * @dev Address 0x0 is reserved for USD as base currency.\\n     * @return Returns the base currency address.\\n     */\\n    function BASE_CURRENCY() external view returns (address);\\n\\n    /**\\n     * @notice Returns the base currency unit\\n     * @dev 1 ether for ETH, 1e8 for USD.\\n     * @return Returns the base currency unit.\\n     */\\n    function BASE_CURRENCY_UNIT() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the asset price in the base currency\\n     * @param asset The address of the asset\\n     * @return The price of the asset\\n     */\\n    function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x31366baa77e6298e46695465ba7f5ba8641fe8537e54901ae119282be0ee6d67\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/protocol/libraries/configuration/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Aave\\n * @notice Implements the bitmap logic to handle the reserve configuration\\n */\\nlibrary ReserveConfiguration {\\n    uint256 internal constant LTV_MASK =                       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n    uint256 internal constant LIQUIDATION_THRESHOLD_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\n    uint256 internal constant LIQUIDATION_BONUS_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\n    uint256 internal constant DECIMALS_MASK =                  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant ACTIVE_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant FROZEN_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant BORROWING_MASK =                 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant STABLE_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant PAUSED_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant SILOED_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant FLASHLOAN_ENABLED_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant RESERVE_FACTOR_MASK =            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant BORROW_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant SUPPLY_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =  0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant EMODE_CATEGORY_MASK =            0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant UNBACKED_MINT_CAP_MASK =         0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant DEBT_CEILING_MASK =              0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n    /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\n    uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\n    uint256 internal constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\n    uint256 internal constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\n    uint256 internal constant IS_ACTIVE_START_BIT_POSITION = 56;\\n    uint256 internal constant IS_FROZEN_START_BIT_POSITION = 57;\\n    uint256 internal constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\n    uint256 internal constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\n    uint256 internal constant IS_PAUSED_START_BIT_POSITION = 60;\\n    uint256 internal constant BORROWABLE_IN_ISOLATION_START_BIT_POSITION = 61;\\n    uint256 internal constant SILOED_BORROWING_START_BIT_POSITION = 62;\\n    uint256 internal constant FLASHLOAN_ENABLED_START_BIT_POSITION = 63;\\n    uint256 internal constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\n    uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;\\n    uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;\\n    uint256 internal constant LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION = 152;\\n    uint256 internal constant EMODE_CATEGORY_START_BIT_POSITION = 168;\\n    uint256 internal constant UNBACKED_MINT_CAP_START_BIT_POSITION = 176;\\n    uint256 internal constant DEBT_CEILING_START_BIT_POSITION = 212;\\n\\n    uint256 internal constant MAX_VALID_LTV = 65535;\\n    uint256 internal constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\n    uint256 internal constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\n    uint256 internal constant MAX_VALID_DECIMALS = 255;\\n    uint256 internal constant MAX_VALID_RESERVE_FACTOR = 65535;\\n    uint256 internal constant MAX_VALID_BORROW_CAP = 68719476735;\\n    uint256 internal constant MAX_VALID_SUPPLY_CAP = 68719476735;\\n    uint256 internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65535;\\n    uint256 internal constant MAX_VALID_EMODE_CATEGORY = 255;\\n    uint256 internal constant MAX_VALID_UNBACKED_MINT_CAP = 68719476735;\\n    uint256 internal constant MAX_VALID_DEBT_CEILING = 1099511627775;\\n\\n    uint256 public constant DEBT_CEILING_DECIMALS = 2;\\n    uint16 public constant MAX_RESERVES_COUNT = 128;\\n\\n    /**\\n     * @notice Sets the Loan to Value of the reserve\\n     * @param self The reserve configuration\\n     * @param ltv The new ltv\\n     */\\n    function setLtv(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 ltv\\n    ) internal pure {\\n        require(ltv <= MAX_VALID_LTV, Errors.INVALID_LTV);\\n\\n        self.data = (self.data & LTV_MASK) | ltv;\\n    }\\n\\n    /**\\n     * @notice Gets the Loan to Value of the reserve\\n     * @param self The reserve configuration\\n     * @return The loan to value\\n     */\\n    function getLtv(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return self.data & ~LTV_MASK;\\n    }\\n\\n    /**\\n     * @notice Sets the liquidation threshold of the reserve\\n     * @param self The reserve configuration\\n     * @param threshold The new liquidation threshold\\n     */\\n    function setLiquidationThreshold(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 threshold\\n    ) internal pure {\\n        require(\\n            threshold <= MAX_VALID_LIQUIDATION_THRESHOLD,\\n            Errors.INVALID_LIQ_THRESHOLD\\n        );\\n\\n        self.data =\\n            (self.data & LIQUIDATION_THRESHOLD_MASK) |\\n            (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the liquidation threshold of the reserve\\n     * @param self The reserve configuration\\n     * @return The liquidation threshold\\n     */\\n    function getLiquidationThreshold(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~LIQUIDATION_THRESHOLD_MASK) >>\\n            LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the liquidation bonus of the reserve\\n     * @param self The reserve configuration\\n     * @param bonus The new liquidation bonus\\n     */\\n    function setLiquidationBonus(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 bonus\\n    ) internal pure {\\n        require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.INVALID_LIQ_BONUS);\\n\\n        self.data =\\n            (self.data & LIQUIDATION_BONUS_MASK) |\\n            (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the liquidation bonus of the reserve\\n     * @param self The reserve configuration\\n     * @return The liquidation bonus\\n     */\\n    function getLiquidationBonus(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~LIQUIDATION_BONUS_MASK) >>\\n            LIQUIDATION_BONUS_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the decimals of the underlying asset of the reserve\\n     * @param self The reserve configuration\\n     * @param decimals The decimals\\n     */\\n    function setDecimals(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 decimals\\n    ) internal pure {\\n        require(decimals <= MAX_VALID_DECIMALS, Errors.INVALID_DECIMALS);\\n\\n        self.data =\\n            (self.data & DECIMALS_MASK) |\\n            (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the decimals of the underlying asset of the reserve\\n     * @param self The reserve configuration\\n     * @return The decimals of the asset\\n     */\\n    function getDecimals(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the active state of the reserve\\n     * @param self The reserve configuration\\n     * @param active The active state\\n     */\\n    function setActive(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool active\\n    ) internal pure {\\n        self.data =\\n            (self.data & ACTIVE_MASK) |\\n            (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the active state of the reserve\\n     * @param self The reserve configuration\\n     * @return The active state\\n     */\\n    function getActive(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~ACTIVE_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Sets the frozen state of the reserve\\n     * @param self The reserve configuration\\n     * @param frozen The frozen state\\n     */\\n    function setFrozen(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool frozen\\n    ) internal pure {\\n        self.data =\\n            (self.data & FROZEN_MASK) |\\n            (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the frozen state of the reserve\\n     * @param self The reserve configuration\\n     * @return The frozen state\\n     */\\n    function getFrozen(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~FROZEN_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Sets the paused state of the reserve\\n     * @param self The reserve configuration\\n     * @param paused The paused state\\n     */\\n    function setPaused(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool paused\\n    ) internal pure {\\n        self.data =\\n            (self.data & PAUSED_MASK) |\\n            (uint256(paused ? 1 : 0) << IS_PAUSED_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the paused state of the reserve\\n     * @param self The reserve configuration\\n     * @return The paused state\\n     */\\n    function getPaused(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~PAUSED_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Sets the borrowable in isolation flag for the reserve.\\n     * @dev When this flag is set to true, the asset will be borrowable against isolated collaterals and the borrowed\\n     * amount will be accumulated in the isolated collateral's total debt exposure.\\n     * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\n     * consistency in the debt ceiling calculations.\\n     * @param self The reserve configuration\\n     * @param borrowable True if the asset is borrowable\\n     */\\n    function setBorrowableInIsolation(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool borrowable\\n    ) internal pure {\\n        self.data =\\n            (self.data & BORROWABLE_IN_ISOLATION_MASK) |\\n            (uint256(borrowable ? 1 : 0) <<\\n                BORROWABLE_IN_ISOLATION_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the borrowable in isolation flag for the reserve.\\n     * @dev If the returned flag is true, the asset is borrowable against isolated collateral. Assets borrowed with\\n     * isolated collateral is accounted for in the isolated collateral's total debt exposure.\\n     * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\n     * consistency in the debt ceiling calculations.\\n     * @param self The reserve configuration\\n     * @return The borrowable in isolation flag\\n     */\\n    function getBorrowableInIsolation(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~BORROWABLE_IN_ISOLATION_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Sets the siloed borrowing flag for the reserve.\\n     * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\n     * @param self The reserve configuration\\n     * @param siloed True if the asset is siloed\\n     */\\n    function setSiloedBorrowing(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool siloed\\n    ) internal pure {\\n        self.data =\\n            (self.data & SILOED_BORROWING_MASK) |\\n            (uint256(siloed ? 1 : 0) << SILOED_BORROWING_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the siloed borrowing flag for the reserve.\\n     * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\n     * @param self The reserve configuration\\n     * @return The siloed borrowing flag\\n     */\\n    function getSiloedBorrowing(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~SILOED_BORROWING_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Enables or disables borrowing on the reserve\\n     * @param self The reserve configuration\\n     * @param enabled True if the borrowing needs to be enabled, false otherwise\\n     */\\n    function setBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool enabled\\n    ) internal pure {\\n        self.data =\\n            (self.data & BORROWING_MASK) |\\n            (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the borrowing state of the reserve\\n     * @param self The reserve configuration\\n     * @return The borrowing state\\n     */\\n    function getBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~BORROWING_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Enables or disables stable rate borrowing on the reserve\\n     * @param self The reserve configuration\\n     * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\n     */\\n    function setStableRateBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool enabled\\n    ) internal pure {\\n        self.data =\\n            (self.data & STABLE_BORROWING_MASK) |\\n            (uint256(enabled ? 1 : 0) <<\\n                STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the stable rate borrowing state of the reserve\\n     * @param self The reserve configuration\\n     * @return The stable rate borrowing state\\n     */\\n    function getStableRateBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~STABLE_BORROWING_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Sets the reserve factor of the reserve\\n     * @param self The reserve configuration\\n     * @param reserveFactor The reserve factor\\n     */\\n    function setReserveFactor(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 reserveFactor\\n    ) internal pure {\\n        require(\\n            reserveFactor <= MAX_VALID_RESERVE_FACTOR,\\n            Errors.INVALID_RESERVE_FACTOR\\n        );\\n\\n        self.data =\\n            (self.data & RESERVE_FACTOR_MASK) |\\n            (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the reserve factor of the reserve\\n     * @param self The reserve configuration\\n     * @return The reserve factor\\n     */\\n    function getReserveFactor(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~RESERVE_FACTOR_MASK) >>\\n            RESERVE_FACTOR_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the borrow cap of the reserve\\n     * @param self The reserve configuration\\n     * @param borrowCap The borrow cap\\n     */\\n    function setBorrowCap(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 borrowCap\\n    ) internal pure {\\n        require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.INVALID_BORROW_CAP);\\n\\n        self.data =\\n            (self.data & BORROW_CAP_MASK) |\\n            (borrowCap << BORROW_CAP_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the borrow cap of the reserve\\n     * @param self The reserve configuration\\n     * @return The borrow cap\\n     */\\n    function getBorrowCap(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the supply cap of the reserve\\n     * @param self The reserve configuration\\n     * @param supplyCap The supply cap\\n     */\\n    function setSupplyCap(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 supplyCap\\n    ) internal pure {\\n        require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.INVALID_SUPPLY_CAP);\\n\\n        self.data =\\n            (self.data & SUPPLY_CAP_MASK) |\\n            (supplyCap << SUPPLY_CAP_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the supply cap of the reserve\\n     * @param self The reserve configuration\\n     * @return The supply cap\\n     */\\n    function getSupplyCap(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the debt ceiling in isolation mode for the asset\\n     * @param self The reserve configuration\\n     * @param ceiling The maximum debt ceiling for the asset\\n     */\\n    function setDebtCeiling(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 ceiling\\n    ) internal pure {\\n        require(ceiling <= MAX_VALID_DEBT_CEILING, Errors.INVALID_DEBT_CEILING);\\n\\n        self.data =\\n            (self.data & DEBT_CEILING_MASK) |\\n            (ceiling << DEBT_CEILING_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the debt ceiling for the asset if the asset is in isolation mode\\n     * @param self The reserve configuration\\n     * @return The debt ceiling (0 = isolation mode disabled)\\n     */\\n    function getDebtCeiling(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the liquidation protocol fee of the reserve\\n     * @param self The reserve configuration\\n     * @param liquidationProtocolFee The liquidation protocol fee\\n     */\\n    function setLiquidationProtocolFee(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 liquidationProtocolFee\\n    ) internal pure {\\n        require(\\n            liquidationProtocolFee <= MAX_VALID_LIQUIDATION_PROTOCOL_FEE,\\n            Errors.INVALID_LIQUIDATION_PROTOCOL_FEE\\n        );\\n\\n        self.data =\\n            (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) |\\n            (liquidationProtocolFee <<\\n                LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the liquidation protocol fee\\n     * @param self The reserve configuration\\n     * @return The liquidation protocol fee\\n     */\\n    function getLiquidationProtocolFee(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) >>\\n            LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the unbacked mint cap of the reserve\\n     * @param self The reserve configuration\\n     * @param unbackedMintCap The unbacked mint cap\\n     */\\n    function setUnbackedMintCap(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 unbackedMintCap\\n    ) internal pure {\\n        require(\\n            unbackedMintCap <= MAX_VALID_UNBACKED_MINT_CAP,\\n            Errors.INVALID_UNBACKED_MINT_CAP\\n        );\\n\\n        self.data =\\n            (self.data & UNBACKED_MINT_CAP_MASK) |\\n            (unbackedMintCap << UNBACKED_MINT_CAP_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the unbacked mint cap of the reserve\\n     * @param self The reserve configuration\\n     * @return The unbacked mint cap\\n     */\\n    function getUnbackedMintCap(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~UNBACKED_MINT_CAP_MASK) >>\\n            UNBACKED_MINT_CAP_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the eMode asset category\\n     * @param self The reserve configuration\\n     * @param category The asset category when the user selects the eMode\\n     */\\n    function setEModeCategory(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 category\\n    ) internal pure {\\n        require(\\n            category <= MAX_VALID_EMODE_CATEGORY,\\n            Errors.INVALID_EMODE_CATEGORY\\n        );\\n\\n        self.data =\\n            (self.data & EMODE_CATEGORY_MASK) |\\n            (category << EMODE_CATEGORY_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the eMode asset category\\n     * @param self The reserve configuration\\n     * @return The eMode category for the asset\\n     */\\n    function getEModeCategory(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~EMODE_CATEGORY_MASK) >>\\n            EMODE_CATEGORY_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the flashloanable flag for the reserve\\n     * @param self The reserve configuration\\n     * @param flashLoanEnabled True if the asset is flashloanable, false otherwise\\n     */\\n    function setFlashLoanEnabled(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool flashLoanEnabled\\n    ) internal pure {\\n        self.data =\\n            (self.data & FLASHLOAN_ENABLED_MASK) |\\n            (uint256(flashLoanEnabled ? 1 : 0) <<\\n                FLASHLOAN_ENABLED_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the flashloanable flag for the reserve\\n     * @param self The reserve configuration\\n     * @return The flashloanable flag\\n     */\\n    function getFlashLoanEnabled(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~FLASHLOAN_ENABLED_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Gets the configuration flags of the reserve\\n     * @param self The reserve configuration\\n     * @return The state flag representing active\\n     * @return The state flag representing frozen\\n     * @return The state flag representing borrowing enabled\\n     * @return The state flag representing stableRateBorrowing enabled\\n     * @return The state flag representing paused\\n     */\\n    function getFlags(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool, bool, bool, bool, bool) {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            (dataLocal & ~ACTIVE_MASK) != 0,\\n            (dataLocal & ~FROZEN_MASK) != 0,\\n            (dataLocal & ~BORROWING_MASK) != 0,\\n            (dataLocal & ~STABLE_BORROWING_MASK) != 0,\\n            (dataLocal & ~PAUSED_MASK) != 0\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the configuration parameters of the reserve from storage\\n     * @param self The reserve configuration\\n     * @return The state param representing ltv\\n     * @return The state param representing liquidation threshold\\n     * @return The state param representing liquidation bonus\\n     * @return The state param representing reserve decimals\\n     * @return The state param representing reserve factor\\n     * @return The state param representing eMode category\\n     */\\n    function getParams(\\n        DataTypes.ReserveConfigurationMap memory self\\n    )\\n        internal\\n        pure\\n        returns (uint256, uint256, uint256, uint256, uint256, uint256)\\n    {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            dataLocal & ~LTV_MASK,\\n            (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >>\\n                LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n            (dataLocal & ~LIQUIDATION_BONUS_MASK) >>\\n                LIQUIDATION_BONUS_START_BIT_POSITION,\\n            (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n            (dataLocal & ~RESERVE_FACTOR_MASK) >>\\n                RESERVE_FACTOR_START_BIT_POSITION,\\n            (dataLocal & ~EMODE_CATEGORY_MASK) >>\\n                EMODE_CATEGORY_START_BIT_POSITION\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the caps parameters of the reserve from storage\\n     * @param self The reserve configuration\\n     * @return The state param representing borrow cap\\n     * @return The state param representing supply cap.\\n     */\\n    function getCaps(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256, uint256) {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            (dataLocal & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,\\n            (dataLocal & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x69b8868e73d36bca40ff838f0e46330d3ff310b4dc26bc7663398030d70a6ab5\",\"license\":\"BUSL-1.1\"},\"contracts/lending/core/protocol/libraries/configuration/UserConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\nimport {ReserveConfiguration} from \\\"./ReserveConfiguration.sol\\\";\\n\\n/**\\n * @title UserConfiguration library\\n * @author Aave\\n * @notice Implements the bitmap logic to handle the user configuration\\n */\\nlibrary UserConfiguration {\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\n    uint256 internal constant BORROWING_MASK =\\n        0x5555555555555555555555555555555555555555555555555555555555555555;\\n    uint256 internal constant COLLATERAL_MASK =\\n        0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;\\n\\n    /**\\n     * @notice Sets if the user is borrowing the reserve identified by reserveIndex\\n     * @param self The configuration object\\n     * @param reserveIndex The index of the reserve in the bitmap\\n     * @param borrowing True if the user is borrowing the reserve, false otherwise\\n     */\\n    function setBorrowing(\\n        DataTypes.UserConfigurationMap storage self,\\n        uint256 reserveIndex,\\n        bool borrowing\\n    ) internal {\\n        unchecked {\\n            require(\\n                reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT,\\n                Errors.INVALID_RESERVE_INDEX\\n            );\\n            uint256 bit = 1 << (reserveIndex << 1);\\n            if (borrowing) {\\n                self.data |= bit;\\n            } else {\\n                self.data &= ~bit;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets if the user is using as collateral the reserve identified by reserveIndex\\n     * @param self The configuration object\\n     * @param reserveIndex The index of the reserve in the bitmap\\n     * @param usingAsCollateral True if the user is using the reserve as collateral, false otherwise\\n     */\\n    function setUsingAsCollateral(\\n        DataTypes.UserConfigurationMap storage self,\\n        uint256 reserveIndex,\\n        bool usingAsCollateral\\n    ) internal {\\n        unchecked {\\n            require(\\n                reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT,\\n                Errors.INVALID_RESERVE_INDEX\\n            );\\n            uint256 bit = 1 << ((reserveIndex << 1) + 1);\\n            if (usingAsCollateral) {\\n                self.data |= bit;\\n            } else {\\n                self.data &= ~bit;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns if a user has been using the reserve for borrowing or as collateral\\n     * @param self The configuration object\\n     * @param reserveIndex The index of the reserve in the bitmap\\n     * @return True if the user has been using a reserve for borrowing or as collateral, false otherwise\\n     */\\n    function isUsingAsCollateralOrBorrowing(\\n        DataTypes.UserConfigurationMap memory self,\\n        uint256 reserveIndex\\n    ) internal pure returns (bool) {\\n        unchecked {\\n            require(\\n                reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT,\\n                Errors.INVALID_RESERVE_INDEX\\n            );\\n            return (self.data >> (reserveIndex << 1)) & 3 != 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Validate a user has been using the reserve for borrowing\\n     * @param self The configuration object\\n     * @param reserveIndex The index of the reserve in the bitmap\\n     * @return True if the user has been using a reserve for borrowing, false otherwise\\n     */\\n    function isBorrowing(\\n        DataTypes.UserConfigurationMap memory self,\\n        uint256 reserveIndex\\n    ) internal pure returns (bool) {\\n        unchecked {\\n            require(\\n                reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT,\\n                Errors.INVALID_RESERVE_INDEX\\n            );\\n            return (self.data >> (reserveIndex << 1)) & 1 != 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Validate a user has been using the reserve as collateral\\n     * @param self The configuration object\\n     * @param reserveIndex The index of the reserve in the bitmap\\n     * @return True if the user has been using a reserve as collateral, false otherwise\\n     */\\n    function isUsingAsCollateral(\\n        DataTypes.UserConfigurationMap memory self,\\n        uint256 reserveIndex\\n    ) internal pure returns (bool) {\\n        unchecked {\\n            require(\\n                reserveIndex < ReserveConfiguration.MAX_RESERVES_COUNT,\\n                Errors.INVALID_RESERVE_INDEX\\n            );\\n            return (self.data >> ((reserveIndex << 1) + 1)) & 1 != 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if a user has been supplying only one reserve as collateral\\n     * @dev this uses a simple trick - if a number is a power of two (only one bit set) then n & (n - 1) == 0\\n     * @param self The configuration object\\n     * @return True if the user has been supplying as collateral one reserve, false otherwise\\n     */\\n    function isUsingAsCollateralOne(\\n        DataTypes.UserConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        uint256 collateralData = self.data & COLLATERAL_MASK;\\n        return\\n            collateralData != 0 && (collateralData & (collateralData - 1) == 0);\\n    }\\n\\n    /**\\n     * @notice Checks if a user has been supplying any reserve as collateral\\n     * @param self The configuration object\\n     * @return True if the user has been supplying as collateral any reserve, false otherwise\\n     */\\n    function isUsingAsCollateralAny(\\n        DataTypes.UserConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return self.data & COLLATERAL_MASK != 0;\\n    }\\n\\n    /**\\n     * @notice Checks if a user has been borrowing only one asset\\n     * @dev this uses a simple trick - if a number is a power of two (only one bit set) then n & (n - 1) == 0\\n     * @param self The configuration object\\n     * @return True if the user has been supplying as collateral one reserve, false otherwise\\n     */\\n    function isBorrowingOne(\\n        DataTypes.UserConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        uint256 borrowingData = self.data & BORROWING_MASK;\\n        return borrowingData != 0 && (borrowingData & (borrowingData - 1) == 0);\\n    }\\n\\n    /**\\n     * @notice Checks if a user has been borrowing from any reserve\\n     * @param self The configuration object\\n     * @return True if the user has been borrowing any reserve, false otherwise\\n     */\\n    function isBorrowingAny(\\n        DataTypes.UserConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return self.data & BORROWING_MASK != 0;\\n    }\\n\\n    /**\\n     * @notice Checks if a user has not been using any reserve for borrowing or supply\\n     * @param self The configuration object\\n     * @return True if the user has not been borrowing or supplying any reserve, false otherwise\\n     */\\n    function isEmpty(\\n        DataTypes.UserConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return self.data == 0;\\n    }\\n\\n    /**\\n     * @notice Returns the Isolation Mode state of the user\\n     * @param self The configuration object\\n     * @param reservesData The state of all the reserves\\n     * @param reservesList The addresses of all the active reserves\\n     * @return True if the user is in isolation mode, false otherwise\\n     * @return The address of the only asset used as collateral\\n     * @return The debt ceiling of the reserve\\n     */\\n    function getIsolationModeState(\\n        DataTypes.UserConfigurationMap memory self,\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        mapping(uint256 => address) storage reservesList\\n    ) internal view returns (bool, address, uint256) {\\n        if (isUsingAsCollateralOne(self)) {\\n            uint256 assetId = _getFirstAssetIdByMask(self, COLLATERAL_MASK);\\n\\n            address assetAddress = reservesList[assetId];\\n            uint256 ceiling = reservesData[assetAddress]\\n                .configuration\\n                .getDebtCeiling();\\n            if (ceiling != 0) {\\n                return (true, assetAddress, ceiling);\\n            }\\n        }\\n        return (false, address(0), 0);\\n    }\\n\\n    /**\\n     * @notice Returns the siloed borrowing state for the user\\n     * @param self The configuration object\\n     * @param reservesData The data of all the reserves\\n     * @param reservesList The reserve list\\n     * @return True if the user has borrowed a siloed asset, false otherwise\\n     * @return The address of the only borrowed asset\\n     */\\n    function getSiloedBorrowingState(\\n        DataTypes.UserConfigurationMap memory self,\\n        mapping(address => DataTypes.ReserveData) storage reservesData,\\n        mapping(uint256 => address) storage reservesList\\n    ) internal view returns (bool, address) {\\n        if (isBorrowingOne(self)) {\\n            uint256 assetId = _getFirstAssetIdByMask(self, BORROWING_MASK);\\n            address assetAddress = reservesList[assetId];\\n            if (reservesData[assetAddress].configuration.getSiloedBorrowing()) {\\n                return (true, assetAddress);\\n            }\\n        }\\n\\n        return (false, address(0));\\n    }\\n\\n    /**\\n     * @notice Returns the address of the first asset flagged in the bitmap given the corresponding bitmask\\n     * @param self The configuration object\\n     * @return The index of the first asset flagged in the bitmap once the corresponding mask is applied\\n     */\\n    function _getFirstAssetIdByMask(\\n        DataTypes.UserConfigurationMap memory self,\\n        uint256 mask\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 bitmapData = self.data & mask;\\n            uint256 firstAssetPosition = bitmapData & ~(bitmapData - 1);\\n            uint256 id;\\n\\n            while ((firstAssetPosition >>= 2) != 0) {\\n                id += 1;\\n            }\\n            return id;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe38728706215f1ff1484c24739bb6f80e41c6b20085d36811eeb516bbf2266be\",\"license\":\"BUSL-1.1\"},\"contracts/lending/core/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Errors library\\n * @author Aave\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n */\\nlibrary Errors {\\n    string public constant CALLER_NOT_POOL_ADMIN = \\\"1\\\"; // 'The caller of the function is not a pool admin'\\n    string public constant CALLER_NOT_EMERGENCY_ADMIN = \\\"2\\\"; // 'The caller of the function is not an emergency admin'\\n    string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = \\\"3\\\"; // 'The caller of the function is not a pool or emergency admin'\\n    string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = \\\"4\\\"; // 'The caller of the function is not a risk or pool admin'\\n    string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = \\\"5\\\"; // 'The caller of the function is not an asset listing or pool admin'\\n    string public constant CALLER_NOT_BRIDGE = \\\"6\\\"; // 'The caller of the function is not a bridge'\\n    string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = \\\"7\\\"; // 'Pool addresses provider is not registered'\\n    string public constant INVALID_ADDRESSES_PROVIDER_ID = \\\"8\\\"; // 'Invalid id for the pool addresses provider'\\n    string public constant NOT_CONTRACT = \\\"9\\\"; // 'Address is not a contract'\\n    string public constant CALLER_NOT_POOL_CONFIGURATOR = \\\"10\\\"; // 'The caller of the function is not the pool configurator'\\n    string public constant CALLER_NOT_ATOKEN = \\\"11\\\"; // 'The caller of the function is not an AToken'\\n    string public constant INVALID_ADDRESSES_PROVIDER = \\\"12\\\"; // 'The address of the pool addresses provider is invalid'\\n    string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = \\\"13\\\"; // 'Invalid return value of the flashloan executor function'\\n    string public constant RESERVE_ALREADY_ADDED = \\\"14\\\"; // 'Reserve has already been added to reserve list'\\n    string public constant NO_MORE_RESERVES_ALLOWED = \\\"15\\\"; // 'Maximum amount of reserves in the pool reached'\\n    string public constant EMODE_CATEGORY_RESERVED = \\\"16\\\"; // 'Zero eMode category is reserved for volatile heterogeneous assets'\\n    string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = \\\"17\\\"; // 'Invalid eMode category assignment to asset'\\n    string public constant RESERVE_LIQUIDITY_NOT_ZERO = \\\"18\\\"; // 'The liquidity of the reserve needs to be 0'\\n    string public constant FLASHLOAN_PREMIUM_INVALID = \\\"19\\\"; // 'Invalid flashloan premium'\\n    string public constant INVALID_RESERVE_PARAMS = \\\"20\\\"; // 'Invalid risk parameters for the reserve'\\n    string public constant INVALID_EMODE_CATEGORY_PARAMS = \\\"21\\\"; // 'Invalid risk parameters for the eMode category'\\n    string public constant BRIDGE_PROTOCOL_FEE_INVALID = \\\"22\\\"; // 'Invalid bridge protocol fee'\\n    string public constant CALLER_MUST_BE_POOL = \\\"23\\\"; // 'The caller of this function must be a pool'\\n    string public constant INVALID_MINT_AMOUNT = \\\"24\\\"; // 'Invalid amount to mint'\\n    string public constant INVALID_BURN_AMOUNT = \\\"25\\\"; // 'Invalid amount to burn'\\n    string public constant INVALID_AMOUNT = \\\"26\\\"; // 'Amount must be greater than 0'\\n    string public constant RESERVE_INACTIVE = \\\"27\\\"; // 'Action requires an active reserve'\\n    string public constant RESERVE_FROZEN = \\\"28\\\"; // 'Action cannot be performed because the reserve is frozen'\\n    string public constant RESERVE_PAUSED = \\\"29\\\"; // 'Action cannot be performed because the reserve is paused'\\n    string public constant BORROWING_NOT_ENABLED = \\\"30\\\"; // 'Borrowing is not enabled'\\n    string public constant STABLE_BORROWING_NOT_ENABLED = \\\"31\\\"; // 'Stable borrowing is not enabled'\\n    string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = \\\"32\\\"; // 'User cannot withdraw more than the available balance'\\n    string public constant INVALID_INTEREST_RATE_MODE_SELECTED = \\\"33\\\"; // 'Invalid interest rate mode selected'\\n    string public constant COLLATERAL_BALANCE_IS_ZERO = \\\"34\\\"; // 'The collateral balance is 0'\\n    string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD =\\n        \\\"35\\\"; // 'Health factor is lesser than the liquidation threshold'\\n    string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = \\\"36\\\"; // 'There is not enough collateral to cover a new borrow'\\n    string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = \\\"37\\\"; // 'Collateral is (mostly) the same currency that is being borrowed'\\n    string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = \\\"38\\\"; // 'The requested amount is greater than the max loan size in stable rate mode'\\n    string public constant NO_DEBT_OF_SELECTED_TYPE = \\\"39\\\"; // 'For repayment of a specific type of debt, the user needs to have debt that type'\\n    string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = \\\"40\\\"; // 'To repay on behalf of a user an explicit amount to repay is needed'\\n    string public constant NO_OUTSTANDING_STABLE_DEBT = \\\"41\\\"; // 'User does not have outstanding stable rate debt on this reserve'\\n    string public constant NO_OUTSTANDING_VARIABLE_DEBT = \\\"42\\\"; // 'User does not have outstanding variable rate debt on this reserve'\\n    string public constant UNDERLYING_BALANCE_ZERO = \\\"43\\\"; // 'The underlying balance needs to be greater than 0'\\n    string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = \\\"44\\\"; // 'Interest rate rebalance conditions were not met'\\n    string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = \\\"45\\\"; // 'Health factor is not below the threshold'\\n    string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = \\\"46\\\"; // 'The collateral chosen cannot be liquidated'\\n    string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \\\"47\\\"; // 'User did not borrow the specified currency'\\n    string public constant INCONSISTENT_FLASHLOAN_PARAMS = \\\"49\\\"; // 'Inconsistent flashloan parameters'\\n    string public constant BORROW_CAP_EXCEEDED = \\\"50\\\"; // 'Borrow cap is exceeded'\\n    string public constant SUPPLY_CAP_EXCEEDED = \\\"51\\\"; // 'Supply cap is exceeded'\\n    string public constant UNBACKED_MINT_CAP_EXCEEDED = \\\"52\\\"; // 'Unbacked mint cap is exceeded'\\n    string public constant DEBT_CEILING_EXCEEDED = \\\"53\\\"; // 'Debt ceiling is exceeded'\\n    string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = \\\"54\\\"; // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'\\n    string public constant STABLE_DEBT_NOT_ZERO = \\\"55\\\"; // 'Stable debt supply is not zero'\\n    string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = \\\"56\\\"; // 'Variable debt supply is not zero'\\n    string public constant LTV_VALIDATION_FAILED = \\\"57\\\"; // 'Ltv validation failed'\\n    string public constant INCONSISTENT_EMODE_CATEGORY = \\\"58\\\"; // 'Inconsistent eMode category'\\n    string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = \\\"59\\\"; // 'Price oracle sentinel validation failed'\\n    string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = \\\"60\\\"; // 'Asset is not borrowable in isolation mode'\\n    string public constant RESERVE_ALREADY_INITIALIZED = \\\"61\\\"; // 'Reserve has already been initialized'\\n    string public constant USER_IN_ISOLATION_MODE_OR_LTV_ZERO = \\\"62\\\"; // 'User is in isolation mode or ltv is zero'\\n    string public constant INVALID_LTV = \\\"63\\\"; // 'Invalid ltv parameter for the reserve'\\n    string public constant INVALID_LIQ_THRESHOLD = \\\"64\\\"; // 'Invalid liquidity threshold parameter for the reserve'\\n    string public constant INVALID_LIQ_BONUS = \\\"65\\\"; // 'Invalid liquidity bonus parameter for the reserve'\\n    string public constant INVALID_DECIMALS = \\\"66\\\"; // 'Invalid decimals parameter of the underlying asset of the reserve'\\n    string public constant INVALID_RESERVE_FACTOR = \\\"67\\\"; // 'Invalid reserve factor parameter for the reserve'\\n    string public constant INVALID_BORROW_CAP = \\\"68\\\"; // 'Invalid borrow cap for the reserve'\\n    string public constant INVALID_SUPPLY_CAP = \\\"69\\\"; // 'Invalid supply cap for the reserve'\\n    string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = \\\"70\\\"; // 'Invalid liquidation protocol fee for the reserve'\\n    string public constant INVALID_EMODE_CATEGORY = \\\"71\\\"; // 'Invalid eMode category for the reserve'\\n    string public constant INVALID_UNBACKED_MINT_CAP = \\\"72\\\"; // 'Invalid unbacked mint cap for the reserve'\\n    string public constant INVALID_DEBT_CEILING = \\\"73\\\"; // 'Invalid debt ceiling for the reserve\\n    string public constant INVALID_RESERVE_INDEX = \\\"74\\\"; // 'Invalid reserve index'\\n    string public constant ACL_ADMIN_CANNOT_BE_ZERO = \\\"75\\\"; // 'ACL admin cannot be set to the zero address'\\n    string public constant INCONSISTENT_PARAMS_LENGTH = \\\"76\\\"; // 'Array parameters that should be equal length are not'\\n    string public constant ZERO_ADDRESS_NOT_VALID = \\\"77\\\"; // 'Zero address not valid'\\n    string public constant INVALID_EXPIRATION = \\\"78\\\"; // 'Invalid expiration'\\n    string public constant INVALID_SIGNATURE = \\\"79\\\"; // 'Invalid signature'\\n    string public constant OPERATION_NOT_SUPPORTED = \\\"80\\\"; // 'Operation not supported'\\n    string public constant DEBT_CEILING_NOT_ZERO = \\\"81\\\"; // 'Debt ceiling is not zero'\\n    string public constant ASSET_NOT_LISTED = \\\"82\\\"; // 'Asset is not listed'\\n    string public constant INVALID_OPTIMAL_USAGE_RATIO = \\\"83\\\"; // 'Invalid optimal usage ratio'\\n    string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = \\\"84\\\"; // 'Invalid optimal stable to total debt ratio'\\n    string public constant UNDERLYING_CANNOT_BE_RESCUED = \\\"85\\\"; // 'The underlying asset cannot be rescued'\\n    string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = \\\"86\\\"; // 'Reserve has already been added to reserve list'\\n    string public constant POOL_ADDRESSES_DO_NOT_MATCH = \\\"87\\\"; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\\n    string public constant STABLE_BORROWING_ENABLED = \\\"88\\\"; // 'Stable borrowing is enabled'\\n    string public constant SILOED_BORROWING_VIOLATION = \\\"89\\\"; // 'User is trying to borrow multiple assets including a siloed one'\\n    string public constant RESERVE_DEBT_NOT_ZERO = \\\"90\\\"; // the total debt of the reserve needs to be 0\\n    string public constant FLASHLOAN_DISABLED = \\\"91\\\"; // FlashLoaning for this asset is disabled\\n}\\n\",\"keccak256\":\"0x966464a2f371b384a2b9d43435e2fb36a4c739ffbc77493d59df08f4f5862e09\",\"license\":\"BUSL-1.1\"},\"contracts/lending/core/protocol/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @notice Provides functions to perform calculations with Wad and Ray units\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\\n * with 27 digits of precision)\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n */\\nlibrary WadRayMath {\\n    // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = 0.5e18;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = 0.5e27;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\\n        assembly {\\n            if iszero(\\n                or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_WAD), WAD)\\n        }\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\\n        assembly {\\n            if or(\\n                iszero(b),\\n                iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, WAD), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raymul b\\n     */\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\\n        assembly {\\n            if iszero(\\n                or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_RAY), RAY)\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raydiv b\\n     */\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\\n        assembly {\\n            if or(\\n                iszero(b),\\n                iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, RAY), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @return b = a converted to wad, rounded half up to the nearest wad\\n     */\\n    function rayToWad(uint256 a) internal pure returns (uint256 b) {\\n        assembly {\\n            b := div(a, WAD_RAY_RATIO)\\n            let remainder := mod(a, WAD_RAY_RATIO)\\n            if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\\n                b := add(b, 1)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @return b = a converted in ray\\n     */\\n    function wadToRay(uint256 a) internal pure returns (uint256 b) {\\n        // to avoid overflow, b/WAD_RAY_RATIO == a\\n        assembly {\\n            b := mul(a, WAD_RAY_RATIO)\\n\\n            if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd200dd533724fa5750f20b0f8048170ac85813a7c70f21dfeff1a06bd0528de2\",\"license\":\"BUSL-1.1\"},\"contracts/lending/core/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        //timestamp of last update\\n        uint40 lastUpdateTimestamp;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint16 id;\\n        //aToken address\\n        address aTokenAddress;\\n        //stableDebtToken address\\n        address stableDebtTokenAddress;\\n        //variableDebtToken address\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the current treasury balance, scaled\\n        uint128 accruedToTreasury;\\n        //the outstanding unbacked aTokens minted through the bridging feature\\n        uint128 unbacked;\\n        //the outstanding debt borrowed against this asset in isolation mode\\n        uint128 isolationModeTotalDebt;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60: asset is paused\\n        //bit 61: borrowing in isolation mode is enabled\\n        //bit 62: siloed borrowing enabled\\n        //bit 63: flashloaning enabled\\n        //bit 64-79: reserve factor\\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n        //bit 152-167 liquidation protocol fee\\n        //bit 168-175 eMode category\\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n        //bit 252-255 unused\\n\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        /**\\n         * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n         * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n         * asset is borrowed by the user.\\n         */\\n        uint256 data;\\n    }\\n\\n    struct EModeCategory {\\n        // each eMode category has a custom ltv and liquidation threshold\\n        uint16 ltv;\\n        uint16 liquidationThreshold;\\n        uint16 liquidationBonus;\\n        // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n        address priceSource;\\n        string label;\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n\\n    struct ReserveCache {\\n        uint256 currScaledVariableDebt;\\n        uint256 nextScaledVariableDebt;\\n        uint256 currPrincipalStableDebt;\\n        uint256 currAvgStableBorrowRate;\\n        uint256 currTotalStableDebt;\\n        uint256 nextAvgStableBorrowRate;\\n        uint256 nextTotalStableDebt;\\n        uint256 currLiquidityIndex;\\n        uint256 nextLiquidityIndex;\\n        uint256 currVariableBorrowIndex;\\n        uint256 nextVariableBorrowIndex;\\n        uint256 currLiquidityRate;\\n        uint256 currVariableBorrowRate;\\n        uint256 reserveFactor;\\n        ReserveConfigurationMap reserveConfiguration;\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        uint40 reserveLastUpdateTimestamp;\\n        uint40 stableDebtLastUpdateTimestamp;\\n    }\\n\\n    struct ExecuteLiquidationCallParams {\\n        uint256 reservesCount;\\n        uint256 debtToCover;\\n        address collateralAsset;\\n        address debtAsset;\\n        address user;\\n        bool receiveAToken;\\n        address priceOracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteSupplyParams {\\n        address asset;\\n        uint256 amount;\\n        address onBehalfOf;\\n        uint16 referralCode;\\n    }\\n\\n    struct ExecuteBorrowParams {\\n        address asset;\\n        address user;\\n        address onBehalfOf;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint16 referralCode;\\n        bool releaseUnderlying;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteRepayParams {\\n        address asset;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        address onBehalfOf;\\n        bool useATokens;\\n    }\\n\\n    struct ExecuteWithdrawParams {\\n        address asset;\\n        uint256 amount;\\n        address to;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ExecuteSetUserEModeParams {\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 categoryId;\\n    }\\n\\n    struct FinalizeTransferParams {\\n        address asset;\\n        address from;\\n        address to;\\n        uint256 amount;\\n        uint256 balanceFromBefore;\\n        uint256 balanceToBefore;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 fromEModeCategory;\\n    }\\n\\n    struct FlashloanParams {\\n        address receiverAddress;\\n        address[] assets;\\n        uint256[] amounts;\\n        uint256[] interestRateModes;\\n        address onBehalfOf;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address addressesProvider;\\n        uint8 userEModeCategory;\\n        bool isAuthorizedFlashBorrower;\\n    }\\n\\n    struct FlashloanSimpleParams {\\n        address receiverAddress;\\n        address asset;\\n        uint256 amount;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n    }\\n\\n    struct FlashLoanRepaymentParams {\\n        uint256 amount;\\n        uint256 totalPremium;\\n        uint256 flashLoanPremiumToProtocol;\\n        address asset;\\n        address receiverAddress;\\n        uint16 referralCode;\\n    }\\n\\n    struct CalculateUserAccountDataParams {\\n        UserConfigurationMap userConfig;\\n        uint256 reservesCount;\\n        address user;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ValidateBorrowParams {\\n        ReserveCache reserveCache;\\n        UserConfigurationMap userConfig;\\n        address asset;\\n        address userAddress;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint256 maxStableLoanPercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n        bool isolationModeActive;\\n        address isolationModeCollateralAddress;\\n        uint256 isolationModeDebtCeiling;\\n    }\\n\\n    struct ValidateLiquidationCallParams {\\n        ReserveCache debtReserveCache;\\n        uint256 totalDebt;\\n        uint256 healthFactor;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct CalculateInterestRatesParams {\\n        uint256 unbacked;\\n        uint256 liquidityAdded;\\n        uint256 liquidityTaken;\\n        uint256 totalStableDebt;\\n        uint256 totalVariableDebt;\\n        uint256 averageStableBorrowRate;\\n        uint256 reserveFactor;\\n        address reserve;\\n        address aToken;\\n    }\\n\\n    struct InitReserveParams {\\n        address asset;\\n        address aTokenAddress;\\n        address stableDebtAddress;\\n        address variableDebtAddress;\\n        address interestRateStrategyAddress;\\n        uint16 reservesCount;\\n        uint16 maxNumberReserves;\\n    }\\n}\\n\",\"keccak256\":\"0x5416c13face4a4dc40d5446fa0dd98ecad2de6448f485b92403dfe5db22a034b\",\"license\":\"BUSL-1.1\"},\"contracts/lending/core/protocol/tokenization/base/IncentivizedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.10;\\n\\nimport {Context} from \\\"../../../dependencies/openzeppelin/contracts/Context.sol\\\";\\nimport {IERC20} from \\\"../../../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\nimport {IERC20Detailed} from \\\"../../../dependencies/openzeppelin/contracts/IERC20Detailed.sol\\\";\\nimport {SafeCast} from \\\"../../../dependencies/openzeppelin/contracts/SafeCast.sol\\\";\\nimport {WadRayMath} from \\\"../../libraries/math/WadRayMath.sol\\\";\\nimport {Errors} from \\\"../../libraries/helpers/Errors.sol\\\";\\nimport {IAaveIncentivesController} from \\\"../../../interfaces/IAaveIncentivesController.sol\\\";\\nimport {IPoolAddressesProvider} from \\\"../../../interfaces/IPoolAddressesProvider.sol\\\";\\nimport {IPool} from \\\"../../../interfaces/IPool.sol\\\";\\nimport {IACLManager} from \\\"../../../interfaces/IACLManager.sol\\\";\\n\\n/**\\n * @title IncentivizedERC20\\n * @author Aave, inspired by the Openzeppelin ERC20 implementation\\n * @notice Basic ERC20 implementation\\n */\\nabstract contract IncentivizedERC20 is Context, IERC20Detailed {\\n    using WadRayMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /**\\n     * @dev Only pool admin can call functions marked by this modifier.\\n     */\\n    modifier onlyPoolAdmin() {\\n        IACLManager aclManager = IACLManager(\\n            _addressesProvider.getACLManager()\\n        );\\n        require(\\n            aclManager.isPoolAdmin(msg.sender),\\n            Errors.CALLER_NOT_POOL_ADMIN\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only pool can call functions marked by this modifier.\\n     */\\n    modifier onlyPool() {\\n        require(_msgSender() == address(POOL), Errors.CALLER_MUST_BE_POOL);\\n        _;\\n    }\\n\\n    /**\\n     * @dev UserState - additionalData is a flexible field.\\n     * ATokens and VariableDebtTokens use this field store the index of the\\n     * user's last supply/withdrawal/borrow/repayment. StableDebtTokens use\\n     * this field to store the user's stable rate.\\n     */\\n    struct UserState {\\n        uint128 balance;\\n        uint128 additionalData;\\n    }\\n    // Map of users address and their state data (userAddress => userStateData)\\n    mapping(address => UserState) internal _userState;\\n\\n    // Map of allowances (delegator => delegatee => allowanceAmount)\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 internal _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n    IAaveIncentivesController internal _incentivesController;\\n    IPoolAddressesProvider internal immutable _addressesProvider;\\n    IPool public immutable POOL;\\n\\n    /**\\n     * @dev Constructor.\\n     * @param pool The reference to the main Pool contract\\n     * @param tokenName The name of the token\\n     * @param tokenSymbol The symbol of the token\\n     * @param tokenDecimals The number of decimals of the token\\n     */\\n    constructor(\\n        IPool pool,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        uint8 tokenDecimals\\n    ) {\\n        _addressesProvider = pool.ADDRESSES_PROVIDER();\\n        _name = tokenName;\\n        _symbol = tokenSymbol;\\n        _decimals = tokenDecimals;\\n        POOL = pool;\\n    }\\n\\n    /// @inheritdoc IERC20Detailed\\n    function name() public view override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /// @inheritdoc IERC20Detailed\\n    function symbol() external view override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /// @inheritdoc IERC20Detailed\\n    function decimals() external view override returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function balanceOf(\\n        address account\\n    ) public view virtual override returns (uint256) {\\n        return _userState[account].balance;\\n    }\\n\\n    /**\\n     * @notice Returns the address of the Incentives Controller contract\\n     * @return The address of the Incentives Controller\\n     */\\n    function getIncentivesController()\\n        external\\n        view\\n        virtual\\n        returns (IAaveIncentivesController)\\n    {\\n        return _incentivesController;\\n    }\\n\\n    /**\\n     * @notice Sets a new Incentives Controller\\n     * @param controller the new Incentives controller\\n     */\\n    function setIncentivesController(\\n        IAaveIncentivesController controller\\n    ) external onlyPoolAdmin {\\n        _incentivesController = controller;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        uint128 castAmount = amount.toUint128();\\n        _transfer(_msgSender(), recipient, castAmount);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IERC20\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external virtual override returns (bool) {\\n        uint128 castAmount = amount.toUint128();\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()] - castAmount\\n        );\\n        _transfer(sender, recipient, castAmount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Increases the allowance of spender to spend _msgSender() tokens\\n     * @param spender The user allowed to spend on behalf of _msgSender()\\n     * @param addedValue The amount being added to the allowance\\n     * @return `true`\\n     */\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external virtual returns (bool) {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] + addedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Decreases the allowance of spender to spend _msgSender() tokens\\n     * @param spender The user allowed to spend on behalf of _msgSender()\\n     * @param subtractedValue The amount being subtracted to the allowance\\n     * @return `true`\\n     */\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external virtual returns (bool) {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender] - subtractedValue\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfers tokens between two users and apply incentives if defined.\\n     * @param sender The source address\\n     * @param recipient The destination address\\n     * @param amount The amount getting transferred\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint128 amount\\n    ) internal virtual {\\n        uint128 oldSenderBalance = _userState[sender].balance;\\n        _userState[sender].balance = oldSenderBalance - amount;\\n        uint128 oldRecipientBalance = _userState[recipient].balance;\\n        _userState[recipient].balance = oldRecipientBalance + amount;\\n\\n        IAaveIncentivesController incentivesControllerLocal = _incentivesController;\\n        if (address(incentivesControllerLocal) != address(0)) {\\n            uint256 currentTotalSupply = _totalSupply;\\n            incentivesControllerLocal.handleAction(\\n                sender,\\n                currentTotalSupply,\\n                oldSenderBalance\\n            );\\n            if (sender != recipient) {\\n                incentivesControllerLocal.handleAction(\\n                    recipient,\\n                    currentTotalSupply,\\n                    oldRecipientBalance\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to use `amount` of `owner`s balance\\n     * @param owner The address owning the tokens\\n     * @param spender The address approved for spending\\n     * @param amount The amount of tokens to approve spending of\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Update the name of the token\\n     * @param newName The new name for the token\\n     */\\n    function _setName(string memory newName) internal {\\n        _name = newName;\\n    }\\n\\n    /**\\n     * @notice Update the symbol for the token\\n     * @param newSymbol The new symbol for the token\\n     */\\n    function _setSymbol(string memory newSymbol) internal {\\n        _symbol = newSymbol;\\n    }\\n\\n    /**\\n     * @notice Update the number of decimals for the token\\n     * @param newDecimals The new number of decimals for the token\\n     */\\n    function _setDecimals(uint8 newDecimals) internal {\\n        _decimals = newDecimals;\\n    }\\n}\\n\",\"keccak256\":\"0xd4b3d56ae7ecb4df7c4372aa1aa8dabb272cb7d69d0622c3048ad55dde1f5fc6\",\"license\":\"BUSL-1.1\"},\"contracts/lending/periphery/misc/UiIncentiveDataProviderV3.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20Detailed} from \\\"contracts/lending/core/dependencies/openzeppelin/contracts/IERC20Detailed.sol\\\";\\nimport {IPoolAddressesProvider} from \\\"contracts/lending/core/interfaces/IPoolAddressesProvider.sol\\\";\\nimport {IPool} from \\\"contracts/lending/core/interfaces/IPool.sol\\\";\\nimport {IncentivizedERC20} from \\\"contracts/lending/core/protocol/tokenization/base/IncentivizedERC20.sol\\\";\\nimport {UserConfiguration} from \\\"contracts/lending/core/protocol/libraries/configuration/UserConfiguration.sol\\\";\\nimport {DataTypes} from \\\"contracts/lending/core/protocol/libraries/types/DataTypes.sol\\\";\\nimport {IRewardsController} from \\\"../rewards/interfaces/IRewardsController.sol\\\";\\nimport {IUiIncentiveDataProviderV3} from \\\"./interfaces/IUiIncentiveDataProviderV3.sol\\\";\\nimport {IAaveOracle} from \\\"contracts/lending/core/interfaces/IAaveOracle.sol\\\";\\n\\ncontract UiIncentiveDataProviderV3 is IUiIncentiveDataProviderV3 {\\n    using UserConfiguration for DataTypes.UserConfigurationMap;\\n\\n    function getFullReservesIncentiveData(\\n        IPoolAddressesProvider provider,\\n        address user\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            AggregatedReserveIncentiveData[] memory,\\n            UserReserveIncentiveData[] memory\\n        )\\n    {\\n        return (\\n            _getReservesIncentivesData(provider),\\n            _getUserReservesIncentivesData(provider, user)\\n        );\\n    }\\n\\n    function getReservesIncentivesData(\\n        IPoolAddressesProvider provider\\n    ) external view override returns (AggregatedReserveIncentiveData[] memory) {\\n        return _getReservesIncentivesData(provider);\\n    }\\n\\n    function _getReservesIncentivesData(\\n        IPoolAddressesProvider provider\\n    ) private view returns (AggregatedReserveIncentiveData[] memory) {\\n        IPool pool = IPool(provider.getPool());\\n        address[] memory reserves = pool.getReservesList();\\n        AggregatedReserveIncentiveData[]\\n            memory reservesIncentiveData = new AggregatedReserveIncentiveData[](\\n                reserves.length\\n            );\\n        // Iterate through the reserves to get all the information from the (a/s/v) Tokens\\n        for (uint256 i = 0; i < reserves.length; i++) {\\n            AggregatedReserveIncentiveData\\n                memory reserveIncentiveData = reservesIncentiveData[i];\\n            reserveIncentiveData.underlyingAsset = reserves[i];\\n\\n            DataTypes.ReserveData memory baseData = pool.getReserveData(\\n                reserves[i]\\n            );\\n\\n            // Get aTokens rewards information\\n            // TODO: check that this is deployed correctly on contract and remove casting\\n            IRewardsController aTokenIncentiveController = IRewardsController(\\n                address(\\n                    IncentivizedERC20(baseData.aTokenAddress)\\n                        .getIncentivesController()\\n                )\\n            );\\n            RewardInfo[] memory aRewardsInformation;\\n            if (address(aTokenIncentiveController) != address(0)) {\\n                address[]\\n                    memory aTokenRewardAddresses = aTokenIncentiveController\\n                        .getRewardsByAsset(baseData.aTokenAddress);\\n\\n                aRewardsInformation = new RewardInfo[](\\n                    aTokenRewardAddresses.length\\n                );\\n                for (uint256 j = 0; j < aTokenRewardAddresses.length; ++j) {\\n                    RewardInfo memory rewardInformation;\\n                    rewardInformation\\n                        .rewardTokenAddress = aTokenRewardAddresses[j];\\n\\n                    (\\n                        rewardInformation.tokenIncentivesIndex,\\n                        rewardInformation.emissionPerSecond,\\n                        rewardInformation.incentivesLastUpdateTimestamp,\\n                        rewardInformation.emissionEndTimestamp\\n                    ) = aTokenIncentiveController.getRewardsData(\\n                        baseData.aTokenAddress,\\n                        rewardInformation.rewardTokenAddress\\n                    );\\n\\n                    rewardInformation.precision = aTokenIncentiveController\\n                        .getAssetDecimals(baseData.aTokenAddress);\\n                    rewardInformation.rewardTokenDecimals = IERC20Detailed(\\n                        rewardInformation.rewardTokenAddress\\n                    ).decimals();\\n                    rewardInformation.rewardTokenSymbol = IERC20Detailed(\\n                        rewardInformation.rewardTokenAddress\\n                    ).symbol();\\n\\n                    // Get price of reward token from Chainlink Proxy Oracle\\n                    rewardInformation\\n                        .rewardOracleAddress = aTokenIncentiveController\\n                        .getRewardOracle(rewardInformation.rewardTokenAddress);\\n                    address baseCurrency = IAaveOracle(\\n                        rewardInformation.rewardOracleAddress\\n                    ).BASE_CURRENCY();\\n                    rewardInformation\\n                        .priceFeedDecimals = _extractDecimalsValueFromBaseCurrencyUnitPrice(\\n                        baseCurrency\\n                    );\\n                    rewardInformation.rewardPriceFeed = int256(\\n                        IAaveOracle(rewardInformation.rewardOracleAddress)\\n                            .getAssetPrice(rewardInformation.rewardTokenAddress)\\n                    );\\n\\n                    aRewardsInformation[j] = rewardInformation;\\n                }\\n            }\\n\\n            reserveIncentiveData.aIncentiveData = IncentiveData(\\n                baseData.aTokenAddress,\\n                address(aTokenIncentiveController),\\n                aRewardsInformation\\n            );\\n\\n            // Get vTokens rewards information\\n            IRewardsController vTokenIncentiveController = IRewardsController(\\n                address(\\n                    IncentivizedERC20(baseData.variableDebtTokenAddress)\\n                        .getIncentivesController()\\n                )\\n            );\\n            RewardInfo[] memory vRewardsInformation;\\n            if (address(vTokenIncentiveController) != address(0)) {\\n                address[]\\n                    memory vTokenRewardAddresses = vTokenIncentiveController\\n                        .getRewardsByAsset(baseData.variableDebtTokenAddress);\\n                vRewardsInformation = new RewardInfo[](\\n                    vTokenRewardAddresses.length\\n                );\\n                for (uint256 j = 0; j < vTokenRewardAddresses.length; ++j) {\\n                    RewardInfo memory rewardInformation;\\n                    rewardInformation\\n                        .rewardTokenAddress = vTokenRewardAddresses[j];\\n\\n                    (\\n                        rewardInformation.tokenIncentivesIndex,\\n                        rewardInformation.emissionPerSecond,\\n                        rewardInformation.incentivesLastUpdateTimestamp,\\n                        rewardInformation.emissionEndTimestamp\\n                    ) = vTokenIncentiveController.getRewardsData(\\n                        baseData.variableDebtTokenAddress,\\n                        rewardInformation.rewardTokenAddress\\n                    );\\n\\n                    rewardInformation.precision = vTokenIncentiveController\\n                        .getAssetDecimals(baseData.variableDebtTokenAddress);\\n                    rewardInformation.rewardTokenDecimals = IERC20Detailed(\\n                        rewardInformation.rewardTokenAddress\\n                    ).decimals();\\n                    rewardInformation.rewardTokenSymbol = IERC20Detailed(\\n                        rewardInformation.rewardTokenAddress\\n                    ).symbol();\\n\\n                    // Get price of reward token from Chainlink Proxy Oracle\\n                    rewardInformation\\n                        .rewardOracleAddress = vTokenIncentiveController\\n                        .getRewardOracle(rewardInformation.rewardTokenAddress);\\n                    address baseCurrency = IAaveOracle(\\n                        rewardInformation.rewardOracleAddress\\n                    ).BASE_CURRENCY();\\n                    rewardInformation\\n                        .priceFeedDecimals = _extractDecimalsValueFromBaseCurrencyUnitPrice(\\n                        baseCurrency\\n                    );\\n                    rewardInformation.rewardPriceFeed = int256(\\n                        IAaveOracle(rewardInformation.rewardOracleAddress)\\n                            .getAssetPrice(rewardInformation.rewardTokenAddress)\\n                    );\\n\\n                    vRewardsInformation[j] = rewardInformation;\\n                }\\n            }\\n\\n            reserveIncentiveData.vIncentiveData = IncentiveData(\\n                baseData.variableDebtTokenAddress,\\n                address(vTokenIncentiveController),\\n                vRewardsInformation\\n            );\\n\\n            // Get sTokens rewards information\\n            IRewardsController sTokenIncentiveController = IRewardsController(\\n                address(\\n                    IncentivizedERC20(baseData.stableDebtTokenAddress)\\n                        .getIncentivesController()\\n                )\\n            );\\n            RewardInfo[] memory sRewardsInformation;\\n            if (address(sTokenIncentiveController) != address(0)) {\\n                address[]\\n                    memory sTokenRewardAddresses = sTokenIncentiveController\\n                        .getRewardsByAsset(baseData.stableDebtTokenAddress);\\n                sRewardsInformation = new RewardInfo[](\\n                    sTokenRewardAddresses.length\\n                );\\n                for (uint256 j = 0; j < sTokenRewardAddresses.length; ++j) {\\n                    RewardInfo memory rewardInformation;\\n                    rewardInformation\\n                        .rewardTokenAddress = sTokenRewardAddresses[j];\\n\\n                    (\\n                        rewardInformation.tokenIncentivesIndex,\\n                        rewardInformation.emissionPerSecond,\\n                        rewardInformation.incentivesLastUpdateTimestamp,\\n                        rewardInformation.emissionEndTimestamp\\n                    ) = sTokenIncentiveController.getRewardsData(\\n                        baseData.stableDebtTokenAddress,\\n                        rewardInformation.rewardTokenAddress\\n                    );\\n\\n                    rewardInformation.precision = sTokenIncentiveController\\n                        .getAssetDecimals(baseData.stableDebtTokenAddress);\\n                    rewardInformation.rewardTokenDecimals = IERC20Detailed(\\n                        rewardInformation.rewardTokenAddress\\n                    ).decimals();\\n                    rewardInformation.rewardTokenSymbol = IERC20Detailed(\\n                        rewardInformation.rewardTokenAddress\\n                    ).symbol();\\n\\n                    // Get price of reward token from Chainlink Proxy Oracle\\n                    rewardInformation\\n                        .rewardOracleAddress = sTokenIncentiveController\\n                        .getRewardOracle(rewardInformation.rewardTokenAddress);\\n                    address baseCurrency = IAaveOracle(\\n                        rewardInformation.rewardOracleAddress\\n                    ).BASE_CURRENCY();\\n                    rewardInformation\\n                        .priceFeedDecimals = _extractDecimalsValueFromBaseCurrencyUnitPrice(\\n                        baseCurrency\\n                    );\\n                    rewardInformation.rewardPriceFeed = int256(\\n                        IAaveOracle(rewardInformation.rewardOracleAddress)\\n                            .getAssetPrice(rewardInformation.rewardTokenAddress)\\n                    );\\n\\n                    sRewardsInformation[j] = rewardInformation;\\n                }\\n            }\\n\\n            reserveIncentiveData.sIncentiveData = IncentiveData(\\n                baseData.stableDebtTokenAddress,\\n                address(sTokenIncentiveController),\\n                sRewardsInformation\\n            );\\n        }\\n\\n        return (reservesIncentiveData);\\n    }\\n\\n    function getUserReservesIncentivesData(\\n        IPoolAddressesProvider provider,\\n        address user\\n    ) external view override returns (UserReserveIncentiveData[] memory) {\\n        return _getUserReservesIncentivesData(provider, user);\\n    }\\n\\n    function _extractDecimalsValueFromBaseCurrencyUnitPrice(\\n        address baseCurrencyUnit\\n    ) private pure returns (uint8) {\\n        require(\\n            baseCurrencyUnit == address(0),\\n            \\\"Base currency unit must be USD\\\"\\n        );\\n\\n        // All V3 markets use USD based oracles which return values with 8 decimals\\n        return 8;\\n    }\\n\\n    function _getUserReservesIncentivesData(\\n        IPoolAddressesProvider provider,\\n        address user\\n    ) private view returns (UserReserveIncentiveData[] memory) {\\n        IPool pool = IPool(provider.getPool());\\n        address[] memory reserves = pool.getReservesList();\\n\\n        UserReserveIncentiveData[]\\n            memory userReservesIncentivesData = new UserReserveIncentiveData[](\\n                user != address(0) ? reserves.length : 0\\n            );\\n\\n        for (uint256 i = 0; i < reserves.length; i++) {\\n            DataTypes.ReserveData memory baseData = pool.getReserveData(\\n                reserves[i]\\n            );\\n\\n            // user reserve data\\n            userReservesIncentivesData[i].underlyingAsset = reserves[i];\\n\\n            IRewardsController aTokenIncentiveController = IRewardsController(\\n                address(\\n                    IncentivizedERC20(baseData.aTokenAddress)\\n                        .getIncentivesController()\\n                )\\n            );\\n            if (address(aTokenIncentiveController) != address(0)) {\\n                // get all rewards information from the asset\\n                address[]\\n                    memory aTokenRewardAddresses = aTokenIncentiveController\\n                        .getRewardsByAsset(baseData.aTokenAddress);\\n                UserRewardInfo[]\\n                    memory aUserRewardsInformation = new UserRewardInfo[](\\n                        aTokenRewardAddresses.length\\n                    );\\n                for (uint256 j = 0; j < aTokenRewardAddresses.length; ++j) {\\n                    UserRewardInfo memory userRewardInformation;\\n                    userRewardInformation\\n                        .rewardTokenAddress = aTokenRewardAddresses[j];\\n\\n                    userRewardInformation\\n                        .tokenIncentivesUserIndex = aTokenIncentiveController\\n                        .getUserAssetIndex(\\n                            user,\\n                            baseData.aTokenAddress,\\n                            userRewardInformation.rewardTokenAddress\\n                        );\\n\\n                    userRewardInformation\\n                        .userUnclaimedRewards = aTokenIncentiveController\\n                        .getUserAccruedRewards(\\n                            user,\\n                            userRewardInformation.rewardTokenAddress\\n                        );\\n                    userRewardInformation.rewardTokenDecimals = IERC20Detailed(\\n                        userRewardInformation.rewardTokenAddress\\n                    ).decimals();\\n                    userRewardInformation.rewardTokenSymbol = IERC20Detailed(\\n                        userRewardInformation.rewardTokenAddress\\n                    ).symbol();\\n\\n                    // Get price of reward token from Chainlink Proxy Oracle\\n                    userRewardInformation\\n                        .rewardOracleAddress = aTokenIncentiveController\\n                        .getRewardOracle(\\n                            userRewardInformation.rewardTokenAddress\\n                        );\\n                    address baseCurrency = IAaveOracle(\\n                        userRewardInformation.rewardOracleAddress\\n                    ).BASE_CURRENCY();\\n                    userRewardInformation\\n                        .priceFeedDecimals = _extractDecimalsValueFromBaseCurrencyUnitPrice(\\n                        baseCurrency\\n                    );\\n                    userRewardInformation.rewardPriceFeed = int256(\\n                        IAaveOracle(userRewardInformation.rewardOracleAddress)\\n                            .getAssetPrice(\\n                                userRewardInformation.rewardTokenAddress\\n                            )\\n                    );\\n\\n                    aUserRewardsInformation[j] = userRewardInformation;\\n                }\\n\\n                userReservesIncentivesData[i]\\n                    .aTokenIncentivesUserData = UserIncentiveData(\\n                    baseData.aTokenAddress,\\n                    address(aTokenIncentiveController),\\n                    aUserRewardsInformation\\n                );\\n            }\\n\\n            // variable debt token\\n            IRewardsController vTokenIncentiveController = IRewardsController(\\n                address(\\n                    IncentivizedERC20(baseData.variableDebtTokenAddress)\\n                        .getIncentivesController()\\n                )\\n            );\\n            if (address(vTokenIncentiveController) != address(0)) {\\n                // get all rewards information from the asset\\n                address[]\\n                    memory vTokenRewardAddresses = vTokenIncentiveController\\n                        .getRewardsByAsset(baseData.variableDebtTokenAddress);\\n                UserRewardInfo[]\\n                    memory vUserRewardsInformation = new UserRewardInfo[](\\n                        vTokenRewardAddresses.length\\n                    );\\n                for (uint256 j = 0; j < vTokenRewardAddresses.length; ++j) {\\n                    UserRewardInfo memory userRewardInformation;\\n                    userRewardInformation\\n                        .rewardTokenAddress = vTokenRewardAddresses[j];\\n\\n                    userRewardInformation\\n                        .tokenIncentivesUserIndex = vTokenIncentiveController\\n                        .getUserAssetIndex(\\n                            user,\\n                            baseData.variableDebtTokenAddress,\\n                            userRewardInformation.rewardTokenAddress\\n                        );\\n\\n                    userRewardInformation\\n                        .userUnclaimedRewards = vTokenIncentiveController\\n                        .getUserAccruedRewards(\\n                            user,\\n                            userRewardInformation.rewardTokenAddress\\n                        );\\n                    userRewardInformation.rewardTokenDecimals = IERC20Detailed(\\n                        userRewardInformation.rewardTokenAddress\\n                    ).decimals();\\n                    userRewardInformation.rewardTokenSymbol = IERC20Detailed(\\n                        userRewardInformation.rewardTokenAddress\\n                    ).symbol();\\n\\n                    // Get price of reward token from Chainlink Proxy Oracle\\n                    userRewardInformation\\n                        .rewardOracleAddress = vTokenIncentiveController\\n                        .getRewardOracle(\\n                            userRewardInformation.rewardTokenAddress\\n                        );\\n                    address baseCurrency = IAaveOracle(\\n                        userRewardInformation.rewardOracleAddress\\n                    ).BASE_CURRENCY();\\n                    userRewardInformation\\n                        .priceFeedDecimals = _extractDecimalsValueFromBaseCurrencyUnitPrice(\\n                        baseCurrency\\n                    );\\n                    userRewardInformation.rewardPriceFeed = int256(\\n                        IAaveOracle(userRewardInformation.rewardOracleAddress)\\n                            .getAssetPrice(\\n                                userRewardInformation.rewardTokenAddress\\n                            )\\n                    );\\n\\n                    vUserRewardsInformation[j] = userRewardInformation;\\n                }\\n\\n                userReservesIncentivesData[i]\\n                    .vTokenIncentivesUserData = UserIncentiveData(\\n                    baseData.variableDebtTokenAddress,\\n                    address(vTokenIncentiveController),\\n                    vUserRewardsInformation\\n                );\\n            }\\n\\n            // stable debt token\\n            IRewardsController sTokenIncentiveController = IRewardsController(\\n                address(\\n                    IncentivizedERC20(baseData.stableDebtTokenAddress)\\n                        .getIncentivesController()\\n                )\\n            );\\n            if (address(sTokenIncentiveController) != address(0)) {\\n                // get all rewards information from the asset\\n                address[]\\n                    memory sTokenRewardAddresses = sTokenIncentiveController\\n                        .getRewardsByAsset(baseData.stableDebtTokenAddress);\\n                UserRewardInfo[]\\n                    memory sUserRewardsInformation = new UserRewardInfo[](\\n                        sTokenRewardAddresses.length\\n                    );\\n                for (uint256 j = 0; j < sTokenRewardAddresses.length; ++j) {\\n                    UserRewardInfo memory userRewardInformation;\\n                    userRewardInformation\\n                        .rewardTokenAddress = sTokenRewardAddresses[j];\\n\\n                    userRewardInformation\\n                        .tokenIncentivesUserIndex = sTokenIncentiveController\\n                        .getUserAssetIndex(\\n                            user,\\n                            baseData.stableDebtTokenAddress,\\n                            userRewardInformation.rewardTokenAddress\\n                        );\\n\\n                    userRewardInformation\\n                        .userUnclaimedRewards = sTokenIncentiveController\\n                        .getUserAccruedRewards(\\n                            user,\\n                            userRewardInformation.rewardTokenAddress\\n                        );\\n                    userRewardInformation.rewardTokenDecimals = IERC20Detailed(\\n                        userRewardInformation.rewardTokenAddress\\n                    ).decimals();\\n                    userRewardInformation.rewardTokenSymbol = IERC20Detailed(\\n                        userRewardInformation.rewardTokenAddress\\n                    ).symbol();\\n\\n                    // Get price of reward token from Chainlink Proxy Oracle\\n                    userRewardInformation\\n                        .rewardOracleAddress = sTokenIncentiveController\\n                        .getRewardOracle(\\n                            userRewardInformation.rewardTokenAddress\\n                        );\\n                    address baseCurrency = IAaveOracle(\\n                        userRewardInformation.rewardOracleAddress\\n                    ).BASE_CURRENCY();\\n                    userRewardInformation\\n                        .priceFeedDecimals = _extractDecimalsValueFromBaseCurrencyUnitPrice(\\n                        baseCurrency\\n                    );\\n                    userRewardInformation.rewardPriceFeed = int256(\\n                        IAaveOracle(userRewardInformation.rewardOracleAddress)\\n                            .getAssetPrice(\\n                                userRewardInformation.rewardTokenAddress\\n                            )\\n                    );\\n\\n                    sUserRewardsInformation[j] = userRewardInformation;\\n                }\\n\\n                userReservesIncentivesData[i]\\n                    .sTokenIncentivesUserData = UserIncentiveData(\\n                    baseData.stableDebtTokenAddress,\\n                    address(sTokenIncentiveController),\\n                    sUserRewardsInformation\\n                );\\n            }\\n        }\\n\\n        return (userReservesIncentivesData);\\n    }\\n}\\n\",\"keccak256\":\"0x8d55f76675aea4c166ab8063b416c9eb8d5d6225b4128f01810e444ee37d8b1b\",\"license\":\"AGPL-3.0\"},\"contracts/lending/periphery/misc/interfaces/IUiIncentiveDataProviderV3.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.10;\\n\\nimport {IPoolAddressesProvider} from \\\"contracts/lending/core/interfaces/IPoolAddressesProvider.sol\\\";\\n\\ninterface IUiIncentiveDataProviderV3 {\\n    struct AggregatedReserveIncentiveData {\\n        address underlyingAsset;\\n        IncentiveData aIncentiveData;\\n        IncentiveData vIncentiveData;\\n        IncentiveData sIncentiveData;\\n    }\\n\\n    struct IncentiveData {\\n        address tokenAddress;\\n        address incentiveControllerAddress;\\n        RewardInfo[] rewardsTokenInformation;\\n    }\\n\\n    struct RewardInfo {\\n        string rewardTokenSymbol;\\n        address rewardTokenAddress;\\n        address rewardOracleAddress;\\n        uint256 emissionPerSecond;\\n        uint256 incentivesLastUpdateTimestamp;\\n        uint256 tokenIncentivesIndex;\\n        uint256 emissionEndTimestamp;\\n        int256 rewardPriceFeed;\\n        uint8 rewardTokenDecimals;\\n        uint8 precision;\\n        uint8 priceFeedDecimals;\\n    }\\n\\n    struct UserReserveIncentiveData {\\n        address underlyingAsset;\\n        UserIncentiveData aTokenIncentivesUserData;\\n        UserIncentiveData vTokenIncentivesUserData;\\n        UserIncentiveData sTokenIncentivesUserData;\\n    }\\n\\n    struct UserIncentiveData {\\n        address tokenAddress;\\n        address incentiveControllerAddress;\\n        UserRewardInfo[] userRewardsInformation;\\n    }\\n\\n    struct UserRewardInfo {\\n        string rewardTokenSymbol;\\n        address rewardOracleAddress;\\n        address rewardTokenAddress;\\n        uint256 userUnclaimedRewards;\\n        uint256 tokenIncentivesUserIndex;\\n        int256 rewardPriceFeed;\\n        uint8 priceFeedDecimals;\\n        uint8 rewardTokenDecimals;\\n    }\\n\\n    function getReservesIncentivesData(\\n        IPoolAddressesProvider provider\\n    ) external view returns (AggregatedReserveIncentiveData[] memory);\\n\\n    function getUserReservesIncentivesData(\\n        IPoolAddressesProvider provider,\\n        address user\\n    ) external view returns (UserReserveIncentiveData[] memory);\\n\\n    // generic method with full data\\n    function getFullReservesIncentiveData(\\n        IPoolAddressesProvider provider,\\n        address user\\n    )\\n        external\\n        view\\n        returns (\\n            AggregatedReserveIncentiveData[] memory,\\n            UserReserveIncentiveData[] memory\\n        );\\n}\\n\",\"keccak256\":\"0xed5c027ccc7e88ec3815d56d3fd1c76b18105c5ce64534fa43601e7935249b41\",\"license\":\"AGPL-3.0\"},\"contracts/lending/periphery/rewards/interfaces/IRewardsController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.10;\\n\\nimport {IAaveOracle} from \\\"contracts/lending/core/interfaces/IAaveOracle.sol\\\";\\nimport {IRewardsDistributor} from \\\"./IRewardsDistributor.sol\\\";\\nimport {ITransferStrategyBase} from \\\"./ITransferStrategyBase.sol\\\";\\nimport {RewardsDataTypes} from \\\"../libraries/RewardsDataTypes.sol\\\";\\n\\n/**\\n * @title IRewardsController\\n * @author Aave\\n * @notice Defines the basic interface for a Rewards Controller.\\n */\\ninterface IRewardsController is IRewardsDistributor {\\n    /**\\n     * @dev Emitted when a new address is whitelisted as claimer of rewards on behalf of a user\\n     * @param user The address of the user\\n     * @param claimer The address of the claimer\\n     */\\n    event ClaimerSet(address indexed user, address indexed claimer);\\n\\n    /**\\n     * @dev Emitted when rewards are claimed\\n     * @param user The address of the user rewards has been claimed on behalf of\\n     * @param reward The address of the token reward is claimed\\n     * @param to The address of the receiver of the rewards\\n     * @param claimer The address of the claimer\\n     * @param amount The amount of rewards claimed\\n     */\\n    event RewardsClaimed(\\n        address indexed user,\\n        address indexed reward,\\n        address indexed to,\\n        address claimer,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted when a transfer strategy is installed for the reward distribution\\n     * @param reward The address of the token reward\\n     * @param transferStrategy The address of TransferStrategy contract\\n     */\\n    event TransferStrategyInstalled(\\n        address indexed reward,\\n        address indexed transferStrategy\\n    );\\n\\n    /**\\n     * @dev Emitted when the reward oracle is updated\\n     * @param reward The address of the token reward\\n     * @param rewardOracle The address of oracle\\n     */\\n    event RewardOracleUpdated(\\n        address indexed reward,\\n        address indexed rewardOracle\\n    );\\n\\n    /**\\n     * @dev Whitelists an address to claim the rewards on behalf of another address\\n     * @param user The address of the user\\n     * @param claimer The address of the claimer\\n     */\\n    function setClaimer(address user, address claimer) external;\\n\\n    /**\\n     * @dev Sets a TransferStrategy logic contract that determines the logic of the rewards transfer\\n     * @param reward The address of the reward token\\n     * @param transferStrategy The address of the TransferStrategy logic contract\\n     */\\n    function setTransferStrategy(\\n        address reward,\\n        ITransferStrategyBase transferStrategy\\n    ) external;\\n\\n    /**\\n     * @dev Sets an Aave Oracle contract to enforce rewards with a source of value.\\n     * @notice At the moment of reward configuration, the Incentives Controller performs\\n     * a check to see if the reward asset oracle is compatible with IAaveOracle interface.\\n     * This check is enforced for integrators to be able to show incentives at\\n     * the current Aave UI without the need to setup an external price registry\\n     * @param reward The address of the reward to set the price aggregator\\n     * @param rewardOracle The address of price aggregator that follows IAaveOracle interface\\n     */\\n    function setRewardOracle(address reward, IAaveOracle rewardOracle) external;\\n\\n    /**\\n     * @dev Get the price aggregator oracle address\\n     * @param reward The address of the reward\\n     * @return The price oracle of the reward\\n     */\\n    function getRewardOracle(address reward) external view returns (address);\\n\\n    /**\\n     * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n     * @param user The address of the user\\n     * @return The claimer address\\n     */\\n    function getClaimer(address user) external view returns (address);\\n\\n    /**\\n     * @dev Returns the Transfer Strategy implementation contract address being used for a reward address\\n     * @param reward The address of the reward\\n     * @return The address of the TransferStrategy contract\\n     */\\n    function getTransferStrategy(\\n        address reward\\n    ) external view returns (address);\\n\\n    /**\\n     * @dev Configure assets to incentivize with an emission of rewards per second until the end of distribution.\\n     * @param config The assets configuration input, the list of structs contains the following fields:\\n     *   uint104 emissionPerSecond: The emission per second following rewards unit decimals.\\n     *   uint256 totalSupply: The total supply of the asset to incentivize\\n     *   uint40 distributionEnd: The end of the distribution of the incentives for an asset\\n     *   address asset: The asset address to incentivize\\n     *   address reward: The reward token address\\n     *   ITransferStrategy transferStrategy: The TransferStrategy address with the install hook and claim logic.\\n     *   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.\\n     *                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible.\\n     */\\n    function configureAssets(\\n        RewardsDataTypes.RewardsConfigInput[] memory config\\n    ) external;\\n\\n    /**\\n     * @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.\\n     * @dev The units of `totalSupply` and `userBalance` should be the same.\\n     * @param user The address of the user whose asset balance has changed\\n     * @param totalSupply The total supply of the asset prior to user balance change\\n     * @param userBalance The previous user balance prior to balance change\\n     **/\\n    function handleAction(\\n        address user,\\n        uint256 totalSupply,\\n        uint256 userBalance\\n    ) external;\\n\\n    /**\\n     * @dev Claims reward for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n     * @param assets List of assets to check eligible distributions before claiming rewards\\n     * @param amount The amount of rewards to claim\\n     * @param to The address that will be receiving the rewards\\n     * @param reward The address of the reward token\\n     * @return The amount of rewards claimed\\n     **/\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to,\\n        address reward\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The\\n     * caller must be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n     * @param assets The list of assets to check eligible distributions before claiming rewards\\n     * @param amount The amount of rewards to claim\\n     * @param user The address to check and claim rewards\\n     * @param to The address that will be receiving the rewards\\n     * @param reward The address of the reward token\\n     * @return The amount of rewards claimed\\n     **/\\n    function claimRewardsOnBehalf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address user,\\n        address to,\\n        address reward\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\n     * @param assets The list of assets to check eligible distributions before claiming rewards\\n     * @param amount The amount of rewards to claim\\n     * @param reward The address of the reward token\\n     * @return The amount of rewards claimed\\n     **/\\n    function claimRewardsToSelf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address reward\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims all rewards for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n     * @param assets The list of assets to check eligible distributions before claiming rewards\\n     * @param to The address that will be receiving the rewards\\n     * @return rewardsList List of addresses of the reward tokens\\n     * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardList\\\"\\n     **/\\n    function claimAllRewards(\\n        address[] calldata assets,\\n        address to\\n    )\\n        external\\n        returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n    /**\\n     * @dev Claims all rewards for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The caller must\\n     * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n     * @param assets The list of assets to check eligible distributions before claiming rewards\\n     * @param user The address to check and claim rewards\\n     * @param to The address that will be receiving the rewards\\n     * @return rewardsList List of addresses of the reward tokens\\n     * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n     **/\\n    function claimAllRewardsOnBehalf(\\n        address[] calldata assets,\\n        address user,\\n        address to\\n    )\\n        external\\n        returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n    /**\\n     * @dev Claims all reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\n     * @param assets The list of assets to check eligible distributions before claiming rewards\\n     * @return rewardsList List of addresses of the reward tokens\\n     * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n     **/\\n    function claimAllRewardsToSelf(\\n        address[] calldata assets\\n    )\\n        external\\n        returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n    /**\\n     * @dev Recieve more fund from the user to existing reward\\n     * @param reward The reward address is being distributed\\n     * @param amount The token amount is being funded\\n     * @param from The address of the one who funds the rewards\\n     */\\n    function depositRewardFrom(\\n        address reward,\\n        uint256 amount,\\n        address from\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2e8cf85bc4e5a65196087e790fca700d966a2fdce4a257ca1c91d3ebf38a68dd\",\"license\":\"AGPL-3.0\"},\"contracts/lending/periphery/rewards/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title IRewardsDistributor\\n * @author Aave\\n * @notice Defines the basic interface for a Rewards Distributor.\\n */\\ninterface IRewardsDistributor {\\n    /**\\n     * @dev Emitted when the configuration of the rewards of an asset is updated.\\n     * @param asset The address of the incentivized asset\\n     * @param reward The address of the reward token\\n     * @param oldEmission The old emissions per second value of the reward distribution\\n     * @param newEmission The new emissions per second value of the reward distribution\\n     * @param oldDistributionEnd The old end timestamp of the reward distribution\\n     * @param newDistributionEnd The new end timestamp of the reward distribution\\n     * @param assetIndex The index of the asset distribution\\n     */\\n    event AssetConfigUpdated(\\n        address indexed asset,\\n        address indexed reward,\\n        uint256 oldEmission,\\n        uint256 newEmission,\\n        uint256 oldDistributionEnd,\\n        uint256 newDistributionEnd,\\n        uint256 assetIndex\\n    );\\n\\n    /**\\n     * @dev Emitted when rewards of an asset are accrued on behalf of a user.\\n     * @param asset The address of the incentivized asset\\n     * @param reward The address of the reward token\\n     * @param user The address of the user that rewards are accrued on behalf of\\n     * @param assetIndex The index of the asset distribution\\n     * @param userIndex The index of the asset distribution on behalf of the user\\n     * @param rewardsAccrued The amount of rewards accrued\\n     */\\n    event Accrued(\\n        address indexed asset,\\n        address indexed reward,\\n        address indexed user,\\n        uint256 assetIndex,\\n        uint256 userIndex,\\n        uint256 rewardsAccrued\\n    );\\n\\n    /**\\n     * @dev Sets the end date for the distribution\\n     * @param asset The asset to incentivize\\n     * @param reward The reward token that incentives the asset\\n     * @param newDistributionEnd The end date of the incentivization, in unix time format\\n     **/\\n    function setDistributionEnd(\\n        address asset,\\n        address reward,\\n        uint32 newDistributionEnd\\n    ) external;\\n\\n    /**\\n     * @dev Sets the emission per second of a set of reward distributions\\n     * @param asset The asset is being incentivized\\n     * @param rewards List of reward addresses are being distributed\\n     * @param newEmissionsPerSecond List of new reward emissions per second\\n     */\\n    function setEmissionPerSecond(\\n        address asset,\\n        address[] calldata rewards,\\n        uint88[] calldata newEmissionsPerSecond\\n    ) external;\\n\\n    /**\\n     * @dev Gets the end date for the distribution\\n     * @param asset The incentivized asset\\n     * @param reward The reward token of the incentivized asset\\n     * @return The timestamp with the end of the distribution, in unix time format\\n     **/\\n    function getDistributionEnd(\\n        address asset,\\n        address reward\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the index of a user on a reward distribution\\n     * @param user Address of the user\\n     * @param asset The incentivized asset\\n     * @param reward The reward token of the incentivized asset\\n     * @return The current user asset index, not including new distributions\\n     **/\\n    function getUserAssetIndex(\\n        address user,\\n        address asset,\\n        address reward\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the configuration of the distribution reward for a certain asset\\n     * @param asset The incentivized asset\\n     * @param reward The reward token of the incentivized asset\\n     * @return The index of the asset distribution\\n     * @return The emission per second of the reward distribution\\n     * @return The timestamp of the last update of the index\\n     * @return The timestamp of the distribution end\\n     **/\\n    function getRewardsData(\\n        address asset,\\n        address reward\\n    ) external view returns (uint256, uint256, uint256, uint256);\\n\\n    /**\\n     * @dev Calculates the next value of an specific distribution index, with validations.\\n     * @param asset The incentivized asset\\n     * @param reward The reward token of the incentivized asset\\n     * @return The old index of the asset distribution\\n     * @return The new index of the asset distribution\\n     **/\\n    function getAssetIndex(\\n        address asset,\\n        address reward\\n    ) external view returns (uint256, uint256);\\n\\n    /**\\n     * @dev Returns the list of available reward token addresses of an incentivized asset\\n     * @param asset The incentivized asset\\n     * @return List of rewards addresses of the input asset\\n     **/\\n    function getRewardsByAsset(\\n        address asset\\n    ) external view returns (address[] memory);\\n\\n    /**\\n     * @dev Returns the list of available reward addresses\\n     * @return List of rewards supported in this contract\\n     **/\\n    function getRewardsList() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Returns the accrued rewards balance of a user, not including virtually accrued rewards since last distribution.\\n     * @param user The address of the user\\n     * @param reward The address of the reward token\\n     * @return Unclaimed rewards, not including new distributions\\n     **/\\n    function getUserAccruedRewards(\\n        address user,\\n        address reward\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a single rewards balance of a user, including virtually accrued and unrealized claimable rewards.\\n     * @param assets List of incentivized assets to check eligible distributions\\n     * @param user The address of the user\\n     * @param reward The address of the reward token\\n     * @return The rewards amount\\n     **/\\n    function getUserRewards(\\n        address[] calldata assets,\\n        address user,\\n        address reward\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a list all rewards of a user, including already accrued and unrealized claimable rewards\\n     * @param assets List of incentivized assets to check eligible distributions\\n     * @param user The address of the user\\n     * @return The list of reward addresses\\n     * @return The list of unclaimed amount of rewards\\n     **/\\n    function getAllUserRewards(\\n        address[] calldata assets,\\n        address user\\n    ) external view returns (address[] memory, uint256[] memory);\\n\\n    /**\\n     * @dev Returns the decimals of an asset to calculate the distribution delta\\n     * @param asset The address to retrieve decimals\\n     * @return The decimals of an underlying asset\\n     */\\n    function getAssetDecimals(address asset) external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the address of the emission manager\\n     * @return The address of the EmissionManager\\n     */\\n    function EMISSION_MANAGER() external view returns (address);\\n\\n    /**\\n     * @dev Returns the address of the emission manager.\\n     * Deprecated: This getter is maintained for compatibility purposes. Use the `EMISSION_MANAGER()` function instead.\\n     * @return The address of the EmissionManager\\n     */\\n    function getEmissionManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9188989e40f8801d5a12caa71ced3c682069a6116f4f092a2319ab3d49192613\",\"license\":\"AGPL-3.0\"},\"contracts/lending/periphery/rewards/interfaces/ITransferStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.10;\\n\\ninterface ITransferStrategyBase {\\n    event EmergencyWithdrawal(\\n        address indexed caller,\\n        address indexed token,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Perform custom transfer logic via delegate call from source contract to a TransferStrategy implementation\\n     * @param to Account to transfer rewards\\n     * @param reward Address of the reward token\\n     * @param amount Amount to transfer to the \\\"to\\\" address parameter\\n     * @return Returns true bool if transfer logic succeeds\\n     */\\n    function performTransfer(\\n        address to,\\n        address reward,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @return Returns the address of the Incentives Controller\\n     */\\n    function getIncentivesController() external view returns (address);\\n\\n    /**\\n     * @return Returns the address of the Rewards admin\\n     */\\n    function getRewardsAdmin() external view returns (address);\\n\\n    /**\\n     * @dev Perform an emergency token withdrawal only callable by the Rewards admin\\n     * @param token Address of the token to withdraw funds from this contract\\n     * @param to Address of the recipient of the withdrawal\\n     * @param amount Amount of the withdrawal\\n     */\\n    function emergencyWithdrawal(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x23471b7db89560f77682e822e8cf33ee43411c0c036a8d9fd1e7820be0bf40c7\",\"license\":\"AGPL-3.0\"},\"contracts/lending/periphery/rewards/libraries/RewardsDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.10;\\n\\nimport {IAaveOracle} from \\\"contracts/lending/core/interfaces/IAaveOracle.sol\\\";\\nimport {ITransferStrategyBase} from \\\"../interfaces/ITransferStrategyBase.sol\\\";\\n\\nlibrary RewardsDataTypes {\\n    struct RewardsConfigInput {\\n        uint88 emissionPerSecond;\\n        uint256 totalSupply;\\n        uint32 distributionEnd;\\n        address asset;\\n        address reward;\\n        ITransferStrategyBase transferStrategy;\\n        IAaveOracle rewardOracle;\\n    }\\n\\n    struct UserAssetBalance {\\n        address asset;\\n        uint256 userBalance;\\n        uint256 totalSupply;\\n    }\\n\\n    struct UserData {\\n        // Liquidity index of the reward distribution for the user\\n        uint104 index;\\n        // Amount of accrued rewards for the user since last user index update\\n        uint128 accrued;\\n    }\\n\\n    struct RewardData {\\n        // Liquidity index of the reward distribution\\n        uint104 index;\\n        // Amount of reward tokens distributed per second\\n        uint88 emissionPerSecond;\\n        // Timestamp of the last reward index update\\n        uint32 lastUpdateTimestamp;\\n        // The end of the distribution of rewards (in seconds)\\n        uint32 distributionEnd;\\n        // Map of user addresses and their rewards data (userAddress => userData)\\n        mapping(address => UserData) usersData;\\n    }\\n\\n    struct AssetData {\\n        // Map of reward token addresses and their data (rewardTokenAddress => rewardData)\\n        mapping(address => RewardData) rewards;\\n        // List of reward token addresses for the asset\\n        mapping(uint128 => address) availableRewards;\\n        // Count of reward tokens for the asset\\n        uint128 availableRewardsCount;\\n        // Number of decimals of the asset\\n        uint8 decimals;\\n    }\\n}\\n\",\"keccak256\":\"0xa17a8564d6b343266e0d84a915b0d443278e209aa6af2bb3893153c2b4ec5e15\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657612ae8908161001c8239f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c806347637536146100bf578063799bdcf5146100905763976fafc51461004057600080fd5b3461008c57602036600319011261008c57600435916001600160a01b038316830361008957506100726100859261091f565b905191829160208352602083019061029a565b0390f35b80fd5b5080fd5b503461008c57610085906100ac6100a636610107565b90611a0a565b905191829160208352602083019061042e565b503461008c576100e6906100856100d536610107565b6100e082959261091f565b94611a0a565b6100f9835194848695865285019061029a565b90838203602085015261042e565b6040906003190112610138576001600160a01b03906004358281168103610138579160243590811681036101385790565b600080fd5b60005b8381106101505750506000910152565b8181015183820152602001610140565b906020916101798151809281855285808601910161013d565b601f01601f1916010190565b90606080820160018060a01b0391828551168452602090838287015116828601526040809601519560606040870152865180945260809460808701918460808760051b8a01019901966000945b8786106101e6575050505050505050505090565b9091929394959697989a9987806001928e607f199082030189528c5190610217610160835190808452830190610160565b9189848201511684830152898982015116898301528681015187830152878101518883015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519060ff809216908401526101208181840151169084015261014080920151169101529b019601960194979695939291909a98999a6101d2565b908082519081815260208091019281808460051b8301019501936000915b8483106102c85750505050505090565b909192939495848061032c600193601f198682030187528a516103196103066080888060a01b03845116855286840151908088870152850190610185565b6040808401519085830390860152610185565b9160608092015191818403910152610185565b98019301930191949392906102b8565b90606080820160018060a01b0391828551168452602090838287015116828601526040809601519560606040870152865180945260809460808701918460808760051b8a01019901966000945b87861061039d575050505050505050505090565b9091929394959697989a9987806001928e607f199082030189528c51906103ce610100835190808452830190610160565b9189848201511684830152898982015116898301528681015187830152878101518883015260a0808201519083015260c0808201519060ff8092169084015260e080920151169101529b019601960194979695939291909a98999a610389565b908082519081815260208091019281808460051b8301019501936000915b84831061045c5750505050505090565b90919293949584806104c0600193601f198682030187528a516104ad61049a6080888060a01b0384511685528684015190808887015285019061033c565b604080840151908583039086015261033c565b916060809201519181840391015261033c565b980193019301919493929061044c565b6060810190811067ffffffffffffffff8211176104ec57604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff8211176104ec57604052565b90601f8019910116810190811067ffffffffffffffff8211176104ec57604052565b51906001600160a01b038216820361013857565b67ffffffffffffffff81116104ec5760051b60200190565b60209081818403126101385780519067ffffffffffffffff821161013857019180601f840112156101385782516105a281610554565b936105b0604051958661051e565b818552838086019260051b820101928311610138578301905b8282106105d7575050505090565b8380916105e384610540565b8152019101906105c9565b604051906105fb826104d0565b606060408360008152600060208201520152565b80518210156106235760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b51906fffffffffffffffffffffffffffffffff8216820361013857565b6101e091819003828112610138576040519283019067ffffffffffffffff90848310828411176104ec57602013610138576102008401908111828210176104ec576040528151815282526106ac60208201610639565b60208301526106bd60408201610639565b60408301526106ce60608201610639565b60608301526106df60808201610639565b60808301526106f060a08201610639565b60a083015260c081015164ffffffffff811681036101385760c083015260e081015161ffff811681036101385760e0830152610100610730818301610540565b90830152610120610742818301610540565b90830152610140610754818301610540565b90830152610160610766818301610540565b90830152610180610778818301610639565b908301526101a061078a818301610639565b9083015261079c6101c0809201610639565b9082015290565b9081602091031261013857516001600160a01b03811681036101385790565b60405190610160820182811067ffffffffffffffff8211176104ec5760405281606081526101406000918260208201528260408201528260608201528260808201528260a08201528260c08201528260e082015282610100820152826101208201520152565b9061083282610554565b61083f604051918261051e565b8281528092610850601f1991610554565b019060005b82811061086157505050565b60209061086c6107c2565b82828501015201610855565b9190826080910312610138578151916020810151916060604083015192015190565b90816020910312610138575160ff811681036101385790565b60208183031261013857805167ffffffffffffffff9182821161013857019082601f830112156101385781519081116104ec57604051926108fe601f8301601f19166020018561051e565b818452602082840101116101385761091c916020808501910161013d565b90565b60405163026b1d5f60e01b81529190602090839060049082906001600160a01b03165afa918215610eac5760009261192d575b506040516334651b6f60e21b81526000816004816001600160a01b0387165afa908115610eac57600091611914575b50919082519261099084610554565b9361099e604051958661051e565b8085526109ad601f1991610554565b0160005b8181106118c55750506000935b81518510156118bd576109d1858261060f565b51946001600160a01b036109e5828561060f565b511686526001600160a01b036109fb828561060f565b516040516335ea6a7560e01b8152911660048201526101e0969087816024816001600160a01b038b165afa978815610eac5760009861188e575b50506101008701516040516375d2641360e01b815290602090829060049082906001600160a01b03165afa908115610eac5760009161186f575b5060606001600160a01b038216611467575b61010089015160405192906001600160a01b0316610a9e846104d0565b835260018060a01b03166020830152604082015260208201526004602060018060a01b036101408a015116604051928380926375d2641360e01b82525afa908115610eac57600091611448575b5060606001600160a01b03821661103c575b610140890151604051600494939092916001600160a01b0316610b1f846104d0565b835260018060a01b0316602083015260408201526040820152602060018060a01b036101208a015116604051938480926375d2641360e01b82525afa918215610eac5760009261100b575b506060976001600160a01b038316610bc7575b610120015160405197989697959694956001959093606093926001600160a01b0316610ba8866104d0565b8552868060a01b031660208501526040840152015201939291906109be565b93919497509560018060a01b03610120850151169560405196636657732f60e01b8852600488015260008760248160018060a01b038a165afa968715610eac57600097610fe8575b50610c1a8751610828565b9860005b8851811015610fd957610c2f6107c2565b610c8560806001600160a01b03610c46858e61060f565b5116602084018190526101208b0151604051630fdfe97560e31b81526001600160a01b0391821660048201529116602482015291829081906044820190565b03816001600160a01b038e165afa8015610eac57600091829183918491610fa6575b5060c08501526080840152606083015260a0820152610120880151604051634f7eb7b960e11b81526001600160a01b03918216600482015290602090829060249082908e165afa8015610eac5760ff91600091610f87575b501661012082015260208082015160405163313ce56760e01b81529190829060049082906001600160a01b03165afa8015610eac5760ff91600091610f58575b501661010082015260208101516040516395d89b4160e01b815290600090829060049082906001600160a01b03165afa908115610eac57600091610f37575b508152602080820151604051630150bdfb60e51b81526001600160a01b0391821660048201529190829060249082908e165afa908115610eac57600091610ef8575b506001600160a01b031660408281018290525162e19f4760e81b815290602090829060049082905afa908115610eac57600091610eb8575b50610e0460ff91612a5b565b16610140820152604080820151602080840151925163b3596f0760e01b81526001600160a01b03938416600482015292909183916024918391165afa8015610eac578d91600091610e77575b50838392610e659260e060019796015261060f565b52610e70818d61060f565b5001610c1e565b91506020823d602011610ea4575b81610e926020938361051e565b810103126100895750518c9083610e50565b3d9150610e85565b6040513d6000823e3d90fd5b906020823d602011610ef0575b81610ed26020938361051e565b810103126100895750610e04610ee960ff92610540565b9150610df8565b3d9150610ec5565b906020823d602011610f2f575b81610f126020938361051e565b8101031261008957506020610f28600492610540565b9150610dc0565b3d9150610f05565b610f52913d8091833e610f4a818361051e565b8101906108b3565b38610d7e565b610f7a915060203d602011610f80575b610f72818361051e565b81019061089a565b38610d3f565b503d610f68565b610fa0915060203d602011610f8057610f72818361051e565b38610cff565b92505050610fcc915060803d608011610fd2575b610fc4818361051e565b810190610878565b38610ca7565b503d610fba565b50919790965090949193610b7d565b61100491973d8091833e610ffc818361051e565b81019061056c565b9538610c0f565b61102e91925060203d602011611035575b611026818361051e565b8101906107a3565b9038610b6a565b503d61101c565b50939692909560018060a01b03610140850151169560405196636657732f60e01b8852600488015260008760248160018060a01b038a165afa968715610eac5760009761142d575b5061108f8751610828565b9860005b885181101561141a576110a46107c2565b6110fa60806001600160a01b036110bb858e61060f565b5116602084018190526101408b0151604051630fdfe97560e31b81526001600160a01b0391821660048201529116602482015291829081906044820190565b03816001600160a01b038e165afa8015610eac576000918291839184916113f7575b5060c08501526080840152606083015260a0820152610140880151604051634f7eb7b960e11b81526001600160a01b03918216600482015290602090829060249082908e165afa8015610eac5760ff916000916113d8575b501661012082015260208082015160405163313ce56760e01b81529190829060049082906001600160a01b03165afa8015610eac5760ff916000916113b9575b501661010082015260208101516040516395d89b4160e01b815290600090829060049082906001600160a01b03165afa908115610eac576000916113a0575b508152602080820151604051630150bdfb60e51b81526001600160a01b0391821660048201529190829060249082908e165afa908115610eac57600091611361575b506001600160a01b031660408281018290525162e19f4760e81b815290602090829060049082905afa908115610eac57600091611321575b5061127960ff91612a5b565b16610140820152604080820151602080840151925163b3596f0760e01b81526001600160a01b03938416600482015292909183916024918391165afa8015610eac578d916000916112ec575b508383926112da9260e060019796015261060f565b526112e5818d61060f565b5001611093565b91506020823d602011611319575b816113076020938361051e565b810103126100895750518c90836112c5565b3d91506112fa565b906020823d602011611359575b8161133b6020938361051e565b81010312610089575061127961135260ff92610540565b915061126d565b3d915061132e565b906020823d602011611398575b8161137b6020938361051e565b8101031261008957506020611391600492610540565b9150611235565b3d915061136e565b6113b3913d8091833e610f4a818361051e565b386111f3565b6113d2915060203d602011610f8057610f72818361051e565b386111b4565b6113f1915060203d602011610f8057610f72818361051e565b38611174565b92505050611414915060803d608011610fd257610fc4818361051e565b3861111c565b5094989197909650939491939190610afd565b61144191973d8091833e610ffc818361051e565b9538611084565b611461915060203d60201161103557611026818361051e565b38610aeb565b50939692909560018060a01b03610100850151169560405196636657732f60e01b8852600488015260008760248160018060a01b038a165afa968715610eac57600097611854575b506114ba8751610828565b9860005b8851811015611845576114cf6107c2565b61152560806001600160a01b036114e6858e61060f565b5116602084018190526101008b0151604051630fdfe97560e31b81526001600160a01b0391821660048201529116602482015291829081906044820190565b03816001600160a01b038e165afa8015610eac57600091829183918491611822575b5060c08501526080840152606083015260a0820152610100880151604051634f7eb7b960e11b81526001600160a01b03918216600482015290602090829060249082908e165afa8015610eac5760ff91600091611803575b501661012082015260208082015160405163313ce56760e01b81529190829060049082906001600160a01b03165afa8015610eac5760ff916000916117e4575b501661010082015260208101516040516395d89b4160e01b815290600090829060049082906001600160a01b03165afa908115610eac576000916117cb575b508152602080820151604051630150bdfb60e51b81526001600160a01b0391821660048201529190829060249082908e165afa908115610eac5760009161178c575b506001600160a01b031660408281018290525162e19f4760e81b815290602090829060049082905afa908115610eac5760009161174c575b506116a460ff91612a5b565b16610140820152604080820151602080840151925163b3596f0760e01b81526001600160a01b03938416600482015292909183916024918391165afa8015610eac578d91600091611717575b508383926117059260e060019796015261060f565b52611710818d61060f565b50016114be565b91506020823d602011611744575b816117326020938361051e565b810103126100895750518c90836116f0565b3d9150611725565b906020823d602011611784575b816117666020938361051e565b8101031261008957506116a461177d60ff92610540565b9150611698565b3d9150611759565b906020823d6020116117c3575b816117a66020938361051e565b81010312610089575060206117bc600492610540565b9150611660565b3d9150611799565b6117de913d8091833e610f4a818361051e565b3861161e565b6117fd915060203d602011610f8057610f72818361051e565b386115df565b61181c915060203d602011610f8057610f72818361051e565b3861159f565b9250505061183f915060803d608011610fd257610fc4818361051e565b38611547565b50959197929498909650610a81565b61186891973d8091833e610ffc818361051e565b95386114af565b611888915060203d60201161103557611026818361051e565b38610a6f565b6118ae929850803d106118b6575b6118a6818361051e565b810190610656565b953880610a35565b503d61189c565b925050915090565b60209060409693949596516118d981610502565b600081526118e56105ee565b838201526118f16105ee565b60408201526118fe6105ee565b60608201528282860101520194939291946109b1565b611927913d8091833e610ffc818361051e565b38610981565b9091506020813d602011611961575b816119496020938361051e565b810103126101385761195a90610540565b9038610952565b3d915061193c565b60405190610100820182811067ffffffffffffffff8211176104ec57604052816060815260e06000918260208201528260408201528260608201528260808201528260a08201528260c08201520152565b906119c482610554565b6119d1604051918261051e565b82815280926119e2601f1991610554565b019060005b8281106119f357505050565b6020906119fe611969565b828285010152016119e7565b60405163026b1d5f60e01b815290602090829060049082906001600160a01b03165afa908115610eac57600091612a21575b506040516334651b6f60e21b8152906000826004816001600160a01b0385165afa918215610eac57600092612a06575b5060006001600160a01b03841615612a0057508151925b611a8c84610554565b93611a9a604051958661051e565b808552611aa9601f1991610554565b0160005b8181106129bb57505060005b83518110156129b4576001600160a01b03611ad4828661060f565b516040516335ea6a7560e01b8152911660048201526101e09081816024816001600160a01b0389165afa918215610eac57600092612997575b506001600160a01b039050611b22838761060f565b5116611b2e838861060f565b51526101008101516040516375d2641360e01b815290602090829060049082906001600160a01b03165afa908115610eac57600091612978575b506001600160a01b03811661251a575b506101408101516040516375d2641360e01b815290602090829060049082906001600160a01b03165afa908115610eac576000916124fb575b506001600160a01b038116612096575b506101208101516040516375d2641360e01b81529190602090839060049082906001600160a01b03165afa918215610eac57600092612075575b506001600160a01b038216611c15575b5050600101611ab9565b610120810151604051636657732f60e01b81526001600160a01b0391821660048201529698929591939290600090889060249082908a165afa968715610eac5760009761205a575b50611c6887516119ba565b9860005b885181101561200857611c7d611969565b6001600160a01b03611c8f838c61060f565b51166040828101829052610120890151905163299faa1560e11b81526001600160a01b038b81166004830152918216602482015291166044820152602081806064810103816001600160a01b038e165afa908115610eac57600091611fd6575b5060808201526040808201519051632c08906360e21b81526001600160a01b038a811660048301529091166024820152602081806044810103816001600160a01b038e165afa908115610eac57600091611fa4575b506060820152604080820151905163313ce56760e01b815290602090829060049082906001600160a01b03165afa8015610eac5760ff91600091611f85575b501660e082015260408082015190516395d89b4160e01b815290600090829060049082906001600160a01b03165afa908115610eac57600091611f6c575b5081526040808201519051630150bdfb60e51b81526001600160a01b03918216600482015290602090829060249082908e165afa908115610eac57600091611f2d575b506001600160a01b0316602082810182905260405162e19f4760e81b815291829060049082905afa908115610eac57600091611eed575b50611e4760ff91612a5b565b1660c0820152602080820151604080840151905163b3596f0760e01b81526001600160a01b039182166004820152929183916024918391165afa8015610eac578d91600091611eb8575b50838392611ea69260a060019796015261060f565b52611eb1818d61060f565b5001611c6c565b91506020823d602011611ee5575b81611ed36020938361051e565b810103126100895750518c9083611e91565b3d9150611ec6565b906020823d602011611f25575b81611f076020938361051e565b810103126100895750611e47611f1e60ff92610540565b9150611e3b565b3d9150611efa565b906020823d602011611f64575b81611f476020938361051e565b8101031261008957506020611f5d600492610540565b9150611e04565b3d9150611f3a565b611f7f913d8091833e610f4a818361051e565b38611dc1565b611f9e915060203d602011610f8057610f72818361051e565b38611d83565b906020823d602011611fce575b81611fbe6020938361051e565b8101031261008957505138611d44565b3d9150611fb1565b906020823d602011612000575b81611ff06020938361051e565b8101031261008957505138611cef565b3d9150611fe3565b50610120909401516040519199949750919560019491926001600160a01b0316612031846104d0565b8352848060a01b0316602083015260408201526060612050838961060f565b5101529038611c0b565b61206e91973d8091833e610ffc818361051e565b9538611c5d565b61208f91925060203d60201161103557611026818361051e565b9038611bfb565b610140820151604051636657732f60e01b81526001600160a01b039182166004820152969891959293929190600090889060249082908a165afa968715610eac576000976124e0575b506120ea87516119ba565b9860005b885181101561248a576120ff611969565b6001600160a01b03612111838c61060f565b51166040828101829052610140890151905163299faa1560e11b81526001600160a01b038b81166004830152918216602482015291166044820152602081806064810103816001600160a01b038e165afa908115610eac57600091612458575b5060808201526040808201519051632c08906360e21b81526001600160a01b038a811660048301529091166024820152602081806044810103816001600160a01b038e165afa908115610eac57600091612426575b506060820152604080820151905163313ce56760e01b815290602090829060049082906001600160a01b03165afa8015610eac5760ff91600091612407575b501660e082015260408082015190516395d89b4160e01b815290600090829060049082906001600160a01b03165afa908115610eac576000916123ee575b5081526040808201519051630150bdfb60e51b81526001600160a01b03918216600482015290602090829060249082908e165afa908115610eac576000916123af575b506001600160a01b0316602082810182905260405162e19f4760e81b815291829060049082905afa908115610eac5760009161236f575b506122c960ff91612a5b565b1660c0820152602080820151604080840151905163b3596f0760e01b81526001600160a01b039182166004820152929183916024918391165afa8015610eac578d9160009161233a575b508383926123289260a060019796015261060f565b52612333818d61060f565b50016120ee565b91506020823d602011612367575b816123556020938361051e565b810103126100895750518c9083612313565b3d9150612348565b906020823d6020116123a7575b816123896020938361051e565b8101031261008957506122c96123a060ff92610540565b91506122bd565b3d915061237c565b906020823d6020116123e6575b816123c96020938361051e565b81010312610089575060206123df600492610540565b9150612286565b3d91506123bc565b612401913d8091833e610f4a818361051e565b38612243565b612420915060203d602011610f8057610f72818361051e565b38612205565b906020823d602011612450575b816124406020938361051e565b81010312610089575051386121c6565b3d9150612433565b906020823d602011612482575b816124726020938361051e565b8101031261008957505138612171565b3d9150612465565b50610140850151604051929a9198509296939460049490936001600160a01b03166124b4846104d0565b83526001600160a01b031660208301526040808301919091526124d7858a61060f565b51015290611bc1565b6124f491973d8091833e610ffc818361051e565b95386120df565b612514915060203d60201161103557611026818361051e565b38611bb1565b610100820151604051636657732f60e01b81526001600160a01b039182166004820152969891959293929190600090889060249082908a165afa968715610eac5760009761295d575b5061256e87516119ba565b9860005b885181101561290e57612583611969565b6001600160a01b03612595838c61060f565b51166040828101829052610100890151905163299faa1560e11b81526001600160a01b038b81166004830152918216602482015291166044820152602081806064810103816001600160a01b038e165afa908115610eac576000916128dc575b5060808201526040808201519051632c08906360e21b81526001600160a01b038a811660048301529091166024820152602081806044810103816001600160a01b038e165afa908115610eac576000916128aa575b506060820152604080820151905163313ce56760e01b815290602090829060049082906001600160a01b03165afa8015610eac5760ff9160009161288b575b501660e082015260408082015190516395d89b4160e01b815290600090829060049082906001600160a01b03165afa908115610eac57600091612872575b5081526040808201519051630150bdfb60e51b81526001600160a01b03918216600482015290602090829060249082908e165afa908115610eac57600091612833575b506001600160a01b0316602082810182905260405162e19f4760e81b815291829060049082905afa908115610eac576000916127f3575b5061274d60ff91612a5b565b1660c0820152602080820151604080840151905163b3596f0760e01b81526001600160a01b039182166004820152929183916024918391165afa8015610eac578d916000916127be575b508383926127ac9260a060019796015261060f565b526127b7818d61060f565b5001612572565b91506020823d6020116127eb575b816127d96020938361051e565b810103126100895750518c9083612797565b3d91506127cc565b906020823d60201161282b575b8161280d6020938361051e565b81010312610089575061274d61282460ff92610540565b9150612741565b3d9150612800565b906020823d60201161286a575b8161284d6020938361051e565b8101031261008957506020612863600492610540565b915061270a565b3d9150612840565b612885913d8091833e610f4a818361051e565b386126c7565b6128a4915060203d602011610f8057610f72818361051e565b38612689565b906020823d6020116128d4575b816128c46020938361051e565b810103126100895750513861264a565b3d91506128b7565b906020823d602011612906575b816128f66020938361051e565b81010312610089575051386125f5565b3d91506128e9565b5096509794909492919260018060a01b03610100840151169160405192612934846104d0565b835260018060a01b0316602083015260408201526020612954848961060f565b51015238611b78565b61297191973d8091833e610ffc818361051e565b9538612563565b612991915060203d60201161103557611026818361051e565b38611b68565b6129ad9250803d106118b6576118a6818361051e565b3880611b0d565b5050505090565b6020906040516129ca81610502565b600081526129d66105ee565b838201526129e26105ee565b60408201526129ef6105ee565b606082015282828901015201611aad565b92611a83565b612a1a91923d8091833e610ffc818361051e565b9038611a6c565b90506020813d602011612a53575b81612a3c6020938361051e565b8101031261013857612a4d90610540565b38611a3c565b3d9150612a2f565b6001600160a01b0316612a6d57600890565b60405162461bcd60e51b815260206004820152601e60248201527f426173652063757272656e637920756e6974206d7573742062652055534400006044820152606490fdfea2646970667358221220a7f1f11e8c9f70d572e9e6a6622cd0780a1bc21332f2582eee40e4376a02082164736f6c63430008180033",
  "deployedBytecode": "0x604060808152600436101561001357600080fd5b600090813560e01c806347637536146100bf578063799bdcf5146100905763976fafc51461004057600080fd5b3461008c57602036600319011261008c57600435916001600160a01b038316830361008957506100726100859261091f565b905191829160208352602083019061029a565b0390f35b80fd5b5080fd5b503461008c57610085906100ac6100a636610107565b90611a0a565b905191829160208352602083019061042e565b503461008c576100e6906100856100d536610107565b6100e082959261091f565b94611a0a565b6100f9835194848695865285019061029a565b90838203602085015261042e565b6040906003190112610138576001600160a01b03906004358281168103610138579160243590811681036101385790565b600080fd5b60005b8381106101505750506000910152565b8181015183820152602001610140565b906020916101798151809281855285808601910161013d565b601f01601f1916010190565b90606080820160018060a01b0391828551168452602090838287015116828601526040809601519560606040870152865180945260809460808701918460808760051b8a01019901966000945b8786106101e6575050505050505050505090565b9091929394959697989a9987806001928e607f199082030189528c5190610217610160835190808452830190610160565b9189848201511684830152898982015116898301528681015187830152878101518883015260a0808201519083015260c0808201519083015260e08082015190830152610100808201519060ff809216908401526101208181840151169084015261014080920151169101529b019601960194979695939291909a98999a6101d2565b908082519081815260208091019281808460051b8301019501936000915b8483106102c85750505050505090565b909192939495848061032c600193601f198682030187528a516103196103066080888060a01b03845116855286840151908088870152850190610185565b6040808401519085830390860152610185565b9160608092015191818403910152610185565b98019301930191949392906102b8565b90606080820160018060a01b0391828551168452602090838287015116828601526040809601519560606040870152865180945260809460808701918460808760051b8a01019901966000945b87861061039d575050505050505050505090565b9091929394959697989a9987806001928e607f199082030189528c51906103ce610100835190808452830190610160565b9189848201511684830152898982015116898301528681015187830152878101518883015260a0808201519083015260c0808201519060ff8092169084015260e080920151169101529b019601960194979695939291909a98999a610389565b908082519081815260208091019281808460051b8301019501936000915b84831061045c5750505050505090565b90919293949584806104c0600193601f198682030187528a516104ad61049a6080888060a01b0384511685528684015190808887015285019061033c565b604080840151908583039086015261033c565b916060809201519181840391015261033c565b980193019301919493929061044c565b6060810190811067ffffffffffffffff8211176104ec57604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff8211176104ec57604052565b90601f8019910116810190811067ffffffffffffffff8211176104ec57604052565b51906001600160a01b038216820361013857565b67ffffffffffffffff81116104ec5760051b60200190565b60209081818403126101385780519067ffffffffffffffff821161013857019180601f840112156101385782516105a281610554565b936105b0604051958661051e565b818552838086019260051b820101928311610138578301905b8282106105d7575050505090565b8380916105e384610540565b8152019101906105c9565b604051906105fb826104d0565b606060408360008152600060208201520152565b80518210156106235760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b51906fffffffffffffffffffffffffffffffff8216820361013857565b6101e091819003828112610138576040519283019067ffffffffffffffff90848310828411176104ec57602013610138576102008401908111828210176104ec576040528151815282526106ac60208201610639565b60208301526106bd60408201610639565b60408301526106ce60608201610639565b60608301526106df60808201610639565b60808301526106f060a08201610639565b60a083015260c081015164ffffffffff811681036101385760c083015260e081015161ffff811681036101385760e0830152610100610730818301610540565b90830152610120610742818301610540565b90830152610140610754818301610540565b90830152610160610766818301610540565b90830152610180610778818301610639565b908301526101a061078a818301610639565b9083015261079c6101c0809201610639565b9082015290565b9081602091031261013857516001600160a01b03811681036101385790565b60405190610160820182811067ffffffffffffffff8211176104ec5760405281606081526101406000918260208201528260408201528260608201528260808201528260a08201528260c08201528260e082015282610100820152826101208201520152565b9061083282610554565b61083f604051918261051e565b8281528092610850601f1991610554565b019060005b82811061086157505050565b60209061086c6107c2565b82828501015201610855565b9190826080910312610138578151916020810151916060604083015192015190565b90816020910312610138575160ff811681036101385790565b60208183031261013857805167ffffffffffffffff9182821161013857019082601f830112156101385781519081116104ec57604051926108fe601f8301601f19166020018561051e565b818452602082840101116101385761091c916020808501910161013d565b90565b60405163026b1d5f60e01b81529190602090839060049082906001600160a01b03165afa918215610eac5760009261192d575b506040516334651b6f60e21b81526000816004816001600160a01b0387165afa908115610eac57600091611914575b50919082519261099084610554565b9361099e604051958661051e565b8085526109ad601f1991610554565b0160005b8181106118c55750506000935b81518510156118bd576109d1858261060f565b51946001600160a01b036109e5828561060f565b511686526001600160a01b036109fb828561060f565b516040516335ea6a7560e01b8152911660048201526101e0969087816024816001600160a01b038b165afa978815610eac5760009861188e575b50506101008701516040516375d2641360e01b815290602090829060049082906001600160a01b03165afa908115610eac5760009161186f575b5060606001600160a01b038216611467575b61010089015160405192906001600160a01b0316610a9e846104d0565b835260018060a01b03166020830152604082015260208201526004602060018060a01b036101408a015116604051928380926375d2641360e01b82525afa908115610eac57600091611448575b5060606001600160a01b03821661103c575b610140890151604051600494939092916001600160a01b0316610b1f846104d0565b835260018060a01b0316602083015260408201526040820152602060018060a01b036101208a015116604051938480926375d2641360e01b82525afa918215610eac5760009261100b575b506060976001600160a01b038316610bc7575b610120015160405197989697959694956001959093606093926001600160a01b0316610ba8866104d0565b8552868060a01b031660208501526040840152015201939291906109be565b93919497509560018060a01b03610120850151169560405196636657732f60e01b8852600488015260008760248160018060a01b038a165afa968715610eac57600097610fe8575b50610c1a8751610828565b9860005b8851811015610fd957610c2f6107c2565b610c8560806001600160a01b03610c46858e61060f565b5116602084018190526101208b0151604051630fdfe97560e31b81526001600160a01b0391821660048201529116602482015291829081906044820190565b03816001600160a01b038e165afa8015610eac57600091829183918491610fa6575b5060c08501526080840152606083015260a0820152610120880151604051634f7eb7b960e11b81526001600160a01b03918216600482015290602090829060249082908e165afa8015610eac5760ff91600091610f87575b501661012082015260208082015160405163313ce56760e01b81529190829060049082906001600160a01b03165afa8015610eac5760ff91600091610f58575b501661010082015260208101516040516395d89b4160e01b815290600090829060049082906001600160a01b03165afa908115610eac57600091610f37575b508152602080820151604051630150bdfb60e51b81526001600160a01b0391821660048201529190829060249082908e165afa908115610eac57600091610ef8575b506001600160a01b031660408281018290525162e19f4760e81b815290602090829060049082905afa908115610eac57600091610eb8575b50610e0460ff91612a5b565b16610140820152604080820151602080840151925163b3596f0760e01b81526001600160a01b03938416600482015292909183916024918391165afa8015610eac578d91600091610e77575b50838392610e659260e060019796015261060f565b52610e70818d61060f565b5001610c1e565b91506020823d602011610ea4575b81610e926020938361051e565b810103126100895750518c9083610e50565b3d9150610e85565b6040513d6000823e3d90fd5b906020823d602011610ef0575b81610ed26020938361051e565b810103126100895750610e04610ee960ff92610540565b9150610df8565b3d9150610ec5565b906020823d602011610f2f575b81610f126020938361051e565b8101031261008957506020610f28600492610540565b9150610dc0565b3d9150610f05565b610f52913d8091833e610f4a818361051e565b8101906108b3565b38610d7e565b610f7a915060203d602011610f80575b610f72818361051e565b81019061089a565b38610d3f565b503d610f68565b610fa0915060203d602011610f8057610f72818361051e565b38610cff565b92505050610fcc915060803d608011610fd2575b610fc4818361051e565b810190610878565b38610ca7565b503d610fba565b50919790965090949193610b7d565b61100491973d8091833e610ffc818361051e565b81019061056c565b9538610c0f565b61102e91925060203d602011611035575b611026818361051e565b8101906107a3565b9038610b6a565b503d61101c565b50939692909560018060a01b03610140850151169560405196636657732f60e01b8852600488015260008760248160018060a01b038a165afa968715610eac5760009761142d575b5061108f8751610828565b9860005b885181101561141a576110a46107c2565b6110fa60806001600160a01b036110bb858e61060f565b5116602084018190526101408b0151604051630fdfe97560e31b81526001600160a01b0391821660048201529116602482015291829081906044820190565b03816001600160a01b038e165afa8015610eac576000918291839184916113f7575b5060c08501526080840152606083015260a0820152610140880151604051634f7eb7b960e11b81526001600160a01b03918216600482015290602090829060249082908e165afa8015610eac5760ff916000916113d8575b501661012082015260208082015160405163313ce56760e01b81529190829060049082906001600160a01b03165afa8015610eac5760ff916000916113b9575b501661010082015260208101516040516395d89b4160e01b815290600090829060049082906001600160a01b03165afa908115610eac576000916113a0575b508152602080820151604051630150bdfb60e51b81526001600160a01b0391821660048201529190829060249082908e165afa908115610eac57600091611361575b506001600160a01b031660408281018290525162e19f4760e81b815290602090829060049082905afa908115610eac57600091611321575b5061127960ff91612a5b565b16610140820152604080820151602080840151925163b3596f0760e01b81526001600160a01b03938416600482015292909183916024918391165afa8015610eac578d916000916112ec575b508383926112da9260e060019796015261060f565b526112e5818d61060f565b5001611093565b91506020823d602011611319575b816113076020938361051e565b810103126100895750518c90836112c5565b3d91506112fa565b906020823d602011611359575b8161133b6020938361051e565b81010312610089575061127961135260ff92610540565b915061126d565b3d915061132e565b906020823d602011611398575b8161137b6020938361051e565b8101031261008957506020611391600492610540565b9150611235565b3d915061136e565b6113b3913d8091833e610f4a818361051e565b386111f3565b6113d2915060203d602011610f8057610f72818361051e565b386111b4565b6113f1915060203d602011610f8057610f72818361051e565b38611174565b92505050611414915060803d608011610fd257610fc4818361051e565b3861111c565b5094989197909650939491939190610afd565b61144191973d8091833e610ffc818361051e565b9538611084565b611461915060203d60201161103557611026818361051e565b38610aeb565b50939692909560018060a01b03610100850151169560405196636657732f60e01b8852600488015260008760248160018060a01b038a165afa968715610eac57600097611854575b506114ba8751610828565b9860005b8851811015611845576114cf6107c2565b61152560806001600160a01b036114e6858e61060f565b5116602084018190526101008b0151604051630fdfe97560e31b81526001600160a01b0391821660048201529116602482015291829081906044820190565b03816001600160a01b038e165afa8015610eac57600091829183918491611822575b5060c08501526080840152606083015260a0820152610100880151604051634f7eb7b960e11b81526001600160a01b03918216600482015290602090829060249082908e165afa8015610eac5760ff91600091611803575b501661012082015260208082015160405163313ce56760e01b81529190829060049082906001600160a01b03165afa8015610eac5760ff916000916117e4575b501661010082015260208101516040516395d89b4160e01b815290600090829060049082906001600160a01b03165afa908115610eac576000916117cb575b508152602080820151604051630150bdfb60e51b81526001600160a01b0391821660048201529190829060249082908e165afa908115610eac5760009161178c575b506001600160a01b031660408281018290525162e19f4760e81b815290602090829060049082905afa908115610eac5760009161174c575b506116a460ff91612a5b565b16610140820152604080820151602080840151925163b3596f0760e01b81526001600160a01b03938416600482015292909183916024918391165afa8015610eac578d91600091611717575b508383926117059260e060019796015261060f565b52611710818d61060f565b50016114be565b91506020823d602011611744575b816117326020938361051e565b810103126100895750518c90836116f0565b3d9150611725565b906020823d602011611784575b816117666020938361051e565b8101031261008957506116a461177d60ff92610540565b9150611698565b3d9150611759565b906020823d6020116117c3575b816117a66020938361051e565b81010312610089575060206117bc600492610540565b9150611660565b3d9150611799565b6117de913d8091833e610f4a818361051e565b3861161e565b6117fd915060203d602011610f8057610f72818361051e565b386115df565b61181c915060203d602011610f8057610f72818361051e565b3861159f565b9250505061183f915060803d608011610fd257610fc4818361051e565b38611547565b50959197929498909650610a81565b61186891973d8091833e610ffc818361051e565b95386114af565b611888915060203d60201161103557611026818361051e565b38610a6f565b6118ae929850803d106118b6575b6118a6818361051e565b810190610656565b953880610a35565b503d61189c565b925050915090565b60209060409693949596516118d981610502565b600081526118e56105ee565b838201526118f16105ee565b60408201526118fe6105ee565b60608201528282860101520194939291946109b1565b611927913d8091833e610ffc818361051e565b38610981565b9091506020813d602011611961575b816119496020938361051e565b810103126101385761195a90610540565b9038610952565b3d915061193c565b60405190610100820182811067ffffffffffffffff8211176104ec57604052816060815260e06000918260208201528260408201528260608201528260808201528260a08201528260c08201520152565b906119c482610554565b6119d1604051918261051e565b82815280926119e2601f1991610554565b019060005b8281106119f357505050565b6020906119fe611969565b828285010152016119e7565b60405163026b1d5f60e01b815290602090829060049082906001600160a01b03165afa908115610eac57600091612a21575b506040516334651b6f60e21b8152906000826004816001600160a01b0385165afa918215610eac57600092612a06575b5060006001600160a01b03841615612a0057508151925b611a8c84610554565b93611a9a604051958661051e565b808552611aa9601f1991610554565b0160005b8181106129bb57505060005b83518110156129b4576001600160a01b03611ad4828661060f565b516040516335ea6a7560e01b8152911660048201526101e09081816024816001600160a01b0389165afa918215610eac57600092612997575b506001600160a01b039050611b22838761060f565b5116611b2e838861060f565b51526101008101516040516375d2641360e01b815290602090829060049082906001600160a01b03165afa908115610eac57600091612978575b506001600160a01b03811661251a575b506101408101516040516375d2641360e01b815290602090829060049082906001600160a01b03165afa908115610eac576000916124fb575b506001600160a01b038116612096575b506101208101516040516375d2641360e01b81529190602090839060049082906001600160a01b03165afa918215610eac57600092612075575b506001600160a01b038216611c15575b5050600101611ab9565b610120810151604051636657732f60e01b81526001600160a01b0391821660048201529698929591939290600090889060249082908a165afa968715610eac5760009761205a575b50611c6887516119ba565b9860005b885181101561200857611c7d611969565b6001600160a01b03611c8f838c61060f565b51166040828101829052610120890151905163299faa1560e11b81526001600160a01b038b81166004830152918216602482015291166044820152602081806064810103816001600160a01b038e165afa908115610eac57600091611fd6575b5060808201526040808201519051632c08906360e21b81526001600160a01b038a811660048301529091166024820152602081806044810103816001600160a01b038e165afa908115610eac57600091611fa4575b506060820152604080820151905163313ce56760e01b815290602090829060049082906001600160a01b03165afa8015610eac5760ff91600091611f85575b501660e082015260408082015190516395d89b4160e01b815290600090829060049082906001600160a01b03165afa908115610eac57600091611f6c575b5081526040808201519051630150bdfb60e51b81526001600160a01b03918216600482015290602090829060249082908e165afa908115610eac57600091611f2d575b506001600160a01b0316602082810182905260405162e19f4760e81b815291829060049082905afa908115610eac57600091611eed575b50611e4760ff91612a5b565b1660c0820152602080820151604080840151905163b3596f0760e01b81526001600160a01b039182166004820152929183916024918391165afa8015610eac578d91600091611eb8575b50838392611ea69260a060019796015261060f565b52611eb1818d61060f565b5001611c6c565b91506020823d602011611ee5575b81611ed36020938361051e565b810103126100895750518c9083611e91565b3d9150611ec6565b906020823d602011611f25575b81611f076020938361051e565b810103126100895750611e47611f1e60ff92610540565b9150611e3b565b3d9150611efa565b906020823d602011611f64575b81611f476020938361051e565b8101031261008957506020611f5d600492610540565b9150611e04565b3d9150611f3a565b611f7f913d8091833e610f4a818361051e565b38611dc1565b611f9e915060203d602011610f8057610f72818361051e565b38611d83565b906020823d602011611fce575b81611fbe6020938361051e565b8101031261008957505138611d44565b3d9150611fb1565b906020823d602011612000575b81611ff06020938361051e565b8101031261008957505138611cef565b3d9150611fe3565b50610120909401516040519199949750919560019491926001600160a01b0316612031846104d0565b8352848060a01b0316602083015260408201526060612050838961060f565b5101529038611c0b565b61206e91973d8091833e610ffc818361051e565b9538611c5d565b61208f91925060203d60201161103557611026818361051e565b9038611bfb565b610140820151604051636657732f60e01b81526001600160a01b039182166004820152969891959293929190600090889060249082908a165afa968715610eac576000976124e0575b506120ea87516119ba565b9860005b885181101561248a576120ff611969565b6001600160a01b03612111838c61060f565b51166040828101829052610140890151905163299faa1560e11b81526001600160a01b038b81166004830152918216602482015291166044820152602081806064810103816001600160a01b038e165afa908115610eac57600091612458575b5060808201526040808201519051632c08906360e21b81526001600160a01b038a811660048301529091166024820152602081806044810103816001600160a01b038e165afa908115610eac57600091612426575b506060820152604080820151905163313ce56760e01b815290602090829060049082906001600160a01b03165afa8015610eac5760ff91600091612407575b501660e082015260408082015190516395d89b4160e01b815290600090829060049082906001600160a01b03165afa908115610eac576000916123ee575b5081526040808201519051630150bdfb60e51b81526001600160a01b03918216600482015290602090829060249082908e165afa908115610eac576000916123af575b506001600160a01b0316602082810182905260405162e19f4760e81b815291829060049082905afa908115610eac5760009161236f575b506122c960ff91612a5b565b1660c0820152602080820151604080840151905163b3596f0760e01b81526001600160a01b039182166004820152929183916024918391165afa8015610eac578d9160009161233a575b508383926123289260a060019796015261060f565b52612333818d61060f565b50016120ee565b91506020823d602011612367575b816123556020938361051e565b810103126100895750518c9083612313565b3d9150612348565b906020823d6020116123a7575b816123896020938361051e565b8101031261008957506122c96123a060ff92610540565b91506122bd565b3d915061237c565b906020823d6020116123e6575b816123c96020938361051e565b81010312610089575060206123df600492610540565b9150612286565b3d91506123bc565b612401913d8091833e610f4a818361051e565b38612243565b612420915060203d602011610f8057610f72818361051e565b38612205565b906020823d602011612450575b816124406020938361051e565b81010312610089575051386121c6565b3d9150612433565b906020823d602011612482575b816124726020938361051e565b8101031261008957505138612171565b3d9150612465565b50610140850151604051929a9198509296939460049490936001600160a01b03166124b4846104d0565b83526001600160a01b031660208301526040808301919091526124d7858a61060f565b51015290611bc1565b6124f491973d8091833e610ffc818361051e565b95386120df565b612514915060203d60201161103557611026818361051e565b38611bb1565b610100820151604051636657732f60e01b81526001600160a01b039182166004820152969891959293929190600090889060249082908a165afa968715610eac5760009761295d575b5061256e87516119ba565b9860005b885181101561290e57612583611969565b6001600160a01b03612595838c61060f565b51166040828101829052610100890151905163299faa1560e11b81526001600160a01b038b81166004830152918216602482015291166044820152602081806064810103816001600160a01b038e165afa908115610eac576000916128dc575b5060808201526040808201519051632c08906360e21b81526001600160a01b038a811660048301529091166024820152602081806044810103816001600160a01b038e165afa908115610eac576000916128aa575b506060820152604080820151905163313ce56760e01b815290602090829060049082906001600160a01b03165afa8015610eac5760ff9160009161288b575b501660e082015260408082015190516395d89b4160e01b815290600090829060049082906001600160a01b03165afa908115610eac57600091612872575b5081526040808201519051630150bdfb60e51b81526001600160a01b03918216600482015290602090829060249082908e165afa908115610eac57600091612833575b506001600160a01b0316602082810182905260405162e19f4760e81b815291829060049082905afa908115610eac576000916127f3575b5061274d60ff91612a5b565b1660c0820152602080820151604080840151905163b3596f0760e01b81526001600160a01b039182166004820152929183916024918391165afa8015610eac578d916000916127be575b508383926127ac9260a060019796015261060f565b526127b7818d61060f565b5001612572565b91506020823d6020116127eb575b816127d96020938361051e565b810103126100895750518c9083612797565b3d91506127cc565b906020823d60201161282b575b8161280d6020938361051e565b81010312610089575061274d61282460ff92610540565b9150612741565b3d9150612800565b906020823d60201161286a575b8161284d6020938361051e565b8101031261008957506020612863600492610540565b915061270a565b3d9150612840565b612885913d8091833e610f4a818361051e565b386126c7565b6128a4915060203d602011610f8057610f72818361051e565b38612689565b906020823d6020116128d4575b816128c46020938361051e565b810103126100895750513861264a565b3d91506128b7565b906020823d602011612906575b816128f66020938361051e565b81010312610089575051386125f5565b3d91506128e9565b5096509794909492919260018060a01b03610100840151169160405192612934846104d0565b835260018060a01b0316602083015260408201526020612954848961060f565b51015238611b78565b61297191973d8091833e610ffc818361051e565b9538612563565b612991915060203d60201161103557611026818361051e565b38611b68565b6129ad9250803d106118b6576118a6818361051e565b3880611b0d565b5050505090565b6020906040516129ca81610502565b600081526129d66105ee565b838201526129e26105ee565b60408201526129ef6105ee565b606082015282828901015201611aad565b92611a83565b612a1a91923d8091833e610ffc818361051e565b9038611a6c565b90506020813d602011612a53575b81612a3c6020938361051e565b8101031261013857612a4d90610540565b38611a3c565b3d9150612a2f565b6001600160a01b0316612a6d57600890565b60405162461bcd60e51b815260206004820152601e60248201527f426173652063757272656e637920756e6974206d7573742062652055534400006044820152606490fdfea2646970667358221220a7f1f11e8c9f70d572e9e6a6622cd0780a1bc21332f2582eee40e4376a02082164736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}