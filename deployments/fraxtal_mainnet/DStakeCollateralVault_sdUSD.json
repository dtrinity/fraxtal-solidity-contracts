{
  "address": "0x5432ed4A370718D6904485e2Fc114762C68Cc7BE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dStakeVaultShare",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dStableAsset",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "AssetAlreadySupported",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "AssetNotSupported",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "CannotRescueRestrictedToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ETHTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "NonZeroBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ETHRescued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "RouterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultAsset",
          "type": "address"
        }
      ],
      "name": "SupportedAssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultAsset",
          "type": "address"
        }
      ],
      "name": "SupportedAssetRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenRescued",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultAsset",
          "type": "address"
        }
      ],
      "name": "addSupportedAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dStable",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dStakeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRestrictedRescueTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedAssets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultAsset",
          "type": "address"
        }
      ],
      "name": "removeSupportedAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "sendAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newRouter",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "supportedAssets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValueInDStable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "dStableValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf2f5fd95df3fb4fc550aa86065a6de51c0d97b838c5e51d00d1508b5fb39c8e0",
  "receipt": {
    "to": null,
    "from": "0x0f5e3D9AEe7Ab5fDa909Af1ef147D98a7f4B3022",
    "contractAddress": "0x5432ed4A370718D6904485e2Fc114762C68Cc7BE",
    "transactionIndex": 1,
    "gasUsed": "1141456",
    "logsBloom": "0x
    "blockHash": "0xde04ab0340fcecfe2d4bda5b24de0c1da31e59debbb2f025f9b05ed94e3ceb69",
    "transactionHash": "0xf2f5fd95df3fb4fc550aa86065a6de51c0d97b838c5e51d00d1508b5fb39c8e0",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 23529367,
        "transactionHash": "0xf2f5fd95df3fb4fc550aa86065a6de51c0d97b838c5e51d00d1508b5fb39c8e0",
        "address": "0x5432ed4A370718D6904485e2Fc114762C68Cc7BE",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000f5e3d9aee7ab5fda909af1ef147d98a7f4b3022",
          "0x0000000000000000000000000f5e3d9aee7ab5fda909af1ef147d98a7f4b3022"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xde04ab0340fcecfe2d4bda5b24de0c1da31e59debbb2f025f9b05ed94e3ceb69"
      }
    ],
    "blockNumber": 23529367,
    "cumulativeGasUsed": "1187533",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x58AcC2600835211Dcb5847c5Fa422791Fd492409",
    "0x788D96f655735f52c676A133f4dFC53cEC614d4A"
  ],
  "numDeployments": 1,
  "solcInputHash": "3ab0b7ef278db081e26e71c26b8f317e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dStakeVaultShare\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dStableAsset\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetAlreadySupported\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"AssetNotSupported\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"CannotRescueRestrictedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"NonZeroBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHRescued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"RouterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultAsset\",\"type\":\"address\"}],\"name\":\"SupportedAssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultAsset\",\"type\":\"address\"}],\"name\":\"SupportedAssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenRescued\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAsset\",\"type\":\"address\"}],\"name\":\"addSupportedAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dStable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dStakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRestrictedRescueTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAsset\",\"type\":\"address\"}],\"name\":\"removeSupportedAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sendAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRouter\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"supportedAssets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValueInDStable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"dStableValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Calculates the total value of these assets in terms of the underlying dStable asset      using registered adapters. This contract is non-upgradeable but replaceable via      DStakeToken governance.      Uses AccessControl for role-based access control.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"RouterSet(address)\":{\"params\":{\"router\":\"The address of the new router.\"}}},\"kind\":\"dev\",\"methods\":{\"getRestrictedRescueTokens()\":{\"returns\":{\"_0\":\"restrictedTokens Array of restricted token addresses\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"rescueETH(address,uint256)\":{\"params\":{\"amount\":\"Amount of ETH to rescue\",\"receiver\":\"Address to receive the rescued ETH\"}},\"rescueToken(address,address,uint256)\":{\"details\":\"Cannot rescue supported vault assets or the dStable token\",\"params\":{\"amount\":\"Amount of tokens to rescue\",\"receiver\":\"Address to receive the rescued tokens\",\"token\":\"Address of the token to rescue\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"sendAsset(address,uint256,address)\":{\"details\":\"Only callable by the registered router (ROUTER_ROLE).\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalValueInDStable()\":{\"details\":\"This is typically called by the DStakeToken's `totalAssets()` function.\",\"returns\":{\"dStableValue\":\"The total value of managed assets in terms of the dStable asset.\"}}},\"stateVariables\":{\"dStable\":{\"return\":\"The address of the dStable asset.\",\"returns\":{\"_0\":\"The address of the dStable asset.\"}}},\"title\":\"DStakeCollateralVault\",\"version\":1},\"userdoc\":{\"events\":{\"RouterSet(address)\":{\"notice\":\"Emitted when the router address is set.\"},\"SupportedAssetAdded(address)\":{\"notice\":\"Emitted when a new vault asset is added to the supported list.\"},\"SupportedAssetRemoved(address)\":{\"notice\":\"Emitted when a vault asset is removed from the supported list.\"}},\"kind\":\"user\",\"methods\":{\"addSupportedAsset(address)\":{\"notice\":\"Adds a new supported vault asset. Can only be invoked by the router.\"},\"dStable()\":{\"notice\":\"Returns the address of the underlying dStable asset the vault operates with.\"},\"dStakeToken()\":{\"notice\":\"The DStakeToken contract address this vault serves.\"},\"getRestrictedRescueTokens()\":{\"notice\":\"Returns the list of tokens that cannot be rescued\"},\"getSupportedAssets()\":{\"notice\":\"Returns the entire list of supported vault assets. Useful for UIs & off-chain tooling.\"},\"removeSupportedAsset(address)\":{\"notice\":\"Removes a supported vault asset. Can only be invoked by the router.\"},\"rescueETH(address,uint256)\":{\"notice\":\"Rescues ETH accidentally sent to the contract\"},\"rescueToken(address,address,uint256)\":{\"notice\":\"Rescues tokens accidentally sent to the contract\"},\"router()\":{\"notice\":\"The DStakeRouter contract address allowed to interact.\"},\"sendAsset(address,uint256,address)\":{\"notice\":\"Transfers `amount` of `vaultAsset` from this vault to `recipient`.\"},\"setRouter(address)\":{\"notice\":\"Sets the router address. Grants ROUTER_ROLE to new router and         revokes it from the previous router.\"},\"supportedAssets(uint256)\":{\"notice\":\"Returns the vault asset at `index` from the internal supported set.         Kept for backwards-compatibility with the previous public array getter.\"},\"totalValueInDStable()\":{\"notice\":\"Calculates the total value of all managed `vault assets` held by the vault,         denominated in the underlying dStable asset.\"}},\"notice\":\"Holds various yield-bearing/convertible ERC20 tokens (`vault assets`) managed by dSTAKE.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/dstake/DStakeCollateralVault.sol\":\"DStakeCollateralVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-5/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/vaults/dstake/DStakeCollateralVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-5/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts-5/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IDStakeCollateralVault} from \\\"./interfaces/IDStakeCollateralVault.sol\\\";\\nimport {IDStableConversionAdapter} from \\\"./interfaces/IDStableConversionAdapter.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts-5/access/AccessControl.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts-5/utils/structs/EnumerableSet.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts-5/utils/ReentrancyGuard.sol\\\";\\n\\n// ---------------------------------------------------------------------------\\n// Internal interface to query the router's public mapping without importing the\\n// full router contract (avoids circular dependencies).\\n// ---------------------------------------------------------------------------\\ninterface IAdapterProvider {\\n    function vaultAssetToAdapter(address) external view returns (address);\\n}\\n\\n/**\\n * @title DStakeCollateralVault\\n * @notice Holds various yield-bearing/convertible ERC20 tokens (`vault assets`) managed by dSTAKE.\\n * @dev Calculates the total value of these assets in terms of the underlying dStable asset\\n *      using registered adapters. This contract is non-upgradeable but replaceable via\\n *      DStakeToken governance.\\n *      Uses AccessControl for role-based access control.\\n */\\ncontract DStakeCollateralVault is\\n    IDStakeCollateralVault,\\n    AccessControl,\\n    ReentrancyGuard\\n{\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // --- Roles ---\\n    bytes32 public constant ROUTER_ROLE = keccak256(\\\"ROUTER_ROLE\\\");\\n\\n    // --- Errors ---\\n    error ZeroAddress();\\n    error AssetNotSupported(address asset);\\n    error AssetAlreadySupported(address asset);\\n    error NonZeroBalance(address asset);\\n    error CannotRescueRestrictedToken(address token);\\n    error ETHTransferFailed(address receiver, uint256 amount);\\n\\n    // --- Events ---\\n    event TokenRescued(\\n        address indexed token,\\n        address indexed receiver,\\n        uint256 amount\\n    );\\n    event ETHRescued(address indexed receiver, uint256 amount);\\n\\n    // --- State ---\\n    address public immutable dStakeToken; // The DStakeToken this vault serves\\n    address public immutable dStable; // The underlying dStable asset address\\n\\n    address public router; // The DStakeRouter allowed to interact\\n\\n    EnumerableSet.AddressSet private _supportedAssets; // Set of supported vault assets\\n\\n    // --- Constructor ---\\n    constructor(address _dStakeVaultShare, address _dStableAsset) {\\n        if (_dStakeVaultShare == address(0) || _dStableAsset == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        dStakeToken = _dStakeVaultShare;\\n        dStable = _dStableAsset;\\n\\n        // Set up the DEFAULT_ADMIN_ROLE initially to the contract deployer\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    // --- External Views (IDStakeCollateralVault Interface) ---\\n\\n    /**\\n     * @inheritdoc IDStakeCollateralVault\\n     */\\n    function totalValueInDStable()\\n        external\\n        view\\n        override\\n        returns (uint256 dStableValue)\\n    {\\n        uint256 totalValue = 0;\\n        uint256 len = _supportedAssets.length();\\n        for (uint256 i = 0; i < len; i++) {\\n            address vaultAsset = _supportedAssets.at(i);\\n            address adapterAddress = IAdapterProvider(router)\\n                .vaultAssetToAdapter(vaultAsset);\\n\\n            if (adapterAddress == address(0)) {\\n                // If there is no adapter configured, simply skip this asset to\\n                // preserve liveness. Anyone can dust this vault and we cannot\\n                // enforce that all assets have adapters before removal\\n                continue;\\n            }\\n\\n            uint256 balance = IERC20(vaultAsset).balanceOf(address(this));\\n            if (balance > 0) {\\n                totalValue += IDStableConversionAdapter(adapterAddress)\\n                    .assetValueInDStable(vaultAsset, balance);\\n            }\\n        }\\n        return totalValue;\\n    }\\n\\n    // --- External Functions (Router Interactions) ---\\n\\n    /**\\n     * @notice Transfers `amount` of `vaultAsset` from this vault to `recipient`.\\n     * @dev Only callable by the registered router (ROUTER_ROLE).\\n     */\\n    function sendAsset(\\n        address vaultAsset,\\n        uint256 amount,\\n        address recipient\\n    ) external onlyRole(ROUTER_ROLE) {\\n        if (!_isSupported(vaultAsset)) revert AssetNotSupported(vaultAsset);\\n        IERC20(vaultAsset).safeTransfer(recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Adds a new supported vault asset. Can only be invoked by the router.\\n     */\\n    function addSupportedAsset(\\n        address vaultAsset\\n    ) external onlyRole(ROUTER_ROLE) {\\n        if (vaultAsset == address(0)) revert ZeroAddress();\\n        if (_isSupported(vaultAsset)) revert AssetAlreadySupported(vaultAsset);\\n\\n        _supportedAssets.add(vaultAsset);\\n        emit SupportedAssetAdded(vaultAsset);\\n    }\\n\\n    /**\\n     * @notice Removes a supported vault asset. Can only be invoked by the router.\\n     */\\n    function removeSupportedAsset(\\n        address vaultAsset\\n    ) external onlyRole(ROUTER_ROLE) {\\n        if (!_isSupported(vaultAsset)) revert AssetNotSupported(vaultAsset);\\n        // NOTE: Previously this function reverted if the vault still held a\\n        // non-zero balance of the asset, causing a griefing / DoS vector:\\n        // anyone could deposit 1 wei of the token to block removal. The\\n        // check has been removed so governance can always delist an asset.\\n\\n        _supportedAssets.remove(vaultAsset);\\n        emit SupportedAssetRemoved(vaultAsset);\\n    }\\n\\n    // --- Governance Functions ---\\n\\n    /**\\n     * @notice Sets the router address. Grants ROUTER_ROLE to new router and\\n     *         revokes it from the previous router.\\n     */\\n    function setRouter(\\n        address _newRouter\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_newRouter == address(0)) revert ZeroAddress();\\n\\n        // Revoke role from old router\\n        if (router != address(0)) {\\n            _revokeRole(ROUTER_ROLE, router);\\n        }\\n\\n        _grantRole(ROUTER_ROLE, _newRouter);\\n        router = _newRouter;\\n        emit RouterSet(_newRouter);\\n    }\\n\\n    // --- Internal Utilities ---\\n\\n    function _isSupported(address asset) private view returns (bool) {\\n        return _supportedAssets.contains(asset);\\n    }\\n\\n    // --- External Views ---\\n\\n    /**\\n     * @notice Returns the vault asset at `index` from the internal supported set.\\n     *         Kept for backwards-compatibility with the previous public array getter.\\n     */\\n    function supportedAssets(\\n        uint256 index\\n    ) external view override returns (address) {\\n        return _supportedAssets.at(index);\\n    }\\n\\n    /**\\n     * @notice Returns the entire list of supported vault assets. Useful for UIs & off-chain tooling.\\n     */\\n    function getSupportedAssets() external view returns (address[] memory) {\\n        return _supportedAssets.values();\\n    }\\n\\n    // --- Recovery Functions ---\\n\\n    /**\\n     * @notice Rescues tokens accidentally sent to the contract\\n     * @dev Cannot rescue supported vault assets or the dStable token\\n     * @param token Address of the token to rescue\\n     * @param receiver Address to receive the rescued tokens\\n     * @param amount Amount of tokens to rescue\\n     */\\n    function rescueToken(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) nonReentrant {\\n        if (receiver == address(0)) revert ZeroAddress();\\n\\n        // Check if token is a supported asset\\n        if (_isSupported(token)) {\\n            revert CannotRescueRestrictedToken(token);\\n        }\\n\\n        // Check if token is the dStable token\\n        if (token == dStable) {\\n            revert CannotRescueRestrictedToken(token);\\n        }\\n\\n        // Rescue the token\\n        IERC20(token).safeTransfer(receiver, amount);\\n        emit TokenRescued(token, receiver, amount);\\n    }\\n\\n    /**\\n     * @notice Rescues ETH accidentally sent to the contract\\n     * @param receiver Address to receive the rescued ETH\\n     * @param amount Amount of ETH to rescue\\n     */\\n    function rescueETH(\\n        address receiver,\\n        uint256 amount\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) nonReentrant {\\n        if (receiver == address(0)) revert ZeroAddress();\\n\\n        (bool success, ) = receiver.call{value: amount}(\\\"\\\");\\n        if (!success) revert ETHTransferFailed(receiver, amount);\\n\\n        emit ETHRescued(receiver, amount);\\n    }\\n\\n    /**\\n     * @notice Returns the list of tokens that cannot be rescued\\n     * @return restrictedTokens Array of restricted token addresses\\n     */\\n    function getRestrictedRescueTokens()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        address[] memory assets = _supportedAssets.values();\\n        address[] memory restrictedTokens = new address[](assets.length + 1);\\n\\n        // Add all supported assets\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            restrictedTokens[i] = assets[i];\\n        }\\n\\n        // Add dStable token\\n        restrictedTokens[assets.length] = dStable;\\n\\n        return restrictedTokens;\\n    }\\n\\n    /**\\n     * @notice Allows the contract to receive ETH\\n     */\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xbf0202ad717e0f726f64fca4a78081f678ad58da34b4b7e19a51b6359822861b\",\"license\":\"MIT\"},\"contracts/vaults/dstake/interfaces/IDStableConversionAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IDStableConversionAdapter Interface\\n * @notice Interface for contracts that handle the conversion between the core dStable asset\\n *         and a specific yield-bearing or convertible ERC20 token (`vault asset`), as well as\\n *         valuing that `vault asset` in terms of the dStable asset.\\n * @dev Implementations interact with specific protocols (lending pools, DEX LPs, wrappers, etc.).\\n */\\ninterface IDStableConversionAdapter {\\n    /**\\n     * @notice Converts a specified amount of the dStable asset into the specific `vaultAsset`\\n     *         managed by this adapter.\\n     * @dev The adapter MUST pull `dStableAmount` of the dStable asset from the caller (expected to be the Router).\\n     * @dev The resulting `vaultAsset` MUST be sent/deposited/minted directly to the `collateralVault` address provided during adapter setup or retrieved.\\n     * @param dStableAmount The amount of dStable asset to convert.\\n     * @return vaultAsset The address of the specific `vault asset` token managed by this adapter.\\n     * @return vaultAssetAmount The amount of `vaultAsset` generated from the conversion.\\n     */\\n    function convertToVaultAsset(\\n        uint256 dStableAmount\\n    ) external returns (address vaultAsset, uint256 vaultAssetAmount);\\n\\n    /**\\n     * @notice Converts a specific amount of `vaultAsset` back into the dStable asset.\\n     * @dev The adapter MUST pull the required amount of `vaultAsset` from the caller (expected to be the Router).\\n     * @dev The resulting dStable asset MUST be sent to the caller.\\n     * @param vaultAssetAmount The amount of `vaultAsset` to convert.\\n     * @return dStableAmount The amount of dStable asset sent to the caller.\\n     */\\n    function convertFromVaultAsset(\\n        uint256 vaultAssetAmount\\n    ) external returns (uint256 dStableAmount);\\n\\n    /**\\n     * @notice Preview the result of converting a given dStable amount to vaultAsset (without state change).\\n     * @param dStableAmount The amount of dStable asset to preview conversion for.\\n     * @return vaultAsset The address of the specific `vault asset` token managed by this adapter.\\n     * @return vaultAssetAmount The amount of `vaultAsset` that would be received.\\n     */\\n    function previewConvertToVaultAsset(\\n        uint256 dStableAmount\\n    ) external view returns (address vaultAsset, uint256 vaultAssetAmount);\\n\\n    /**\\n     * @notice Preview the result of converting a given vaultAsset amount to dStable (without state change).\\n     * @param vaultAssetAmount The amount of `vaultAsset` to preview conversion for.\\n     * @return dStableAmount The amount of dStable asset that would be received.\\n     */\\n    function previewConvertFromVaultAsset(\\n        uint256 vaultAssetAmount\\n    ) external view returns (uint256 dStableAmount);\\n\\n    /**\\n     * @notice Calculates the value of a given amount of the specific `vaultAsset` managed by this adapter\\n     *         in terms of the dStable asset.\\n     * @param vaultAsset The address of the vault asset token (should match getVaultAsset()). Included for explicitness.\\n     * @param vaultAssetAmount The amount of the `vaultAsset` to value.\\n     * @return dStableValue The equivalent value in the dStable asset.\\n     */\\n    function assetValueInDStable(\\n        address vaultAsset,\\n        uint256 vaultAssetAmount\\n    ) external view returns (uint256 dStableValue);\\n\\n    /**\\n     * @notice Returns the address of the specific `vault asset` token managed by this adapter.\\n     * @return The address of the `vault asset`.\\n     */\\n    function vaultAsset() external view returns (address);\\n}\\n\",\"keccak256\":\"0xce7f578388bde1fa102f6d9abbc3af329458b24fae712c3e86440aa0d0bb1ff8\",\"license\":\"MIT\"},\"contracts/vaults/dstake/interfaces/IDStakeCollateralVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IDStakeCollateralVault Interface\\n * @notice Defines the external functions of the DStakeCollateralVault required by other\\n *         contracts in the dSTAKE system, primarily the DStakeToken.\\n */\\ninterface IDStakeCollateralVault {\\n    /**\\n     * @notice Calculates the total value of all managed `vault assets` held by the vault,\\n     *         denominated in the underlying dStable asset.\\n     * @dev This is typically called by the DStakeToken's `totalAssets()` function.\\n     * @return dStableValue The total value of managed assets in terms of the dStable asset.\\n     */\\n    function totalValueInDStable() external view returns (uint256 dStableValue);\\n\\n    /**\\n     * @notice Returns the address of the underlying dStable asset the vault operates with.\\n     * @return The address of the dStable asset.\\n     */\\n    function dStable() external view returns (address);\\n\\n    /**\\n     * @notice The DStakeToken contract address this vault serves.\\n     */\\n    function dStakeToken() external view returns (address);\\n\\n    /**\\n     * @notice The DStakeRouter contract address allowed to interact.\\n     */\\n    function router() external view returns (address);\\n\\n    /**\\n     * @notice Returns the vault asset at `index` from the internal supported list.\\n     */\\n    function supportedAssets(uint256 index) external view returns (address);\\n\\n    /**\\n     * @notice Returns the entire list of supported vault assets. Convenient for UIs & off-chain analytics.\\n     */\\n    function getSupportedAssets() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Transfers `amount` of `vaultAsset` from this vault to the `recipient`.\\n     * @dev Only callable by the registered router.\\n     * @param vaultAsset The address of the vault asset to send.\\n     * @param amount The amount to send.\\n     * @param recipient The address to receive the asset.\\n     */\\n    function sendAsset(\\n        address vaultAsset,\\n        uint256 amount,\\n        address recipient\\n    ) external;\\n\\n    /**\\n     * @notice Sets the address of the DStakeRouter contract.\\n     * @dev Only callable by an address with the DEFAULT_ADMIN_ROLE.\\n     * @param _newRouter The address of the new router contract.\\n     */\\n    function setRouter(address _newRouter) external;\\n\\n    /**\\n     * @notice Adds a vault asset to the supported list. Callable only by the router.\\n     */\\n    function addSupportedAsset(address vaultAsset) external;\\n\\n    /**\\n     * @notice Removes a vault asset from the supported list. Callable only by the router.\\n     */\\n    function removeSupportedAsset(address vaultAsset) external;\\n\\n    /**\\n     * @notice Emitted when the router address is set.\\n     * @param router The address of the new router.\\n     */\\n    event RouterSet(address indexed router);\\n\\n    /**\\n     * @notice Emitted when a new vault asset is added to the supported list.\\n     */\\n    event SupportedAssetAdded(address indexed vaultAsset);\\n\\n    /**\\n     * @notice Emitted when a vault asset is removed from the supported list.\\n     */\\n    event SupportedAssetRemoved(address indexed vaultAsset);\\n}\\n\",\"keccak256\":\"0xe003cc1c2a3e323c1b9c710f5b69b4e5ac1d30d273aea1ad9fa5e12dc63169c3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c034620000da57601f6200145638819003918201601f19168301916001600160401b03831184841017620000df578084926040948552833981010312620000da576200005a60206200005283620000f5565b9201620000f5565b60018055906001600160a01b0380821615908115620000ce575b50620000bc5760805260a0526200008b336200010a565b506040516112ba90816200019c8239608051816106a4015260a0518181816102500152818161074701526109ac0152f35b60405163d92e233d60e01b8152600490fd5b90508216153862000074565b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620000da57565b6001600160a01b031660008181527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205490919060ff166200019757818052816020526040822081835260205260408220600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b509056fe60806040818152600480361015610021575b505050361561001f57600080fd5b005b600092833560e01c90816301ffc9a714610a9f57508063099a04e5146109db5780630cc2f8d2146109975780631c46bc6f1461090d578063248a9ca3146108e45780632f2ff15d146108bb57806330d643b51461089257806336568abe1461084b57806338ff92e6146107c6578063500fc434146106d35780635c47df421461068f57806391d148541461064a578063a217fddf1461062f578063c0d7865514610596578063c68dbb3714610560578063d547741f14610522578063e015e7061461031d578063e5406dbf146102f0578063e5711e8b146101e3578063f887ea40146101b65763fac09e870361001157346101b25760203660031901126101b25761012a610af3565b610132610c7b565b6001600160a01b03169182156101a557610159836000526004602052604060002054151590565b61019057505061016881611196565b507f3ebc37c7ad88888fc79c591d53847cf755b23698bc448d2c3f39cce8acbe492b8280a280f35b9160249251916303b6566d60e41b8352820152fd5b5163d92e233d60e01b8152fd5b8280fd5b5050346101df57816003193601126101df5760025490516001600160a01b039091168152602090f35b5080fd5b50346101b25760603660031901126101b2576101fd610af3565b91610206610b0e565b9060443591610213610c23565b61021b610ceb565b6001600160a01b038181169590949086156102e15785169461024a866000526004602052604060002054151590565b6102ca577f00000000000000000000000000000000000000000000000000000000000000001685146102b35750916020916102a7827f4143f7b5cb6ea007914c32b8a3e64cebc051d7f493fa0755454da1e47701e1259587610f35565b51908152a36001805580f35b82516341d6bb6960e01b8152908101859052602490fd5b83516341d6bb6960e01b8152808301879052602490fd5b50825163d92e233d60e01b8152fd5b5050346101df57816003193601126101df576103199061030e611126565b905191829182610b24565b0390f35b50823461051f578060031936011261051f576003805460025492936001600160a01b039391928592851690835b85811061035b576020888a51908152f35b8661036582610fef565b905490841b1c1689519063c8232bd760e01b82528086830152602090602492828185818a5afa90811561051557908b918a916104d7575b501680156104cb578c516370a0823160e01b815230898201529183838681845afa9283156104c1578a9361048e575b508d836103e3575b5050505050506001905b0161034a565b51633171fd4b60e21b81526001600160a01b03909116818a019081526020810193909352949b9491839183918290819060400103915afa918215610484578892610452575b5050820180921161044157509660018a8080808d6103d3565b634e487b7160e01b86526011855285fd5b90809250813d831161047d575b6104698183610b69565b8101031261047957518b80610428565b8680fd5b503d61045f565b8c513d8a823e3d90fd5b9092508381813d83116104ba575b6104a68183610b69565b810103126104b65751918e6103cb565b8980fd5b503d61049c565b8e513d8c823e3d90fd5b505050506001906103dd565b809250848092503d831161050e575b6104f08183610b69565b8101031261050a57518a8116810361050a578a908e61039c565b8880fd5b503d6104e6565b8d513d8b823e3d90fd5b80fd5b5090346101b257806003193601126101b25761055c91356105576001610546610b0e565b938387528660205286200154610cc5565b610ec0565b5080f35b50913461051f57602036600319011261051f575061058060209235610fef565b905491519160018060a01b039160031b1c168152f35b50346101b25760203660031901126101b2576105b0610af3565b906105b9610c23565b6001600160a01b038281169390919084156101a5575050906105e591600254168061061f575b50610d0e565b50600280546001600160a01b031916821790557fc6b438e6a8a59579ce6a4406cbd203b740e0d47b458aae6596339bcd40c40d158280a280f35b61062890610e27565b50386105df565b5050346101df57816003193601126101df5751908152602090f35b50346101b257816003193601126101b2578160209360ff9261066a610b0e565b903582528186528282206001600160a01b039091168252855220549151911615158152f35b5050346101df57816003193601126101df57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b509190346101df57816003193601126101df576106ee611126565b805192600194600185018095116107b35750849061070b85610be1565b9461071885519687610b69565b808652610727601f1991610be1565b01366020870137905b61077b575b6103198484610745855183610bf9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690525191829182610b24565b81518110156107ae57849081906001600160a01b0361079a8286610bf9565b51166107a68288610bf9565b520190610730565b610735565b634e487b7160e01b825260119052602490fd5b508290346101df5760603660031901126101df576107e2610af3565b604435906001600160a01b0390818316830361084757610800610c7b565b1691610819836000526004602052604060002054151590565b1561083057509061082d9160243591610f35565b80f35b8451632777a68f60e11b8152908101839052602490fd5b8480fd5b509190346101df57806003193601126101df57610866610b0e565b90336001600160a01b03831603610883575061055c919235610ec0565b5163334bd91960e11b81528390fd5b5050346101df57816003193601126101df57602090516000805160206112658339815191528152f35b5090346101b257806003193601126101b25761055c91356108df6001610546610b0e565b610dae565b50346101b25760203660031901126101b257816020936001923581528085522001549051908152f35b50346101b25760203660031901126101b257610927610af3565b61092f610c7b565b6001600160a01b03166000818152600460205260409020549092901561098257505061095a81611026565b507fd4d3143baa8e1f94a3d57c410b72e62213e8359b01fc752925f64aa59f4053c98280a280f35b916024925191632777a68f60e11b8352820152fd5b5050346101df57816003193601126101df57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5090346101b257806003193601126101b2576109f5610af3565b9060243591610a02610c23565b610a0a610ceb565b6001600160a01b038116938415610a91578580808087865af1610a2b610ba1565b5015610a645750507fb3579861130e4da8bb7b87c54d2d139937f23bcd6e4ebed9e75d0f78ab1cc1189160209151908152a26001805580f35b8251635e0a829b60e01b81526001600160a01b039092169082019081526020810184905281906040010390fd5b825163d92e233d60e01b8152fd5b925050346101b25760203660031901126101b2573563ffffffff60e01b81168091036101b25760209250637965db0b60e01b8114908115610ae2575b5015158152f35b6301ffc9a760e01b14905038610adb565b600435906001600160a01b0382168203610b0957565b600080fd5b602435906001600160a01b0382168203610b0957565b602090602060408183019282815285518094520193019160005b828110610b4c575050505090565b83516001600160a01b031685529381019392810192600101610b3e565b90601f8019910116810190811067ffffffffffffffff821117610b8b57604052565b634e487b7160e01b600052604160045260246000fd5b3d15610bdc573d9067ffffffffffffffff8211610b8b5760405191610bd0601f8201601f191660200184610b69565b82523d6000602084013e565b606090565b67ffffffffffffffff8111610b8b5760051b60200190565b8051821015610c0d5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205460ff1615610c5d5750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b3360009081527fb5816a4d525ce17c45785e5fbae4518f6f00ef4e9d31d4d7bb129b76152ed32f60205260409020546000805160206112658339815191529060ff1615610c5d5750565b80600052600060205260406000203360005260205260ff6040600020541615610c5d5750565b600260015414610cfc576002600155565b604051633ee5aeb560e01b8152600490fd5b6001600160a01b031660008181527fb5816a4d525ce17c45785e5fbae4518f6f00ef4e9d31d4d7bb129b76152ed32f60205260408120549091906000805160206112658339815191529060ff16610da957808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b9060009180835282602052604083209160018060a01b03169182845260205260ff60408420541615600014610da957808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b6001600160a01b031660008181527fb5816a4d525ce17c45785e5fbae4518f6f00ef4e9d31d4d7bb129b76152ed32f60205260408120549091906000805160206112658339815191529060ff1615610da95780835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b9060009180835282602052604083209160018060a01b03169182845260205260ff604084205416600014610da95780835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b60405163a9059cbb60e01b602082019081526001600160a01b03939093166024820152604480820194909452928352610f9790610f73606485610b69565b60018060a01b031692600080938192519082875af1610f90610ba1565b9084611201565b908151918215159283610fc7575b505050610faf5750565b60249060405190635274afe760e01b82526004820152fd5b8192935090602091810103126101df57602001519081159182150361051f5750388080610fa5565b600354811015610c0d5760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b600090808252600490816020526040832054801515600014611120576000199080820181811161110d57600354908382019182116110fa578181036110b0575b505050600354801561109d5781019061107e82610fef565b909182549160031b1b1916905560035582526020526040812055600190565b634e487b7160e01b855260318452602485fd5b6110e56110bf6110ce93610fef565b90549060031b1c928392610fef565b819391549060031b91821b91600019901b19161790565b90558552836020526040852055388080611066565b634e487b7160e01b875260118652602487fd5b634e487b7160e01b865260118552602486fd5b50505090565b6040519060035480835282602091602082019060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b936000905b82821061117c5750505061117a92500383610b69565b565b855484526001958601958895509381019390910190611164565b6000818152600460205260408120546111fc57600354680100000000000000008110156111e85790826111d46110ce84600160409601600355610fef565b905560035492815260046020522055600190565b634e487b7160e01b82526041600452602482fd5b905090565b90611228575080511561121657805190602001fd5b604051630a12f52160e11b8152600490fd5b8151158061125b575b611239575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561123156fe7a05a596cb0ce7fdea8a1e1ec73be300bdb35097c944ce1897202f7a13122eb2a264697066735822122057b94794b44a627af1e1354fc28c531bc29adf6bcbdde441e199c654eaec295c64736f6c63430008180033",
  "deployedBytecode": "0x60806040818152600480361015610021575b505050361561001f57600080fd5b005b600092833560e01c90816301ffc9a714610a9f57508063099a04e5146109db5780630cc2f8d2146109975780631c46bc6f1461090d578063248a9ca3146108e45780632f2ff15d146108bb57806330d643b51461089257806336568abe1461084b57806338ff92e6146107c6578063500fc434146106d35780635c47df421461068f57806391d148541461064a578063a217fddf1461062f578063c0d7865514610596578063c68dbb3714610560578063d547741f14610522578063e015e7061461031d578063e5406dbf146102f0578063e5711e8b146101e3578063f887ea40146101b65763fac09e870361001157346101b25760203660031901126101b25761012a610af3565b610132610c7b565b6001600160a01b03169182156101a557610159836000526004602052604060002054151590565b61019057505061016881611196565b507f3ebc37c7ad88888fc79c591d53847cf755b23698bc448d2c3f39cce8acbe492b8280a280f35b9160249251916303b6566d60e41b8352820152fd5b5163d92e233d60e01b8152fd5b8280fd5b5050346101df57816003193601126101df5760025490516001600160a01b039091168152602090f35b5080fd5b50346101b25760603660031901126101b2576101fd610af3565b91610206610b0e565b9060443591610213610c23565b61021b610ceb565b6001600160a01b038181169590949086156102e15785169461024a866000526004602052604060002054151590565b6102ca577f00000000000000000000000000000000000000000000000000000000000000001685146102b35750916020916102a7827f4143f7b5cb6ea007914c32b8a3e64cebc051d7f493fa0755454da1e47701e1259587610f35565b51908152a36001805580f35b82516341d6bb6960e01b8152908101859052602490fd5b83516341d6bb6960e01b8152808301879052602490fd5b50825163d92e233d60e01b8152fd5b5050346101df57816003193601126101df576103199061030e611126565b905191829182610b24565b0390f35b50823461051f578060031936011261051f576003805460025492936001600160a01b039391928592851690835b85811061035b576020888a51908152f35b8661036582610fef565b905490841b1c1689519063c8232bd760e01b82528086830152602090602492828185818a5afa90811561051557908b918a916104d7575b501680156104cb578c516370a0823160e01b815230898201529183838681845afa9283156104c1578a9361048e575b508d836103e3575b5050505050506001905b0161034a565b51633171fd4b60e21b81526001600160a01b03909116818a019081526020810193909352949b9491839183918290819060400103915afa918215610484578892610452575b5050820180921161044157509660018a8080808d6103d3565b634e487b7160e01b86526011855285fd5b90809250813d831161047d575b6104698183610b69565b8101031261047957518b80610428565b8680fd5b503d61045f565b8c513d8a823e3d90fd5b9092508381813d83116104ba575b6104a68183610b69565b810103126104b65751918e6103cb565b8980fd5b503d61049c565b8e513d8c823e3d90fd5b505050506001906103dd565b809250848092503d831161050e575b6104f08183610b69565b8101031261050a57518a8116810361050a578a908e61039c565b8880fd5b503d6104e6565b8d513d8b823e3d90fd5b80fd5b5090346101b257806003193601126101b25761055c91356105576001610546610b0e565b938387528660205286200154610cc5565b610ec0565b5080f35b50913461051f57602036600319011261051f575061058060209235610fef565b905491519160018060a01b039160031b1c168152f35b50346101b25760203660031901126101b2576105b0610af3565b906105b9610c23565b6001600160a01b038281169390919084156101a5575050906105e591600254168061061f575b50610d0e565b50600280546001600160a01b031916821790557fc6b438e6a8a59579ce6a4406cbd203b740e0d47b458aae6596339bcd40c40d158280a280f35b61062890610e27565b50386105df565b5050346101df57816003193601126101df5751908152602090f35b50346101b257816003193601126101b2578160209360ff9261066a610b0e565b903582528186528282206001600160a01b039091168252855220549151911615158152f35b5050346101df57816003193601126101df57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b509190346101df57816003193601126101df576106ee611126565b805192600194600185018095116107b35750849061070b85610be1565b9461071885519687610b69565b808652610727601f1991610be1565b01366020870137905b61077b575b6103198484610745855183610bf9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690525191829182610b24565b81518110156107ae57849081906001600160a01b0361079a8286610bf9565b51166107a68288610bf9565b520190610730565b610735565b634e487b7160e01b825260119052602490fd5b508290346101df5760603660031901126101df576107e2610af3565b604435906001600160a01b0390818316830361084757610800610c7b565b1691610819836000526004602052604060002054151590565b1561083057509061082d9160243591610f35565b80f35b8451632777a68f60e11b8152908101839052602490fd5b8480fd5b509190346101df57806003193601126101df57610866610b0e565b90336001600160a01b03831603610883575061055c919235610ec0565b5163334bd91960e11b81528390fd5b5050346101df57816003193601126101df57602090516000805160206112658339815191528152f35b5090346101b257806003193601126101b25761055c91356108df6001610546610b0e565b610dae565b50346101b25760203660031901126101b257816020936001923581528085522001549051908152f35b50346101b25760203660031901126101b257610927610af3565b61092f610c7b565b6001600160a01b03166000818152600460205260409020549092901561098257505061095a81611026565b507fd4d3143baa8e1f94a3d57c410b72e62213e8359b01fc752925f64aa59f4053c98280a280f35b916024925191632777a68f60e11b8352820152fd5b5050346101df57816003193601126101df57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5090346101b257806003193601126101b2576109f5610af3565b9060243591610a02610c23565b610a0a610ceb565b6001600160a01b038116938415610a91578580808087865af1610a2b610ba1565b5015610a645750507fb3579861130e4da8bb7b87c54d2d139937f23bcd6e4ebed9e75d0f78ab1cc1189160209151908152a26001805580f35b8251635e0a829b60e01b81526001600160a01b039092169082019081526020810184905281906040010390fd5b825163d92e233d60e01b8152fd5b925050346101b25760203660031901126101b2573563ffffffff60e01b81168091036101b25760209250637965db0b60e01b8114908115610ae2575b5015158152f35b6301ffc9a760e01b14905038610adb565b600435906001600160a01b0382168203610b0957565b600080fd5b602435906001600160a01b0382168203610b0957565b602090602060408183019282815285518094520193019160005b828110610b4c575050505090565b83516001600160a01b031685529381019392810192600101610b3e565b90601f8019910116810190811067ffffffffffffffff821117610b8b57604052565b634e487b7160e01b600052604160045260246000fd5b3d15610bdc573d9067ffffffffffffffff8211610b8b5760405191610bd0601f8201601f191660200184610b69565b82523d6000602084013e565b606090565b67ffffffffffffffff8111610b8b5760051b60200190565b8051821015610c0d5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205460ff1615610c5d5750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b3360009081527fb5816a4d525ce17c45785e5fbae4518f6f00ef4e9d31d4d7bb129b76152ed32f60205260409020546000805160206112658339815191529060ff1615610c5d5750565b80600052600060205260406000203360005260205260ff6040600020541615610c5d5750565b600260015414610cfc576002600155565b604051633ee5aeb560e01b8152600490fd5b6001600160a01b031660008181527fb5816a4d525ce17c45785e5fbae4518f6f00ef4e9d31d4d7bb129b76152ed32f60205260408120549091906000805160206112658339815191529060ff16610da957808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b9060009180835282602052604083209160018060a01b03169182845260205260ff60408420541615600014610da957808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b6001600160a01b031660008181527fb5816a4d525ce17c45785e5fbae4518f6f00ef4e9d31d4d7bb129b76152ed32f60205260408120549091906000805160206112658339815191529060ff1615610da95780835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b9060009180835282602052604083209160018060a01b03169182845260205260ff604084205416600014610da95780835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b60405163a9059cbb60e01b602082019081526001600160a01b03939093166024820152604480820194909452928352610f9790610f73606485610b69565b60018060a01b031692600080938192519082875af1610f90610ba1565b9084611201565b908151918215159283610fc7575b505050610faf5750565b60249060405190635274afe760e01b82526004820152fd5b8192935090602091810103126101df57602001519081159182150361051f5750388080610fa5565b600354811015610c0d5760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b600090808252600490816020526040832054801515600014611120576000199080820181811161110d57600354908382019182116110fa578181036110b0575b505050600354801561109d5781019061107e82610fef565b909182549160031b1b1916905560035582526020526040812055600190565b634e487b7160e01b855260318452602485fd5b6110e56110bf6110ce93610fef565b90549060031b1c928392610fef565b819391549060031b91821b91600019901b19161790565b90558552836020526040852055388080611066565b634e487b7160e01b875260118652602487fd5b634e487b7160e01b865260118552602486fd5b50505090565b6040519060035480835282602091602082019060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b936000905b82821061117c5750505061117a92500383610b69565b565b855484526001958601958895509381019390910190611164565b6000818152600460205260408120546111fc57600354680100000000000000008110156111e85790826111d46110ce84600160409601600355610fef565b905560035492815260046020522055600190565b634e487b7160e01b82526041600452602482fd5b905090565b90611228575080511561121657805190602001fd5b604051630a12f52160e11b8152600490fd5b8151158061125b575b611239575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561123156fe7a05a596cb0ce7fdea8a1e1ec73be300bdb35097c944ce1897202f7a13122eb2a264697066735822122057b94794b44a627af1e1354fc28c531bc29adf6bcbdde441e199c654eaec295c64736f6c63430008180033",
  "devdoc": {
    "details": "Calculates the total value of these assets in terms of the underlying dStable asset      using registered adapters. This contract is non-upgradeable but replaceable via      DStakeToken governance.      Uses AccessControl for role-based access control.",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "RouterSet(address)": {
        "params": {
          "router": "The address of the new router."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "getRestrictedRescueTokens()": {
        "returns": {
          "_0": "restrictedTokens Array of restricted token addresses"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "rescueETH(address,uint256)": {
        "params": {
          "amount": "Amount of ETH to rescue",
          "receiver": "Address to receive the rescued ETH"
        }
      },
      "rescueToken(address,address,uint256)": {
        "details": "Cannot rescue supported vault assets or the dStable token",
        "params": {
          "amount": "Amount of tokens to rescue",
          "receiver": "Address to receive the rescued tokens",
          "token": "Address of the token to rescue"
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "sendAsset(address,uint256,address)": {
        "details": "Only callable by the registered router (ROUTER_ROLE)."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalValueInDStable()": {
        "details": "This is typically called by the DStakeToken's `totalAssets()` function.",
        "returns": {
          "dStableValue": "The total value of managed assets in terms of the dStable asset."
        }
      }
    },
    "stateVariables": {
      "dStable": {
        "return": "The address of the dStable asset.",
        "returns": {
          "_0": "The address of the dStable asset."
        }
      }
    },
    "title": "DStakeCollateralVault",
    "version": 1
  },
  "userdoc": {
    "events": {
      "RouterSet(address)": {
        "notice": "Emitted when the router address is set."
      },
      "SupportedAssetAdded(address)": {
        "notice": "Emitted when a new vault asset is added to the supported list."
      },
      "SupportedAssetRemoved(address)": {
        "notice": "Emitted when a vault asset is removed from the supported list."
      }
    },
    "kind": "user",
    "methods": {
      "addSupportedAsset(address)": {
        "notice": "Adds a new supported vault asset. Can only be invoked by the router."
      },
      "dStable()": {
        "notice": "Returns the address of the underlying dStable asset the vault operates with."
      },
      "dStakeToken()": {
        "notice": "The DStakeToken contract address this vault serves."
      },
      "getRestrictedRescueTokens()": {
        "notice": "Returns the list of tokens that cannot be rescued"
      },
      "getSupportedAssets()": {
        "notice": "Returns the entire list of supported vault assets. Useful for UIs & off-chain tooling."
      },
      "removeSupportedAsset(address)": {
        "notice": "Removes a supported vault asset. Can only be invoked by the router."
      },
      "rescueETH(address,uint256)": {
        "notice": "Rescues ETH accidentally sent to the contract"
      },
      "rescueToken(address,address,uint256)": {
        "notice": "Rescues tokens accidentally sent to the contract"
      },
      "router()": {
        "notice": "The DStakeRouter contract address allowed to interact."
      },
      "sendAsset(address,uint256,address)": {
        "notice": "Transfers `amount` of `vaultAsset` from this vault to `recipient`."
      },
      "setRouter(address)": {
        "notice": "Sets the router address. Grants ROUTER_ROLE to new router and         revokes it from the previous router."
      },
      "supportedAssets(uint256)": {
        "notice": "Returns the vault asset at `index` from the internal supported set.         Kept for backwards-compatibility with the previous public array getter."
      },
      "totalValueInDStable()": {
        "notice": "Calculates the total value of all managed `vault assets` held by the vault,         denominated in the underlying dStable asset."
      }
    },
    "notice": "Holds various yield-bearing/convertible ERC20 tokens (`vault assets`) managed by dSTAKE.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 193,
        "contract": "contracts/vaults/dstake/DStakeCollateralVault.sol:DStakeCollateralVault",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)188_storage)"
      },
      {
        "astId": 5495,
        "contract": "contracts/vaults/dstake/DStakeCollateralVault.sol:DStakeCollateralVault",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 93009,
        "contract": "contracts/vaults/dstake/DStakeCollateralVault.sol:DStakeCollateralVault",
        "label": "router",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 93012,
        "contract": "contracts/vaults/dstake/DStakeCollateralVault.sol:DStakeCollateralVault",
        "label": "_supportedAssets",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)8554_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)188_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)188_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)8554_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 8553,
            "contract": "contracts/vaults/dstake/DStakeCollateralVault.sol:DStakeCollateralVault",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)8239_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)188_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 185,
            "contract": "contracts/vaults/dstake/DStakeCollateralVault.sol:DStakeCollateralVault",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 187,
            "contract": "contracts/vaults/dstake/DStakeCollateralVault.sol:DStakeCollateralVault",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)8239_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 8234,
            "contract": "contracts/vaults/dstake/DStakeCollateralVault.sol:DStakeCollateralVault",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 8238,
            "contract": "contracts/vaults/dstake/DStakeCollateralVault.sol:DStakeCollateralVault",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}