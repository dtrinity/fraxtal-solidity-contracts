{
  "address": "0x2A0F31CeCfd18CCb28e66c7cDdfe3A12Ad1b2768",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPool",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staticAToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "StaticTokenCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "POOL",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "underlyings",
          "type": "address[]"
        }
      ],
      "name": "createStaticATokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "name": "getStaticAToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStaticATokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x8579bc234e28654c6107c5996e59c1643df3af1f18125a10525f707bda4c6e17",
  "receipt": {
    "to": null,
    "from": "0x0f5e3D9AEe7Ab5fDa909Af1ef147D98a7f4B3022",
    "contractAddress": "0x2A0F31CeCfd18CCb28e66c7cDdfe3A12Ad1b2768",
    "transactionIndex": 1,
    "gasUsed": "4710015",
    "logsBloom": "0x
    "blockHash": "0x47d41c2aff336772ae2a1d05eb7e8a6fa6b169f0d4ad4618f0a478922d2c95ec",
    "transactionHash": "0x8579bc234e28654c6107c5996e59c1643df3af1f18125a10525f707bda4c6e17",
    "logs": [],
    "blockNumber": 23528969,
    "cumulativeGasUsed": "4785501",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD76C827Ee2Ce1E37c37Fc2ce91376812d3c9BCE2"
  ],
  "numDeployments": 1,
  "solcInputHash": "3ab0b7ef278db081e26e71c26b8f317e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPool\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staticAToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"StaticTokenCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POOL\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"underlyings\",\"type\":\"address[]\"}],\"name\":\"createStaticATokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"name\":\"getStaticAToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStaticATokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"BGD labs (modified by dTrinity)\",\"kind\":\"dev\",\"methods\":{\"createStaticATokens(address[])\":{\"params\":{\"underlyings\":\"the addresses of the underlyings to create.\"},\"returns\":{\"_0\":\"address[] addresses of the new staticATokens.\"}},\"getStaticAToken(address)\":{\"params\":{\"underlying\":\"the address of the underlying.\"},\"returns\":{\"_0\":\"address the staticAToken address.\"}},\"getStaticATokens()\":{\"returns\":{\"_0\":\"address[] list of tokens\"}}},\"title\":\"StaticATokenFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createStaticATokens(address[])\":{\"notice\":\"Creates new staticATokens\"},\"getStaticAToken(address)\":{\"notice\":\"Returns the staticAToken for a given underlying.\"},\"getStaticATokens()\":{\"notice\":\"Returns all tokens deployed via this registry.\"}},\"notice\":\"Factory contract that keeps track of all deployed static aToken wrappers for a specified pool. This registry also acts as a factory, allowing to deploy new static aTokens on demand. There can only be one static aToken per underlying on the registry at a time.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/atoken_wrapper/StaticATokenFactory.sol\":\"StaticATokenFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-5/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"contracts/lending/core/dependencies/openzeppelin/contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x72f14adac771243499fbb4d00a0a0841be06922b86b2dd5f9db14460d9c455e8\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/dependencies/openzeppelin/contracts/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(\\n            value <= type(uint224).max,\\n            \\\"SafeCast: value doesn't fit in 224 bits\\\"\\n        );\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(\\n            value <= type(uint128).max,\\n            \\\"SafeCast: value doesn't fit in 128 bits\\\"\\n        );\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(\\n            value <= type(uint96).max,\\n            \\\"SafeCast: value doesn't fit in 96 bits\\\"\\n        );\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(\\n            value <= type(uint64).max,\\n            \\\"SafeCast: value doesn't fit in 64 bits\\\"\\n        );\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(\\n            value <= type(uint32).max,\\n            \\\"SafeCast: value doesn't fit in 32 bits\\\"\\n        );\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(\\n            value <= type(uint16).max,\\n            \\\"SafeCast: value doesn't fit in 16 bits\\\"\\n        );\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(\\n            value <= type(uint8).max,\\n            \\\"SafeCast: value doesn't fit in 8 bits\\\"\\n        );\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(\\n            value >= type(int128).min && value <= type(int128).max,\\n            \\\"SafeCast: value doesn't fit in 128 bits\\\"\\n        );\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(\\n            value >= type(int64).min && value <= type(int64).max,\\n            \\\"SafeCast: value doesn't fit in 64 bits\\\"\\n        );\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(\\n            value >= type(int32).min && value <= type(int32).max,\\n            \\\"SafeCast: value doesn't fit in 32 bits\\\"\\n        );\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(\\n            value >= type(int16).min && value <= type(int16).max,\\n            \\\"SafeCast: value doesn't fit in 16 bits\\\"\\n        );\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(\\n            value >= type(int8).min && value <= type(int8).max,\\n            \\\"SafeCast: value doesn't fit in 8 bits\\\"\\n        );\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(\\n            value <= uint256(type(int256).max),\\n            \\\"SafeCast: value doesn't fit in an int256\\\"\\n        );\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x757f2eee2c313c6ac62a666e2acf87dea31d26e32257b674fb891b88857d4c8b\",\"license\":\"MIT\"},\"contracts/lending/core/dependencies/openzeppelin/upgradeability/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the `initializer` modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private initializing;\\n\\n    /**\\n     * @dev Modifier to use in the initializer function of a contract.\\n     */\\n    modifier initializer() {\\n        require(\\n            initializing || isConstructor() || !initialized,\\n            \\\"Contract instance has already been initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !initializing;\\n        if (isTopLevelCall) {\\n            initializing = true;\\n            initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        uint256 cs;\\n        //solium-disable-next-line\\n        assembly {\\n            cs := extcodesize(address())\\n        }\\n        return cs == 0;\\n    }\\n\\n    // Reserved storage space to allow for layout changes in the future.\\n    uint256[50] private ______gap;\\n}\\n\",\"keccak256\":\"0x767db019b4cdb70cefb5461de13c2737b65da73d72eee64054f97a53e420acca\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IAaveOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\nimport {IPriceOracleGetter} from \\\"./IPriceOracleGetter.sol\\\";\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\n\\n/**\\n * @title IAaveOracle\\n * @author Aave\\n * @notice Defines the basic interface for the Aave Oracle\\n */\\ninterface IAaveOracle is IPriceOracleGetter {\\n    /**\\n     * @dev Emitted after the base currency is set\\n     * @param baseCurrency The base currency of used for price quotes\\n     * @param baseCurrencyUnit The unit of the base currency\\n     */\\n    event BaseCurrencySet(\\n        address indexed baseCurrency,\\n        uint256 baseCurrencyUnit\\n    );\\n\\n    /**\\n     * @dev Emitted after the price source of an asset is updated\\n     * @param asset The address of the asset\\n     * @param source The price source of the asset\\n     */\\n    event AssetSourceUpdated(address indexed asset, address indexed source);\\n\\n    /**\\n     * @dev Emitted after the address of fallback oracle is updated\\n     * @param fallbackOracle The address of the fallback oracle\\n     */\\n    event FallbackOracleUpdated(address indexed fallbackOracle);\\n\\n    /**\\n     * @notice Returns the PoolAddressesProvider\\n     * @return The address of the PoolAddressesProvider contract\\n     */\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        returns (IPoolAddressesProvider);\\n\\n    /**\\n     * @notice Sets or replaces price sources of assets\\n     * @param assets The addresses of the assets\\n     * @param sources The addresses of the price sources\\n     */\\n    function setAssetSources(\\n        address[] calldata assets,\\n        address[] calldata sources\\n    ) external;\\n\\n    /**\\n     * @notice Sets the fallback oracle\\n     * @param fallbackOracle The address of the fallback oracle\\n     */\\n    function setFallbackOracle(address fallbackOracle) external;\\n\\n    /**\\n     * @notice Returns a list of prices from a list of assets addresses\\n     * @param assets The list of assets addresses\\n     * @return The prices of the given assets\\n     */\\n    function getAssetsPrices(\\n        address[] calldata assets\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Returns the address of the source for an asset address\\n     * @param asset The address of the asset\\n     * @return The address of the source\\n     */\\n    function getSourceOfAsset(address asset) external view returns (address);\\n\\n    /**\\n     * @notice Returns the address of the fallback oracle\\n     * @return The address of the fallback oracle\\n     */\\n    function getFallbackOracle() external view returns (address);\\n}\\n\",\"keccak256\":\"0x73790ac866b0fdf26e5a5a21bc9f4a6cc20459af2b5954b9cdf4ef42a22195d4\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IERC20WithPermit.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../dependencies/openzeppelin/contracts/IERC20.sol\\\";\\n\\n/**\\n * @title IERC20WithPermit\\n * @author Aave\\n * @notice Interface for the permit function (EIP-2612)\\n */\\ninterface IERC20WithPermit is IERC20 {\\n    /**\\n     * @notice Allow passing a signed message to approve spending\\n     * @dev implements the permit function as for\\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n     * @param owner The owner of the funds\\n     * @param spender The spender\\n     * @param value The amount\\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n     * @param v Signature param\\n     * @param s Signature param\\n     * @param r Signature param\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x50df777c424b470c048c5f9d4c69d8a81eec7b46425c2fbd2b92990c3016d9ca\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../protocol/libraries/types/DataTypes.sol\\\";\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n */\\ninterface IPool {\\n    /**\\n     * @dev Emitted on mintUnbacked()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the supply\\n     * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n     * @param amount The amount of supplied assets\\n     * @param referralCode The referral code used\\n     */\\n    event MintUnbacked(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on backUnbacked()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param backer The address paying for the backing\\n     * @param amount The amount added as backing\\n     * @param fee The amount paid in fees\\n     */\\n    event BackUnbacked(\\n        address indexed reserve,\\n        address indexed backer,\\n        uint256 amount,\\n        uint256 fee\\n    );\\n\\n    /**\\n     * @dev Emitted on supply()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the supply\\n     * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n     * @param amount The amount supplied\\n     * @param referralCode The referral code used\\n     */\\n    event Supply(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlying asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of aTokens\\n     * @param to The address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     */\\n    event Withdraw(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n     * initiator of the transaction on flashLoan()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n     * @param referralCode The referral code used\\n     */\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n     */\\n    event Repay(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed repayer,\\n        uint256 amount,\\n        bool useATokens\\n    );\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user swapping his rate mode\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     */\\n    event SwapBorrowRateMode(\\n        address indexed reserve,\\n        address indexed user,\\n        DataTypes.InterestRateMode interestRateMode\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param totalDebt The total isolation mode debt for the reserve\\n     */\\n    event IsolationModeTotalDebtUpdated(\\n        address indexed asset,\\n        uint256 totalDebt\\n    );\\n\\n    /**\\n     * @dev Emitted when the user selects a certain asset category for eMode\\n     * @param user The address of the user\\n     * @param categoryId The category id\\n     */\\n    event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     */\\n    event ReserveUsedAsCollateralEnabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     */\\n    event ReserveUsedAsCollateralDisabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     */\\n    event RebalanceStableBorrowRate(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n     * @param premium The fee flash borrowed\\n     * @param referralCode The referral code used\\n     */\\n    event FlashLoan(\\n        address indexed target,\\n        address initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        uint256 premium,\\n        uint16 indexed referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated.\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n     * @param liquidator The address of the liquidator\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     */\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated.\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The next liquidity rate\\n     * @param stableBorrowRate The next stable borrow rate\\n     * @param variableBorrowRate The next variable borrow rate\\n     * @param liquidityIndex The next liquidity index\\n     * @param variableBorrowIndex The next variable borrow index\\n     */\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n     * @param reserve The address of the reserve\\n     * @param amountMinted The amount minted to the treasury\\n     */\\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n    /**\\n     * @notice Mints an `amount` of aTokens to the `onBehalfOf`\\n     * @param asset The address of the underlying asset to mint\\n     * @param amount The amount to mint\\n     * @param onBehalfOf The address that will receive the aTokens\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function mintUnbacked(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Back the current unbacked underlying with `amount` and pay `fee`.\\n     * @param asset The address of the underlying asset to back\\n     * @param amount The amount to back\\n     * @param fee The amount paid in fees\\n     * @return The backed amount\\n     */\\n    function backUnbacked(\\n        address asset,\\n        uint256 amount,\\n        uint256 fee\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     */\\n    function supplyWithPermit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     */\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     */\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     */\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     * @return The final amount repaid\\n     */\\n    function repayWithPermit(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n     * equivalent debt tokens\\n     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n     * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n     * balance is not enough to cover the whole debt\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @return The final amount repaid\\n     */\\n    function repayWithATokens(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     */\\n    function swapBorrowRateMode(\\n        address asset,\\n        uint256 interestRateMode\\n    ) external;\\n\\n    /**\\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n     *        much has been borrowed at a stable rate and suppliers are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     */\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n     * @param asset The address of the underlying asset supplied\\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n     */\\n    function setUserUseReserveAsCollateral(\\n        address asset,\\n        bool useAsCollateral\\n    ) external;\\n\\n    /**\\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     */\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://docs.aave.com/developers/\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts of the assets being flash-borrowed\\n     * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata interestRateModes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://docs.aave.com/developers/\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n     * @param asset The address of the asset being flash-borrowed\\n     * @param amount The amount of the asset being flash-borrowed\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function flashLoanSimple(\\n        address receiverAddress,\\n        address asset,\\n        uint256 amount,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n     * @return currentLiquidationThreshold The liquidation threshold of the user\\n     * @return ltv The loan to value of The user\\n     * @return healthFactor The current health factor of the user\\n     */\\n    function getUserAccountData(\\n        address user\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralBase,\\n            uint256 totalDebtBase,\\n            uint256 availableBorrowsBase,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    /**\\n     * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n     * interest rate strategy\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n     * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n     * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n     */\\n    function initReserve(\\n        address asset,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Drop a reserve\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     */\\n    function dropReserve(address asset) external;\\n\\n    /**\\n     * @notice Updates the address of the interest rate strategy contract\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param rateStrategyAddress The address of the interest rate strategy contract\\n     */\\n    function setReserveInterestRateStrategyAddress(\\n        address asset,\\n        address rateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Sets the configuration bitmap of the reserve as a whole\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param configuration The new configuration bitmap\\n     */\\n    function setConfiguration(\\n        address asset,\\n        DataTypes.ReserveConfigurationMap calldata configuration\\n    ) external;\\n\\n    /**\\n     * @notice Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     */\\n    function getConfiguration(\\n        address asset\\n    ) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the configuration of the user across all the reserves\\n     * @param user The user address\\n     * @return The configuration of the user\\n     */\\n    function getUserConfiguration(\\n        address user\\n    ) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @notice Returns the normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(\\n        address asset\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the normalized variable debt per unit of asset\\n     * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n     * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n     * moment (approx. a borrower would get if opening a position). This means that is always used in\\n     * combination with variable debt supply/balances.\\n     * If using this function externally, consider that is possible to have an increasing normalized\\n     * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n     * (e.g. only updates with non-zero variable debt supply)\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(\\n        address asset\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state and configuration data of the reserve\\n     */\\n    function getReserveData(\\n        address asset\\n    ) external view returns (DataTypes.ReserveData memory);\\n\\n    /**\\n     * @notice Validates and finalizes an aToken transfer\\n     * @dev Only callable by the overlying aToken of the `asset`\\n     * @param asset The address of the underlying asset of the aToken\\n     * @param from The user from which the aTokens are transferred\\n     * @param to The user receiving the aTokens\\n     * @param amount The amount being transferred/withdrawn\\n     * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n     * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n     */\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromBefore,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    /**\\n     * @notice Returns the list of the underlying assets of all the initialized reserves\\n     * @dev It does not include dropped reserves\\n     * @return The addresses of the underlying assets of the initialized reserves\\n     */\\n    function getReservesList() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n     * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n     * @return The address of the reserve associated with id\\n     */\\n    function getReserveAddressById(uint16 id) external view returns (address);\\n\\n    /**\\n     * @notice Returns the PoolAddressesProvider connected to this contract\\n     * @return The address of the PoolAddressesProvider\\n     */\\n    function ADDRESSES_PROVIDER()\\n        external\\n        view\\n        returns (IPoolAddressesProvider);\\n\\n    /**\\n     * @notice Updates the protocol fee on the bridging\\n     * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n     */\\n    function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n    /**\\n     * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n     * - A part is sent to aToken holders as extra, one time accumulated interest\\n     * - A part is collected by the protocol treasury\\n     * @dev The total premium is calculated on the total borrowed amount\\n     * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param flashLoanPremiumTotal The total premium, expressed in bps\\n     * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n     */\\n    function updateFlashloanPremiums(\\n        uint128 flashLoanPremiumTotal,\\n        uint128 flashLoanPremiumToProtocol\\n    ) external;\\n\\n    /**\\n     * @notice Configures a new category for the eMode.\\n     * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n     * The category 0 is reserved as it's the default for volatile assets\\n     * @param id The id of the category\\n     * @param config The configuration of the category\\n     */\\n    function configureEModeCategory(\\n        uint8 id,\\n        DataTypes.EModeCategory memory config\\n    ) external;\\n\\n    /**\\n     * @notice Returns the data of an eMode category\\n     * @param id The id of the category\\n     * @return The configuration data of the category\\n     */\\n    function getEModeCategoryData(\\n        uint8 id\\n    ) external view returns (DataTypes.EModeCategory memory);\\n\\n    /**\\n     * @notice Allows a user to use the protocol in eMode\\n     * @param categoryId The id of the category\\n     */\\n    function setUserEMode(uint8 categoryId) external;\\n\\n    /**\\n     * @notice Returns the eMode the user is using\\n     * @param user The address of the user\\n     * @return The eMode id\\n     */\\n    function getUserEMode(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Resets the isolation mode total debt of the given asset to zero\\n     * @dev It requires the given asset has zero debt ceiling\\n     * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n     */\\n    function resetIsolationModeTotalDebt(address asset) external;\\n\\n    /**\\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n     * @return The percentage of available liquidity to borrow, expressed in bps\\n     */\\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Returns the total fee on flash loans\\n     * @return The total fee on flashloans\\n     */\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the part of the bridge fees sent to protocol\\n     * @return The bridge fee sent to the protocol treasury\\n     */\\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the part of the flashloan fees sent to protocol\\n     * @return The flashloan fee sent to the protocol treasury\\n     */\\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n     * @return The maximum number of reserves supported\\n     */\\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n    /**\\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n     * @param assets The list of reserves for which the minting needs to be executed\\n     */\\n    function mintToTreasury(address[] calldata assets) external;\\n\\n    /**\\n     * @notice Rescue and transfer tokens locked in this contract\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param amount The amount of token to transfer\\n     */\\n    function rescueTokens(address token, address to, uint256 amount) external;\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @dev Deprecated: Use the `supply` function instead\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     */\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n}\\n\",\"keccak256\":\"0x73a1016b2ba313d571baee697f5537e6d59f5a84ea12af31df2bd3f54b18862a\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n */\\ninterface IPoolAddressesProvider {\\n    /**\\n     * @dev Emitted when the market identifier is updated.\\n     * @param oldMarketId The old id of the market\\n     * @param newMarketId The new id of the market\\n     */\\n    event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n    /**\\n     * @dev Emitted when the pool is updated.\\n     * @param oldAddress The old address of the Pool\\n     * @param newAddress The new address of the Pool\\n     */\\n    event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n    /**\\n     * @dev Emitted when the pool configurator is updated.\\n     * @param oldAddress The old address of the PoolConfigurator\\n     * @param newAddress The new address of the PoolConfigurator\\n     */\\n    event PoolConfiguratorUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the price oracle is updated.\\n     * @param oldAddress The old address of the PriceOracle\\n     * @param newAddress The new address of the PriceOracle\\n     */\\n    event PriceOracleUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the ACL manager is updated.\\n     * @param oldAddress The old address of the ACLManager\\n     * @param newAddress The new address of the ACLManager\\n     */\\n    event ACLManagerUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the ACL admin is updated.\\n     * @param oldAddress The old address of the ACLAdmin\\n     * @param newAddress The new address of the ACLAdmin\\n     */\\n    event ACLAdminUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the price oracle sentinel is updated.\\n     * @param oldAddress The old address of the PriceOracleSentinel\\n     * @param newAddress The new address of the PriceOracleSentinel\\n     */\\n    event PriceOracleSentinelUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the pool data provider is updated.\\n     * @param oldAddress The old address of the PoolDataProvider\\n     * @param newAddress The new address of the PoolDataProvider\\n     */\\n    event PoolDataProviderUpdated(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a new proxy is created.\\n     * @param id The identifier of the proxy\\n     * @param proxyAddress The address of the created proxy contract\\n     * @param implementationAddress The address of the implementation contract\\n     */\\n    event ProxyCreated(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address indexed implementationAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when a new non-proxied contract address is registered.\\n     * @param id The identifier of the contract\\n     * @param oldAddress The address of the old contract\\n     * @param newAddress The address of the new contract\\n     */\\n    event AddressSet(\\n        bytes32 indexed id,\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n\\n    /**\\n     * @dev Emitted when the implementation of the proxy registered with id is updated\\n     * @param id The identifier of the contract\\n     * @param proxyAddress The address of the proxy contract\\n     * @param oldImplementationAddress The address of the old implementation contract\\n     * @param newImplementationAddress The address of the new implementation contract\\n     */\\n    event AddressSetAsProxy(\\n        bytes32 indexed id,\\n        address indexed proxyAddress,\\n        address oldImplementationAddress,\\n        address indexed newImplementationAddress\\n    );\\n\\n    /**\\n     * @notice Returns the id of the Aave market to which this contract points to.\\n     * @return The market id\\n     */\\n    function getMarketId() external view returns (string memory);\\n\\n    /**\\n     * @notice Associates an id with a specific PoolAddressesProvider.\\n     * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n     * identify and validate multiple Aave markets.\\n     * @param newMarketId The market id\\n     */\\n    function setMarketId(string calldata newMarketId) external;\\n\\n    /**\\n     * @notice Returns an address by its identifier.\\n     * @dev The returned address might be an EOA or a contract, potentially proxied\\n     * @dev It returns ZERO if there is no registered address with the given id\\n     * @param id The id\\n     * @return The address of the registered for the specified id\\n     */\\n    function getAddressFromID(bytes32 id) external view returns (address);\\n\\n    /**\\n     * @notice General function to update the implementation of a proxy registered with\\n     * certain `id`. If there is no proxy registered, it will instantiate one and\\n     * set as implementation the `newImplementationAddress`.\\n     * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n     * setter function, in order to avoid unexpected consequences\\n     * @param id The id\\n     * @param newImplementationAddress The address of the new implementation\\n     */\\n    function setAddressAsProxy(\\n        bytes32 id,\\n        address newImplementationAddress\\n    ) external;\\n\\n    /**\\n     * @notice Sets an address for an id replacing the address saved in the addresses map.\\n     * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n     * @param id The id\\n     * @param newAddress The address to set\\n     */\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    /**\\n     * @notice Returns the address of the Pool proxy.\\n     * @return The Pool proxy address\\n     */\\n    function getPool() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the Pool, or creates a proxy\\n     * setting the new `pool` implementation when the function is called for the first time.\\n     * @param newPoolImpl The new Pool implementation\\n     */\\n    function setPoolImpl(address newPoolImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the PoolConfigurator proxy.\\n     * @return The PoolConfigurator proxy address\\n     */\\n    function getPoolConfigurator() external view returns (address);\\n\\n    /**\\n     * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n     * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n     * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n     */\\n    function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle.\\n     * @return The address of the PriceOracle\\n     */\\n    function getPriceOracle() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle.\\n     * @param newPriceOracle The address of the new PriceOracle\\n     */\\n    function setPriceOracle(address newPriceOracle) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL manager.\\n     * @return The address of the ACLManager\\n     */\\n    function getACLManager() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL manager.\\n     * @param newAclManager The address of the new ACLManager\\n     */\\n    function setACLManager(address newAclManager) external;\\n\\n    /**\\n     * @notice Returns the address of the ACL admin.\\n     * @return The address of the ACL admin\\n     */\\n    function getACLAdmin() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the ACL admin.\\n     * @param newAclAdmin The address of the new ACL admin\\n     */\\n    function setACLAdmin(address newAclAdmin) external;\\n\\n    /**\\n     * @notice Returns the address of the price oracle sentinel.\\n     * @return The address of the PriceOracleSentinel\\n     */\\n    function getPriceOracleSentinel() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the price oracle sentinel.\\n     * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n     */\\n    function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n    /**\\n     * @notice Returns the address of the data provider.\\n     * @return The address of the DataProvider\\n     */\\n    function getPoolDataProvider() external view returns (address);\\n\\n    /**\\n     * @notice Updates the address of the data provider.\\n     * @param newDataProvider The address of the new DataProvider\\n     */\\n    function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0xf10e68d63d751e48a4adfd8a527b1d7f0710dcdf23a1c28b118fcba1044866cc\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IPriceOracleGetter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPriceOracleGetter\\n * @author Aave\\n * @notice Interface for the Aave price oracle.\\n */\\ninterface IPriceOracleGetter {\\n    /**\\n     * @notice Returns the base currency address\\n     * @dev Address 0x0 is reserved for USD as base currency.\\n     * @return Returns the base currency address.\\n     */\\n    function BASE_CURRENCY() external view returns (address);\\n\\n    /**\\n     * @notice Returns the base currency unit\\n     * @dev 1 ether for ETH, 1e8 for USD.\\n     * @return Returns the base currency unit.\\n     */\\n    function BASE_CURRENCY_UNIT() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the asset price in the base currency\\n     * @param asset The address of the asset\\n     * @return The price of the asset\\n     */\\n    function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x31366baa77e6298e46695465ba7f5ba8641fe8537e54901ae119282be0ee6d67\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IScaledBalanceToken\\n * @author Aave\\n * @notice Defines the basic interface for a scaled-balance token.\\n */\\ninterface IScaledBalanceToken {\\n    /**\\n     * @dev Emitted after the mint action\\n     * @param caller The address performing the mint\\n     * @param onBehalfOf The address of the user that will receive the minted tokens\\n     * @param value The scaled-up amount being minted (based on user entered amount and balance increase from interest)\\n     * @param balanceIncrease The increase in scaled-up balance since the last action of 'onBehalfOf'\\n     * @param index The next liquidity index of the reserve\\n     */\\n    event Mint(\\n        address indexed caller,\\n        address indexed onBehalfOf,\\n        uint256 value,\\n        uint256 balanceIncrease,\\n        uint256 index\\n    );\\n\\n    /**\\n     * @dev Emitted after the burn action\\n     * @dev If the burn function does not involve a transfer of the underlying asset, the target defaults to zero address\\n     * @param from The address from which the tokens will be burned\\n     * @param target The address that will receive the underlying, if any\\n     * @param value The scaled-up amount being burned (user entered amount - balance increase from interest)\\n     * @param balanceIncrease The increase in scaled-up balance since the last action of 'from'\\n     * @param index The next liquidity index of the reserve\\n     */\\n    event Burn(\\n        address indexed from,\\n        address indexed target,\\n        uint256 value,\\n        uint256 balanceIncrease,\\n        uint256 index\\n    );\\n\\n    /**\\n     * @notice Returns the scaled balance of the user.\\n     * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\\n     * at the moment of the update\\n     * @param user The user whose balance is calculated\\n     * @return The scaled balance of the user\\n     */\\n    function scaledBalanceOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the scaled balance of the user and the scaled total supply.\\n     * @param user The address of the user\\n     * @return The scaled balance of the user\\n     * @return The scaled total supply\\n     */\\n    function getScaledUserBalanceAndSupply(\\n        address user\\n    ) external view returns (uint256, uint256);\\n\\n    /**\\n     * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\\n     * @return The scaled total supply\\n     */\\n    function scaledTotalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns last index interest was accrued to the user's balance\\n     * @param user The address of the user\\n     * @return The last index interest was accrued to the user's balance, expressed in ray\\n     */\\n    function getPreviousIndex(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7387b939fa54fae61dc3503617a7450518d8c0af07396fae8cb804f60cc733a9\",\"license\":\"AGPL-3.0\"},\"contracts/lending/core/protocol/libraries/configuration/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Aave\\n * @notice Implements the bitmap logic to handle the reserve configuration\\n */\\nlibrary ReserveConfiguration {\\n    uint256 internal constant LTV_MASK =                       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n    uint256 internal constant LIQUIDATION_THRESHOLD_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\n    uint256 internal constant LIQUIDATION_BONUS_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\n    uint256 internal constant DECIMALS_MASK =                  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant ACTIVE_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant FROZEN_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant BORROWING_MASK =                 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant STABLE_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant PAUSED_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant SILOED_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant FLASHLOAN_ENABLED_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant RESERVE_FACTOR_MASK =            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant BORROW_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant SUPPLY_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =  0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant EMODE_CATEGORY_MASK =            0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant UNBACKED_MINT_CAP_MASK =         0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n    uint256 internal constant DEBT_CEILING_MASK =              0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n    /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\n    uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\n    uint256 internal constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\n    uint256 internal constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\n    uint256 internal constant IS_ACTIVE_START_BIT_POSITION = 56;\\n    uint256 internal constant IS_FROZEN_START_BIT_POSITION = 57;\\n    uint256 internal constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\n    uint256 internal constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\n    uint256 internal constant IS_PAUSED_START_BIT_POSITION = 60;\\n    uint256 internal constant BORROWABLE_IN_ISOLATION_START_BIT_POSITION = 61;\\n    uint256 internal constant SILOED_BORROWING_START_BIT_POSITION = 62;\\n    uint256 internal constant FLASHLOAN_ENABLED_START_BIT_POSITION = 63;\\n    uint256 internal constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\n    uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;\\n    uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;\\n    uint256 internal constant LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION = 152;\\n    uint256 internal constant EMODE_CATEGORY_START_BIT_POSITION = 168;\\n    uint256 internal constant UNBACKED_MINT_CAP_START_BIT_POSITION = 176;\\n    uint256 internal constant DEBT_CEILING_START_BIT_POSITION = 212;\\n\\n    uint256 internal constant MAX_VALID_LTV = 65535;\\n    uint256 internal constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\n    uint256 internal constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\n    uint256 internal constant MAX_VALID_DECIMALS = 255;\\n    uint256 internal constant MAX_VALID_RESERVE_FACTOR = 65535;\\n    uint256 internal constant MAX_VALID_BORROW_CAP = 68719476735;\\n    uint256 internal constant MAX_VALID_SUPPLY_CAP = 68719476735;\\n    uint256 internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65535;\\n    uint256 internal constant MAX_VALID_EMODE_CATEGORY = 255;\\n    uint256 internal constant MAX_VALID_UNBACKED_MINT_CAP = 68719476735;\\n    uint256 internal constant MAX_VALID_DEBT_CEILING = 1099511627775;\\n\\n    uint256 public constant DEBT_CEILING_DECIMALS = 2;\\n    uint16 public constant MAX_RESERVES_COUNT = 128;\\n\\n    /**\\n     * @notice Sets the Loan to Value of the reserve\\n     * @param self The reserve configuration\\n     * @param ltv The new ltv\\n     */\\n    function setLtv(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 ltv\\n    ) internal pure {\\n        require(ltv <= MAX_VALID_LTV, Errors.INVALID_LTV);\\n\\n        self.data = (self.data & LTV_MASK) | ltv;\\n    }\\n\\n    /**\\n     * @notice Gets the Loan to Value of the reserve\\n     * @param self The reserve configuration\\n     * @return The loan to value\\n     */\\n    function getLtv(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return self.data & ~LTV_MASK;\\n    }\\n\\n    /**\\n     * @notice Sets the liquidation threshold of the reserve\\n     * @param self The reserve configuration\\n     * @param threshold The new liquidation threshold\\n     */\\n    function setLiquidationThreshold(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 threshold\\n    ) internal pure {\\n        require(\\n            threshold <= MAX_VALID_LIQUIDATION_THRESHOLD,\\n            Errors.INVALID_LIQ_THRESHOLD\\n        );\\n\\n        self.data =\\n            (self.data & LIQUIDATION_THRESHOLD_MASK) |\\n            (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the liquidation threshold of the reserve\\n     * @param self The reserve configuration\\n     * @return The liquidation threshold\\n     */\\n    function getLiquidationThreshold(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~LIQUIDATION_THRESHOLD_MASK) >>\\n            LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the liquidation bonus of the reserve\\n     * @param self The reserve configuration\\n     * @param bonus The new liquidation bonus\\n     */\\n    function setLiquidationBonus(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 bonus\\n    ) internal pure {\\n        require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.INVALID_LIQ_BONUS);\\n\\n        self.data =\\n            (self.data & LIQUIDATION_BONUS_MASK) |\\n            (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the liquidation bonus of the reserve\\n     * @param self The reserve configuration\\n     * @return The liquidation bonus\\n     */\\n    function getLiquidationBonus(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~LIQUIDATION_BONUS_MASK) >>\\n            LIQUIDATION_BONUS_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the decimals of the underlying asset of the reserve\\n     * @param self The reserve configuration\\n     * @param decimals The decimals\\n     */\\n    function setDecimals(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 decimals\\n    ) internal pure {\\n        require(decimals <= MAX_VALID_DECIMALS, Errors.INVALID_DECIMALS);\\n\\n        self.data =\\n            (self.data & DECIMALS_MASK) |\\n            (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the decimals of the underlying asset of the reserve\\n     * @param self The reserve configuration\\n     * @return The decimals of the asset\\n     */\\n    function getDecimals(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the active state of the reserve\\n     * @param self The reserve configuration\\n     * @param active The active state\\n     */\\n    function setActive(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool active\\n    ) internal pure {\\n        self.data =\\n            (self.data & ACTIVE_MASK) |\\n            (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the active state of the reserve\\n     * @param self The reserve configuration\\n     * @return The active state\\n     */\\n    function getActive(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~ACTIVE_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Sets the frozen state of the reserve\\n     * @param self The reserve configuration\\n     * @param frozen The frozen state\\n     */\\n    function setFrozen(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool frozen\\n    ) internal pure {\\n        self.data =\\n            (self.data & FROZEN_MASK) |\\n            (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the frozen state of the reserve\\n     * @param self The reserve configuration\\n     * @return The frozen state\\n     */\\n    function getFrozen(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~FROZEN_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Sets the paused state of the reserve\\n     * @param self The reserve configuration\\n     * @param paused The paused state\\n     */\\n    function setPaused(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool paused\\n    ) internal pure {\\n        self.data =\\n            (self.data & PAUSED_MASK) |\\n            (uint256(paused ? 1 : 0) << IS_PAUSED_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the paused state of the reserve\\n     * @param self The reserve configuration\\n     * @return The paused state\\n     */\\n    function getPaused(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~PAUSED_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Sets the borrowable in isolation flag for the reserve.\\n     * @dev When this flag is set to true, the asset will be borrowable against isolated collaterals and the borrowed\\n     * amount will be accumulated in the isolated collateral's total debt exposure.\\n     * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\n     * consistency in the debt ceiling calculations.\\n     * @param self The reserve configuration\\n     * @param borrowable True if the asset is borrowable\\n     */\\n    function setBorrowableInIsolation(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool borrowable\\n    ) internal pure {\\n        self.data =\\n            (self.data & BORROWABLE_IN_ISOLATION_MASK) |\\n            (uint256(borrowable ? 1 : 0) <<\\n                BORROWABLE_IN_ISOLATION_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the borrowable in isolation flag for the reserve.\\n     * @dev If the returned flag is true, the asset is borrowable against isolated collateral. Assets borrowed with\\n     * isolated collateral is accounted for in the isolated collateral's total debt exposure.\\n     * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\n     * consistency in the debt ceiling calculations.\\n     * @param self The reserve configuration\\n     * @return The borrowable in isolation flag\\n     */\\n    function getBorrowableInIsolation(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~BORROWABLE_IN_ISOLATION_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Sets the siloed borrowing flag for the reserve.\\n     * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\n     * @param self The reserve configuration\\n     * @param siloed True if the asset is siloed\\n     */\\n    function setSiloedBorrowing(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool siloed\\n    ) internal pure {\\n        self.data =\\n            (self.data & SILOED_BORROWING_MASK) |\\n            (uint256(siloed ? 1 : 0) << SILOED_BORROWING_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the siloed borrowing flag for the reserve.\\n     * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\n     * @param self The reserve configuration\\n     * @return The siloed borrowing flag\\n     */\\n    function getSiloedBorrowing(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~SILOED_BORROWING_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Enables or disables borrowing on the reserve\\n     * @param self The reserve configuration\\n     * @param enabled True if the borrowing needs to be enabled, false otherwise\\n     */\\n    function setBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool enabled\\n    ) internal pure {\\n        self.data =\\n            (self.data & BORROWING_MASK) |\\n            (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the borrowing state of the reserve\\n     * @param self The reserve configuration\\n     * @return The borrowing state\\n     */\\n    function getBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~BORROWING_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Enables or disables stable rate borrowing on the reserve\\n     * @param self The reserve configuration\\n     * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\n     */\\n    function setStableRateBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool enabled\\n    ) internal pure {\\n        self.data =\\n            (self.data & STABLE_BORROWING_MASK) |\\n            (uint256(enabled ? 1 : 0) <<\\n                STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the stable rate borrowing state of the reserve\\n     * @param self The reserve configuration\\n     * @return The stable rate borrowing state\\n     */\\n    function getStableRateBorrowingEnabled(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~STABLE_BORROWING_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Sets the reserve factor of the reserve\\n     * @param self The reserve configuration\\n     * @param reserveFactor The reserve factor\\n     */\\n    function setReserveFactor(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 reserveFactor\\n    ) internal pure {\\n        require(\\n            reserveFactor <= MAX_VALID_RESERVE_FACTOR,\\n            Errors.INVALID_RESERVE_FACTOR\\n        );\\n\\n        self.data =\\n            (self.data & RESERVE_FACTOR_MASK) |\\n            (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the reserve factor of the reserve\\n     * @param self The reserve configuration\\n     * @return The reserve factor\\n     */\\n    function getReserveFactor(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~RESERVE_FACTOR_MASK) >>\\n            RESERVE_FACTOR_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the borrow cap of the reserve\\n     * @param self The reserve configuration\\n     * @param borrowCap The borrow cap\\n     */\\n    function setBorrowCap(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 borrowCap\\n    ) internal pure {\\n        require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.INVALID_BORROW_CAP);\\n\\n        self.data =\\n            (self.data & BORROW_CAP_MASK) |\\n            (borrowCap << BORROW_CAP_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the borrow cap of the reserve\\n     * @param self The reserve configuration\\n     * @return The borrow cap\\n     */\\n    function getBorrowCap(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the supply cap of the reserve\\n     * @param self The reserve configuration\\n     * @param supplyCap The supply cap\\n     */\\n    function setSupplyCap(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 supplyCap\\n    ) internal pure {\\n        require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.INVALID_SUPPLY_CAP);\\n\\n        self.data =\\n            (self.data & SUPPLY_CAP_MASK) |\\n            (supplyCap << SUPPLY_CAP_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the supply cap of the reserve\\n     * @param self The reserve configuration\\n     * @return The supply cap\\n     */\\n    function getSupplyCap(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the debt ceiling in isolation mode for the asset\\n     * @param self The reserve configuration\\n     * @param ceiling The maximum debt ceiling for the asset\\n     */\\n    function setDebtCeiling(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 ceiling\\n    ) internal pure {\\n        require(ceiling <= MAX_VALID_DEBT_CEILING, Errors.INVALID_DEBT_CEILING);\\n\\n        self.data =\\n            (self.data & DEBT_CEILING_MASK) |\\n            (ceiling << DEBT_CEILING_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the debt ceiling for the asset if the asset is in isolation mode\\n     * @param self The reserve configuration\\n     * @return The debt ceiling (0 = isolation mode disabled)\\n     */\\n    function getDebtCeiling(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the liquidation protocol fee of the reserve\\n     * @param self The reserve configuration\\n     * @param liquidationProtocolFee The liquidation protocol fee\\n     */\\n    function setLiquidationProtocolFee(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 liquidationProtocolFee\\n    ) internal pure {\\n        require(\\n            liquidationProtocolFee <= MAX_VALID_LIQUIDATION_PROTOCOL_FEE,\\n            Errors.INVALID_LIQUIDATION_PROTOCOL_FEE\\n        );\\n\\n        self.data =\\n            (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) |\\n            (liquidationProtocolFee <<\\n                LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the liquidation protocol fee\\n     * @param self The reserve configuration\\n     * @return The liquidation protocol fee\\n     */\\n    function getLiquidationProtocolFee(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) >>\\n            LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the unbacked mint cap of the reserve\\n     * @param self The reserve configuration\\n     * @param unbackedMintCap The unbacked mint cap\\n     */\\n    function setUnbackedMintCap(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 unbackedMintCap\\n    ) internal pure {\\n        require(\\n            unbackedMintCap <= MAX_VALID_UNBACKED_MINT_CAP,\\n            Errors.INVALID_UNBACKED_MINT_CAP\\n        );\\n\\n        self.data =\\n            (self.data & UNBACKED_MINT_CAP_MASK) |\\n            (unbackedMintCap << UNBACKED_MINT_CAP_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the unbacked mint cap of the reserve\\n     * @param self The reserve configuration\\n     * @return The unbacked mint cap\\n     */\\n    function getUnbackedMintCap(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~UNBACKED_MINT_CAP_MASK) >>\\n            UNBACKED_MINT_CAP_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the eMode asset category\\n     * @param self The reserve configuration\\n     * @param category The asset category when the user selects the eMode\\n     */\\n    function setEModeCategory(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        uint256 category\\n    ) internal pure {\\n        require(\\n            category <= MAX_VALID_EMODE_CATEGORY,\\n            Errors.INVALID_EMODE_CATEGORY\\n        );\\n\\n        self.data =\\n            (self.data & EMODE_CATEGORY_MASK) |\\n            (category << EMODE_CATEGORY_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @dev Gets the eMode asset category\\n     * @param self The reserve configuration\\n     * @return The eMode category for the asset\\n     */\\n    function getEModeCategory(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256) {\\n        return\\n            (self.data & ~EMODE_CATEGORY_MASK) >>\\n            EMODE_CATEGORY_START_BIT_POSITION;\\n    }\\n\\n    /**\\n     * @notice Sets the flashloanable flag for the reserve\\n     * @param self The reserve configuration\\n     * @param flashLoanEnabled True if the asset is flashloanable, false otherwise\\n     */\\n    function setFlashLoanEnabled(\\n        DataTypes.ReserveConfigurationMap memory self,\\n        bool flashLoanEnabled\\n    ) internal pure {\\n        self.data =\\n            (self.data & FLASHLOAN_ENABLED_MASK) |\\n            (uint256(flashLoanEnabled ? 1 : 0) <<\\n                FLASHLOAN_ENABLED_START_BIT_POSITION);\\n    }\\n\\n    /**\\n     * @notice Gets the flashloanable flag for the reserve\\n     * @param self The reserve configuration\\n     * @return The flashloanable flag\\n     */\\n    function getFlashLoanEnabled(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool) {\\n        return (self.data & ~FLASHLOAN_ENABLED_MASK) != 0;\\n    }\\n\\n    /**\\n     * @notice Gets the configuration flags of the reserve\\n     * @param self The reserve configuration\\n     * @return The state flag representing active\\n     * @return The state flag representing frozen\\n     * @return The state flag representing borrowing enabled\\n     * @return The state flag representing stableRateBorrowing enabled\\n     * @return The state flag representing paused\\n     */\\n    function getFlags(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (bool, bool, bool, bool, bool) {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            (dataLocal & ~ACTIVE_MASK) != 0,\\n            (dataLocal & ~FROZEN_MASK) != 0,\\n            (dataLocal & ~BORROWING_MASK) != 0,\\n            (dataLocal & ~STABLE_BORROWING_MASK) != 0,\\n            (dataLocal & ~PAUSED_MASK) != 0\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the configuration parameters of the reserve from storage\\n     * @param self The reserve configuration\\n     * @return The state param representing ltv\\n     * @return The state param representing liquidation threshold\\n     * @return The state param representing liquidation bonus\\n     * @return The state param representing reserve decimals\\n     * @return The state param representing reserve factor\\n     * @return The state param representing eMode category\\n     */\\n    function getParams(\\n        DataTypes.ReserveConfigurationMap memory self\\n    )\\n        internal\\n        pure\\n        returns (uint256, uint256, uint256, uint256, uint256, uint256)\\n    {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            dataLocal & ~LTV_MASK,\\n            (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >>\\n                LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n            (dataLocal & ~LIQUIDATION_BONUS_MASK) >>\\n                LIQUIDATION_BONUS_START_BIT_POSITION,\\n            (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n            (dataLocal & ~RESERVE_FACTOR_MASK) >>\\n                RESERVE_FACTOR_START_BIT_POSITION,\\n            (dataLocal & ~EMODE_CATEGORY_MASK) >>\\n                EMODE_CATEGORY_START_BIT_POSITION\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the caps parameters of the reserve from storage\\n     * @param self The reserve configuration\\n     * @return The state param representing borrow cap\\n     * @return The state param representing supply cap.\\n     */\\n    function getCaps(\\n        DataTypes.ReserveConfigurationMap memory self\\n    ) internal pure returns (uint256, uint256) {\\n        uint256 dataLocal = self.data;\\n\\n        return (\\n            (dataLocal & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,\\n            (dataLocal & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x69b8868e73d36bca40ff838f0e46330d3ff310b4dc26bc7663398030d70a6ab5\",\"license\":\"BUSL-1.1\"},\"contracts/lending/core/protocol/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Errors library\\n * @author Aave\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n */\\nlibrary Errors {\\n    string public constant CALLER_NOT_POOL_ADMIN = \\\"1\\\"; // 'The caller of the function is not a pool admin'\\n    string public constant CALLER_NOT_EMERGENCY_ADMIN = \\\"2\\\"; // 'The caller of the function is not an emergency admin'\\n    string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = \\\"3\\\"; // 'The caller of the function is not a pool or emergency admin'\\n    string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = \\\"4\\\"; // 'The caller of the function is not a risk or pool admin'\\n    string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = \\\"5\\\"; // 'The caller of the function is not an asset listing or pool admin'\\n    string public constant CALLER_NOT_BRIDGE = \\\"6\\\"; // 'The caller of the function is not a bridge'\\n    string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = \\\"7\\\"; // 'Pool addresses provider is not registered'\\n    string public constant INVALID_ADDRESSES_PROVIDER_ID = \\\"8\\\"; // 'Invalid id for the pool addresses provider'\\n    string public constant NOT_CONTRACT = \\\"9\\\"; // 'Address is not a contract'\\n    string public constant CALLER_NOT_POOL_CONFIGURATOR = \\\"10\\\"; // 'The caller of the function is not the pool configurator'\\n    string public constant CALLER_NOT_ATOKEN = \\\"11\\\"; // 'The caller of the function is not an AToken'\\n    string public constant INVALID_ADDRESSES_PROVIDER = \\\"12\\\"; // 'The address of the pool addresses provider is invalid'\\n    string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = \\\"13\\\"; // 'Invalid return value of the flashloan executor function'\\n    string public constant RESERVE_ALREADY_ADDED = \\\"14\\\"; // 'Reserve has already been added to reserve list'\\n    string public constant NO_MORE_RESERVES_ALLOWED = \\\"15\\\"; // 'Maximum amount of reserves in the pool reached'\\n    string public constant EMODE_CATEGORY_RESERVED = \\\"16\\\"; // 'Zero eMode category is reserved for volatile heterogeneous assets'\\n    string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = \\\"17\\\"; // 'Invalid eMode category assignment to asset'\\n    string public constant RESERVE_LIQUIDITY_NOT_ZERO = \\\"18\\\"; // 'The liquidity of the reserve needs to be 0'\\n    string public constant FLASHLOAN_PREMIUM_INVALID = \\\"19\\\"; // 'Invalid flashloan premium'\\n    string public constant INVALID_RESERVE_PARAMS = \\\"20\\\"; // 'Invalid risk parameters for the reserve'\\n    string public constant INVALID_EMODE_CATEGORY_PARAMS = \\\"21\\\"; // 'Invalid risk parameters for the eMode category'\\n    string public constant BRIDGE_PROTOCOL_FEE_INVALID = \\\"22\\\"; // 'Invalid bridge protocol fee'\\n    string public constant CALLER_MUST_BE_POOL = \\\"23\\\"; // 'The caller of this function must be a pool'\\n    string public constant INVALID_MINT_AMOUNT = \\\"24\\\"; // 'Invalid amount to mint'\\n    string public constant INVALID_BURN_AMOUNT = \\\"25\\\"; // 'Invalid amount to burn'\\n    string public constant INVALID_AMOUNT = \\\"26\\\"; // 'Amount must be greater than 0'\\n    string public constant RESERVE_INACTIVE = \\\"27\\\"; // 'Action requires an active reserve'\\n    string public constant RESERVE_FROZEN = \\\"28\\\"; // 'Action cannot be performed because the reserve is frozen'\\n    string public constant RESERVE_PAUSED = \\\"29\\\"; // 'Action cannot be performed because the reserve is paused'\\n    string public constant BORROWING_NOT_ENABLED = \\\"30\\\"; // 'Borrowing is not enabled'\\n    string public constant STABLE_BORROWING_NOT_ENABLED = \\\"31\\\"; // 'Stable borrowing is not enabled'\\n    string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = \\\"32\\\"; // 'User cannot withdraw more than the available balance'\\n    string public constant INVALID_INTEREST_RATE_MODE_SELECTED = \\\"33\\\"; // 'Invalid interest rate mode selected'\\n    string public constant COLLATERAL_BALANCE_IS_ZERO = \\\"34\\\"; // 'The collateral balance is 0'\\n    string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD =\\n        \\\"35\\\"; // 'Health factor is lesser than the liquidation threshold'\\n    string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = \\\"36\\\"; // 'There is not enough collateral to cover a new borrow'\\n    string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = \\\"37\\\"; // 'Collateral is (mostly) the same currency that is being borrowed'\\n    string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = \\\"38\\\"; // 'The requested amount is greater than the max loan size in stable rate mode'\\n    string public constant NO_DEBT_OF_SELECTED_TYPE = \\\"39\\\"; // 'For repayment of a specific type of debt, the user needs to have debt that type'\\n    string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = \\\"40\\\"; // 'To repay on behalf of a user an explicit amount to repay is needed'\\n    string public constant NO_OUTSTANDING_STABLE_DEBT = \\\"41\\\"; // 'User does not have outstanding stable rate debt on this reserve'\\n    string public constant NO_OUTSTANDING_VARIABLE_DEBT = \\\"42\\\"; // 'User does not have outstanding variable rate debt on this reserve'\\n    string public constant UNDERLYING_BALANCE_ZERO = \\\"43\\\"; // 'The underlying balance needs to be greater than 0'\\n    string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = \\\"44\\\"; // 'Interest rate rebalance conditions were not met'\\n    string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = \\\"45\\\"; // 'Health factor is not below the threshold'\\n    string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = \\\"46\\\"; // 'The collateral chosen cannot be liquidated'\\n    string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \\\"47\\\"; // 'User did not borrow the specified currency'\\n    string public constant INCONSISTENT_FLASHLOAN_PARAMS = \\\"49\\\"; // 'Inconsistent flashloan parameters'\\n    string public constant BORROW_CAP_EXCEEDED = \\\"50\\\"; // 'Borrow cap is exceeded'\\n    string public constant SUPPLY_CAP_EXCEEDED = \\\"51\\\"; // 'Supply cap is exceeded'\\n    string public constant UNBACKED_MINT_CAP_EXCEEDED = \\\"52\\\"; // 'Unbacked mint cap is exceeded'\\n    string public constant DEBT_CEILING_EXCEEDED = \\\"53\\\"; // 'Debt ceiling is exceeded'\\n    string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = \\\"54\\\"; // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'\\n    string public constant STABLE_DEBT_NOT_ZERO = \\\"55\\\"; // 'Stable debt supply is not zero'\\n    string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = \\\"56\\\"; // 'Variable debt supply is not zero'\\n    string public constant LTV_VALIDATION_FAILED = \\\"57\\\"; // 'Ltv validation failed'\\n    string public constant INCONSISTENT_EMODE_CATEGORY = \\\"58\\\"; // 'Inconsistent eMode category'\\n    string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = \\\"59\\\"; // 'Price oracle sentinel validation failed'\\n    string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = \\\"60\\\"; // 'Asset is not borrowable in isolation mode'\\n    string public constant RESERVE_ALREADY_INITIALIZED = \\\"61\\\"; // 'Reserve has already been initialized'\\n    string public constant USER_IN_ISOLATION_MODE_OR_LTV_ZERO = \\\"62\\\"; // 'User is in isolation mode or ltv is zero'\\n    string public constant INVALID_LTV = \\\"63\\\"; // 'Invalid ltv parameter for the reserve'\\n    string public constant INVALID_LIQ_THRESHOLD = \\\"64\\\"; // 'Invalid liquidity threshold parameter for the reserve'\\n    string public constant INVALID_LIQ_BONUS = \\\"65\\\"; // 'Invalid liquidity bonus parameter for the reserve'\\n    string public constant INVALID_DECIMALS = \\\"66\\\"; // 'Invalid decimals parameter of the underlying asset of the reserve'\\n    string public constant INVALID_RESERVE_FACTOR = \\\"67\\\"; // 'Invalid reserve factor parameter for the reserve'\\n    string public constant INVALID_BORROW_CAP = \\\"68\\\"; // 'Invalid borrow cap for the reserve'\\n    string public constant INVALID_SUPPLY_CAP = \\\"69\\\"; // 'Invalid supply cap for the reserve'\\n    string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = \\\"70\\\"; // 'Invalid liquidation protocol fee for the reserve'\\n    string public constant INVALID_EMODE_CATEGORY = \\\"71\\\"; // 'Invalid eMode category for the reserve'\\n    string public constant INVALID_UNBACKED_MINT_CAP = \\\"72\\\"; // 'Invalid unbacked mint cap for the reserve'\\n    string public constant INVALID_DEBT_CEILING = \\\"73\\\"; // 'Invalid debt ceiling for the reserve\\n    string public constant INVALID_RESERVE_INDEX = \\\"74\\\"; // 'Invalid reserve index'\\n    string public constant ACL_ADMIN_CANNOT_BE_ZERO = \\\"75\\\"; // 'ACL admin cannot be set to the zero address'\\n    string public constant INCONSISTENT_PARAMS_LENGTH = \\\"76\\\"; // 'Array parameters that should be equal length are not'\\n    string public constant ZERO_ADDRESS_NOT_VALID = \\\"77\\\"; // 'Zero address not valid'\\n    string public constant INVALID_EXPIRATION = \\\"78\\\"; // 'Invalid expiration'\\n    string public constant INVALID_SIGNATURE = \\\"79\\\"; // 'Invalid signature'\\n    string public constant OPERATION_NOT_SUPPORTED = \\\"80\\\"; // 'Operation not supported'\\n    string public constant DEBT_CEILING_NOT_ZERO = \\\"81\\\"; // 'Debt ceiling is not zero'\\n    string public constant ASSET_NOT_LISTED = \\\"82\\\"; // 'Asset is not listed'\\n    string public constant INVALID_OPTIMAL_USAGE_RATIO = \\\"83\\\"; // 'Invalid optimal usage ratio'\\n    string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = \\\"84\\\"; // 'Invalid optimal stable to total debt ratio'\\n    string public constant UNDERLYING_CANNOT_BE_RESCUED = \\\"85\\\"; // 'The underlying asset cannot be rescued'\\n    string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = \\\"86\\\"; // 'Reserve has already been added to reserve list'\\n    string public constant POOL_ADDRESSES_DO_NOT_MATCH = \\\"87\\\"; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\\n    string public constant STABLE_BORROWING_ENABLED = \\\"88\\\"; // 'Stable borrowing is enabled'\\n    string public constant SILOED_BORROWING_VIOLATION = \\\"89\\\"; // 'User is trying to borrow multiple assets including a siloed one'\\n    string public constant RESERVE_DEBT_NOT_ZERO = \\\"90\\\"; // the total debt of the reserve needs to be 0\\n    string public constant FLASHLOAN_DISABLED = \\\"91\\\"; // FlashLoaning for this asset is disabled\\n}\\n\",\"keccak256\":\"0x966464a2f371b384a2b9d43435e2fb36a4c739ffbc77493d59df08f4f5862e09\",\"license\":\"BUSL-1.1\"},\"contracts/lending/core/protocol/libraries/math/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\nimport {WadRayMath} from \\\"./WadRayMath.sol\\\";\\n\\n/**\\n * @title MathUtils library\\n * @author Aave\\n * @notice Provides functions to perform linear and compounded interest calculations\\n */\\nlibrary MathUtils {\\n    using WadRayMath for uint256;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     */\\n    function calculateLinearInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp\\n    ) internal view returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 result = rate *\\n            (block.timestamp - uint256(lastUpdateTimestamp));\\n        unchecked {\\n            result = result / SECONDS_PER_YEAR;\\n        }\\n\\n        return WadRayMath.RAY + result;\\n    }\\n\\n    /**\\n     * @dev Function to calculate the interest using a compounded interest rate formula\\n     * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\n     *\\n     *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\n     *\\n     * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great\\n     * gas cost reductions. The whitepaper contains reference to the approximation and a table showing the margin of\\n     * error per different time periods\\n     *\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate compounded during the timeDelta, in ray\\n     */\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp,\\n        uint256 currentTimestamp\\n    ) internal pure returns (uint256) {\\n        //solium-disable-next-line\\n        uint256 exp = currentTimestamp - uint256(lastUpdateTimestamp);\\n\\n        if (exp == 0) {\\n            return WadRayMath.RAY;\\n        }\\n\\n        uint256 expMinusOne;\\n        uint256 expMinusTwo;\\n        uint256 basePowerTwo;\\n        uint256 basePowerThree;\\n        unchecked {\\n            expMinusOne = exp - 1;\\n\\n            expMinusTwo = exp > 2 ? exp - 2 : 0;\\n\\n            basePowerTwo =\\n                rate.rayMul(rate) /\\n                (SECONDS_PER_YEAR * SECONDS_PER_YEAR);\\n            basePowerThree = basePowerTwo.rayMul(rate) / SECONDS_PER_YEAR;\\n        }\\n\\n        uint256 secondTerm = exp * expMinusOne * basePowerTwo;\\n        unchecked {\\n            secondTerm /= 2;\\n        }\\n        uint256 thirdTerm = exp * expMinusOne * expMinusTwo * basePowerThree;\\n        unchecked {\\n            thirdTerm /= 6;\\n        }\\n\\n        return\\n            WadRayMath.RAY +\\n            (rate * exp) /\\n            SECONDS_PER_YEAR +\\n            secondTerm +\\n            thirdTerm;\\n    }\\n\\n    /**\\n     * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\n     * @param rate The interest rate (in ray)\\n     * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\n     * @return The interest rate compounded between lastUpdateTimestamp and current block timestamp, in ray\\n     */\\n    function calculateCompoundedInterest(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp\\n    ) internal view returns (uint256) {\\n        return\\n            calculateCompoundedInterest(\\n                rate,\\n                lastUpdateTimestamp,\\n                block.timestamp\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x617a0f9068b2eb64ce6362702e33ca92f60e854d4740e4fea34a24c456a98056\",\"license\":\"BUSL-1.1\"},\"contracts/lending/core/protocol/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @notice Provides functions to perform calculations with Wad and Ray units\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\\n * with 27 digits of precision)\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n */\\nlibrary WadRayMath {\\n    // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = 0.5e18;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = 0.5e27;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a*b, in wad\\n     */\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\\n        assembly {\\n            if iszero(\\n                or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_WAD), WAD)\\n        }\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a/b, in wad\\n     */\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\\n        assembly {\\n            if or(\\n                iszero(b),\\n                iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, WAD), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raymul b\\n     */\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\\n        assembly {\\n            if iszero(\\n                or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_RAY), RAY)\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raydiv b\\n     */\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\\n        assembly {\\n            if or(\\n                iszero(b),\\n                iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))\\n            ) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, RAY), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @return b = a converted to wad, rounded half up to the nearest wad\\n     */\\n    function rayToWad(uint256 a) internal pure returns (uint256 b) {\\n        assembly {\\n            b := div(a, WAD_RAY_RATIO)\\n            let remainder := mod(a, WAD_RAY_RATIO)\\n            if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\\n                b := add(b, 1)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @return b = a converted in ray\\n     */\\n    function wadToRay(uint256 a) internal pure returns (uint256 b) {\\n        // to avoid overflow, b/WAD_RAY_RATIO == a\\n        assembly {\\n            b := mul(a, WAD_RAY_RATIO)\\n\\n            if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd200dd533724fa5750f20b0f8048170ac85813a7c70f21dfeff1a06bd0528de2\",\"license\":\"BUSL-1.1\"},\"contracts/lending/core/protocol/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        //timestamp of last update\\n        uint40 lastUpdateTimestamp;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint16 id;\\n        //aToken address\\n        address aTokenAddress;\\n        //stableDebtToken address\\n        address stableDebtTokenAddress;\\n        //variableDebtToken address\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the current treasury balance, scaled\\n        uint128 accruedToTreasury;\\n        //the outstanding unbacked aTokens minted through the bridging feature\\n        uint128 unbacked;\\n        //the outstanding debt borrowed against this asset in isolation mode\\n        uint128 isolationModeTotalDebt;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60: asset is paused\\n        //bit 61: borrowing in isolation mode is enabled\\n        //bit 62: siloed borrowing enabled\\n        //bit 63: flashloaning enabled\\n        //bit 64-79: reserve factor\\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n        //bit 152-167 liquidation protocol fee\\n        //bit 168-175 eMode category\\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n        //bit 252-255 unused\\n\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        /**\\n         * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n         * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n         * asset is borrowed by the user.\\n         */\\n        uint256 data;\\n    }\\n\\n    struct EModeCategory {\\n        // each eMode category has a custom ltv and liquidation threshold\\n        uint16 ltv;\\n        uint16 liquidationThreshold;\\n        uint16 liquidationBonus;\\n        // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n        address priceSource;\\n        string label;\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n\\n    struct ReserveCache {\\n        uint256 currScaledVariableDebt;\\n        uint256 nextScaledVariableDebt;\\n        uint256 currPrincipalStableDebt;\\n        uint256 currAvgStableBorrowRate;\\n        uint256 currTotalStableDebt;\\n        uint256 nextAvgStableBorrowRate;\\n        uint256 nextTotalStableDebt;\\n        uint256 currLiquidityIndex;\\n        uint256 nextLiquidityIndex;\\n        uint256 currVariableBorrowIndex;\\n        uint256 nextVariableBorrowIndex;\\n        uint256 currLiquidityRate;\\n        uint256 currVariableBorrowRate;\\n        uint256 reserveFactor;\\n        ReserveConfigurationMap reserveConfiguration;\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        uint40 reserveLastUpdateTimestamp;\\n        uint40 stableDebtLastUpdateTimestamp;\\n    }\\n\\n    struct ExecuteLiquidationCallParams {\\n        uint256 reservesCount;\\n        uint256 debtToCover;\\n        address collateralAsset;\\n        address debtAsset;\\n        address user;\\n        bool receiveAToken;\\n        address priceOracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteSupplyParams {\\n        address asset;\\n        uint256 amount;\\n        address onBehalfOf;\\n        uint16 referralCode;\\n    }\\n\\n    struct ExecuteBorrowParams {\\n        address asset;\\n        address user;\\n        address onBehalfOf;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint16 referralCode;\\n        bool releaseUnderlying;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct ExecuteRepayParams {\\n        address asset;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        address onBehalfOf;\\n        bool useATokens;\\n    }\\n\\n    struct ExecuteWithdrawParams {\\n        address asset;\\n        uint256 amount;\\n        address to;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ExecuteSetUserEModeParams {\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 categoryId;\\n    }\\n\\n    struct FinalizeTransferParams {\\n        address asset;\\n        address from;\\n        address to;\\n        uint256 amount;\\n        uint256 balanceFromBefore;\\n        uint256 balanceToBefore;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 fromEModeCategory;\\n    }\\n\\n    struct FlashloanParams {\\n        address receiverAddress;\\n        address[] assets;\\n        uint256[] amounts;\\n        uint256[] interestRateModes;\\n        address onBehalfOf;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n        uint256 maxStableRateBorrowSizePercent;\\n        uint256 reservesCount;\\n        address addressesProvider;\\n        uint8 userEModeCategory;\\n        bool isAuthorizedFlashBorrower;\\n    }\\n\\n    struct FlashloanSimpleParams {\\n        address receiverAddress;\\n        address asset;\\n        uint256 amount;\\n        bytes params;\\n        uint16 referralCode;\\n        uint256 flashLoanPremiumToProtocol;\\n        uint256 flashLoanPremiumTotal;\\n    }\\n\\n    struct FlashLoanRepaymentParams {\\n        uint256 amount;\\n        uint256 totalPremium;\\n        uint256 flashLoanPremiumToProtocol;\\n        address asset;\\n        address receiverAddress;\\n        uint16 referralCode;\\n    }\\n\\n    struct CalculateUserAccountDataParams {\\n        UserConfigurationMap userConfig;\\n        uint256 reservesCount;\\n        address user;\\n        address oracle;\\n        uint8 userEModeCategory;\\n    }\\n\\n    struct ValidateBorrowParams {\\n        ReserveCache reserveCache;\\n        UserConfigurationMap userConfig;\\n        address asset;\\n        address userAddress;\\n        uint256 amount;\\n        InterestRateMode interestRateMode;\\n        uint256 maxStableLoanPercent;\\n        uint256 reservesCount;\\n        address oracle;\\n        uint8 userEModeCategory;\\n        address priceOracleSentinel;\\n        bool isolationModeActive;\\n        address isolationModeCollateralAddress;\\n        uint256 isolationModeDebtCeiling;\\n    }\\n\\n    struct ValidateLiquidationCallParams {\\n        ReserveCache debtReserveCache;\\n        uint256 totalDebt;\\n        uint256 healthFactor;\\n        address priceOracleSentinel;\\n    }\\n\\n    struct CalculateInterestRatesParams {\\n        uint256 unbacked;\\n        uint256 liquidityAdded;\\n        uint256 liquidityTaken;\\n        uint256 totalStableDebt;\\n        uint256 totalVariableDebt;\\n        uint256 averageStableBorrowRate;\\n        uint256 reserveFactor;\\n        address reserve;\\n        address aToken;\\n    }\\n\\n    struct InitReserveParams {\\n        address asset;\\n        address aTokenAddress;\\n        address stableDebtAddress;\\n        address variableDebtAddress;\\n        address interestRateStrategyAddress;\\n        uint16 reservesCount;\\n        uint16 maxNumberReserves;\\n    }\\n}\\n\",\"keccak256\":\"0x5416c13face4a4dc40d5446fa0dd98ecad2de6448f485b92403dfe5db22a034b\",\"license\":\"BUSL-1.1\"},\"contracts/lending/periphery/rewards/interfaces/IRewardsController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.10;\\n\\nimport {IAaveOracle} from \\\"contracts/lending/core/interfaces/IAaveOracle.sol\\\";\\nimport {IRewardsDistributor} from \\\"./IRewardsDistributor.sol\\\";\\nimport {ITransferStrategyBase} from \\\"./ITransferStrategyBase.sol\\\";\\nimport {RewardsDataTypes} from \\\"../libraries/RewardsDataTypes.sol\\\";\\n\\n/**\\n * @title IRewardsController\\n * @author Aave\\n * @notice Defines the basic interface for a Rewards Controller.\\n */\\ninterface IRewardsController is IRewardsDistributor {\\n    /**\\n     * @dev Emitted when a new address is whitelisted as claimer of rewards on behalf of a user\\n     * @param user The address of the user\\n     * @param claimer The address of the claimer\\n     */\\n    event ClaimerSet(address indexed user, address indexed claimer);\\n\\n    /**\\n     * @dev Emitted when rewards are claimed\\n     * @param user The address of the user rewards has been claimed on behalf of\\n     * @param reward The address of the token reward is claimed\\n     * @param to The address of the receiver of the rewards\\n     * @param claimer The address of the claimer\\n     * @param amount The amount of rewards claimed\\n     */\\n    event RewardsClaimed(\\n        address indexed user,\\n        address indexed reward,\\n        address indexed to,\\n        address claimer,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted when a transfer strategy is installed for the reward distribution\\n     * @param reward The address of the token reward\\n     * @param transferStrategy The address of TransferStrategy contract\\n     */\\n    event TransferStrategyInstalled(\\n        address indexed reward,\\n        address indexed transferStrategy\\n    );\\n\\n    /**\\n     * @dev Emitted when the reward oracle is updated\\n     * @param reward The address of the token reward\\n     * @param rewardOracle The address of oracle\\n     */\\n    event RewardOracleUpdated(\\n        address indexed reward,\\n        address indexed rewardOracle\\n    );\\n\\n    /**\\n     * @dev Whitelists an address to claim the rewards on behalf of another address\\n     * @param user The address of the user\\n     * @param claimer The address of the claimer\\n     */\\n    function setClaimer(address user, address claimer) external;\\n\\n    /**\\n     * @dev Sets a TransferStrategy logic contract that determines the logic of the rewards transfer\\n     * @param reward The address of the reward token\\n     * @param transferStrategy The address of the TransferStrategy logic contract\\n     */\\n    function setTransferStrategy(\\n        address reward,\\n        ITransferStrategyBase transferStrategy\\n    ) external;\\n\\n    /**\\n     * @dev Sets an Aave Oracle contract to enforce rewards with a source of value.\\n     * @notice At the moment of reward configuration, the Incentives Controller performs\\n     * a check to see if the reward asset oracle is compatible with IAaveOracle interface.\\n     * This check is enforced for integrators to be able to show incentives at\\n     * the current Aave UI without the need to setup an external price registry\\n     * @param reward The address of the reward to set the price aggregator\\n     * @param rewardOracle The address of price aggregator that follows IAaveOracle interface\\n     */\\n    function setRewardOracle(address reward, IAaveOracle rewardOracle) external;\\n\\n    /**\\n     * @dev Get the price aggregator oracle address\\n     * @param reward The address of the reward\\n     * @return The price oracle of the reward\\n     */\\n    function getRewardOracle(address reward) external view returns (address);\\n\\n    /**\\n     * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n     * @param user The address of the user\\n     * @return The claimer address\\n     */\\n    function getClaimer(address user) external view returns (address);\\n\\n    /**\\n     * @dev Returns the Transfer Strategy implementation contract address being used for a reward address\\n     * @param reward The address of the reward\\n     * @return The address of the TransferStrategy contract\\n     */\\n    function getTransferStrategy(\\n        address reward\\n    ) external view returns (address);\\n\\n    /**\\n     * @dev Configure assets to incentivize with an emission of rewards per second until the end of distribution.\\n     * @param config The assets configuration input, the list of structs contains the following fields:\\n     *   uint104 emissionPerSecond: The emission per second following rewards unit decimals.\\n     *   uint256 totalSupply: The total supply of the asset to incentivize\\n     *   uint40 distributionEnd: The end of the distribution of the incentives for an asset\\n     *   address asset: The asset address to incentivize\\n     *   address reward: The reward token address\\n     *   ITransferStrategy transferStrategy: The TransferStrategy address with the install hook and claim logic.\\n     *   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.\\n     *                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible.\\n     */\\n    function configureAssets(\\n        RewardsDataTypes.RewardsConfigInput[] memory config\\n    ) external;\\n\\n    /**\\n     * @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.\\n     * @dev The units of `totalSupply` and `userBalance` should be the same.\\n     * @param user The address of the user whose asset balance has changed\\n     * @param totalSupply The total supply of the asset prior to user balance change\\n     * @param userBalance The previous user balance prior to balance change\\n     **/\\n    function handleAction(\\n        address user,\\n        uint256 totalSupply,\\n        uint256 userBalance\\n    ) external;\\n\\n    /**\\n     * @dev Claims reward for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n     * @param assets List of assets to check eligible distributions before claiming rewards\\n     * @param amount The amount of rewards to claim\\n     * @param to The address that will be receiving the rewards\\n     * @param reward The address of the reward token\\n     * @return The amount of rewards claimed\\n     **/\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to,\\n        address reward\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The\\n     * caller must be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n     * @param assets The list of assets to check eligible distributions before claiming rewards\\n     * @param amount The amount of rewards to claim\\n     * @param user The address to check and claim rewards\\n     * @param to The address that will be receiving the rewards\\n     * @param reward The address of the reward token\\n     * @return The amount of rewards claimed\\n     **/\\n    function claimRewardsOnBehalf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address user,\\n        address to,\\n        address reward\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\n     * @param assets The list of assets to check eligible distributions before claiming rewards\\n     * @param amount The amount of rewards to claim\\n     * @param reward The address of the reward token\\n     * @return The amount of rewards claimed\\n     **/\\n    function claimRewardsToSelf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address reward\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims all rewards for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n     * @param assets The list of assets to check eligible distributions before claiming rewards\\n     * @param to The address that will be receiving the rewards\\n     * @return rewardsList List of addresses of the reward tokens\\n     * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardList\\\"\\n     **/\\n    function claimAllRewards(\\n        address[] calldata assets,\\n        address to\\n    )\\n        external\\n        returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n    /**\\n     * @dev Claims all rewards for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The caller must\\n     * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n     * @param assets The list of assets to check eligible distributions before claiming rewards\\n     * @param user The address to check and claim rewards\\n     * @param to The address that will be receiving the rewards\\n     * @return rewardsList List of addresses of the reward tokens\\n     * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n     **/\\n    function claimAllRewardsOnBehalf(\\n        address[] calldata assets,\\n        address user,\\n        address to\\n    )\\n        external\\n        returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n    /**\\n     * @dev Claims all reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\n     * @param assets The list of assets to check eligible distributions before claiming rewards\\n     * @return rewardsList List of addresses of the reward tokens\\n     * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n     **/\\n    function claimAllRewardsToSelf(\\n        address[] calldata assets\\n    )\\n        external\\n        returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n    /**\\n     * @dev Recieve more fund from the user to existing reward\\n     * @param reward The reward address is being distributed\\n     * @param amount The token amount is being funded\\n     * @param from The address of the one who funds the rewards\\n     */\\n    function depositRewardFrom(\\n        address reward,\\n        uint256 amount,\\n        address from\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2e8cf85bc4e5a65196087e790fca700d966a2fdce4a257ca1c91d3ebf38a68dd\",\"license\":\"AGPL-3.0\"},\"contracts/lending/periphery/rewards/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title IRewardsDistributor\\n * @author Aave\\n * @notice Defines the basic interface for a Rewards Distributor.\\n */\\ninterface IRewardsDistributor {\\n    /**\\n     * @dev Emitted when the configuration of the rewards of an asset is updated.\\n     * @param asset The address of the incentivized asset\\n     * @param reward The address of the reward token\\n     * @param oldEmission The old emissions per second value of the reward distribution\\n     * @param newEmission The new emissions per second value of the reward distribution\\n     * @param oldDistributionEnd The old end timestamp of the reward distribution\\n     * @param newDistributionEnd The new end timestamp of the reward distribution\\n     * @param assetIndex The index of the asset distribution\\n     */\\n    event AssetConfigUpdated(\\n        address indexed asset,\\n        address indexed reward,\\n        uint256 oldEmission,\\n        uint256 newEmission,\\n        uint256 oldDistributionEnd,\\n        uint256 newDistributionEnd,\\n        uint256 assetIndex\\n    );\\n\\n    /**\\n     * @dev Emitted when rewards of an asset are accrued on behalf of a user.\\n     * @param asset The address of the incentivized asset\\n     * @param reward The address of the reward token\\n     * @param user The address of the user that rewards are accrued on behalf of\\n     * @param assetIndex The index of the asset distribution\\n     * @param userIndex The index of the asset distribution on behalf of the user\\n     * @param rewardsAccrued The amount of rewards accrued\\n     */\\n    event Accrued(\\n        address indexed asset,\\n        address indexed reward,\\n        address indexed user,\\n        uint256 assetIndex,\\n        uint256 userIndex,\\n        uint256 rewardsAccrued\\n    );\\n\\n    /**\\n     * @dev Sets the end date for the distribution\\n     * @param asset The asset to incentivize\\n     * @param reward The reward token that incentives the asset\\n     * @param newDistributionEnd The end date of the incentivization, in unix time format\\n     **/\\n    function setDistributionEnd(\\n        address asset,\\n        address reward,\\n        uint32 newDistributionEnd\\n    ) external;\\n\\n    /**\\n     * @dev Sets the emission per second of a set of reward distributions\\n     * @param asset The asset is being incentivized\\n     * @param rewards List of reward addresses are being distributed\\n     * @param newEmissionsPerSecond List of new reward emissions per second\\n     */\\n    function setEmissionPerSecond(\\n        address asset,\\n        address[] calldata rewards,\\n        uint88[] calldata newEmissionsPerSecond\\n    ) external;\\n\\n    /**\\n     * @dev Gets the end date for the distribution\\n     * @param asset The incentivized asset\\n     * @param reward The reward token of the incentivized asset\\n     * @return The timestamp with the end of the distribution, in unix time format\\n     **/\\n    function getDistributionEnd(\\n        address asset,\\n        address reward\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the index of a user on a reward distribution\\n     * @param user Address of the user\\n     * @param asset The incentivized asset\\n     * @param reward The reward token of the incentivized asset\\n     * @return The current user asset index, not including new distributions\\n     **/\\n    function getUserAssetIndex(\\n        address user,\\n        address asset,\\n        address reward\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the configuration of the distribution reward for a certain asset\\n     * @param asset The incentivized asset\\n     * @param reward The reward token of the incentivized asset\\n     * @return The index of the asset distribution\\n     * @return The emission per second of the reward distribution\\n     * @return The timestamp of the last update of the index\\n     * @return The timestamp of the distribution end\\n     **/\\n    function getRewardsData(\\n        address asset,\\n        address reward\\n    ) external view returns (uint256, uint256, uint256, uint256);\\n\\n    /**\\n     * @dev Calculates the next value of an specific distribution index, with validations.\\n     * @param asset The incentivized asset\\n     * @param reward The reward token of the incentivized asset\\n     * @return The old index of the asset distribution\\n     * @return The new index of the asset distribution\\n     **/\\n    function getAssetIndex(\\n        address asset,\\n        address reward\\n    ) external view returns (uint256, uint256);\\n\\n    /**\\n     * @dev Returns the list of available reward token addresses of an incentivized asset\\n     * @param asset The incentivized asset\\n     * @return List of rewards addresses of the input asset\\n     **/\\n    function getRewardsByAsset(\\n        address asset\\n    ) external view returns (address[] memory);\\n\\n    /**\\n     * @dev Returns the list of available reward addresses\\n     * @return List of rewards supported in this contract\\n     **/\\n    function getRewardsList() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Returns the accrued rewards balance of a user, not including virtually accrued rewards since last distribution.\\n     * @param user The address of the user\\n     * @param reward The address of the reward token\\n     * @return Unclaimed rewards, not including new distributions\\n     **/\\n    function getUserAccruedRewards(\\n        address user,\\n        address reward\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a single rewards balance of a user, including virtually accrued and unrealized claimable rewards.\\n     * @param assets List of incentivized assets to check eligible distributions\\n     * @param user The address of the user\\n     * @param reward The address of the reward token\\n     * @return The rewards amount\\n     **/\\n    function getUserRewards(\\n        address[] calldata assets,\\n        address user,\\n        address reward\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a list all rewards of a user, including already accrued and unrealized claimable rewards\\n     * @param assets List of incentivized assets to check eligible distributions\\n     * @param user The address of the user\\n     * @return The list of reward addresses\\n     * @return The list of unclaimed amount of rewards\\n     **/\\n    function getAllUserRewards(\\n        address[] calldata assets,\\n        address user\\n    ) external view returns (address[] memory, uint256[] memory);\\n\\n    /**\\n     * @dev Returns the decimals of an asset to calculate the distribution delta\\n     * @param asset The address to retrieve decimals\\n     * @return The decimals of an underlying asset\\n     */\\n    function getAssetDecimals(address asset) external view returns (uint8);\\n\\n    /**\\n     * @dev Returns the address of the emission manager\\n     * @return The address of the EmissionManager\\n     */\\n    function EMISSION_MANAGER() external view returns (address);\\n\\n    /**\\n     * @dev Returns the address of the emission manager.\\n     * Deprecated: This getter is maintained for compatibility purposes. Use the `EMISSION_MANAGER()` function instead.\\n     * @return The address of the EmissionManager\\n     */\\n    function getEmissionManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0x9188989e40f8801d5a12caa71ced3c682069a6116f4f092a2319ab3d49192613\",\"license\":\"AGPL-3.0\"},\"contracts/lending/periphery/rewards/interfaces/ITransferStrategyBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.10;\\n\\ninterface ITransferStrategyBase {\\n    event EmergencyWithdrawal(\\n        address indexed caller,\\n        address indexed token,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Perform custom transfer logic via delegate call from source contract to a TransferStrategy implementation\\n     * @param to Account to transfer rewards\\n     * @param reward Address of the reward token\\n     * @param amount Amount to transfer to the \\\"to\\\" address parameter\\n     * @return Returns true bool if transfer logic succeeds\\n     */\\n    function performTransfer(\\n        address to,\\n        address reward,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @return Returns the address of the Incentives Controller\\n     */\\n    function getIncentivesController() external view returns (address);\\n\\n    /**\\n     * @return Returns the address of the Rewards admin\\n     */\\n    function getRewardsAdmin() external view returns (address);\\n\\n    /**\\n     * @dev Perform an emergency token withdrawal only callable by the Rewards admin\\n     * @param token Address of the token to withdraw funds from this contract\\n     * @param to Address of the recipient of the withdrawal\\n     * @param amount Amount of the withdrawal\\n     */\\n    function emergencyWithdrawal(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x23471b7db89560f77682e822e8cf33ee43411c0c036a8d9fd1e7820be0bf40c7\",\"license\":\"AGPL-3.0\"},\"contracts/lending/periphery/rewards/libraries/RewardsDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.10;\\n\\nimport {IAaveOracle} from \\\"contracts/lending/core/interfaces/IAaveOracle.sol\\\";\\nimport {ITransferStrategyBase} from \\\"../interfaces/ITransferStrategyBase.sol\\\";\\n\\nlibrary RewardsDataTypes {\\n    struct RewardsConfigInput {\\n        uint88 emissionPerSecond;\\n        uint256 totalSupply;\\n        uint32 distributionEnd;\\n        address asset;\\n        address reward;\\n        ITransferStrategyBase transferStrategy;\\n        IAaveOracle rewardOracle;\\n    }\\n\\n    struct UserAssetBalance {\\n        address asset;\\n        uint256 userBalance;\\n        uint256 totalSupply;\\n    }\\n\\n    struct UserData {\\n        // Liquidity index of the reward distribution for the user\\n        uint104 index;\\n        // Amount of accrued rewards for the user since last user index update\\n        uint128 accrued;\\n    }\\n\\n    struct RewardData {\\n        // Liquidity index of the reward distribution\\n        uint104 index;\\n        // Amount of reward tokens distributed per second\\n        uint88 emissionPerSecond;\\n        // Timestamp of the last reward index update\\n        uint32 lastUpdateTimestamp;\\n        // The end of the distribution of rewards (in seconds)\\n        uint32 distributionEnd;\\n        // Map of user addresses and their rewards data (userAddress => userData)\\n        mapping(address => UserData) usersData;\\n    }\\n\\n    struct AssetData {\\n        // Map of reward token addresses and their data (rewardTokenAddress => rewardData)\\n        mapping(address => RewardData) rewards;\\n        // List of reward token addresses for the asset\\n        mapping(uint128 => address) availableRewards;\\n        // Count of reward tokens for the asset\\n        uint128 availableRewardsCount;\\n        // Number of decimals of the asset\\n        uint8 decimals;\\n    }\\n}\\n\",\"keccak256\":\"0xa17a8564d6b343266e0d84a915b0d443278e209aa6af2bb3893153c2b4ec5e15\",\"license\":\"AGPL-3.0\"},\"contracts/vaults/atoken_wrapper/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (\\n                address(0),\\n                RecoverError.InvalidSignatureLength,\\n                bytes32(signature.length)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(\\n            hash,\\n            signature\\n        );\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs &\\n                bytes32(\\n                    0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n                );\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(\\n            hash,\\n            r,\\n            vs\\n        );\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (\\n            uint256(s) >\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\\n        ) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(\\n            hash,\\n            v,\\n            r,\\n            s\\n        );\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x71ccb4f3110820174f3933676e59bddc5f6f5506d406e41ff63145239a8419ea\",\"license\":\"MIT\"},\"contracts/vaults/atoken_wrapper/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.20;\\n\\nimport {ECDSA} from \\\"./ECDSA.sol\\\";\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    bytes32 public constant PERMIT_TYPEHASH =\\n        keccak256(\\n            \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n        );\\n\\n    /* //////////////////////////////////////////////////////////////\\n                        EVENTS\\n  ////////////////////////////////////////////////////////////// */\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n\\n    /* //////////////////////////////////////////////////////////////\\n                        METADATA STORAGE\\n  ////////////////////////////////////////////////////////////// */\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public decimals;\\n\\n    /* //////////////////////////////////////////////////////////////\\n                        ERC20 STORAGE\\n  ////////////////////////////////////////////////////////////// */\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /* //////////////////////////////////////////////////////////////\\n                        EIP-2612 STORAGE\\n  ////////////////////////////////////////////////////////////// */\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /* //////////////////////////////////////////////////////////////\\n                        CONSTRUCTOR\\n  ////////////////////////////////////////////////////////////// */\\n\\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n    }\\n\\n    /* //////////////////////////////////////////////////////////////\\n                        ERC20 LOGIC\\n  ////////////////////////////////////////////////////////////// */\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        _beforeTokenTransfer(msg.sender, to, amount);\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        _beforeTokenTransfer(from, to, amount);\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max)\\n            allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /* //////////////////////////////////////////////////////////////\\n                          EIP-2612 LOGIC\\n  ////////////////////////////////////////////////////////////// */\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address signer = ECDSA.recover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                PERMIT_TYPEHASH,\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(signer == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[signer][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                    ),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /* //////////////////////////////////////////////////////////////\\n                            INTERNAL MINT/BURN LOGIC\\n  ////////////////////////////////////////////////////////////// */\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(address(0), to, amount);\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        _beforeTokenTransfer(from, address(0), amount);\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x5e2aa53886e3ce2dbdd32ee4fd4433daea36fc17230a94ae44c59026d945ff7a\",\"license\":\"AGPL-3.0-only\"},\"contracts/vaults/atoken_wrapper/RayMathExplicitRounding.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"@openzeppelin/contracts-5/utils/math/Math.sol\\\";\\n\\nenum Rounding {\\n    UP,\\n    DOWN\\n}\\n\\n/**\\n * Simplified version of RayMath that instead of half-up rounding does explicit rounding in a specified direction.\\n * This is needed to have a 4626 complient implementation, that always predictable rounds in favor of the vault / static a token.\\n */\\nlibrary RayMathExplicitRounding {\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    function rayMulRoundDown(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return Math.mulDiv(a, b, RAY); // default is rounding down\\n    }\\n\\n    function rayMulRoundUp(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return Math.mulDiv(a, b, RAY, Math.Rounding.Ceil);\\n    }\\n\\n    function rayDivRoundDown(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (uint256) {\\n        return Math.mulDiv(a, RAY, b); // rounding down\\n    }\\n\\n    function rayDivRoundUp(\\n        uint256 a,\\n        uint256 b\\n    ) internal pure returns (uint256) {\\n        return Math.mulDiv(a, RAY, b, Math.Rounding.Ceil);\\n    }\\n\\n    function rayToWadRoundDown(uint256 a) internal pure returns (uint256) {\\n        return a / WAD_RAY_RATIO;\\n    }\\n}\\n\",\"keccak256\":\"0x6d910d9059785c5772eae1903630851d8f578ecca2d5fd11ab1725fddd74aba3\",\"license\":\"agpl-3.0\"},\"contracts/vaults/atoken_wrapper/StaticATokenErrors.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.20;\\n\\nlibrary StaticATokenErrors {\\n    string public constant INVALID_OWNER = \\\"1\\\";\\n    string public constant INVALID_EXPIRATION = \\\"2\\\";\\n    string public constant INVALID_SIGNATURE = \\\"3\\\";\\n    string public constant INVALID_DEPOSITOR = \\\"4\\\";\\n    string public constant INVALID_RECIPIENT = \\\"5\\\";\\n    string public constant INVALID_CLAIMER = \\\"6\\\";\\n    string public constant ONLY_ONE_AMOUNT_FORMAT_ALLOWED = \\\"7\\\";\\n    string public constant INVALID_ZERO_AMOUNT = \\\"8\\\";\\n    string public constant REWARD_NOT_INITIALIZED = \\\"9\\\";\\n}\\n\",\"keccak256\":\"0x0cd9bf8c61bf0aa576f2df6c1f37983c80152fdbee341d49b8ddc88780cb7586\",\"license\":\"agpl-3.0\"},\"contracts/vaults/atoken_wrapper/StaticATokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IPool, DataTypes} from \\\"contracts/lending/core/interfaces/IPool.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts-5/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {StaticATokenLM} from \\\"./StaticATokenLM.sol\\\";\\nimport {IStaticATokenFactory} from \\\"./interfaces/IStaticATokenFactory.sol\\\";\\nimport {IRewardsController} from \\\"contracts/lending/periphery/rewards/interfaces/IRewardsController.sol\\\";\\n\\n/**\\n * @title StaticATokenFactory\\n * @notice Factory contract that keeps track of all deployed static aToken wrappers for a specified pool.\\n * This registry also acts as a factory, allowing to deploy new static aTokens on demand.\\n * There can only be one static aToken per underlying on the registry at a time.\\n * @author BGD labs (modified by dTrinity)\\n */\\ncontract StaticATokenFactory is IStaticATokenFactory {\\n    IPool public immutable POOL;\\n\\n    mapping(address => address) internal _underlyingToStaticAToken;\\n    address[] internal _staticATokens;\\n\\n    event StaticTokenCreated(\\n        address indexed staticAToken,\\n        address indexed underlying\\n    );\\n\\n    constructor(IPool pool) {\\n        POOL = pool;\\n    }\\n\\n    function initialize() external pure {\\n        revert(\\\"NO_INITIALIZER\\\");\\n    }\\n\\n    ///@inheritdoc IStaticATokenFactory\\n    function createStaticATokens(\\n        address[] memory underlyings\\n    ) external returns (address[] memory) {\\n        address[] memory staticATokens = new address[](underlyings.length);\\n        for (uint256 i = 0; i < underlyings.length; i++) {\\n            address cachedStaticAToken = _underlyingToStaticAToken[\\n                underlyings[i]\\n            ];\\n            if (cachedStaticAToken == address(0)) {\\n                DataTypes.ReserveData memory reserveData = POOL.getReserveData(\\n                    underlyings[i]\\n                );\\n                require(\\n                    reserveData.aTokenAddress != address(0),\\n                    \\\"UNDERLYING_NOT_LISTED\\\"\\n                );\\n                StaticATokenLM staticAToken = new StaticATokenLM(\\n                    POOL,\\n                    IRewardsController(address(0)), // TODO: pass correct incentives controller if needed\\n                    reserveData.aTokenAddress,\\n                    string(\\n                        abi.encodePacked(\\n                            \\\"Wrapped \\\",\\n                            IERC20Metadata(reserveData.aTokenAddress).name()\\n                        )\\n                    ),\\n                    string(\\n                        abi.encodePacked(\\n                            \\\"w\\\",\\n                            IERC20Metadata(reserveData.aTokenAddress).symbol()\\n                        )\\n                    )\\n                );\\n                address staticATokenAddr = address(staticAToken);\\n                _underlyingToStaticAToken[underlyings[i]] = staticATokenAddr;\\n                staticATokens[i] = staticATokenAddr;\\n                _staticATokens.push(staticATokenAddr);\\n                emit StaticTokenCreated(staticATokenAddr, underlyings[i]);\\n            } else {\\n                staticATokens[i] = cachedStaticAToken;\\n            }\\n        }\\n        return staticATokens;\\n    }\\n\\n    ///@inheritdoc IStaticATokenFactory\\n    function getStaticATokens() external view returns (address[] memory) {\\n        return _staticATokens;\\n    }\\n\\n    ///@inheritdoc IStaticATokenFactory\\n    function getStaticAToken(\\n        address underlying\\n    ) external view returns (address) {\\n        return _underlyingToStaticAToken[underlying];\\n    }\\n}\\n\",\"keccak256\":\"0xe52d313c2c2df243fb58ab5b528cb52a4d825ac731a33f2fd08d3be7a44799ad\",\"license\":\"MIT\"},\"contracts/vaults/atoken_wrapper/StaticATokenLM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n// --- DLend fork imports ---\\nimport {IPool} from \\\"contracts/lending/core/interfaces/IPool.sol\\\";\\nimport {DataTypes} from \\\"contracts/lending/core/protocol/libraries/types/DataTypes.sol\\\";\\nimport {ReserveConfiguration} from \\\"contracts/lending/core/protocol/libraries/configuration/ReserveConfiguration.sol\\\";\\nimport {IScaledBalanceToken} from \\\"contracts/lending/core/interfaces/IScaledBalanceToken.sol\\\";\\nimport {IRewardsController} from \\\"contracts/lending/periphery/rewards/interfaces/IRewardsController.sol\\\";\\nimport {WadRayMath} from \\\"contracts/lending/core/protocol/libraries/math/WadRayMath.sol\\\";\\nimport {MathUtils} from \\\"contracts/lending/core/protocol/libraries/math/MathUtils.sol\\\";\\nimport {SafeCast} from \\\"contracts/lending/core/dependencies/openzeppelin/contracts/SafeCast.sol\\\";\\nimport {Initializable} from \\\"contracts/lending/core/dependencies/openzeppelin/upgradeability/Initializable.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts-5/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts-5/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts-5/token/ERC20/IERC20.sol\\\";\\nimport {IERC20WithPermit} from \\\"contracts/lending/core/interfaces/IERC20WithPermit.sol\\\";\\n// --- Local imports ---\\nimport {IStaticATokenLM} from \\\"./interfaces/IStaticATokenLM.sol\\\";\\nimport {IAToken} from \\\"./interfaces/IAToken.sol\\\";\\nimport {ERC20} from \\\"./ERC20.sol\\\";\\nimport {StaticATokenErrors} from \\\"./StaticATokenErrors.sol\\\";\\nimport {RayMathExplicitRounding, Rounding} from \\\"./RayMathExplicitRounding.sol\\\";\\nimport {IERC4626} from \\\"./interfaces/IERC4626.sol\\\";\\nimport {ECDSA} from \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @title StaticATokenLM\\n * @notice Wrapper smart contract that allows to deposit tokens on the Aave protocol and receive\\n * a token which balance doesn't increase automatically, but uses an ever-increasing exchange rate.\\n * It supports claiming liquidity mining rewards from the Aave system.\\n * @author BGD labs\\n */\\ncontract StaticATokenLM is ERC20, IStaticATokenLM, IERC4626 {\\n    using SafeERC20 for IERC20;\\n    using SafeCast for uint256;\\n    using WadRayMath for uint256;\\n    using RayMathExplicitRounding for uint256;\\n\\n    bytes32 public constant METADEPOSIT_TYPEHASH =\\n        keccak256(\\n            \\\"Deposit(address depositor,address receiver,uint256 assets,uint16 referralCode,bool depositToAave,uint256 nonce,uint256 deadline,PermitParams permit)\\\"\\n        );\\n    bytes32 public constant METAWITHDRAWAL_TYPEHASH =\\n        keccak256(\\n            \\\"Withdraw(address owner,address receiver,uint256 shares,uint256 assets,bool withdrawFromAave,uint256 nonce,uint256 deadline)\\\"\\n        );\\n\\n    uint256 public constant STATIC__ATOKEN_LM_REVISION = 2;\\n\\n    IPool public immutable POOL;\\n    IRewardsController public immutable REWARDS_CONTROLLER;\\n\\n    IERC20 internal _aToken;\\n    address internal _aTokenUnderlying;\\n    address[] internal _rewardTokens;\\n    mapping(address => RewardIndexCache) internal _startIndex;\\n    mapping(address => mapping(address => UserRewardsData))\\n        internal _userRewardsData;\\n\\n    constructor(\\n        IPool pool,\\n        IRewardsController rewardsController,\\n        address newAToken,\\n        string memory staticATokenName,\\n        string memory staticATokenSymbol\\n    )\\n        ERC20(\\n            staticATokenName,\\n            staticATokenSymbol,\\n            IERC20Metadata(newAToken).decimals()\\n        )\\n    {\\n        POOL = pool;\\n        REWARDS_CONTROLLER = rewardsController;\\n        _aToken = IERC20(newAToken);\\n        _aTokenUnderlying = IAToken(newAToken).UNDERLYING_ASSET_ADDRESS();\\n        // Use standard approve for trusted protocol token (aToken underlying) and trusted protocol contract (dLEND POOL)\\n        IERC20(_aTokenUnderlying).approve(address(POOL), type(uint256).max);\\n        if (address(REWARDS_CONTROLLER) != address(0)) {\\n            refreshRewardTokens();\\n        }\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function refreshRewardTokens() public override {\\n        address[] memory rewards = REWARDS_CONTROLLER.getRewardsByAsset(\\n            address(_aToken)\\n        );\\n        for (uint256 i = 0; i < rewards.length; i++) {\\n            _registerRewardToken(rewards[i]);\\n        }\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function isRegisteredRewardToken(\\n        address reward\\n    ) public view override returns (bool) {\\n        return _startIndex[reward].isRegistered;\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function metaDeposit(\\n        address depositor,\\n        address receiver,\\n        uint256 assets,\\n        uint16 referralCode,\\n        bool depositToAave,\\n        uint256 deadline,\\n        PermitParams calldata permit,\\n        SignatureParams calldata sigParams\\n    ) external returns (uint256) {\\n        require(depositor != address(0), StaticATokenErrors.INVALID_DEPOSITOR);\\n        //solium-disable-next-line\\n        require(\\n            deadline >= block.timestamp,\\n            StaticATokenErrors.INVALID_EXPIRATION\\n        );\\n        uint256 nonce = nonces[depositor];\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            METADEPOSIT_TYPEHASH,\\n                            depositor,\\n                            receiver,\\n                            assets,\\n                            referralCode,\\n                            depositToAave,\\n                            nonce,\\n                            deadline,\\n                            permit\\n                        )\\n                    )\\n                )\\n            );\\n            nonces[depositor] = nonce + 1;\\n            require(\\n                depositor ==\\n                    ECDSA.recover(\\n                        digest,\\n                        sigParams.v,\\n                        sigParams.r,\\n                        sigParams.s\\n                    ),\\n                StaticATokenErrors.INVALID_SIGNATURE\\n            );\\n        }\\n        // assume if deadline 0 no permit was supplied\\n        if (permit.deadline != 0) {\\n            try\\n                IERC20WithPermit(\\n                    depositToAave\\n                        ? address(_aTokenUnderlying)\\n                        : address(_aToken)\\n                ).permit(\\n                        depositor,\\n                        address(this),\\n                        permit.value,\\n                        permit.deadline,\\n                        permit.v,\\n                        permit.r,\\n                        permit.s\\n                    )\\n            {} catch {}\\n        }\\n        (uint256 shares, ) = _deposit(\\n            depositor,\\n            receiver,\\n            0,\\n            assets,\\n            referralCode,\\n            depositToAave\\n        );\\n        return shares;\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function metaWithdraw(\\n        address owner,\\n        address receiver,\\n        uint256 shares,\\n        uint256 assets,\\n        bool withdrawFromAave,\\n        uint256 deadline,\\n        SignatureParams calldata sigParams\\n    ) external returns (uint256, uint256) {\\n        require(owner != address(0), StaticATokenErrors.INVALID_OWNER);\\n        //solium-disable-next-line\\n        require(\\n            deadline >= block.timestamp,\\n            StaticATokenErrors.INVALID_EXPIRATION\\n        );\\n        uint256 nonce = nonces[owner];\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            bytes32 digest = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            METAWITHDRAWAL_TYPEHASH,\\n                            owner,\\n                            receiver,\\n                            shares,\\n                            assets,\\n                            withdrawFromAave,\\n                            nonce,\\n                            deadline\\n                        )\\n                    )\\n                )\\n            );\\n            nonces[owner] = nonce + 1;\\n            require(\\n                owner ==\\n                    ECDSA.recover(\\n                        digest,\\n                        sigParams.v,\\n                        sigParams.r,\\n                        sigParams.s\\n                    ),\\n                StaticATokenErrors.INVALID_SIGNATURE\\n            );\\n        }\\n        return _withdraw(owner, receiver, shares, assets, withdrawFromAave);\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function previewRedeem(\\n        uint256 shares\\n    ) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Rounding.DOWN);\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Rounding.UP);\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function previewWithdraw(\\n        uint256 assets\\n    ) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Rounding.UP);\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function previewDeposit(\\n        uint256 assets\\n    ) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Rounding.DOWN);\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function rate() public view returns (uint256) {\\n        return POOL.getReserveNormalizedIncome(_aTokenUnderlying);\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function collectAndUpdateRewards(address reward) public returns (uint256) {\\n        if (reward == address(0)) {\\n            return 0;\\n        }\\n\\n        address[] memory assets = new address[](1);\\n        assets[0] = address(_aToken);\\n\\n        return\\n            REWARDS_CONTROLLER.claimRewards(\\n                assets,\\n                type(uint256).max,\\n                address(this),\\n                reward\\n            );\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function claimRewardsOnBehalf(\\n        address onBehalfOf,\\n        address receiver,\\n        address[] memory rewards\\n    ) external {\\n        require(\\n            msg.sender == onBehalfOf ||\\n                msg.sender == REWARDS_CONTROLLER.getClaimer(onBehalfOf),\\n            StaticATokenErrors.INVALID_CLAIMER\\n        );\\n        _claimRewardsOnBehalf(onBehalfOf, receiver, rewards);\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function claimRewards(address receiver, address[] memory rewards) external {\\n        _claimRewardsOnBehalf(msg.sender, receiver, rewards);\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function claimRewardsToSelf(address[] memory rewards) external {\\n        _claimRewardsOnBehalf(msg.sender, msg.sender, rewards);\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function getCurrentRewardsIndex(\\n        address reward\\n    ) public view returns (uint256) {\\n        if (address(reward) == address(0)) {\\n            return 0;\\n        }\\n        (, uint256 nextIndex) = REWARDS_CONTROLLER.getAssetIndex(\\n            address(_aToken),\\n            reward\\n        );\\n        return nextIndex;\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function getTotalClaimableRewards(\\n        address reward\\n    ) external view returns (uint256) {\\n        if (reward == address(0)) {\\n            return 0;\\n        }\\n\\n        address[] memory assets = new address[](1);\\n        assets[0] = address(_aToken);\\n        uint256 freshRewards = REWARDS_CONTROLLER.getUserRewards(\\n            assets,\\n            address(this),\\n            reward\\n        );\\n        return IERC20(reward).balanceOf(address(this)) + freshRewards;\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function getClaimableRewards(\\n        address user,\\n        address reward\\n    ) external view returns (uint256) {\\n        return\\n            _getClaimableRewards(\\n                user,\\n                reward,\\n                balanceOf[user],\\n                getCurrentRewardsIndex(reward)\\n            );\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function getUnclaimedRewards(\\n        address user,\\n        address reward\\n    ) external view returns (uint256) {\\n        return _userRewardsData[user][reward].unclaimedRewards;\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function asset() external view returns (address) {\\n        return address(_aTokenUnderlying);\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function aToken() external view returns (IERC20) {\\n        return _aToken;\\n    }\\n\\n    ///@inheritdoc IStaticATokenLM\\n    function rewardTokens() external view returns (address[] memory) {\\n        return _rewardTokens;\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function totalAssets() external view returns (uint256) {\\n        return _aToken.balanceOf(address(this));\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function convertToShares(uint256 assets) external view returns (uint256) {\\n        return _convertToShares(assets, Rounding.DOWN);\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function convertToAssets(uint256 shares) external view returns (uint256) {\\n        return _convertToAssets(shares, Rounding.DOWN);\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function maxMint(address) public view virtual returns (uint256) {\\n        uint256 assets = maxDeposit(address(0));\\n        if (assets == type(uint256).max) return type(uint256).max;\\n        return _convertToShares(assets, Rounding.DOWN);\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        uint256 shares = maxRedeem(owner);\\n        return _convertToAssets(shares, Rounding.DOWN);\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        address cachedATokenUnderlying = _aTokenUnderlying;\\n        DataTypes.ReserveData memory reserveData = POOL.getReserveData(\\n            cachedATokenUnderlying\\n        );\\n\\n        // if paused or inactive users cannot withdraw underlying\\n        if (\\n            !ReserveConfiguration.getActive(reserveData.configuration) ||\\n            ReserveConfiguration.getPaused(reserveData.configuration)\\n        ) {\\n            return 0;\\n        }\\n\\n        // otherwise users can withdraw up to the available amount\\n        uint256 underlyingTokenBalanceInShares = _convertToShares(\\n            IERC20(cachedATokenUnderlying).balanceOf(reserveData.aTokenAddress),\\n            Rounding.DOWN\\n        );\\n        uint256 cachedUserBalance = balanceOf[owner];\\n        return\\n            underlyingTokenBalanceInShares >= cachedUserBalance\\n                ? cachedUserBalance\\n                : underlyingTokenBalanceInShares;\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        DataTypes.ReserveData memory reserveData = POOL.getReserveData(\\n            _aTokenUnderlying\\n        );\\n\\n        // if inactive, paused or frozen users cannot deposit underlying\\n        if (\\n            !ReserveConfiguration.getActive(reserveData.configuration) ||\\n            ReserveConfiguration.getPaused(reserveData.configuration) ||\\n            ReserveConfiguration.getFrozen(reserveData.configuration)\\n        ) {\\n            return 0;\\n        }\\n\\n        uint256 supplyCap = ReserveConfiguration.getSupplyCap(\\n            reserveData.configuration\\n        ) * (10 ** ReserveConfiguration.getDecimals(reserveData.configuration));\\n        // if no supply cap deposit is unlimited\\n        if (supplyCap == 0) return type(uint256).max;\\n        // return remaining supply cap margin\\n        uint256 currentSupply = (IAToken(reserveData.aTokenAddress)\\n            .scaledTotalSupply() + reserveData.accruedToTreasury).rayMulRoundUp(\\n                _getNormalizedIncome(reserveData)\\n            );\\n        return currentSupply > supplyCap ? 0 : supplyCap - currentSupply;\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    ) external virtual returns (uint256) {\\n        (uint256 shares, ) = _deposit(msg.sender, receiver, 0, assets, 0, true);\\n        return shares;\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function mint(\\n        uint256 shares,\\n        address receiver\\n    ) external virtual returns (uint256) {\\n        (, uint256 assets) = _deposit(msg.sender, receiver, shares, 0, 0, true);\\n\\n        return assets;\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external virtual returns (uint256) {\\n        (uint256 shares, ) = _withdraw(owner, receiver, 0, assets, true);\\n\\n        return shares;\\n    }\\n\\n    ///@inheritdoc IERC4626\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external virtual returns (uint256) {\\n        (, uint256 assets) = _withdraw(owner, receiver, shares, 0, true);\\n\\n        return assets;\\n    }\\n\\n    /// @notice Deposit aTokens and mint static tokens to receiver\\n    function depositATokens(\\n        uint256 aTokenAmount,\\n        address receiver\\n    ) external override returns (uint256) {\\n        require(aTokenAmount > 0, StaticATokenErrors.INVALID_ZERO_AMOUNT);\\n        // allow compensation for rebase during tx\\n        uint256 userBalance = _aToken.balanceOf(msg.sender);\\n        uint256 amount = aTokenAmount > userBalance\\n            ? userBalance\\n            : aTokenAmount;\\n        // determine shares to mint\\n        uint256 shares = previewDeposit(amount);\\n        require(shares != 0, StaticATokenErrors.INVALID_ZERO_AMOUNT);\\n        // transfer aTokens in\\n        _aToken.safeTransferFrom(msg.sender, address(this), amount);\\n        // mint static tokens\\n        _mint(receiver, shares);\\n        emit Deposit(msg.sender, receiver, amount, shares);\\n        return shares;\\n    }\\n\\n    /// @notice Burn static tokens and return aTokens to receiver\\n    function redeemATokens(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external override returns (uint256) {\\n        require(shares > 0, StaticATokenErrors.INVALID_ZERO_AMOUNT);\\n        // determine assets to return\\n        uint256 assets = previewRedeem(shares);\\n        require(assets != 0, StaticATokenErrors.INVALID_ZERO_AMOUNT);\\n        // handle allowance if not owner\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender];\\n            if (allowed != type(uint256).max) {\\n                allowance[owner][msg.sender] = allowed - shares;\\n            }\\n        }\\n        // burn static tokens\\n        _burn(owner, shares);\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n        // transfer aTokens out\\n        _aToken.safeTransfer(receiver, assets);\\n        return assets;\\n    }\\n\\n    function _deposit(\\n        address depositor,\\n        address receiver,\\n        uint256 _shares,\\n        uint256 _assets,\\n        uint16 referralCode,\\n        bool depositToAave\\n    ) internal returns (uint256, uint256) {\\n        require(receiver != address(0), StaticATokenErrors.INVALID_RECIPIENT);\\n        require(\\n            _shares == 0 || _assets == 0,\\n            StaticATokenErrors.ONLY_ONE_AMOUNT_FORMAT_ALLOWED\\n        );\\n\\n        uint256 assets = _assets;\\n        uint256 shares = _shares;\\n        if (shares > 0) {\\n            if (depositToAave) {\\n                require(\\n                    shares <= maxMint(receiver),\\n                    \\\"ERC4626: mint more than max\\\"\\n                );\\n            }\\n            assets = previewMint(shares);\\n        } else {\\n            if (depositToAave) {\\n                require(\\n                    assets <= maxDeposit(receiver),\\n                    \\\"ERC4626: deposit more than max\\\"\\n                );\\n            }\\n            shares = previewDeposit(assets);\\n        }\\n        require(shares != 0, StaticATokenErrors.INVALID_ZERO_AMOUNT);\\n\\n        if (depositToAave) {\\n            address cachedATokenUnderlying = _aTokenUnderlying;\\n            SafeERC20.safeTransferFrom(\\n                IERC20(cachedATokenUnderlying),\\n                depositor,\\n                address(this),\\n                assets\\n            );\\n            POOL.deposit(\\n                cachedATokenUnderlying,\\n                assets,\\n                address(this),\\n                referralCode\\n            );\\n        } else {\\n            _aToken.safeTransferFrom(depositor, address(this), assets);\\n        }\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(depositor, receiver, assets, shares);\\n\\n        return (shares, assets);\\n    }\\n\\n    function _withdraw(\\n        address owner,\\n        address receiver,\\n        uint256 _shares,\\n        uint256 _assets,\\n        bool withdrawFromAave\\n    ) internal returns (uint256, uint256) {\\n        require(receiver != address(0), StaticATokenErrors.INVALID_RECIPIENT);\\n        require(\\n            _shares == 0 || _assets == 0,\\n            StaticATokenErrors.ONLY_ONE_AMOUNT_FORMAT_ALLOWED\\n        );\\n        require(_shares != _assets, StaticATokenErrors.INVALID_ZERO_AMOUNT);\\n\\n        uint256 assets = _assets;\\n        uint256 shares = _shares;\\n\\n        if (shares > 0) {\\n            if (withdrawFromAave) {\\n                require(\\n                    shares <= maxRedeem(owner),\\n                    \\\"ERC4626: redeem more than max\\\"\\n                );\\n            }\\n            assets = previewRedeem(shares);\\n        } else {\\n            if (withdrawFromAave) {\\n                require(\\n                    assets <= maxWithdraw(owner),\\n                    \\\"ERC4626: withdraw more than max\\\"\\n                );\\n            }\\n            shares = previewWithdraw(assets);\\n        }\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max)\\n                allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        if (withdrawFromAave) {\\n            POOL.withdraw(_aTokenUnderlying, assets, receiver);\\n        } else {\\n            _aToken.safeTransfer(receiver, assets);\\n        }\\n\\n        return (shares, assets);\\n    }\\n\\n    /**\\n     * @notice Updates rewards for senders and receiver in a transfer (not updating rewards for address(0))\\n     * @param from The address of the sender of tokens\\n     * @param to The address of the receiver of tokens\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256\\n    ) internal override {\\n        for (uint256 i = 0; i < _rewardTokens.length; i++) {\\n            address rewardToken = address(_rewardTokens[i]);\\n            uint256 rewardsIndex = getCurrentRewardsIndex(rewardToken);\\n            if (from != address(0)) {\\n                _updateUser(from, rewardsIndex, rewardToken);\\n            }\\n            if (to != address(0) && from != to) {\\n                _updateUser(to, rewardsIndex, rewardToken);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Adding the pending rewards to the unclaimed for specific user and updating user index\\n     * @param user The address of the user to update\\n     * @param currentRewardsIndex The current rewardIndex\\n     * @param rewardToken The address of the reward token\\n     */\\n    function _updateUser(\\n        address user,\\n        uint256 currentRewardsIndex,\\n        address rewardToken\\n    ) internal {\\n        uint256 balance = balanceOf[user];\\n        if (balance > 0) {\\n            _userRewardsData[user][rewardToken]\\n                .unclaimedRewards = _getClaimableRewards(\\n                user,\\n                rewardToken,\\n                balance,\\n                currentRewardsIndex\\n            ).toUint128();\\n        }\\n        _userRewardsData[user][rewardToken]\\n            .rewardsIndexOnLastInteraction = currentRewardsIndex.toUint128();\\n    }\\n\\n    /**\\n     * @notice Compute the pending in WAD. Pending is the amount to add (not yet unclaimed) rewards in WAD.\\n     * @param balance The balance of the user\\n     * @param rewardsIndexOnLastInteraction The index which was on the last interaction of the user\\n     * @param currentRewardsIndex The current rewards index in the system\\n     * @param assetUnit One unit of asset (10**decimals)\\n     * @return The amount of pending rewards in WAD\\n     */\\n    function _getPendingRewards(\\n        uint256 balance,\\n        uint256 rewardsIndexOnLastInteraction,\\n        uint256 currentRewardsIndex,\\n        uint256 assetUnit\\n    ) internal pure returns (uint256) {\\n        if (balance == 0) {\\n            return 0;\\n        }\\n        return\\n            (balance * (currentRewardsIndex - rewardsIndexOnLastInteraction)) /\\n            assetUnit;\\n    }\\n\\n    /**\\n     * @notice Compute the claimable rewards for a user\\n     * @param user The address of the user\\n     * @param reward The address of the reward\\n     * @param balance The balance of the user in WAD\\n     * @param currentRewardsIndex The current rewards index\\n     * @return The total rewards that can be claimed by the user (if `fresh` flag true, after updating rewards)\\n     */\\n    function _getClaimableRewards(\\n        address user,\\n        address reward,\\n        uint256 balance,\\n        uint256 currentRewardsIndex\\n    ) internal view returns (uint256) {\\n        RewardIndexCache memory rewardsIndexCache = _startIndex[reward];\\n        require(\\n            rewardsIndexCache.isRegistered == true,\\n            StaticATokenErrors.REWARD_NOT_INITIALIZED\\n        );\\n        UserRewardsData memory currentUserRewardsData = _userRewardsData[user][\\n            reward\\n        ];\\n        uint256 assetUnit = 10 ** decimals;\\n        return\\n            currentUserRewardsData.unclaimedRewards +\\n            _getPendingRewards(\\n                balance,\\n                currentUserRewardsData.rewardsIndexOnLastInteraction == 0\\n                    ? rewardsIndexCache.lastUpdatedIndex\\n                    : currentUserRewardsData.rewardsIndexOnLastInteraction,\\n                currentRewardsIndex,\\n                assetUnit\\n            );\\n    }\\n\\n    /**\\n     * @notice Claim rewards on behalf of a user and send them to a receiver\\n     * @param onBehalfOf The address to claim on behalf of\\n     * @param rewards The addresses of the rewards\\n     * @param receiver The address to receive the rewards\\n     */\\n    function _claimRewardsOnBehalf(\\n        address onBehalfOf,\\n        address receiver,\\n        address[] memory rewards\\n    ) internal {\\n        for (uint256 i = 0; i < rewards.length; i++) {\\n            if (address(rewards[i]) == address(0)) {\\n                continue;\\n            }\\n            uint256 currentRewardsIndex = getCurrentRewardsIndex(rewards[i]);\\n            uint256 balance = balanceOf[onBehalfOf];\\n            uint256 userReward = _getClaimableRewards(\\n                onBehalfOf,\\n                rewards[i],\\n                balance,\\n                currentRewardsIndex\\n            );\\n            uint256 totalRewardTokenBalance = IERC20(rewards[i]).balanceOf(\\n                address(this)\\n            );\\n            uint256 unclaimedReward = 0;\\n\\n            if (userReward > totalRewardTokenBalance) {\\n                totalRewardTokenBalance += collectAndUpdateRewards(\\n                    address(rewards[i])\\n                );\\n            }\\n\\n            if (userReward > totalRewardTokenBalance) {\\n                unclaimedReward = userReward - totalRewardTokenBalance;\\n                userReward = totalRewardTokenBalance;\\n            }\\n            if (userReward > 0) {\\n                _userRewardsData[onBehalfOf][rewards[i]]\\n                    .unclaimedRewards = unclaimedReward.toUint128();\\n                _userRewardsData[onBehalfOf][rewards[i]]\\n                    .rewardsIndexOnLastInteraction = currentRewardsIndex\\n                    .toUint128();\\n                IERC20(rewards[i]).safeTransfer(receiver, userReward);\\n            }\\n        }\\n    }\\n\\n    function _convertToShares(\\n        uint256 assets,\\n        Rounding rounding\\n    ) internal view returns (uint256) {\\n        if (rounding == Rounding.UP) return assets.rayDivRoundUp(rate());\\n        return assets.rayDivRoundDown(rate());\\n    }\\n\\n    function _convertToAssets(\\n        uint256 shares,\\n        Rounding rounding\\n    ) internal view returns (uint256) {\\n        if (rounding == Rounding.UP) return shares.rayMulRoundUp(rate());\\n        return shares.rayMulRoundDown(rate());\\n    }\\n\\n    /**\\n     * @notice Initializes a new rewardToken\\n     * @param reward The reward token to be registered\\n     */\\n    function _registerRewardToken(address reward) internal {\\n        if (isRegisteredRewardToken(reward)) return;\\n        uint256 startIndex = getCurrentRewardsIndex(reward);\\n\\n        _rewardTokens.push(reward);\\n        _startIndex[reward] = RewardIndexCache(true, uint240(startIndex));\\n\\n        emit RewardTokenRegistered(reward, startIndex);\\n    }\\n\\n    /**\\n     * @notice Returns the ongoing normalized income for the reserve.\\n     * @dev A value of 1e27 means there is no income. As time passes, the income is accrued\\n     * @dev A value of 2*1e27 means for each unit of asset one unit of income has been accrued\\n     * @param reserve The reserve object\\n     * @return The normalized income, expressed in ray\\n     */\\n    function _getNormalizedIncome(\\n        DataTypes.ReserveData memory reserve\\n    ) internal view returns (uint256) {\\n        uint40 timestamp = reserve.lastUpdateTimestamp;\\n\\n        //solium-disable-next-line\\n        if (timestamp == block.timestamp) {\\n            //if the index was updated in the same block, no need to perform any calculation\\n            return reserve.liquidityIndex;\\n        } else {\\n            return\\n                MathUtils\\n                    .calculateLinearInterest(\\n                        reserve.currentLiquidityRate,\\n                        timestamp\\n                    )\\n                    .rayMul(reserve.liquidityIndex);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x337b0dbfe7682575470f00918f2439f51692ad3a852a6d34154a6fefad87c6e3\",\"license\":\"MIT\"},\"contracts/vaults/atoken_wrapper/interfaces/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.20;\\n\\nimport {IRewardsController} from \\\"../../../lending/periphery/rewards/interfaces/IRewardsController.sol\\\";\\n\\ninterface IAToken {\\n    function POOL() external view returns (address);\\n\\n    function getIncentivesController() external view returns (address);\\n\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n\\n    /**\\n     * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\\n     * @return The scaled total supply\\n     */\\n    function scaledTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x64c04b9f2c8f117ec1809a772f511534d1041b44ac50ff73e99b9f8c68765945\",\"license\":\"agpl-3.0\"},\"contracts/vaults/atoken_wrapper/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 {\\n    event Deposit(\\n        address indexed sender,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\\"managed\\\" by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\\"per-user\\\" price-per-share, and instead should reflect the\\n     * \\\"average-user's\\\" price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(\\n        uint256 assets\\n    ) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert unless due to integer overflow caused by an unreasonably large input.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\\"per-user\\\" price-per-share, and instead should reflect the\\n     * \\\"average-user's\\\" price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(\\n        uint256 shares\\n    ) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     * While deposit of aToken is not affected by aave pool configrations, deposit of the aTokenUnderlying will need to deposit to aave\\n     * so it is affected by current aave pool configuration.\\n     * Reference: https://github.com/aave/aave-v3-core/blob/29ff9b9f89af7cd8255231bc5faf26c3ce0fb7ce/contracts/protocol/libraries/logic/ValidationLogic.sol#L57\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert unless due to integer overflow caused by an unreasonably large input.\\n     */\\n    function maxDeposit(\\n        address receiver\\n    ) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(\\n        uint256 assets\\n    ) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault's underlying asset token.\\n     */\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(\\n        address receiver\\n    ) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault's underlying asset token.\\n     */\\n    function mint(\\n        uint256 shares,\\n        address receiver\\n    ) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(\\n        address owner\\n    ) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(\\n        uint256 assets\\n    ) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call to the aToken underlying.\\n     * While redeem of aToken is not affected by aave pool configrations, redeeming of the aTokenUnderlying will need to redeem from aave\\n     * so it is affected by current aave pool configuration.\\n     * Reference: https://github.com/aave/aave-v3-core/blob/29ff9b9f89af7cd8255231bc5faf26c3ce0fb7ce/contracts/protocol/libraries/logic/ValidationLogic.sol#L87\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(\\n        uint256 shares\\n    ) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x1af9f7ac27f7ce3564faa580355ec9afde77b22e32fef3cb18ca813e67f1b5a4\",\"license\":\"MIT\"},\"contracts/vaults/atoken_wrapper/interfaces/IStaticATokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.20;\\n\\nimport {IPool, DataTypes} from \\\"contracts/lending/core/interfaces/IPool.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts-5/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n// ITransparentProxyFactory is missing, add to missing list\\n// import {ITransparentProxyFactory} from \\\"contracts/lending/core/interfaces/ITransparentProxyFactory.sol\\\";\\n// Ownable is not used in the interface, can be omitted\\n\\ninterface IStaticATokenFactory {\\n    /**\\n     * @notice Creates new staticATokens\\n     * @param underlyings the addresses of the underlyings to create.\\n     * @return address[] addresses of the new staticATokens.\\n     */\\n    function createStaticATokens(\\n        address[] memory underlyings\\n    ) external returns (address[] memory);\\n\\n    /**\\n     * @notice Returns all tokens deployed via this registry.\\n     * @return address[] list of tokens\\n     */\\n    function getStaticATokens() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the staticAToken for a given underlying.\\n     * @param underlying the address of the underlying.\\n     * @return address the staticAToken address.\\n     */\\n    function getStaticAToken(\\n        address underlying\\n    ) external view returns (address);\\n}\\n\",\"keccak256\":\"0x73e47dd0b397316a998fa068a49f76bcc38c1f4c5a6a55163f66202bc69b8aa4\",\"license\":\"agpl-3.0\"},\"contracts/vaults/atoken_wrapper/interfaces/IStaticATokenLM.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-5/token/ERC20/IERC20.sol\\\";\\nimport {IPool} from \\\"contracts/lending/core/interfaces/IPool.sol\\\";\\nimport {IRewardsController} from \\\"contracts/lending/periphery/rewards/interfaces/IRewardsController.sol\\\";\\n\\ninterface IStaticATokenLM {\\n    struct SignatureParams {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct PermitParams {\\n        address owner;\\n        address spender;\\n        uint256 value;\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct UserRewardsData {\\n        uint128 rewardsIndexOnLastInteraction; // (in RAYs)\\n        uint128 unclaimedRewards; // (in RAYs)\\n    }\\n\\n    struct RewardIndexCache {\\n        bool isRegistered;\\n        uint248 lastUpdatedIndex;\\n    }\\n\\n    event RewardTokenRegistered(address indexed reward, uint256 startIndex);\\n\\n    /**\\n     * @notice Allows to deposit on Aave via meta-transaction\\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n     * @param depositor Address from which the funds to deposit are going to be pulled\\n     * @param receiver Address that will receive the staticATokens, in the average case, same as the `depositor`\\n     * @param assets The amount to deposit\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param depositToAave bool\\n     * - `true` if the msg.sender comes with underlying tokens (e.g. USDC)\\n     * - `false` if the msg.sender comes already with aTokens (e.g. aUSDC)\\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n     * @param sigParams Signature params: v,r,s\\n     * @return uint256 The amount of StaticAToken minted, static balance\\n     */\\n    function metaDeposit(\\n        address depositor,\\n        address receiver,\\n        uint256 assets,\\n        uint16 referralCode,\\n        bool depositToAave,\\n        uint256 deadline,\\n        PermitParams calldata permit,\\n        SignatureParams calldata sigParams\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows to withdraw from Aave via meta-transaction\\n     * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n     * @param owner Address owning the staticATokens\\n     * @param receiver Address that will receive the underlying withdrawn from Aave\\n     * @param shares The amount of staticAToken to withdraw. If > 0, `assets` needs to be 0\\n     * @param assets The amount of underlying/aToken to withdraw. If > 0, `shares` needs to be 0\\n     * @param withdrawFromAave bool\\n     * - `true` for the receiver to get underlying tokens (e.g. USDC)\\n     * - `false` for the receiver to get aTokens (e.g. aUSDC)\\n     * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n     * @param sigParams Signature params: v,r,s\\n     * @return amountToBurn: StaticATokens burnt, static balance\\n     * @return amountToWithdraw: underlying/aToken send to `receiver`, dynamic balance\\n     */\\n    function metaWithdraw(\\n        address owner,\\n        address receiver,\\n        uint256 shares,\\n        uint256 assets,\\n        bool withdrawFromAave,\\n        uint256 deadline,\\n        SignatureParams calldata sigParams\\n    ) external returns (uint256, uint256);\\n\\n    /**\\n     * @notice Returns the Aave liquidity index of the underlying aToken, denominated rate here\\n     * as it can be considered as an ever-increasing exchange rate\\n     * @return The liquidity index\\n     **/\\n    function rate() external view returns (uint256);\\n\\n    /**\\n     * @notice Claims rewards from `INCENTIVES_CONTROLLER` and updates internal accounting of rewards.\\n     * @param reward The reward to claim\\n     * @return uint256 Amount collected\\n     */\\n    function collectAndUpdateRewards(address reward) external returns (uint256);\\n\\n    /**\\n     * @notice Claim rewards on behalf of a user and send them to a receiver\\n     * @dev Only callable by if sender is onBehalfOf or sender is approved claimer\\n     * @param onBehalfOf The address to claim on behalf of\\n     * @param receiver The address to receive the rewards\\n     * @param rewards The rewards to claim\\n     */\\n    function claimRewardsOnBehalf(\\n        address onBehalfOf,\\n        address receiver,\\n        address[] memory rewards\\n    ) external;\\n\\n    /**\\n     * @notice Claim rewards and send them to a receiver\\n     * @param receiver The address to receive the rewards\\n     * @param rewards The rewards to claim\\n     */\\n    function claimRewards(address receiver, address[] memory rewards) external;\\n\\n    /**\\n     * @notice Claim rewards\\n     * @param rewards The rewards to claim\\n     */\\n    function claimRewardsToSelf(address[] memory rewards) external;\\n\\n    /**\\n     * @notice Get the total claimable rewards of the contract.\\n     * @param reward The reward to claim\\n     * @return uint256 The current balance + pending rewards from the `_incentivesController`\\n     */\\n    function getTotalClaimableRewards(\\n        address reward\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the total claimable rewards for a user in WAD\\n     * @param user The address of the user\\n     * @param reward The reward to claim\\n     * @return uint256 The claimable amount of rewards in WAD\\n     */\\n    function getClaimableRewards(\\n        address user,\\n        address reward\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice The unclaimed rewards for a user in WAD\\n     * @param user The address of the user\\n     * @param reward The reward to claim\\n     * @return uint256 The unclaimed amount of rewards in WAD\\n     */\\n    function getUnclaimedRewards(\\n        address user,\\n        address reward\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice The underlying asset reward index in RAY\\n     * @param reward The reward to claim\\n     * @return uint256 The underlying asset reward index in RAY\\n     */\\n    function getCurrentRewardsIndex(\\n        address reward\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice The aToken used inside the 4626 vault.\\n     * @return IERC20 The aToken IERC20.\\n     */\\n    function aToken() external view returns (IERC20);\\n\\n    /**\\n     * @notice The IERC20s that are currently rewarded to addresses of the vault via LM on incentivescontroller.\\n     * @return IERC20 The IERC20s of the rewards.\\n     */\\n    function rewardTokens() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Fetches all rewardTokens from the incentivecontroller and registers the missing ones.\\n     */\\n    function refreshRewardTokens() external;\\n\\n    /**\\n     * @notice Checks if the passed token is a registered reward.\\n     * @return bool signaling if token is a registered reward.\\n     */\\n    function isRegisteredRewardToken(\\n        address reward\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Deposits aTokens and mints static aTokens to the receiver\\n     * @param aTokenAmount The amount of aTokens to deposit\\n     * @param receiver The address that will receive the static aTokens\\n     * @return uint256 The amount of StaticAToken minted, static balance\\n     */\\n    function depositATokens(\\n        uint256 aTokenAmount,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Burns static aTokens and returns aTokens to the receiver\\n     * @param shares The amount of static aTokens to burn\\n     * @param receiver The address that will receive the aTokens\\n     * @param owner The address whose static aTokens will be burned\\n     * @return uint256 The amount of aTokens returned\\n     */\\n    function redeemATokens(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x2c6f6d54e55ea456811e2b3e34176d39ab4d90b705dbe5edc50329804fc98b51\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x60a03461007857601f6154e538819003918201601f19168301916001600160401b0383118484101761007d5780849260209460405283398101031261007857516001600160a01b038116810361007857608052604051615451908161009482396080518181816101a3015281816102fa01526104680152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060405260043610156200001357600080fd5b60e060003560e01c90816356d9be6a14620001d2575080637535d246146200018b5780638129fc1c1462000142578063a09aa4a714620000a55763ed5d0f58146200005d57600080fd5b34620000a0576020366003190112620000a0576004356001600160a01b0381811691829003620000a0576020916000526000825260406000205416604051908152f35b600080fd5b34620000a0576000366003190112620000a057604051806001916001549283825260208092019360016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000905b82821062000123576200011f8662000112818a038262000869565b60405191829182620008bb565b0390f35b84546001600160a01b03168752958601959383019390830190620000f7565b34620000a0576000366003190112620000a05760405162461bcd60e51b815260206004820152600e60248201526d2727afa4a724aa24a0a624ad22a960911b6044820152606490fd5b34620000a0576000366003190112620000a0576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34620000a0576020366003190112620000a0576004359067ffffffffffffffff808311620000a05736602384011215620000a05760249260048101356200021981620008a2565b9162000229604051938462000869565b81835285602084019260051b82010190368211620000a0578601915b81831062000847575050508051916200025e83620008a2565b926200026e604051948562000869565b8084526200027f601f1991620008a2565b0136602085013760005b825181101562000837576001600160a01b03620002a7828562000902565b51166000908152602081905260409020546001600160a01b0316806200082057506001600160a01b03620002dc828562000902565b516040516335ea6a7560e01b8152911660048201526101e0808289817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115620005f3576000916200069d575b506101000180519091506001600160a01b031615620006615780516040516306fdde0360e01b8152916001600160a01b0390911690600083600481855afa908115620005f3576004936000926200063e575b50600090620003ce604051936702bb930b83832b2160c51b602086015284602891620003bd815180926020868601910162000960565b810103600881018652018462000869565b516040516395d89b4160e01b815294859182906001600160a01b03165afa928315620005f35760009362000614575b506200043a60405193607760f81b60208601528460219162000429815180926020868601910162000960565b810103600181018652018462000869565b60405192836149fa810110866149fa86011117620005ff57620004b8620004cf9285946149fa62000a2287397f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166149fa870190815260006020820152604081019190915260a0606082018190520190620009fa565b906149fa8401820360806149fa86010152620009fa565b03906000f08015620005f3576001600160a01b039081169190620004f4828662000902565b511660005260006020526040600020916bffffffffffffffffffffffff60a01b928184825416179055806200052a838862000902565b526001549268010000000000000000841015620005de576001840180600155841015620005c957600160008190527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69094018054909116821790556001600160a01b0362000599838762000902565b5116907f7397831292236fdc8043acf7b9d21183e46fd54f9b06bd34210068f95dd378d6600080a35b0162000289565b88634e487b7160e01b60005260326004526000fd5b88634e487b7160e01b60005260416004526000fd5b6040513d6000823e3d90fd5b89634e487b7160e01b60005260416004526000fd5b620006369193503d806000833e6200062d818362000869565b81019062000985565b9189620003fd565b600091925062000659903d8084833e6200062d818362000869565b919062000387565b60405162461bcd60e51b8152602060048201526015818901527415539111549316525391d7d393d517d31254d51151605a1b6044820152606490fd5b905081813d831162000818575b620006b6818362000869565b810103818112620000a0576040519182019082821086831117620005ff57602013620000a057610200820181811086821117620005ff5760405282518152815262000704602083016200092d565b602082015262000717604083016200092d565b604082015260606200072b8184016200092d565b9082015260806200073e8184016200092d565b9082015260a0620007518184016200092d565b9082015260c0808301519064ffffffffff82168203620000a057820152868201519161ffff83168303620000a057610100928883015282620007958183016200094b565b90830152610120620007a98183016200094b565b90830152610140620007bd8183016200094b565b90830152610160620007d18183016200094b565b90830152610180620007e58183016200092d565b908301526101a0620007f98183016200092d565b908301526200080d6101c08092016200092d565b908201528862000335565b503d620006aa565b9060019162000830828762000902565b52620005c2565b604051806200011f8682620008bb565b82356001600160a01b0381168103620000a05781526020928301920162000245565b90601f8019910116810190811067ffffffffffffffff8211176200088c57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116200088c5760051b60200190565b602090602060408183019282815285518094520193019160005b828110620008e4575050505090565b83516001600160a01b031685529381019392810192600101620008d5565b8051821015620009175760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b51906fffffffffffffffffffffffffffffffff82168203620000a057565b51906001600160a01b0382168203620000a057565b60005b838110620009745750506000910152565b818101518382015260200162000963565b602081830312620000a057805167ffffffffffffffff91828211620000a057019082601f83011215620000a05781519081116200088c5760405192620009d6601f8301601f19166020018562000869565b81845260208284010111620000a057620009f7916020808501910162000960565b90565b9060209162000a158151809281855285808601910162000960565b601f01601f191601019056fe60c080604052346200048757620049fa803803809162000020828562000739565b8339810160a082820312620004875781516001600160a01b038116810362000487576020830151916001600160a01b0383168303620004875762000067604085016200075d565b60608501519094906001600160401b0381116200048757826200008c91830162000772565b60808201519092906001600160401b0381116200048757620000af920162000772565b60405163313ce56760e01b8152916020836004816001600160a01b038a165afa9283156200044557600093620006ee575b508051906001600160401b038211620005e25760005490600182811c92168015620006e3575b6020831014620005c15781601f84931162000680575b50602090601f83116001146200060457600092620005f8575b50508160011b916000199060031b1c1916176000555b8051906001600160401b038211620005e257600154600181811c91168015620005d7575b6020821014620005c157601f811162000568575b50602090601f8311600114620004ea5760ff93929160009183620004de575b50508160011b916000199060031b1c1916176001555b600280549190921660ff1990911617905560805260a052600780546001600160a01b03929092166001600160a01b031992831681179091556040516358b50cef60e11b815290602090829060049082905afa908115620004455760009162000495575b50600880546001600160a01b0392831693168317905560805160405163095ea7b360e01b815291166004820152600019602482015290602090829060449082906000905af18015620004455762000451575b5060a0516001600160a01b031680620002fe575b6040516140159081620009a58239608051818181610f89015281816110e8015281816112de0152818161169b01528181611fc4015281816122ae015281816127a8015281816134b7015261368f015260a051818181610b4b0152818161196201528181611e2b015281816125780152818161269301526128ff0152f35b600060018060a01b0360075416602460405180948193636657732f60e01b835260048301525afa908115620004455760009162000377575b5060005b81518110156200036e57600581901b8201602001516001919062000367906001600160a01b0316620007e8565b016200033a565b50503862000281565b3d8083833e62000388818362000739565b81019060208183031262000441578051906001600160401b0382116200043d57019181601f8401121562000426578251926001600160401b03841162000429578360051b9160405194620003e0602085018762000739565b8552602080860193830101938411620004265750602001905b8282106200040b575050503862000336565b602080916200041a846200075d565b815201910190620003f9565b80fd5b634e487b7160e01b82526041600452602482fd5b8380fd5b8280fd5b6040513d6000823e3d90fd5b6020813d6020116200048c575b816200046d6020938362000739565b81010312620004875751801515036200048757386200026d565b600080fd5b3d91506200045e565b90506020813d602011620004d5575b81620004b36020938362000739565b810103126200048757600091620004cc6020926200075d565b9150916200021b565b3d9150620004a4565b015190503880620001a2565b60016000908152600080516020620049da833981519152929190601f198516905b8181106200054f575091600193918560ff9796941062000535575b505050811b01600155620001b8565b015160001960f88460031b161c1916905538808062000526565b929360206001819287860151815501950193016200050b565b6001600052600080516020620049da833981519152601f840160051c81019160208510620005b6575b601f0160051c01905b818110620005a9575062000183565b600081556001016200059a565b909150819062000591565b634e487b7160e01b600052602260045260246000fd5b90607f16906200016f565b634e487b7160e01b600052604160045260246000fd5b01519050388062000135565b60008080529350600080516020620049ba83398151915291905b601f198416851062000664576001945083601f198116106200064a575b505050811b016000556200014b565b015160001960f88460031b161c191690553880806200063b565b818101518355602094850194600190930192909101906200061e565b60008052909150600080516020620049ba833981519152601f840160051c81019160208510620006d8575b90601f859493920160051c01905b818110620006c857506200011c565b60008155849350600101620006b9565b9091508190620006ab565b91607f169162000106565b6020939193813d60201162000730575b816200070d6020938362000739565b810103126200072c57519060ff821682036200042657509138620000e0565b5080fd5b3d9150620006fe565b601f909101601f19168101906001600160401b03821190821017620005e257604052565b51906001600160a01b03821682036200048757565b919080601f84011215620004875782516001600160401b038111620005e25760209060405192620007ad83601f19601f850116018562000739565b818452828287010111620004875760005b818110620007d457508260009394955001015290565b8581018301518482018401528201620007be565b60018060a01b03811690600090828252600a60205260409060ff82842054166200090257620008179062000908565b916009546801000000000000000081101562000429576001810180600955811015620008ee57600982527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b031916851790558151908183016001600160401b0381118382101762000429578352600182526001600160f01b0384166020808401918252868352600a8152918490209251905160081b60ff191690151560ff161790915590519182527fa8f4dd7e60441ca288d902a295362002a0255a46560b24825821b36716d6fe5b91a2565b634e487b7160e01b82526032600452602482fd5b50505050565b6001600160a01b039081169081156200099d5760a0516007546040805163886fe70b60e01b81529184166004830152602482019490945291839183916044918391165afa91821562000993576000926200096157505090565b90809250813d83116200098b575b6200097b818362000739565b8101031262000487576020015190565b503d6200096f565b513d6000823e3d90fd5b505060009056fe6080604052600436101561001257600080fd5b60003560e01c806301e1d1141461033d57806306fdde031461033857806307a2d13a146102f2578063090edf9a14610333578063095ea7b31461032e5780630a28a4771461032957806318160ddd146103245780632026ffa31461031f57806323b872dd1461031a5780632c4e722e146103155780632f813b0d1461031057806330adf81f1461030b578063313ce567146103065780633644e5151461030157806338d52e0f146102fc578063402d267d146102f75780634cdad506146102f257806360266557146102ed57806360d8fdd8146102e857806363210537146102e35780636e553f65146102de5780636fe0b5a5146102d957806370a08231146102d45780637535d246146102cf5780637ecebe00146102ca57806386894b29146102c55780638d948415146102c05780638daaf5aa146102bb57806394bf804d146102b657806395d89b41146102b1578063a0c1f15e146102ac578063a9059cbb146102a7578063b3d7f6b9146102a2578063b460af941461029d578063ba08765214610298578063bcd1784814610293578063c2b18aa01461028e578063c63d75b614610289578063c6e6f59214610257578063cd086d4514610284578063ce96cb771461027f578063d505accf1461027a578063d905777e14610275578063dd62ed3e14610270578063de9cee981461026b578063e25ec34914610266578063ea9be77c14610261578063ee0fc6d31461025c578063ef8b30f714610257578063f56f4f0f146102525763fa7146101461024d57600080fd5b611ed8565b611e9d565b611926565b611d93565b611d21565b611c0c565b611be5565b611ba0565b611b7e565b6119d4565b611991565b61194c565b611900565b61187a565b611816565b611714565b6115a0565b61157a565b611482565b611459565b6113b2565b611236565b6111fc565b6111c1565b611179565b611117565b6110d2565b611095565b611053565b610efb565b610ec0565b610e99565b610cc3565b6105af565b610c82565b610c59565b610c3e565b610c1d565b610be2565b610ae8565b610acd565b610913565b6108ca565b6107fc565b6107d6565b610747565b61061a565b6104c8565b610352565b600091031261034d57565b600080fd5b3461034d57600036600319011261034d576007546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa80156103d6576020916000916103a9575b50604051908152f35b6103c99150823d84116103cf575b6103c1818361045e565b810190611ef4565b386103a0565b503d6103b7565b611f03565b90600182811c9216801561040b575b60208310146103f557565b634e487b7160e01b600052602260045260246000fd5b91607f16916103ea565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161043e57604052565b610415565b604081019081106001600160401b0382111761043e57604052565b90601f801991011681019081106001600160401b0382111761043e57604052565b6020808252825181830181905290939260005b8281106104b457505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610492565b3461034d576000806003193601126105ac5760405190808054906104eb826103db565b8085529160209160019182811690811561057f5750600114610528575b610524866105188188038261045e565b6040519182918261047f565b0390f35b80809550527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b83851061056c575050505081016020016105188261052438610508565b805486860184015293820193810161054f565b90508695506105249693506020925061051894915060ff191682840152151560051b820101929338610508565b80fd5b3461034d57602036600319011261034d5760206105d56105cd611f97565b6004356139fd565b604051908152f35b6001600160a01b0381160361034d57565b606090600319011261034d576004359060243561060a816105dd565b90604435610617816105dd565b90565b3461034d576105246106c461062e366105ee565b92919061064461063c611f2a565b831515611f47565b61065561064f611f97565b836139fd565b93849261066b610663611f2a565b851515611f47565b60018060a01b039061068781838516948533036106d457612c78565b604080518681526020810192909252918416913391600080516020613f608339815191529190a46007546001600160a01b0316612d45565b612d45565b6040519081529081906020820190565b600086815260056020908152604080832033845290915290205b548260018201610700575b5050612c78565b61070991611f85565b6001600160a01b038216600090815260056020526040902061073f9033905b9060018060a01b0316600052602052604060002090565b5538826106f9565b3461034d57604036600319011261034d57600435610764816105dd565b60243590336000526005602052816107928260406000209060018060a01b0316600052602052604060002090565b556040519182526001600160a01b03169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590602090a3602060405160018152f35b3461034d57602036600319011261034d5760206105d56107f4611f97565b600435613c65565b3461034d57600036600319011261034d576020600354604051908152f35b604051906101e082018281106001600160401b0382111761043e57604052565b6040519061084782610443565b565b6001600160401b03811161043e5760051b60200190565b9080601f8301121561034d57602090823561087a81610849565b93610888604051958661045e565b81855260208086019260051b82010192831161034d57602001905b8282106108b1575050505090565b83809183356108bf816105dd565b8152019101906108a3565b3461034d57604036600319011261034d576004356108e7816105dd565b602435906001600160401b03821161034d5761090a610911923690600401610860565b9033612d94565b005b3461034d57606036600319011261034d57600435610930816105dd565b60243561093c816105dd565b60009160443591906001600160a01b0380821680151591841680151591875b600980548210156109d7578952600080516020613fa08339815191528101546001919086906001600160a01b0316610992816128c7565b916109c7575b86806109bd575b6109ac575b50500161095b565b6109b6918a613b47565b38806109a4565b508585141561099f565b6109d281838b613b47565b610998565b5050600080516020613f80833981519152610a8a88610a7489610a4d8a610a26610a138260018060a01b03166000526005602052604060002090565b3360009081526020919091526040902090565b548560018201610a99575b50506001600160a01b0316600090815260046020526040902090565b610a58848254611f85565b90556001600160a01b0316600090815260046020526040902090565b8054820190556040519081529081906020820190565b0390a360405160018152602090f35b610aa291611f85565b6001600160a01b0382166000908152600560205260409020610ac5903390610728565b558985610a31565b3461034d57600036600319011261034d5760206105d5611f97565b3461034d576000806003193601126105ac57600754610b4791908190610b1e906001600160a01b03165b6001600160a01b031690565b604051636657732f60e01b81526001600160a01b03909116600482015292839081906024820190565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9182156103d6578192610bbe575b50805b8251811015610bba5780610bb4610baf610ba2600194876120c7565b516001600160a01b031690565b612fd3565b01610b86565b5080f35b610bdb9192503d8084833e610bd3818361045e565b81019061201c565b9038610b83565b3461034d57600036600319011261034d5760206040517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98152f35b3461034d57600036600319011261034d57602060ff60025416604051908152f35b3461034d57600036600319011261034d5760206105d56130c4565b3461034d57600036600319011261034d576008546040516001600160a01b039091168152602090f35b3461034d57602036600319011261034d57610c9e6004356105dd565b60206105d561227f565b8015150361034d57565b60609060c319011261034d5760c490565b3461034d5761012036600319011261034d57610e87600435610ce4816105dd565b602435610cf0816105dd565b6044356064359160843593610d0485610ca8565b610e82610d47610e73610b1260a4358960018a610e2c610e388c8b8d610dee610d2c36610cb2565b99888060a01b0384169d8e610d3f612442565b901515611f47565b610d5b610d5261245f565b42831015611f47565b6001600160a01b038416600090815260066020526040902054809a610d7e6130c4565b9960405197889660208801988993909260e09592989796936101008601997f406ef09971b1bfa50a48ce277d3302602d78c94d58a376e8953b590702de7b31875260018060a01b03809216602088015216604086015260608501526080840152151560a083015260c08201520152565b0391610e02601f199384810183528261045e565b519020604051938491602083019687909160429261190160f01b8352600283015260228201520190565b0390810183528261045e565b5190209101610e598860018060a01b03166000526006602052604060002090565b55610e6382612496565b60206040840135930135916132dc565b14610e7c6124a0565b90611f47565b6133c6565b60408051928352602083019190915290f35b3461034d57602036600319011261034d5760206105d5600435610ebb816105dd565b612506565b3461034d57600036600319011261034d5760206040517f2a83c73b9e01ec0a1b95ff05940d809179668cc004230412d7047ffac3846ce78152f35b3461034d57604036600319011261034d57602435600435610f1b826105dd565b6001600160a01b039082821690610f3361063c6132f4565b610f3b613311565b50610f4f610f4761227f565b821115613582565b610f60610f5a611f97565b82613de1565b92610f6c610663611f2a565b6008546001600160a01b031690610f87833033848616613785565b7f000000000000000000000000000000000000000000000000000000000000000016803b1561034d5760405163e8eda9df60e01b81526001600160a01b0392909216600483015260248201839052306044830152600060648301819052908290608490829084905af180156103d65760209561100a92869261103a575b506137dd565b60408051918252602082018490523391600080516020613fc083398151915291819081015b0390a3604051908152f35b8061104761104d9261042b565b80610342565b38611004565b3461034d57602036600319011261034d57600435611070816105dd565b60018060a01b0316600052600a602052602060ff604060002054166040519015158152f35b3461034d57602036600319011261034d576004356110b2816105dd565b60018060a01b031660005260046020526020604060002054604051908152f35b3461034d57600036600319011261034d576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461034d57602036600319011261034d57600435611134816105dd565b60018060a01b031660005260066020526020604060002054604051908152f35b604090600319011261034d5760043561116c816105dd565b90602435610617816105dd565b3461034d5760206111b561118c36611154565b6001600160a01b039182166000908152600b855260408082209290931681526020919091522090565b5460801c604051908152f35b3461034d57600036600319011261034d5760206040517f406ef09971b1bfa50a48ce277d3302602d78c94d58a376e8953b590702de7b318152f35b3461034d57602036600319011261034d576004356001600160401b03811161034d5761122f610911913690600401610860565b3333612d94565b3461034d57604036600319011261034d57602435600435611256826105dd565b6001600160a01b03908282169061126e61063c6132f4565b801590811591826113aa575b61128690610e7c613311565b906000901561138857506112a361129b6126c7565b8211156135ce565b6112b46112ae611f97565b82613298565b925b6112c161063c611f2a565b6008546001600160a01b0316906112dc853033848616613785565b7f000000000000000000000000000000000000000000000000000000000000000016803b1561034d5760405163e8eda9df60e01b81526001600160a01b0392909216600483015260248201859052306044830152600060648301819052908290608490829084905af180156103d65760209561135e92849261103a57506137dd565b6040805184815260208101929092523391600080516020613fc0833981519152918190810161102f565b92905061139361227f565b506113a461139f611f97565b613dd7565b906112b6565b50600161127a565b3461034d576000806003193601126105ac57604051908060018054906113d7826103db565b808652926020926001811690811561057f575060011461140157610524866105188188038261045e565b9350600184527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b838510611446575050505081016020016105188261052438610508565b8054868601840152938201938101611429565b3461034d57600036600319011261034d576007546040516001600160a01b039091168152602090f35b3461034d57604036600319011261034d5760043561149f816105dd565b600090602435906001600160a01b038116331515811515855b60098054821015611534578752600080516020613fa08339815191528101546001919084906001600160a01b03166114ef816128c7565b91611524575b848061151a575b611509575b5050016114b8565b6115139188613b47565b3880611501565b50863314156114fc565b61152f818333613b47565b6114f5565b33600090815260046020526040902085908890611552908990610a4d565b8054820190556040519081523390600080516020613f80833981519152908060208101610a8a565b3461034d57602036600319011261034d5760206105d5611598611f97565b600435613298565b3461034d5761169760206115b3366105ee565b6001600160a01b03828116949390916115d56115cd6132f4565b871515611f47565b6115dd613311565b506115e961063c611f2a565b6116056115fd6115f88361277a565b612c6c565b83111561332e565b611616611610611f97565b83613c65565b9561162b87858416938433036116f157612c78565b60408051848152602081018990523391600080516020613f6083398151915291a46008546000906001600160a01b03165b604051631a4ca37b60e21b81526001600160a01b03918216600482015260248101939093529093166044820152948592839182906064820190565b03927f0000000000000000000000000000000000000000000000000000000000000000165af19182156103d6576020926116d45750604051908152f35b6116ea90833d85116103cf576103c1818361045e565b50386103a0565b6001600160a01b03811660009081526005602052604090206106ee903390610728565b3461034d57611697611725366105ee565b6001600160a01b03808316929161173d6106636132f4565b8415938415948561180e575b61175590610e7c613311565b611766611760611f2a565b86611f47565b60009594156117e85760209495506117886117808361277a565b87111561337a565b611799611793611f97565b876139fd565b955b6117af81858516948533036116f157612c78565b6040805188815260208101929092523391600080516020613f608339815191529190a460085484906000906001600160a01b031661165c565b602094506117f86115f88361277a565b50611809611804611f97565b613c40565b61179b565b506001611749565b3461034d57602036600319011261034d5760206105d5600435611838816105dd565b612627565b90815180825260208080930193019160005b82811061185d575050505090565b83516001600160a01b03168552938101939281019260010161184f565b3461034d57600036600319011261034d5760405180600954918281526020809101926009600052600080516020613fa0833981519152916000905b8282106118e057610524856118cc8189038261045e565b60405191829160208352602083019061183d565b83546001600160a01b0316865294850194600193840193909101906118b5565b3461034d57602036600319011261034d5761191c6004356105dd565b60206105d56126c7565b3461034d57602036600319011261034d5760206105d5611944611f97565b600435613de1565b3461034d57600036600319011261034d576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461034d57602036600319011261034d5760206105d56119bb6004356119b6816105dd565b61277a565b6119c3611f97565b906139fd565b60ff81160361034d57565b3461034d5760e036600319011261034d576004356119f1816105dd565b6024356119fd816105dd565b7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560443592611b34606435611b18608435611a37816119c9565b611a43428410156126f1565b611b24611a4e6130c4565b93888a611ada611a708a60018060a01b03166000526006602052604060002090565b9384549460018601905560405194859360208501958d8791959493909260a09360c08401977f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98552600180871b038092166020860152166040840152606083015260808201520152565b0391611aee601f199384810183528261045e565b519020604051948591602083019788909160429261190160f01b8352600283015260228201520190565b0390810184528361045e565b60c4359260a435925190206132dc565b9284611b6f8261072860018060a01b0380961697611b55898883161461273d565b6001600160a01b0316600090815260056020526040902090565b556040519485521692602090a3005b3461034d57602036600319011261034d5760206105d56004356119b6816105dd565b3461034d576020611bdc611bb336611154565b6001600160a01b0391821660009081526005855260408082209290931681526020919091522090565b54604051908152f35b3461034d57602036600319011261034d5760206105d5600435611c07816105dd565b6128c7565b3461034d57604036600319011261034d57600435602435611c2c816105dd565b611c3761063c611f2a565b6007546040516370a0823160e01b81523360048201526001600160a01b03918216929190602081602481875afa80156103d65761052495600080516020613fc083398151915292600092611cf4575b5081811115611cec5750915b611cbe83611ca1610f5a611f97565b96611cb5611cad611f2a565b891515611f47565b30903390613785565b611cc885856137dd565b60408051938452602084018690529316923392a36040519081529081906020820190565b905091611c92565b611d0e91925060203d6020116103cf576103c1818361045e565b9038611c86565b61ffff81160361034d57565b3461034d5761020036600319011261034d57600435611d3f816105dd565b60243590611d4c826105dd565b60643591611d5983611d15565b608435611d6581610ca8565b60e03660c319011261034d576060366101a319011261034d57610524936106c49360a4359360443591612a56565b3461034d57606036600319011261034d57600435611db0816105dd565b602435611dbc816105dd565b6044356001600160401b03811161034d57611ddb903690600401610860565b336001600160a01b0384811691821494929392918515611e0c575b5050611e0761091194610e7c612c4f565b612d94565b90945060405190631d36517b60e21b82526004820152602081602481887f0000000000000000000000000000000000000000000000000000000000000000165afa9485156103d65761091195611e0792600091611e6e575b5016331494611df6565b611e90915060203d602011611e96575b611e88818361045e565b810190612c3a565b38611e64565b503d611e7e565b3461034d5760206105d5611eb036611154565b6001600160a01b038216600090815260048552604090205490611ed2816128c7565b92613903565b3461034d57600036600319011261034d57602060405160028152f35b9081602091031261034d575190565b6040513d6000823e3d90fd5b6001600160401b03811161043e57601f01601f191660200190565b60405190611f3782610443565b60018252600760fb1b6020830152565b15611f4f5750565b60405162461bcd60e51b8152908190611f6b906004830161047f565b0390fd5b634e487b7160e01b600052601160045260246000fd5b91908203918211611f9257565b611f6f565b60085460405163d15e005360e01b81526001600160a01b03918216600482015290602090829060249082907f0000000000000000000000000000000000000000000000000000000000000000165afa9081156103d657600091611ff8575090565b610617915060203d6020116103cf576103c1818361045e565b5190610847826105dd565b602090818184031261034d578051906001600160401b03821161034d57019180601f8401121561034d57825161205181610849565b9361205f604051958661045e565b818552838086019260051b82010192831161034d578301905b828210612086575050505090565b8380918351612094816105dd565b815201910190612078565b634e487b7160e01b600052603260045260246000fd5b8051156120c25760200190565b61209f565b80518210156120c25760209160051b010190565b919082602091031261034d57604051602081018181106001600160401b0382111761043e5760405291518252565b51906001600160801b038216820361034d57565b519064ffffffffff8216820361034d57565b519061084782611d15565b6101e08183031261034d5761215761215061081a565b92826120db565b825261216560208201612109565b602083015261217660408201612109565b604083015261218760608201612109565b606083015261219860808201612109565b60808301526121a960a08201612109565b60a08301526121ba60c0820161211d565b60c08301526121cb60e0820161212f565b60e08301526101006121de818301612011565b908301526101206121f0818301612011565b90830152610140612202818301612011565b90830152610160612214818301612011565b90830152610180612226818301612109565b908301526101a0612238818301612109565b9083015261224a6101c0809201612109565b9082015290565b604d8111611f9257600a0a90565b81810292918115918404141715611f9257565b91908201809211611f9257565b6008546040516335ea6a7560e01b81526001600160a01b0391821660048201526101e0918290829060249082907f0000000000000000000000000000000000000000000000000000000000000000165afa9182156103d657600092612415575b5050805151600160381b8116158015612406575b80156123f3575b6123ec5780640fffffffff61231760ff6123219460301c16612251565b9160741c1661225f565b9081156123e4576101008101516004919060209061234990610b12906001600160a01b031681565b60405163b1bf962d60e01b815293849182905afa80156103d6576123a16123a7916123ad946000916123c5575b5061239b61238f6101808601516001600160801b031690565b6001600160801b031690565b90612272565b9161320f565b90613298565b818111156123bc575050600090565b61061791611f85565b6123de915060203d6020116103cf576103c1818361045e565b38612376565b505060001990565b5050600090565b50670200000000000000811615156122fa565b506001603c1b811615156122f3565b6124349250803d1061243b575b61242c818361045e565b81019061213a565b38806122df565b503d612422565b6040519061244f82610443565b60018252603160f81b6020830152565b6040519061246c82610443565b60018252601960f91b6020830152565b61014435610617816119c9565b6101a435610617816119c9565b35610617816119c9565b604051906124ad82610443565b60018252603360f81b6020830152565b604051906124ca82610443565b6001825260203681840137565b916124ef60409295949560608552606085019061183d565b6001600160a01b0391821660208501529416910152565b6001600160a01b03818116801561261f5761251f6124bd565b60075461255090612538906001600160a01b0316610b12565b612541836120b5565b6001600160a01b039091169052565b60405180936370674ab960e01b8252818061257460209889963090600485016124d7565b03917f0000000000000000000000000000000000000000000000000000000000000000165afa9182156103d657600092612600575b506040516370a0823160e01b8152306004820152908390829060249082905afa9081156103d657610617936000926125e3575b5050612272565b6125f99250803d106103cf576103c1818361045e565b38806125dc565b612618919250833d85116103cf576103c1818361045e565b90386125a9565b505050600090565b6001600160a01b039081169081156123ec5761267c6020916126476124bd565b8160075416612655826120b5565b5260006040518096819582946308d8c03760e21b845260806004850152608484019061183d565b9083196024840152306044840152606483015203927f0000000000000000000000000000000000000000000000000000000000000000165af19081156103d657600091611ff8575090565b6126cf61227f565b600019908082146126ed5761061791506126e7611f97565b90613de1565b5090565b156126f857565b60405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152606490fd5b1561274457565b60405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b6044820152606490fd5b6008546040516335ea6a7560e01b81526001600160a01b0391821660048201819052906101e09081816024817f000000000000000000000000000000000000000000000000000000000000000088165afa9182156103d6576000926128aa575b5050805151600160381b81161590811561289a575b506128915761010001516040516370a0823160e01b81526001600160a01b0390911660048201529160209183916024918391165afa9081156103d6576128609161284491600091612872575b506126e7611f97565b6001600160a01b03909216600090815260046020526040902090565b549081811061286d575090565b905090565b61288b915060203d6020116103cf576103c1818361045e565b3861283b565b50505050600090565b6001603c1b9150161515386127ef565b6128c09250803d1061243b5761242c818361045e565b38806127da565b6001600160a01b0390811680156123ec57604090604483600754168351948593849263886fe70b60e01b8452600484015260248301527f0000000000000000000000000000000000000000000000000000000000000000165afa9081156103d657600091612933575090565b90506040813d60401161295d575b8161294e6040938361045e565b8101031261034d576020015190565b3d9150612941565b6040519061297282610443565b60018252600d60fa1b6020830152565b7f2a83c73b9e01ec0a1b95ff05940d809179668cc004230412d7047ffac3846ce781526001600160a01b0391821660208201529181166040830152606082019290925261ffff909216608083015291151560a082015260c081019290925260e08201929092526101e0810192918060c4356129fc816105dd565b1661010083015260e435612a0f816105dd565b16610120820152610104356101408201526101243561016082015260ff61014435612a39816119c9565b16610180820152610164356101a08201526101c061018435910152565b6001600160a01b039581871690612a6b612965565b612a7790831515611f47565b612a7f61245f565b612a8c9042831015611f47565b6001600160a01b03831660009081526006602052604090205490612aae6130c4565b60405191826020810191612ac890868d8d8d8d8d89612982565b0392601f19938481018252612add908261045e565b51902060405161190160f01b6020820190815260228201939093526042810191909152606292830181529091612b13908261045e565b5190206001600160a01b038416600090815260066020526040902090916001019055612b3d612489565b6101e435906101c43590612b50936132dc565b6001600160a01b031614612b626124a0565b612b6b91611f47565b610124359586612b81575b506126ed955061361a565b8515612c20576008546001600160a01b03165b16612b9d61247c565b96813b1561034d5760405163d505accf60e01b81526001600160a01b0384166004820152306024820152610104356044820152606481019190915260ff9790971660848801526101643560a48801526101843560c48801526126ed9690600090829060e490829084905af115612b765780611047612c1a9261042b565b38612b76565b600754612c35906001600160a01b0316610b12565b612b94565b9081602091031261034d5751610617816105dd565b60405190612c5c82610443565b60018252601b60f91b6020830152565b610617906119c3611f97565b60009160005b60098054821015612cd6578452600080516020613fa0833981519152810154600191906001600160a01b03908116612cb5816128c7565b918616612cc5575b505001612c7e565b612ccf9186613b47565b3880612cbd565b50506001600160a01b038216600090815260046020526040902091925090805490828203918211611f9257600093600080516020613f8083398151915292612d409255612d268460035403600355565b6040519384526001600160a01b0316929081906020820190565b0390a3565b60405163a9059cbb60e01b60208201526001600160a01b03909216602483015260448083019390935291815260808101916001600160401b0383118284101761043e5761084792604052613a31565b92919060005b8251811015612fa757612db3610b12610ba283866120c7565b15612f9f57612dc8611c07610ba283866120c7565b90612dfd82612de98860018060a01b03166000526004602052604060002090565b54612df7610ba285896120c7565b89613903565b612e10610b12610b12610ba285896120c7565b6040516370a0823160e01b815230600482015291906020908190849060249082905afa9081156103d6576001958a948992600094612f80575b505082600093808611612f65575b50808511612f50575b508584612e75575b5050505050505b01612d9a565b612f4595612ed1612ef094612ebb610ba2612eeb95612eb5612e99612f349b613ade565b6001600160a01b039097166000908152600b6020526040902090565b936120c7565b60018060a01b0316600052602052604060002090565b906001600160801b0382549181199060801b169116179055565b613ade565b6001600160a01b038a166000908152600b60205260409020612f1990612ebb610ba2888c6120c7565b906001600160801b03166001600160801b0319825416179055565b846106bf610b12610ba2868a6120c7565b853880868185612e68565b809350612f5d9194611f85565b919238612e60565b612f7a915061239b611838610ba28a876120c7565b38612e57565b612f97929450803d106103cf576103c1818361045e565b913880612e49565b600190612e6f565b5050509050565b6009548110156120c2576009600052600080516020613fa08339815191520190600090565b6001600160a01b038181166000818152600a60205260409020549092919060ff166130bf57613001826128c7565b6009546801000000000000000081101561043e577fa8f4dd7e60441ca288d902a295362002a0255a46560b24825821b36716d6fe5b936130ba9361304e8360016106c49501600955612fae565b819291549060031b9189831b921b191617905561309a61306c61083a565b60018152916001600160f01b03851660208401526001600160a01b03166000908152600a6020526040902090565b815160209092015160081b60ff191660ff92151592909216919091179055565b0390a2565b505050565b604051600090600054906130d7826103db565b9283825260209384830193600190866001821691826000146131ef575050600114613198575b505091816131136131929361318495038261045e565b519020604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f95810195865260208601929092527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc69085015246606085015230608085015291829060a0850190565b03601f19810183528261045e565b51902090565b600080805286935091907f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b8284106131da57505050820101816131136130fd565b805486850186015287949093019281016131c4565b60ff1916875292151560051b8501909201925083915061311390506130fd565b60c081015164ffffffffff16428103613239575060200151610617906001600160801b031661238f565b6001600160801b0360408301511690420390428211611f92576301e13380916132619161225f565b04676765c793fa10079d601b1b908101809111611f925761329261238f60206106179401516001600160801b031690565b90613c05565b90811580156132d4575b6123ec57806132bd676765c793fa10079d601b1b9284613e81565b92096132c65790565b60018101809111611f925790565b5080156132a2565b9161061793916132eb93613c8c565b90929192613d30565b6040519061330182610443565b60018252603560f81b6020830152565b6040519061331e82610443565b60018252603760f81b6020830152565b1561333557565b60405162461bcd60e51b815260206004820152601f60248201527f455243343632363a207769746864726177206d6f7265207468616e206d6178006044820152606490fd5b1561338157565b60405162461bcd60e51b815260206004820152601d60248201527f455243343632363a2072656465656d206d6f7265207468616e206d61780000006044820152606490fd5b949390916001600160a01b0391828416916133ea6133e26132f4565b841515611f47565b8015958615968761357a575b61340290610e7c613311565b61341661340d611f2a565b82841415611f47565b80919660001461353a57505080613521575b613439613433611f97565b866139fd565b9687925b61345187868416938433036116f157612c78565b60408051858152602081018990523391600080516020613f6083398151915291a41561350557600854604051631a4ca37b60e21b81526001600160a01b0391821660048201526024810192909252929092166044830152602090829060649082906000907f0000000000000000000000000000000000000000000000000000000000000000165af180156103d6576134e857509190565b6135009060203d6020116103cf576103c1818361045e565b509190565b60075461351d939192506001600160a01b0316612d45565b9190565b61353561352d8861277a565b86111561337a565b613428565b819891939650613558908361355e575b613552611f97565b90613c65565b9561343d565b61357561356d6115f88561277a565b82111561332e565b61354a565b5080156133f6565b1561358957565b60405162461bcd60e51b815260206004820152601e60248201527f455243343632363a206465706f736974206d6f7265207468616e206d617800006044820152606490fd5b156135d557565b60405162461bcd60e51b815260206004820152601b60248201527f455243343632363a206d696e74206d6f7265207468616e206d617800000000006044820152606490fd5b919493926001600160a01b0380831693929161363f6136376132f4565b861515611f47565b85613648613311565b5061376d575b61365f613659611f97565b89613de1565b809661366c61063c611f2a565b1561373857506008546001600160a01b031661368c893087868516613785565b827f00000000000000000000000000000000000000000000000000000000000000001691823b1561034d5760405163e8eda9df60e01b81526001600160a01b03929092166004830152602482018a905230604483015261ffff166064820152906000908290608490829084905af180156103d657600080516020613fc08339815191529361372092889261103a57506137dd565b60408051888152602081018790529390911692a39190565b600754600080516020613fc083398151915294613720935090613768908b906001600160a01b0316883091613785565b6137dd565b61378061377861227f565b891115613582565b61364e565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a08101918183106001600160401b0384111761043e5761084792604052613a31565b60009160005b60098054821015613848578452600080516020613fa0833981519152810154600191906001600160a01b0390811661381a816128c7565b918616151580613843575b613832575b5050016137e3565b61383c9186613b47565b388061382a565b613825565b5050915060035490828201809211611f9257612d40600080516020613f8083398151915291613878600094600355565b6001600160a01b03811660009081526004602052604090208054860190556040519485526001600160a01b0316939081906020820190565b604051906138bd82610443565b60018252603960f81b6020830152565b906040516138da81610443565b91546001600160801b038116835260801c6020830152565b60ff16604d8111611f9257600a0a90565b6139f0906106179461398a6139856139cd956107286139348260018060a01b0316600052600a602052604060002090565b9561396b6040519761394589610443565b5497602060ff8a16151591828152019860081c895260016139646138b0565b9114611f47565b6001600160a01b03166000908152600b6020526040902090565b6138cd565b9461399f61399a60025460ff1690565b6138f2565b926139b460208801516001600160801b031690565b966001600160801b03968791516001600160801b031690565b1690816139f757516001600160f81b031690505b6001600160f81b031690613dbd565b9116612272565b506139e1565b9081158015613a14575b6123ec5761061791613e81565b508015613a07565b9081602091031261034d575161061781610ca8565b600080613a7b9260018060a01b03169360208151910182865af13d15613ad6573d90613a5c82611f0f565b91613a6a604051938461045e565b82523d6000602084013e5b83613efc565b8051908115159182613ab4575b5050613a915750565b604051635274afe760e01b81526001600160a01b03919091166004820152602490fd5b613acf925090602080613acb938301019101613a1c565b1590565b3880613a88565b606090613a75565b6001600160801b0390818111613af2571690565b60405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608490fd5b610847926040612f1992613b7f60018060a01b0382169560009287845260046020528585852054918383613b9f575b50505050613ade565b948152600b602052209060018060a01b0316600052602052604060002090565b613bd793613bb093612eeb93613903565b888552600b60209081528686206001600160a01b0389166000908152915260409020612ed1565b38858183613b76565b634e487b7160e01b600052601260045260246000fd5b8115613c00570490565b613be0565b816b019d971e4fe8401e7400000019048111158215171561034d57676765c793fa10079d601b1b91026b019d971e4fe8401e74000000010490565b8015613c0057600090676765c793fa10079d601b1b600009613c5f5790565b50600190565b90613c708183613de1565b918115613c0057676765c793fa10079d601b1b90096132c65790565b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411613d0457926020929160ff608095604051948552168484015260408301526060820152600092839182805260015afa156103d65780516001600160a01b03811615613cfb57918190565b50809160019190565b50505060009160039190565b60041115613d1a57565b634e487b7160e01b600052602160045260246000fd5b613d3981613d10565b80613d42575050565b613d4b81613d10565b60018103613d655760405163f645eedf60e01b8152600490fd5b613d6e81613d10565b60028103613d8f5760405163fce698f760e01b815260048101839052602490fd5b80613d9b600392613d10565b14613da35750565b6040516335e2f38360e21b81526004810191909152602490fd5b91908215612891578103908111611f9257613bf69161225f565b15613c0057600090565b676765c793fa10079d601b1b918183029160001984820993838086109503948086039514613e745784831115613e625782910981600003821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b60405163227bc15360e01b8152600490fd5b5050906106179250613bf6565b908082029060001981840990828083109203918083039214613ee857676765c793fa10079d601b1b9082821115613e62577f2245cd4e1f3755e770b615377cde9082e11ad04b156637b5cd27412a54f5b6b5940990828211900360e51b9103601b1c170290565b5050676765c793fa10079d601b1b91500490565b90613f235750805115613f1157805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580613f56575b613f34575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15613f2c56fefbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8dbddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7afdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7a26469706673582212201eb2b81a2bdbb1e69d0c00691f863002172f09a4e65d7293c104bce7fc1fcaa464736f6c63430008180033290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563b10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6a2646970667358221220874f5d59f97a28c1e85cd30bc96b091e7d38a36190e20f5e14d1ec9213d2e37064736f6c63430008180033",
  "deployedBytecode": "0x608060405260043610156200001357600080fd5b60e060003560e01c90816356d9be6a14620001d2575080637535d246146200018b5780638129fc1c1462000142578063a09aa4a714620000a55763ed5d0f58146200005d57600080fd5b34620000a0576020366003190112620000a0576004356001600160a01b0381811691829003620000a0576020916000526000825260406000205416604051908152f35b600080fd5b34620000a0576000366003190112620000a057604051806001916001549283825260208092019360016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6926000905b82821062000123576200011f8662000112818a038262000869565b60405191829182620008bb565b0390f35b84546001600160a01b03168752958601959383019390830190620000f7565b34620000a0576000366003190112620000a05760405162461bcd60e51b815260206004820152600e60248201526d2727afa4a724aa24a0a624ad22a960911b6044820152606490fd5b34620000a0576000366003190112620000a0576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b34620000a0576020366003190112620000a0576004359067ffffffffffffffff808311620000a05736602384011215620000a05760249260048101356200021981620008a2565b9162000229604051938462000869565b81835285602084019260051b82010190368211620000a0578601915b81831062000847575050508051916200025e83620008a2565b926200026e604051948562000869565b8084526200027f601f1991620008a2565b0136602085013760005b825181101562000837576001600160a01b03620002a7828562000902565b51166000908152602081905260409020546001600160a01b0316806200082057506001600160a01b03620002dc828562000902565b516040516335ea6a7560e01b8152911660048201526101e0808289817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115620005f3576000916200069d575b506101000180519091506001600160a01b031615620006615780516040516306fdde0360e01b8152916001600160a01b0390911690600083600481855afa908115620005f3576004936000926200063e575b50600090620003ce604051936702bb930b83832b2160c51b602086015284602891620003bd815180926020868601910162000960565b810103600881018652018462000869565b516040516395d89b4160e01b815294859182906001600160a01b03165afa928315620005f35760009362000614575b506200043a60405193607760f81b60208601528460219162000429815180926020868601910162000960565b810103600181018652018462000869565b60405192836149fa810110866149fa86011117620005ff57620004b8620004cf9285946149fa62000a2287397f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166149fa870190815260006020820152604081019190915260a0606082018190520190620009fa565b906149fa8401820360806149fa86010152620009fa565b03906000f08015620005f3576001600160a01b039081169190620004f4828662000902565b511660005260006020526040600020916bffffffffffffffffffffffff60a01b928184825416179055806200052a838862000902565b526001549268010000000000000000841015620005de576001840180600155841015620005c957600160008190527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69094018054909116821790556001600160a01b0362000599838762000902565b5116907f7397831292236fdc8043acf7b9d21183e46fd54f9b06bd34210068f95dd378d6600080a35b0162000289565b88634e487b7160e01b60005260326004526000fd5b88634e487b7160e01b60005260416004526000fd5b6040513d6000823e3d90fd5b89634e487b7160e01b60005260416004526000fd5b620006369193503d806000833e6200062d818362000869565b81019062000985565b9189620003fd565b600091925062000659903d8084833e6200062d818362000869565b919062000387565b60405162461bcd60e51b8152602060048201526015818901527415539111549316525391d7d393d517d31254d51151605a1b6044820152606490fd5b905081813d831162000818575b620006b6818362000869565b810103818112620000a0576040519182019082821086831117620005ff57602013620000a057610200820181811086821117620005ff5760405282518152815262000704602083016200092d565b602082015262000717604083016200092d565b604082015260606200072b8184016200092d565b9082015260806200073e8184016200092d565b9082015260a0620007518184016200092d565b9082015260c0808301519064ffffffffff82168203620000a057820152868201519161ffff83168303620000a057610100928883015282620007958183016200094b565b90830152610120620007a98183016200094b565b90830152610140620007bd8183016200094b565b90830152610160620007d18183016200094b565b90830152610180620007e58183016200092d565b908301526101a0620007f98183016200092d565b908301526200080d6101c08092016200092d565b908201528862000335565b503d620006aa565b9060019162000830828762000902565b52620005c2565b604051806200011f8682620008bb565b82356001600160a01b0381168103620000a05781526020928301920162000245565b90601f8019910116810190811067ffffffffffffffff8211176200088c57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116200088c5760051b60200190565b602090602060408183019282815285518094520193019160005b828110620008e4575050505090565b83516001600160a01b031685529381019392810192600101620008d5565b8051821015620009175760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b51906fffffffffffffffffffffffffffffffff82168203620000a057565b51906001600160a01b0382168203620000a057565b60005b838110620009745750506000910152565b818101518382015260200162000963565b602081830312620000a057805167ffffffffffffffff91828211620000a057019082601f83011215620000a05781519081116200088c5760405192620009d6601f8301601f19166020018562000869565b81845260208284010111620000a057620009f7916020808501910162000960565b90565b9060209162000a158151809281855285808601910162000960565b601f01601f191601019056fe60c080604052346200048757620049fa803803809162000020828562000739565b8339810160a082820312620004875781516001600160a01b038116810362000487576020830151916001600160a01b0383168303620004875762000067604085016200075d565b60608501519094906001600160401b0381116200048757826200008c91830162000772565b60808201519092906001600160401b0381116200048757620000af920162000772565b60405163313ce56760e01b8152916020836004816001600160a01b038a165afa9283156200044557600093620006ee575b508051906001600160401b038211620005e25760005490600182811c92168015620006e3575b6020831014620005c15781601f84931162000680575b50602090601f83116001146200060457600092620005f8575b50508160011b916000199060031b1c1916176000555b8051906001600160401b038211620005e257600154600181811c91168015620005d7575b6020821014620005c157601f811162000568575b50602090601f8311600114620004ea5760ff93929160009183620004de575b50508160011b916000199060031b1c1916176001555b600280549190921660ff1990911617905560805260a052600780546001600160a01b03929092166001600160a01b031992831681179091556040516358b50cef60e11b815290602090829060049082905afa908115620004455760009162000495575b50600880546001600160a01b0392831693168317905560805160405163095ea7b360e01b815291166004820152600019602482015290602090829060449082906000905af18015620004455762000451575b5060a0516001600160a01b031680620002fe575b6040516140159081620009a58239608051818181610f89015281816110e8015281816112de0152818161169b01528181611fc4015281816122ae015281816127a8015281816134b7015261368f015260a051818181610b4b0152818161196201528181611e2b015281816125780152818161269301526128ff0152f35b600060018060a01b0360075416602460405180948193636657732f60e01b835260048301525afa908115620004455760009162000377575b5060005b81518110156200036e57600581901b8201602001516001919062000367906001600160a01b0316620007e8565b016200033a565b50503862000281565b3d8083833e62000388818362000739565b81019060208183031262000441578051906001600160401b0382116200043d57019181601f8401121562000426578251926001600160401b03841162000429578360051b9160405194620003e0602085018762000739565b8552602080860193830101938411620004265750602001905b8282106200040b575050503862000336565b602080916200041a846200075d565b815201910190620003f9565b80fd5b634e487b7160e01b82526041600452602482fd5b8380fd5b8280fd5b6040513d6000823e3d90fd5b6020813d6020116200048c575b816200046d6020938362000739565b81010312620004875751801515036200048757386200026d565b600080fd5b3d91506200045e565b90506020813d602011620004d5575b81620004b36020938362000739565b810103126200048757600091620004cc6020926200075d565b9150916200021b565b3d9150620004a4565b015190503880620001a2565b60016000908152600080516020620049da833981519152929190601f198516905b8181106200054f575091600193918560ff9796941062000535575b505050811b01600155620001b8565b015160001960f88460031b161c1916905538808062000526565b929360206001819287860151815501950193016200050b565b6001600052600080516020620049da833981519152601f840160051c81019160208510620005b6575b601f0160051c01905b818110620005a9575062000183565b600081556001016200059a565b909150819062000591565b634e487b7160e01b600052602260045260246000fd5b90607f16906200016f565b634e487b7160e01b600052604160045260246000fd5b01519050388062000135565b60008080529350600080516020620049ba83398151915291905b601f198416851062000664576001945083601f198116106200064a575b505050811b016000556200014b565b015160001960f88460031b161c191690553880806200063b565b818101518355602094850194600190930192909101906200061e565b60008052909150600080516020620049ba833981519152601f840160051c81019160208510620006d8575b90601f859493920160051c01905b818110620006c857506200011c565b60008155849350600101620006b9565b9091508190620006ab565b91607f169162000106565b6020939193813d60201162000730575b816200070d6020938362000739565b810103126200072c57519060ff821682036200042657509138620000e0565b5080fd5b3d9150620006fe565b601f909101601f19168101906001600160401b03821190821017620005e257604052565b51906001600160a01b03821682036200048757565b919080601f84011215620004875782516001600160401b038111620005e25760209060405192620007ad83601f19601f850116018562000739565b818452828287010111620004875760005b818110620007d457508260009394955001015290565b8581018301518482018401528201620007be565b60018060a01b03811690600090828252600a60205260409060ff82842054166200090257620008179062000908565b916009546801000000000000000081101562000429576001810180600955811015620008ee57600982527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af0180546001600160a01b031916851790558151908183016001600160401b0381118382101762000429578352600182526001600160f01b0384166020808401918252868352600a8152918490209251905160081b60ff191690151560ff161790915590519182527fa8f4dd7e60441ca288d902a295362002a0255a46560b24825821b36716d6fe5b91a2565b634e487b7160e01b82526032600452602482fd5b50505050565b6001600160a01b039081169081156200099d5760a0516007546040805163886fe70b60e01b81529184166004830152602482019490945291839183916044918391165afa91821562000993576000926200096157505090565b90809250813d83116200098b575b6200097b818362000739565b8101031262000487576020015190565b503d6200096f565b513d6000823e3d90fd5b505060009056fe6080604052600436101561001257600080fd5b60003560e01c806301e1d1141461033d57806306fdde031461033857806307a2d13a146102f2578063090edf9a14610333578063095ea7b31461032e5780630a28a4771461032957806318160ddd146103245780632026ffa31461031f57806323b872dd1461031a5780632c4e722e146103155780632f813b0d1461031057806330adf81f1461030b578063313ce567146103065780633644e5151461030157806338d52e0f146102fc578063402d267d146102f75780634cdad506146102f257806360266557146102ed57806360d8fdd8146102e857806363210537146102e35780636e553f65146102de5780636fe0b5a5146102d957806370a08231146102d45780637535d246146102cf5780637ecebe00146102ca57806386894b29146102c55780638d948415146102c05780638daaf5aa146102bb57806394bf804d146102b657806395d89b41146102b1578063a0c1f15e146102ac578063a9059cbb146102a7578063b3d7f6b9146102a2578063b460af941461029d578063ba08765214610298578063bcd1784814610293578063c2b18aa01461028e578063c63d75b614610289578063c6e6f59214610257578063cd086d4514610284578063ce96cb771461027f578063d505accf1461027a578063d905777e14610275578063dd62ed3e14610270578063de9cee981461026b578063e25ec34914610266578063ea9be77c14610261578063ee0fc6d31461025c578063ef8b30f714610257578063f56f4f0f146102525763fa7146101461024d57600080fd5b611ed8565b611e9d565b611926565b611d93565b611d21565b611c0c565b611be5565b611ba0565b611b7e565b6119d4565b611991565b61194c565b611900565b61187a565b611816565b611714565b6115a0565b61157a565b611482565b611459565b6113b2565b611236565b6111fc565b6111c1565b611179565b611117565b6110d2565b611095565b611053565b610efb565b610ec0565b610e99565b610cc3565b6105af565b610c82565b610c59565b610c3e565b610c1d565b610be2565b610ae8565b610acd565b610913565b6108ca565b6107fc565b6107d6565b610747565b61061a565b6104c8565b610352565b600091031261034d57565b600080fd5b3461034d57600036600319011261034d576007546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa80156103d6576020916000916103a9575b50604051908152f35b6103c99150823d84116103cf575b6103c1818361045e565b810190611ef4565b386103a0565b503d6103b7565b611f03565b90600182811c9216801561040b575b60208310146103f557565b634e487b7160e01b600052602260045260246000fd5b91607f16916103ea565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161043e57604052565b610415565b604081019081106001600160401b0382111761043e57604052565b90601f801991011681019081106001600160401b0382111761043e57604052565b6020808252825181830181905290939260005b8281106104b457505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610492565b3461034d576000806003193601126105ac5760405190808054906104eb826103db565b8085529160209160019182811690811561057f5750600114610528575b610524866105188188038261045e565b6040519182918261047f565b0390f35b80809550527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b83851061056c575050505081016020016105188261052438610508565b805486860184015293820193810161054f565b90508695506105249693506020925061051894915060ff191682840152151560051b820101929338610508565b80fd5b3461034d57602036600319011261034d5760206105d56105cd611f97565b6004356139fd565b604051908152f35b6001600160a01b0381160361034d57565b606090600319011261034d576004359060243561060a816105dd565b90604435610617816105dd565b90565b3461034d576105246106c461062e366105ee565b92919061064461063c611f2a565b831515611f47565b61065561064f611f97565b836139fd565b93849261066b610663611f2a565b851515611f47565b60018060a01b039061068781838516948533036106d457612c78565b604080518681526020810192909252918416913391600080516020613f608339815191529190a46007546001600160a01b0316612d45565b612d45565b6040519081529081906020820190565b600086815260056020908152604080832033845290915290205b548260018201610700575b5050612c78565b61070991611f85565b6001600160a01b038216600090815260056020526040902061073f9033905b9060018060a01b0316600052602052604060002090565b5538826106f9565b3461034d57604036600319011261034d57600435610764816105dd565b60243590336000526005602052816107928260406000209060018060a01b0316600052602052604060002090565b556040519182526001600160a01b03169033907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590602090a3602060405160018152f35b3461034d57602036600319011261034d5760206105d56107f4611f97565b600435613c65565b3461034d57600036600319011261034d576020600354604051908152f35b604051906101e082018281106001600160401b0382111761043e57604052565b6040519061084782610443565b565b6001600160401b03811161043e5760051b60200190565b9080601f8301121561034d57602090823561087a81610849565b93610888604051958661045e565b81855260208086019260051b82010192831161034d57602001905b8282106108b1575050505090565b83809183356108bf816105dd565b8152019101906108a3565b3461034d57604036600319011261034d576004356108e7816105dd565b602435906001600160401b03821161034d5761090a610911923690600401610860565b9033612d94565b005b3461034d57606036600319011261034d57600435610930816105dd565b60243561093c816105dd565b60009160443591906001600160a01b0380821680151591841680151591875b600980548210156109d7578952600080516020613fa08339815191528101546001919086906001600160a01b0316610992816128c7565b916109c7575b86806109bd575b6109ac575b50500161095b565b6109b6918a613b47565b38806109a4565b508585141561099f565b6109d281838b613b47565b610998565b5050600080516020613f80833981519152610a8a88610a7489610a4d8a610a26610a138260018060a01b03166000526005602052604060002090565b3360009081526020919091526040902090565b548560018201610a99575b50506001600160a01b0316600090815260046020526040902090565b610a58848254611f85565b90556001600160a01b0316600090815260046020526040902090565b8054820190556040519081529081906020820190565b0390a360405160018152602090f35b610aa291611f85565b6001600160a01b0382166000908152600560205260409020610ac5903390610728565b558985610a31565b3461034d57600036600319011261034d5760206105d5611f97565b3461034d576000806003193601126105ac57600754610b4791908190610b1e906001600160a01b03165b6001600160a01b031690565b604051636657732f60e01b81526001600160a01b03909116600482015292839081906024820190565b03817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9182156103d6578192610bbe575b50805b8251811015610bba5780610bb4610baf610ba2600194876120c7565b516001600160a01b031690565b612fd3565b01610b86565b5080f35b610bdb9192503d8084833e610bd3818361045e565b81019061201c565b9038610b83565b3461034d57600036600319011261034d5760206040517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98152f35b3461034d57600036600319011261034d57602060ff60025416604051908152f35b3461034d57600036600319011261034d5760206105d56130c4565b3461034d57600036600319011261034d576008546040516001600160a01b039091168152602090f35b3461034d57602036600319011261034d57610c9e6004356105dd565b60206105d561227f565b8015150361034d57565b60609060c319011261034d5760c490565b3461034d5761012036600319011261034d57610e87600435610ce4816105dd565b602435610cf0816105dd565b6044356064359160843593610d0485610ca8565b610e82610d47610e73610b1260a4358960018a610e2c610e388c8b8d610dee610d2c36610cb2565b99888060a01b0384169d8e610d3f612442565b901515611f47565b610d5b610d5261245f565b42831015611f47565b6001600160a01b038416600090815260066020526040902054809a610d7e6130c4565b9960405197889660208801988993909260e09592989796936101008601997f406ef09971b1bfa50a48ce277d3302602d78c94d58a376e8953b590702de7b31875260018060a01b03809216602088015216604086015260608501526080840152151560a083015260c08201520152565b0391610e02601f199384810183528261045e565b519020604051938491602083019687909160429261190160f01b8352600283015260228201520190565b0390810183528261045e565b5190209101610e598860018060a01b03166000526006602052604060002090565b55610e6382612496565b60206040840135930135916132dc565b14610e7c6124a0565b90611f47565b6133c6565b60408051928352602083019190915290f35b3461034d57602036600319011261034d5760206105d5600435610ebb816105dd565b612506565b3461034d57600036600319011261034d5760206040517f2a83c73b9e01ec0a1b95ff05940d809179668cc004230412d7047ffac3846ce78152f35b3461034d57604036600319011261034d57602435600435610f1b826105dd565b6001600160a01b039082821690610f3361063c6132f4565b610f3b613311565b50610f4f610f4761227f565b821115613582565b610f60610f5a611f97565b82613de1565b92610f6c610663611f2a565b6008546001600160a01b031690610f87833033848616613785565b7f000000000000000000000000000000000000000000000000000000000000000016803b1561034d5760405163e8eda9df60e01b81526001600160a01b0392909216600483015260248201839052306044830152600060648301819052908290608490829084905af180156103d65760209561100a92869261103a575b506137dd565b60408051918252602082018490523391600080516020613fc083398151915291819081015b0390a3604051908152f35b8061104761104d9261042b565b80610342565b38611004565b3461034d57602036600319011261034d57600435611070816105dd565b60018060a01b0316600052600a602052602060ff604060002054166040519015158152f35b3461034d57602036600319011261034d576004356110b2816105dd565b60018060a01b031660005260046020526020604060002054604051908152f35b3461034d57600036600319011261034d576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461034d57602036600319011261034d57600435611134816105dd565b60018060a01b031660005260066020526020604060002054604051908152f35b604090600319011261034d5760043561116c816105dd565b90602435610617816105dd565b3461034d5760206111b561118c36611154565b6001600160a01b039182166000908152600b855260408082209290931681526020919091522090565b5460801c604051908152f35b3461034d57600036600319011261034d5760206040517f406ef09971b1bfa50a48ce277d3302602d78c94d58a376e8953b590702de7b318152f35b3461034d57602036600319011261034d576004356001600160401b03811161034d5761122f610911913690600401610860565b3333612d94565b3461034d57604036600319011261034d57602435600435611256826105dd565b6001600160a01b03908282169061126e61063c6132f4565b801590811591826113aa575b61128690610e7c613311565b906000901561138857506112a361129b6126c7565b8211156135ce565b6112b46112ae611f97565b82613298565b925b6112c161063c611f2a565b6008546001600160a01b0316906112dc853033848616613785565b7f000000000000000000000000000000000000000000000000000000000000000016803b1561034d5760405163e8eda9df60e01b81526001600160a01b0392909216600483015260248201859052306044830152600060648301819052908290608490829084905af180156103d65760209561135e92849261103a57506137dd565b6040805184815260208101929092523391600080516020613fc0833981519152918190810161102f565b92905061139361227f565b506113a461139f611f97565b613dd7565b906112b6565b50600161127a565b3461034d576000806003193601126105ac57604051908060018054906113d7826103db565b808652926020926001811690811561057f575060011461140157610524866105188188038261045e565b9350600184527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b838510611446575050505081016020016105188261052438610508565b8054868601840152938201938101611429565b3461034d57600036600319011261034d576007546040516001600160a01b039091168152602090f35b3461034d57604036600319011261034d5760043561149f816105dd565b600090602435906001600160a01b038116331515811515855b60098054821015611534578752600080516020613fa08339815191528101546001919084906001600160a01b03166114ef816128c7565b91611524575b848061151a575b611509575b5050016114b8565b6115139188613b47565b3880611501565b50863314156114fc565b61152f818333613b47565b6114f5565b33600090815260046020526040902085908890611552908990610a4d565b8054820190556040519081523390600080516020613f80833981519152908060208101610a8a565b3461034d57602036600319011261034d5760206105d5611598611f97565b600435613298565b3461034d5761169760206115b3366105ee565b6001600160a01b03828116949390916115d56115cd6132f4565b871515611f47565b6115dd613311565b506115e961063c611f2a565b6116056115fd6115f88361277a565b612c6c565b83111561332e565b611616611610611f97565b83613c65565b9561162b87858416938433036116f157612c78565b60408051848152602081018990523391600080516020613f6083398151915291a46008546000906001600160a01b03165b604051631a4ca37b60e21b81526001600160a01b03918216600482015260248101939093529093166044820152948592839182906064820190565b03927f0000000000000000000000000000000000000000000000000000000000000000165af19182156103d6576020926116d45750604051908152f35b6116ea90833d85116103cf576103c1818361045e565b50386103a0565b6001600160a01b03811660009081526005602052604090206106ee903390610728565b3461034d57611697611725366105ee565b6001600160a01b03808316929161173d6106636132f4565b8415938415948561180e575b61175590610e7c613311565b611766611760611f2a565b86611f47565b60009594156117e85760209495506117886117808361277a565b87111561337a565b611799611793611f97565b876139fd565b955b6117af81858516948533036116f157612c78565b6040805188815260208101929092523391600080516020613f608339815191529190a460085484906000906001600160a01b031661165c565b602094506117f86115f88361277a565b50611809611804611f97565b613c40565b61179b565b506001611749565b3461034d57602036600319011261034d5760206105d5600435611838816105dd565b612627565b90815180825260208080930193019160005b82811061185d575050505090565b83516001600160a01b03168552938101939281019260010161184f565b3461034d57600036600319011261034d5760405180600954918281526020809101926009600052600080516020613fa0833981519152916000905b8282106118e057610524856118cc8189038261045e565b60405191829160208352602083019061183d565b83546001600160a01b0316865294850194600193840193909101906118b5565b3461034d57602036600319011261034d5761191c6004356105dd565b60206105d56126c7565b3461034d57602036600319011261034d5760206105d5611944611f97565b600435613de1565b3461034d57600036600319011261034d576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461034d57602036600319011261034d5760206105d56119bb6004356119b6816105dd565b61277a565b6119c3611f97565b906139fd565b60ff81160361034d57565b3461034d5760e036600319011261034d576004356119f1816105dd565b6024356119fd816105dd565b7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560443592611b34606435611b18608435611a37816119c9565b611a43428410156126f1565b611b24611a4e6130c4565b93888a611ada611a708a60018060a01b03166000526006602052604060002090565b9384549460018601905560405194859360208501958d8791959493909260a09360c08401977f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98552600180871b038092166020860152166040840152606083015260808201520152565b0391611aee601f199384810183528261045e565b519020604051948591602083019788909160429261190160f01b8352600283015260228201520190565b0390810184528361045e565b60c4359260a435925190206132dc565b9284611b6f8261072860018060a01b0380961697611b55898883161461273d565b6001600160a01b0316600090815260056020526040902090565b556040519485521692602090a3005b3461034d57602036600319011261034d5760206105d56004356119b6816105dd565b3461034d576020611bdc611bb336611154565b6001600160a01b0391821660009081526005855260408082209290931681526020919091522090565b54604051908152f35b3461034d57602036600319011261034d5760206105d5600435611c07816105dd565b6128c7565b3461034d57604036600319011261034d57600435602435611c2c816105dd565b611c3761063c611f2a565b6007546040516370a0823160e01b81523360048201526001600160a01b03918216929190602081602481875afa80156103d65761052495600080516020613fc083398151915292600092611cf4575b5081811115611cec5750915b611cbe83611ca1610f5a611f97565b96611cb5611cad611f2a565b891515611f47565b30903390613785565b611cc885856137dd565b60408051938452602084018690529316923392a36040519081529081906020820190565b905091611c92565b611d0e91925060203d6020116103cf576103c1818361045e565b9038611c86565b61ffff81160361034d57565b3461034d5761020036600319011261034d57600435611d3f816105dd565b60243590611d4c826105dd565b60643591611d5983611d15565b608435611d6581610ca8565b60e03660c319011261034d576060366101a319011261034d57610524936106c49360a4359360443591612a56565b3461034d57606036600319011261034d57600435611db0816105dd565b602435611dbc816105dd565b6044356001600160401b03811161034d57611ddb903690600401610860565b336001600160a01b0384811691821494929392918515611e0c575b5050611e0761091194610e7c612c4f565b612d94565b90945060405190631d36517b60e21b82526004820152602081602481887f0000000000000000000000000000000000000000000000000000000000000000165afa9485156103d65761091195611e0792600091611e6e575b5016331494611df6565b611e90915060203d602011611e96575b611e88818361045e565b810190612c3a565b38611e64565b503d611e7e565b3461034d5760206105d5611eb036611154565b6001600160a01b038216600090815260048552604090205490611ed2816128c7565b92613903565b3461034d57600036600319011261034d57602060405160028152f35b9081602091031261034d575190565b6040513d6000823e3d90fd5b6001600160401b03811161043e57601f01601f191660200190565b60405190611f3782610443565b60018252600760fb1b6020830152565b15611f4f5750565b60405162461bcd60e51b8152908190611f6b906004830161047f565b0390fd5b634e487b7160e01b600052601160045260246000fd5b91908203918211611f9257565b611f6f565b60085460405163d15e005360e01b81526001600160a01b03918216600482015290602090829060249082907f0000000000000000000000000000000000000000000000000000000000000000165afa9081156103d657600091611ff8575090565b610617915060203d6020116103cf576103c1818361045e565b5190610847826105dd565b602090818184031261034d578051906001600160401b03821161034d57019180601f8401121561034d57825161205181610849565b9361205f604051958661045e565b818552838086019260051b82010192831161034d578301905b828210612086575050505090565b8380918351612094816105dd565b815201910190612078565b634e487b7160e01b600052603260045260246000fd5b8051156120c25760200190565b61209f565b80518210156120c25760209160051b010190565b919082602091031261034d57604051602081018181106001600160401b0382111761043e5760405291518252565b51906001600160801b038216820361034d57565b519064ffffffffff8216820361034d57565b519061084782611d15565b6101e08183031261034d5761215761215061081a565b92826120db565b825261216560208201612109565b602083015261217660408201612109565b604083015261218760608201612109565b606083015261219860808201612109565b60808301526121a960a08201612109565b60a08301526121ba60c0820161211d565b60c08301526121cb60e0820161212f565b60e08301526101006121de818301612011565b908301526101206121f0818301612011565b90830152610140612202818301612011565b90830152610160612214818301612011565b90830152610180612226818301612109565b908301526101a0612238818301612109565b9083015261224a6101c0809201612109565b9082015290565b604d8111611f9257600a0a90565b81810292918115918404141715611f9257565b91908201809211611f9257565b6008546040516335ea6a7560e01b81526001600160a01b0391821660048201526101e0918290829060249082907f0000000000000000000000000000000000000000000000000000000000000000165afa9182156103d657600092612415575b5050805151600160381b8116158015612406575b80156123f3575b6123ec5780640fffffffff61231760ff6123219460301c16612251565b9160741c1661225f565b9081156123e4576101008101516004919060209061234990610b12906001600160a01b031681565b60405163b1bf962d60e01b815293849182905afa80156103d6576123a16123a7916123ad946000916123c5575b5061239b61238f6101808601516001600160801b031690565b6001600160801b031690565b90612272565b9161320f565b90613298565b818111156123bc575050600090565b61061791611f85565b6123de915060203d6020116103cf576103c1818361045e565b38612376565b505060001990565b5050600090565b50670200000000000000811615156122fa565b506001603c1b811615156122f3565b6124349250803d1061243b575b61242c818361045e565b81019061213a565b38806122df565b503d612422565b6040519061244f82610443565b60018252603160f81b6020830152565b6040519061246c82610443565b60018252601960f91b6020830152565b61014435610617816119c9565b6101a435610617816119c9565b35610617816119c9565b604051906124ad82610443565b60018252603360f81b6020830152565b604051906124ca82610443565b6001825260203681840137565b916124ef60409295949560608552606085019061183d565b6001600160a01b0391821660208501529416910152565b6001600160a01b03818116801561261f5761251f6124bd565b60075461255090612538906001600160a01b0316610b12565b612541836120b5565b6001600160a01b039091169052565b60405180936370674ab960e01b8252818061257460209889963090600485016124d7565b03917f0000000000000000000000000000000000000000000000000000000000000000165afa9182156103d657600092612600575b506040516370a0823160e01b8152306004820152908390829060249082905afa9081156103d657610617936000926125e3575b5050612272565b6125f99250803d106103cf576103c1818361045e565b38806125dc565b612618919250833d85116103cf576103c1818361045e565b90386125a9565b505050600090565b6001600160a01b039081169081156123ec5761267c6020916126476124bd565b8160075416612655826120b5565b5260006040518096819582946308d8c03760e21b845260806004850152608484019061183d565b9083196024840152306044840152606483015203927f0000000000000000000000000000000000000000000000000000000000000000165af19081156103d657600091611ff8575090565b6126cf61227f565b600019908082146126ed5761061791506126e7611f97565b90613de1565b5090565b156126f857565b60405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152606490fd5b1561274457565b60405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b6044820152606490fd5b6008546040516335ea6a7560e01b81526001600160a01b0391821660048201819052906101e09081816024817f000000000000000000000000000000000000000000000000000000000000000088165afa9182156103d6576000926128aa575b5050805151600160381b81161590811561289a575b506128915761010001516040516370a0823160e01b81526001600160a01b0390911660048201529160209183916024918391165afa9081156103d6576128609161284491600091612872575b506126e7611f97565b6001600160a01b03909216600090815260046020526040902090565b549081811061286d575090565b905090565b61288b915060203d6020116103cf576103c1818361045e565b3861283b565b50505050600090565b6001603c1b9150161515386127ef565b6128c09250803d1061243b5761242c818361045e565b38806127da565b6001600160a01b0390811680156123ec57604090604483600754168351948593849263886fe70b60e01b8452600484015260248301527f0000000000000000000000000000000000000000000000000000000000000000165afa9081156103d657600091612933575090565b90506040813d60401161295d575b8161294e6040938361045e565b8101031261034d576020015190565b3d9150612941565b6040519061297282610443565b60018252600d60fa1b6020830152565b7f2a83c73b9e01ec0a1b95ff05940d809179668cc004230412d7047ffac3846ce781526001600160a01b0391821660208201529181166040830152606082019290925261ffff909216608083015291151560a082015260c081019290925260e08201929092526101e0810192918060c4356129fc816105dd565b1661010083015260e435612a0f816105dd565b16610120820152610104356101408201526101243561016082015260ff61014435612a39816119c9565b16610180820152610164356101a08201526101c061018435910152565b6001600160a01b039581871690612a6b612965565b612a7790831515611f47565b612a7f61245f565b612a8c9042831015611f47565b6001600160a01b03831660009081526006602052604090205490612aae6130c4565b60405191826020810191612ac890868d8d8d8d8d89612982565b0392601f19938481018252612add908261045e565b51902060405161190160f01b6020820190815260228201939093526042810191909152606292830181529091612b13908261045e565b5190206001600160a01b038416600090815260066020526040902090916001019055612b3d612489565b6101e435906101c43590612b50936132dc565b6001600160a01b031614612b626124a0565b612b6b91611f47565b610124359586612b81575b506126ed955061361a565b8515612c20576008546001600160a01b03165b16612b9d61247c565b96813b1561034d5760405163d505accf60e01b81526001600160a01b0384166004820152306024820152610104356044820152606481019190915260ff9790971660848801526101643560a48801526101843560c48801526126ed9690600090829060e490829084905af115612b765780611047612c1a9261042b565b38612b76565b600754612c35906001600160a01b0316610b12565b612b94565b9081602091031261034d5751610617816105dd565b60405190612c5c82610443565b60018252601b60f91b6020830152565b610617906119c3611f97565b60009160005b60098054821015612cd6578452600080516020613fa0833981519152810154600191906001600160a01b03908116612cb5816128c7565b918616612cc5575b505001612c7e565b612ccf9186613b47565b3880612cbd565b50506001600160a01b038216600090815260046020526040902091925090805490828203918211611f9257600093600080516020613f8083398151915292612d409255612d268460035403600355565b6040519384526001600160a01b0316929081906020820190565b0390a3565b60405163a9059cbb60e01b60208201526001600160a01b03909216602483015260448083019390935291815260808101916001600160401b0383118284101761043e5761084792604052613a31565b92919060005b8251811015612fa757612db3610b12610ba283866120c7565b15612f9f57612dc8611c07610ba283866120c7565b90612dfd82612de98860018060a01b03166000526004602052604060002090565b54612df7610ba285896120c7565b89613903565b612e10610b12610b12610ba285896120c7565b6040516370a0823160e01b815230600482015291906020908190849060249082905afa9081156103d6576001958a948992600094612f80575b505082600093808611612f65575b50808511612f50575b508584612e75575b5050505050505b01612d9a565b612f4595612ed1612ef094612ebb610ba2612eeb95612eb5612e99612f349b613ade565b6001600160a01b039097166000908152600b6020526040902090565b936120c7565b60018060a01b0316600052602052604060002090565b906001600160801b0382549181199060801b169116179055565b613ade565b6001600160a01b038a166000908152600b60205260409020612f1990612ebb610ba2888c6120c7565b906001600160801b03166001600160801b0319825416179055565b846106bf610b12610ba2868a6120c7565b853880868185612e68565b809350612f5d9194611f85565b919238612e60565b612f7a915061239b611838610ba28a876120c7565b38612e57565b612f97929450803d106103cf576103c1818361045e565b913880612e49565b600190612e6f565b5050509050565b6009548110156120c2576009600052600080516020613fa08339815191520190600090565b6001600160a01b038181166000818152600a60205260409020549092919060ff166130bf57613001826128c7565b6009546801000000000000000081101561043e577fa8f4dd7e60441ca288d902a295362002a0255a46560b24825821b36716d6fe5b936130ba9361304e8360016106c49501600955612fae565b819291549060031b9189831b921b191617905561309a61306c61083a565b60018152916001600160f01b03851660208401526001600160a01b03166000908152600a6020526040902090565b815160209092015160081b60ff191660ff92151592909216919091179055565b0390a2565b505050565b604051600090600054906130d7826103db565b9283825260209384830193600190866001821691826000146131ef575050600114613198575b505091816131136131929361318495038261045e565b519020604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f95810195865260208601929092527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc69085015246606085015230608085015291829060a0850190565b03601f19810183528261045e565b51902090565b600080805286935091907f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b8284106131da57505050820101816131136130fd565b805486850186015287949093019281016131c4565b60ff1916875292151560051b8501909201925083915061311390506130fd565b60c081015164ffffffffff16428103613239575060200151610617906001600160801b031661238f565b6001600160801b0360408301511690420390428211611f92576301e13380916132619161225f565b04676765c793fa10079d601b1b908101809111611f925761329261238f60206106179401516001600160801b031690565b90613c05565b90811580156132d4575b6123ec57806132bd676765c793fa10079d601b1b9284613e81565b92096132c65790565b60018101809111611f925790565b5080156132a2565b9161061793916132eb93613c8c565b90929192613d30565b6040519061330182610443565b60018252603560f81b6020830152565b6040519061331e82610443565b60018252603760f81b6020830152565b1561333557565b60405162461bcd60e51b815260206004820152601f60248201527f455243343632363a207769746864726177206d6f7265207468616e206d6178006044820152606490fd5b1561338157565b60405162461bcd60e51b815260206004820152601d60248201527f455243343632363a2072656465656d206d6f7265207468616e206d61780000006044820152606490fd5b949390916001600160a01b0391828416916133ea6133e26132f4565b841515611f47565b8015958615968761357a575b61340290610e7c613311565b61341661340d611f2a565b82841415611f47565b80919660001461353a57505080613521575b613439613433611f97565b866139fd565b9687925b61345187868416938433036116f157612c78565b60408051858152602081018990523391600080516020613f6083398151915291a41561350557600854604051631a4ca37b60e21b81526001600160a01b0391821660048201526024810192909252929092166044830152602090829060649082906000907f0000000000000000000000000000000000000000000000000000000000000000165af180156103d6576134e857509190565b6135009060203d6020116103cf576103c1818361045e565b509190565b60075461351d939192506001600160a01b0316612d45565b9190565b61353561352d8861277a565b86111561337a565b613428565b819891939650613558908361355e575b613552611f97565b90613c65565b9561343d565b61357561356d6115f88561277a565b82111561332e565b61354a565b5080156133f6565b1561358957565b60405162461bcd60e51b815260206004820152601e60248201527f455243343632363a206465706f736974206d6f7265207468616e206d617800006044820152606490fd5b156135d557565b60405162461bcd60e51b815260206004820152601b60248201527f455243343632363a206d696e74206d6f7265207468616e206d617800000000006044820152606490fd5b919493926001600160a01b0380831693929161363f6136376132f4565b861515611f47565b85613648613311565b5061376d575b61365f613659611f97565b89613de1565b809661366c61063c611f2a565b1561373857506008546001600160a01b031661368c893087868516613785565b827f00000000000000000000000000000000000000000000000000000000000000001691823b1561034d5760405163e8eda9df60e01b81526001600160a01b03929092166004830152602482018a905230604483015261ffff166064820152906000908290608490829084905af180156103d657600080516020613fc08339815191529361372092889261103a57506137dd565b60408051888152602081018790529390911692a39190565b600754600080516020613fc083398151915294613720935090613768908b906001600160a01b0316883091613785565b6137dd565b61378061377861227f565b891115613582565b61364e565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a08101918183106001600160401b0384111761043e5761084792604052613a31565b60009160005b60098054821015613848578452600080516020613fa0833981519152810154600191906001600160a01b0390811661381a816128c7565b918616151580613843575b613832575b5050016137e3565b61383c9186613b47565b388061382a565b613825565b5050915060035490828201809211611f9257612d40600080516020613f8083398151915291613878600094600355565b6001600160a01b03811660009081526004602052604090208054860190556040519485526001600160a01b0316939081906020820190565b604051906138bd82610443565b60018252603960f81b6020830152565b906040516138da81610443565b91546001600160801b038116835260801c6020830152565b60ff16604d8111611f9257600a0a90565b6139f0906106179461398a6139856139cd956107286139348260018060a01b0316600052600a602052604060002090565b9561396b6040519761394589610443565b5497602060ff8a16151591828152019860081c895260016139646138b0565b9114611f47565b6001600160a01b03166000908152600b6020526040902090565b6138cd565b9461399f61399a60025460ff1690565b6138f2565b926139b460208801516001600160801b031690565b966001600160801b03968791516001600160801b031690565b1690816139f757516001600160f81b031690505b6001600160f81b031690613dbd565b9116612272565b506139e1565b9081158015613a14575b6123ec5761061791613e81565b508015613a07565b9081602091031261034d575161061781610ca8565b600080613a7b9260018060a01b03169360208151910182865af13d15613ad6573d90613a5c82611f0f565b91613a6a604051938461045e565b82523d6000602084013e5b83613efc565b8051908115159182613ab4575b5050613a915750565b604051635274afe760e01b81526001600160a01b03919091166004820152602490fd5b613acf925090602080613acb938301019101613a1c565b1590565b3880613a88565b606090613a75565b6001600160801b0390818111613af2571690565b60405162461bcd60e51b815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e20316044820152663238206269747360c81b6064820152608490fd5b610847926040612f1992613b7f60018060a01b0382169560009287845260046020528585852054918383613b9f575b50505050613ade565b948152600b602052209060018060a01b0316600052602052604060002090565b613bd793613bb093612eeb93613903565b888552600b60209081528686206001600160a01b0389166000908152915260409020612ed1565b38858183613b76565b634e487b7160e01b600052601260045260246000fd5b8115613c00570490565b613be0565b816b019d971e4fe8401e7400000019048111158215171561034d57676765c793fa10079d601b1b91026b019d971e4fe8401e74000000010490565b8015613c0057600090676765c793fa10079d601b1b600009613c5f5790565b50600190565b90613c708183613de1565b918115613c0057676765c793fa10079d601b1b90096132c65790565b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411613d0457926020929160ff608095604051948552168484015260408301526060820152600092839182805260015afa156103d65780516001600160a01b03811615613cfb57918190565b50809160019190565b50505060009160039190565b60041115613d1a57565b634e487b7160e01b600052602160045260246000fd5b613d3981613d10565b80613d42575050565b613d4b81613d10565b60018103613d655760405163f645eedf60e01b8152600490fd5b613d6e81613d10565b60028103613d8f5760405163fce698f760e01b815260048101839052602490fd5b80613d9b600392613d10565b14613da35750565b6040516335e2f38360e21b81526004810191909152602490fd5b91908215612891578103908111611f9257613bf69161225f565b15613c0057600090565b676765c793fa10079d601b1b918183029160001984820993838086109503948086039514613e745784831115613e625782910981600003821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b60405163227bc15360e01b8152600490fd5b5050906106179250613bf6565b908082029060001981840990828083109203918083039214613ee857676765c793fa10079d601b1b9082821115613e62577f2245cd4e1f3755e770b615377cde9082e11ad04b156637b5cd27412a54f5b6b5940990828211900360e51b9103601b1c170290565b5050676765c793fa10079d601b1b91500490565b90613f235750805115613f1157805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580613f56575b613f34575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15613f2c56fefbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8dbddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7afdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7a26469706673582212201eb2b81a2bdbb1e69d0c00691f863002172f09a4e65d7293c104bce7fc1fcaa464736f6c63430008180033290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563b10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6a2646970667358221220874f5d59f97a28c1e85cd30bc96b091e7d38a36190e20f5e14d1ec9213d2e37064736f6c63430008180033",
  "devdoc": {
    "author": "BGD labs (modified by dTrinity)",
    "kind": "dev",
    "methods": {
      "createStaticATokens(address[])": {
        "params": {
          "underlyings": "the addresses of the underlyings to create."
        },
        "returns": {
          "_0": "address[] addresses of the new staticATokens."
        }
      },
      "getStaticAToken(address)": {
        "params": {
          "underlying": "the address of the underlying."
        },
        "returns": {
          "_0": "address the staticAToken address."
        }
      },
      "getStaticATokens()": {
        "returns": {
          "_0": "address[] list of tokens"
        }
      }
    },
    "title": "StaticATokenFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createStaticATokens(address[])": {
        "notice": "Creates new staticATokens"
      },
      "getStaticAToken(address)": {
        "notice": "Returns the staticAToken for a given underlying."
      },
      "getStaticATokens()": {
        "notice": "Returns all tokens deployed via this registry."
      }
    },
    "notice": "Factory contract that keeps track of all deployed static aToken wrappers for a specified pool. This registry also acts as a factory, allowing to deploy new static aTokens on demand. There can only be one static aToken per underlying on the registry at a time.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 90036,
        "contract": "contracts/vaults/atoken_wrapper/StaticATokenFactory.sol:StaticATokenFactory",
        "label": "_underlyingToStaticAToken",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 90039,
        "contract": "contracts/vaults/atoken_wrapper/StaticATokenFactory.sol:StaticATokenFactory",
        "label": "_staticATokens",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      }
    }
  }
}