{
  "address": "0xEfc15efb330112a2c313d5da8f1b29893AD4Cd99",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dStakeToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralVault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "expectedAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "actualAsset",
          "type": "address"
        }
      ],
      "name": "AdapterAssetMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultAsset",
          "type": "address"
        }
      ],
      "name": "AdapterNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "InconsistentState",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        }
      ],
      "name": "InsufficientDStableFromAdapter",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "calculatedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "SlippageCheckFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "existingAdapter",
          "type": "address"
        }
      ],
      "name": "VaultAssetManagedByDifferentAdapter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromAmount",
          "type": "uint256"
        }
      ],
      "name": "ZeroInputDStableValue",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultAsset",
          "type": "address"
        }
      ],
      "name": "ZeroPreviewWithdrawAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "adapterAddress",
          "type": "address"
        }
      ],
      "name": "AdapterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "adapterAddress",
          "type": "address"
        }
      ],
      "name": "AdapterSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultAsset",
          "type": "address"
        }
      ],
      "name": "DefaultDepositVaultAssetSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDustTolerance",
          "type": "uint256"
        }
      ],
      "name": "DustToleranceSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromAsset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fromAssetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toAssetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dStableAmountEquivalent",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "exchanger",
          "type": "address"
        }
      ],
      "name": "Exchanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "adapter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultAsset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "dStakeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultAssetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dStableAmount",
          "type": "uint256"
        }
      ],
      "name": "RouterDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SurplusHeld",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vaultAsset",
          "type": "address"
        }
      ],
      "name": "SurplusSwept",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultAssetAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dStableAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COLLATERAL_EXCHANGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DSTAKE_TOKEN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "adapterAddress",
          "type": "address"
        }
      ],
      "name": "addAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralVault",
      "outputs": [
        {
          "internalType": "contract IDStakeCollateralVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dStable",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dStakeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultDepositVaultAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dStableAmount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dustTolerance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromVaultAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toVaultAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromVaultAssetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minToVaultAssetAmount",
          "type": "uint256"
        }
      ],
      "name": "exchangeAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fromVaultAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toVaultAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromVaultAssetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minToVaultAssetAmount",
          "type": "uint256"
        }
      ],
      "name": "exchangeAssetsUsingAdapters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultAsset",
          "type": "address"
        }
      ],
      "name": "removeAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultAsset",
          "type": "address"
        }
      ],
      "name": "setDefaultDepositVaultAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dustTolerance",
          "type": "uint256"
        }
      ],
      "name": "setDustTolerance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxAmount",
          "type": "uint256"
        }
      ],
      "name": "sweepSurplus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultAssetToAdapter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dStableAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6ec862be1cb9f107c980f7a1caad6aaa3f824bd4fc5b9a67892f17331665624e",
  "receipt": {
    "to": null,
    "from": "0x0f5e3D9AEe7Ab5fDa909Af1ef147D98a7f4B3022",
    "contractAddress": "0xEfc15efb330112a2c313d5da8f1b29893AD4Cd99",
    "transactionIndex": 1,
    "gasUsed": "2003018",
    "logsBloom": "0x
    "blockHash": "0xfb4b35b3f5bce58d7009a3f8972b9dd114c7c8a21765aa4817a0200dae2c1114",
    "transactionHash": "0x6ec862be1cb9f107c980f7a1caad6aaa3f824bd4fc5b9a67892f17331665624e",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 23529371,
        "transactionHash": "0x6ec862be1cb9f107c980f7a1caad6aaa3f824bd4fc5b9a67892f17331665624e",
        "address": "0xEfc15efb330112a2c313d5da8f1b29893AD4Cd99",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000f5e3d9aee7ab5fda909af1ef147d98a7f4b3022",
          "0x0000000000000000000000000f5e3d9aee7ab5fda909af1ef147d98a7f4b3022"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xfb4b35b3f5bce58d7009a3f8972b9dd114c7c8a21765aa4817a0200dae2c1114"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 23529371,
        "transactionHash": "0x6ec862be1cb9f107c980f7a1caad6aaa3f824bd4fc5b9a67892f17331665624e",
        "address": "0xEfc15efb330112a2c313d5da8f1b29893AD4Cd99",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x7fee0d6ae731e4c26a7bffbf1bb702cb3aaa110506f5b2a78cc9372669d439ae",
          "0x00000000000000000000000058acc2600835211dcb5847c5fa422791fd492409",
          "0x0000000000000000000000000f5e3d9aee7ab5fda909af1ef147d98a7f4b3022"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xfb4b35b3f5bce58d7009a3f8972b9dd114c7c8a21765aa4817a0200dae2c1114"
      }
    ],
    "blockNumber": 23529371,
    "cumulativeGasUsed": "2078504",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x58AcC2600835211Dcb5847c5Fa422791Fd492409",
    "0x5432ed4A370718D6904485e2Fc114762C68Cc7BE"
  ],
  "numDeployments": 1,
  "solcInputHash": "3ab0b7ef278db081e26e71c26b8f317e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dStakeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expectedAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actualAsset\",\"type\":\"address\"}],\"name\":\"AdapterAssetMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAsset\",\"type\":\"address\"}],\"name\":\"AdapterNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"InconsistentState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"InsufficientDStableFromAdapter\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"calculatedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"SlippageCheckFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"existingAdapter\",\"type\":\"address\"}],\"name\":\"VaultAssetManagedByDifferentAdapter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromAmount\",\"type\":\"uint256\"}],\"name\":\"ZeroInputDStableValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAsset\",\"type\":\"address\"}],\"name\":\"ZeroPreviewWithdrawAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapterAddress\",\"type\":\"address\"}],\"name\":\"AdapterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapterAddress\",\"type\":\"address\"}],\"name\":\"AdapterSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultAsset\",\"type\":\"address\"}],\"name\":\"DefaultDepositVaultAssetSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDustTolerance\",\"type\":\"uint256\"}],\"name\":\"DustToleranceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromAssetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toAssetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dStableAmountEquivalent\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchanger\",\"type\":\"address\"}],\"name\":\"Exchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultAsset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dStakeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultAssetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dStableAmount\",\"type\":\"uint256\"}],\"name\":\"RouterDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SurplusHeld\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultAsset\",\"type\":\"address\"}],\"name\":\"SurplusSwept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultAssetAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dStableAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COLLATERAL_EXCHANGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DSTAKE_TOKEN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adapterAddress\",\"type\":\"address\"}],\"name\":\"addAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralVault\",\"outputs\":[{\"internalType\":\"contract IDStakeCollateralVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dStable\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dStakeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultDepositVaultAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dStableAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dustTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromVaultAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toVaultAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromVaultAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minToVaultAssetAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromVaultAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toVaultAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromVaultAssetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minToVaultAssetAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeAssetsUsingAdapters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAsset\",\"type\":\"address\"}],\"name\":\"removeAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAsset\",\"type\":\"address\"}],\"name\":\"setDefaultDepositVaultAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dustTolerance\",\"type\":\"uint256\"}],\"name\":\"setDustTolerance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"sweepSurplus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultAssetToAdapter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dStableAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interacts with the DStakeToken, DStakeCollateralVault, and various IDStableConversionAdapters.      This contract is non-upgradeable but replaceable via DStakeToken governance.      Relies on the associated DStakeToken for role management.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"addAdapter(address,address)\":{\"details\":\"Only callable by an address with DEFAULT_ADMIN_ROLE.\",\"params\":{\"adapterAddress\":\"The address of the new adapter contract.\",\"vaultAsset\":\"The address of the vault asset.\"}},\"deposit(uint256)\":{\"details\":\"Called by `DStakeToken._deposit()` after the token has received the dStable asset.The router MUST pull `dStableAmount` from the caller (`DStakeToken`).\",\"params\":{\"dStableAmount\":\"The amount of dStable asset deposited by the user into the DStakeToken.\"}},\"exchangeAssets(address,address,uint256,uint256)\":{\"details\":\"Pulls `fromVaultAsset` from the solver (`msg.sender`) and sends `toVaultAsset` from the vault to the solver.      Requires COLLATERAL_EXCHANGER_ROLE.\",\"params\":{\"fromVaultAsset\":\"The address of the asset the solver is providing.\",\"fromVaultAssetAmount\":\"The amount of `fromVaultAsset` provided by the solver.\",\"minToVaultAssetAmount\":\"The minimum amount of `toVaultAsset` the solver is willing to accept.\",\"toVaultAsset\":\"The address of the asset the solver will receive from the vault.\"}},\"exchangeAssetsUsingAdapters(address,address,uint256,uint256)\":{\"details\":\"Uses dSTABLE as the intermediary asset. Requires COLLATERAL_EXCHANGER_ROLE.\",\"params\":{\"fromVaultAsset\":\"The address of the asset to sell.\",\"fromVaultAssetAmount\":\"The amount of the `fromVaultAsset` to exchange.\",\"minToVaultAssetAmount\":\"The minimum amount of `toVaultAsset` the solver is willing to accept.\",\"toVaultAsset\":\"The address of the asset to buy.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"removeAdapter(address)\":{\"details\":\"Only callable by an address with DEFAULT_ADMIN_ROLE.Does not automatically migrate funds. Ensure assets managed by this adapter are zero      in the collateral vault or migrated via exchangeAssets before calling.\",\"params\":{\"vaultAsset\":\"The address of the vault asset to remove.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setDefaultDepositVaultAsset(address)\":{\"details\":\"Only callable by an address with DEFAULT_ADMIN_ROLE.\",\"params\":{\"vaultAsset\":\"The address of the vault asset to set as default.\"}},\"setDustTolerance(uint256)\":{\"details\":\"Only callable by DEFAULT_ADMIN_ROLE.\",\"params\":{\"_dustTolerance\":\"The new tolerance value in wei of dStable.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"sweepSurplus(uint256)\":{\"params\":{\"maxAmount\":\"Maximum amount of dSTABLE to sweep (use 0 to sweep full balance).\"}},\"withdraw(uint256,address,address)\":{\"details\":\"Called by `DStakeToken._withdraw()`.The router coordinates pulling the required `vaultAsset` from the collateral vault      and ensuring the converted dStable asset is sent to the `receiver`.\",\"params\":{\"dStableAmount\":\"The amount of dStable asset to be withdrawn to the `receiver` (after vault fees).\",\"owner\":\"The original owner initiating the withdrawal (typically the user burning shares).\",\"receiver\":\"The address that will receive the withdrawn dStable asset.\"}}},\"title\":\"DStakeRouterDLend\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAdapter(address,address)\":{\"notice\":\"Adds or updates a conversion adapter for a given vault asset.\"},\"deposit(uint256)\":{\"notice\":\"Handles the conversion of deposited dStable asset into a chosen `vaultAsset`         and informs the collateral vault.\"},\"exchangeAssets(address,address,uint256,uint256)\":{\"notice\":\"Exchanges assets between the collateral vault and an external solver.\"},\"exchangeAssetsUsingAdapters(address,address,uint256,uint256)\":{\"notice\":\"Exchanges `fromVaultAssetAmount` of one vault asset for another via their adapters.\"},\"removeAdapter(address)\":{\"notice\":\"Removes a conversion adapter for a given vault asset.\"},\"setDefaultDepositVaultAsset(address)\":{\"notice\":\"Sets the default vault asset to use for new deposits.\"},\"setDustTolerance(uint256)\":{\"notice\":\"Updates the `dustTolerance` used for value-parity checks.\"},\"sweepSurplus(uint256)\":{\"notice\":\"Sweeps any dSTABLE surplus held by the router back into the default vault asset.\"},\"withdraw(uint256,address,address)\":{\"notice\":\"Handles the conversion of a `vaultAsset` back into the dStable asset for withdrawal.\"}},\"notice\":\"Orchestrates deposits, withdrawals, and asset exchanges for a DStakeToken vault.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vaults/dstake/DStakeRouterDLend.sol\":\"DStakeRouterDLend\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-5/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/vaults/dstake/DStakeCollateralVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-5/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts-5/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IDStakeCollateralVault} from \\\"./interfaces/IDStakeCollateralVault.sol\\\";\\nimport {IDStableConversionAdapter} from \\\"./interfaces/IDStableConversionAdapter.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts-5/access/AccessControl.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts-5/utils/structs/EnumerableSet.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts-5/utils/ReentrancyGuard.sol\\\";\\n\\n// ---------------------------------------------------------------------------\\n// Internal interface to query the router's public mapping without importing the\\n// full router contract (avoids circular dependencies).\\n// ---------------------------------------------------------------------------\\ninterface IAdapterProvider {\\n    function vaultAssetToAdapter(address) external view returns (address);\\n}\\n\\n/**\\n * @title DStakeCollateralVault\\n * @notice Holds various yield-bearing/convertible ERC20 tokens (`vault assets`) managed by dSTAKE.\\n * @dev Calculates the total value of these assets in terms of the underlying dStable asset\\n *      using registered adapters. This contract is non-upgradeable but replaceable via\\n *      DStakeToken governance.\\n *      Uses AccessControl for role-based access control.\\n */\\ncontract DStakeCollateralVault is\\n    IDStakeCollateralVault,\\n    AccessControl,\\n    ReentrancyGuard\\n{\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // --- Roles ---\\n    bytes32 public constant ROUTER_ROLE = keccak256(\\\"ROUTER_ROLE\\\");\\n\\n    // --- Errors ---\\n    error ZeroAddress();\\n    error AssetNotSupported(address asset);\\n    error AssetAlreadySupported(address asset);\\n    error NonZeroBalance(address asset);\\n    error CannotRescueRestrictedToken(address token);\\n    error ETHTransferFailed(address receiver, uint256 amount);\\n\\n    // --- Events ---\\n    event TokenRescued(\\n        address indexed token,\\n        address indexed receiver,\\n        uint256 amount\\n    );\\n    event ETHRescued(address indexed receiver, uint256 amount);\\n\\n    // --- State ---\\n    address public immutable dStakeToken; // The DStakeToken this vault serves\\n    address public immutable dStable; // The underlying dStable asset address\\n\\n    address public router; // The DStakeRouter allowed to interact\\n\\n    EnumerableSet.AddressSet private _supportedAssets; // Set of supported vault assets\\n\\n    // --- Constructor ---\\n    constructor(address _dStakeVaultShare, address _dStableAsset) {\\n        if (_dStakeVaultShare == address(0) || _dStableAsset == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        dStakeToken = _dStakeVaultShare;\\n        dStable = _dStableAsset;\\n\\n        // Set up the DEFAULT_ADMIN_ROLE initially to the contract deployer\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    // --- External Views (IDStakeCollateralVault Interface) ---\\n\\n    /**\\n     * @inheritdoc IDStakeCollateralVault\\n     */\\n    function totalValueInDStable()\\n        external\\n        view\\n        override\\n        returns (uint256 dStableValue)\\n    {\\n        uint256 totalValue = 0;\\n        uint256 len = _supportedAssets.length();\\n        for (uint256 i = 0; i < len; i++) {\\n            address vaultAsset = _supportedAssets.at(i);\\n            address adapterAddress = IAdapterProvider(router)\\n                .vaultAssetToAdapter(vaultAsset);\\n\\n            if (adapterAddress == address(0)) {\\n                // If there is no adapter configured, simply skip this asset to\\n                // preserve liveness. Anyone can dust this vault and we cannot\\n                // enforce that all assets have adapters before removal\\n                continue;\\n            }\\n\\n            uint256 balance = IERC20(vaultAsset).balanceOf(address(this));\\n            if (balance > 0) {\\n                totalValue += IDStableConversionAdapter(adapterAddress)\\n                    .assetValueInDStable(vaultAsset, balance);\\n            }\\n        }\\n        return totalValue;\\n    }\\n\\n    // --- External Functions (Router Interactions) ---\\n\\n    /**\\n     * @notice Transfers `amount` of `vaultAsset` from this vault to `recipient`.\\n     * @dev Only callable by the registered router (ROUTER_ROLE).\\n     */\\n    function sendAsset(\\n        address vaultAsset,\\n        uint256 amount,\\n        address recipient\\n    ) external onlyRole(ROUTER_ROLE) {\\n        if (!_isSupported(vaultAsset)) revert AssetNotSupported(vaultAsset);\\n        IERC20(vaultAsset).safeTransfer(recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Adds a new supported vault asset. Can only be invoked by the router.\\n     */\\n    function addSupportedAsset(\\n        address vaultAsset\\n    ) external onlyRole(ROUTER_ROLE) {\\n        if (vaultAsset == address(0)) revert ZeroAddress();\\n        if (_isSupported(vaultAsset)) revert AssetAlreadySupported(vaultAsset);\\n\\n        _supportedAssets.add(vaultAsset);\\n        emit SupportedAssetAdded(vaultAsset);\\n    }\\n\\n    /**\\n     * @notice Removes a supported vault asset. Can only be invoked by the router.\\n     */\\n    function removeSupportedAsset(\\n        address vaultAsset\\n    ) external onlyRole(ROUTER_ROLE) {\\n        if (!_isSupported(vaultAsset)) revert AssetNotSupported(vaultAsset);\\n        // NOTE: Previously this function reverted if the vault still held a\\n        // non-zero balance of the asset, causing a griefing / DoS vector:\\n        // anyone could deposit 1 wei of the token to block removal. The\\n        // check has been removed so governance can always delist an asset.\\n\\n        _supportedAssets.remove(vaultAsset);\\n        emit SupportedAssetRemoved(vaultAsset);\\n    }\\n\\n    // --- Governance Functions ---\\n\\n    /**\\n     * @notice Sets the router address. Grants ROUTER_ROLE to new router and\\n     *         revokes it from the previous router.\\n     */\\n    function setRouter(\\n        address _newRouter\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_newRouter == address(0)) revert ZeroAddress();\\n\\n        // Revoke role from old router\\n        if (router != address(0)) {\\n            _revokeRole(ROUTER_ROLE, router);\\n        }\\n\\n        _grantRole(ROUTER_ROLE, _newRouter);\\n        router = _newRouter;\\n        emit RouterSet(_newRouter);\\n    }\\n\\n    // --- Internal Utilities ---\\n\\n    function _isSupported(address asset) private view returns (bool) {\\n        return _supportedAssets.contains(asset);\\n    }\\n\\n    // --- External Views ---\\n\\n    /**\\n     * @notice Returns the vault asset at `index` from the internal supported set.\\n     *         Kept for backwards-compatibility with the previous public array getter.\\n     */\\n    function supportedAssets(\\n        uint256 index\\n    ) external view override returns (address) {\\n        return _supportedAssets.at(index);\\n    }\\n\\n    /**\\n     * @notice Returns the entire list of supported vault assets. Useful for UIs & off-chain tooling.\\n     */\\n    function getSupportedAssets() external view returns (address[] memory) {\\n        return _supportedAssets.values();\\n    }\\n\\n    // --- Recovery Functions ---\\n\\n    /**\\n     * @notice Rescues tokens accidentally sent to the contract\\n     * @dev Cannot rescue supported vault assets or the dStable token\\n     * @param token Address of the token to rescue\\n     * @param receiver Address to receive the rescued tokens\\n     * @param amount Amount of tokens to rescue\\n     */\\n    function rescueToken(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) nonReentrant {\\n        if (receiver == address(0)) revert ZeroAddress();\\n\\n        // Check if token is a supported asset\\n        if (_isSupported(token)) {\\n            revert CannotRescueRestrictedToken(token);\\n        }\\n\\n        // Check if token is the dStable token\\n        if (token == dStable) {\\n            revert CannotRescueRestrictedToken(token);\\n        }\\n\\n        // Rescue the token\\n        IERC20(token).safeTransfer(receiver, amount);\\n        emit TokenRescued(token, receiver, amount);\\n    }\\n\\n    /**\\n     * @notice Rescues ETH accidentally sent to the contract\\n     * @param receiver Address to receive the rescued ETH\\n     * @param amount Amount of ETH to rescue\\n     */\\n    function rescueETH(\\n        address receiver,\\n        uint256 amount\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) nonReentrant {\\n        if (receiver == address(0)) revert ZeroAddress();\\n\\n        (bool success, ) = receiver.call{value: amount}(\\\"\\\");\\n        if (!success) revert ETHTransferFailed(receiver, amount);\\n\\n        emit ETHRescued(receiver, amount);\\n    }\\n\\n    /**\\n     * @notice Returns the list of tokens that cannot be rescued\\n     * @return restrictedTokens Array of restricted token addresses\\n     */\\n    function getRestrictedRescueTokens()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        address[] memory assets = _supportedAssets.values();\\n        address[] memory restrictedTokens = new address[](assets.length + 1);\\n\\n        // Add all supported assets\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            restrictedTokens[i] = assets[i];\\n        }\\n\\n        // Add dStable token\\n        restrictedTokens[assets.length] = dStable;\\n\\n        return restrictedTokens;\\n    }\\n\\n    /**\\n     * @notice Allows the contract to receive ETH\\n     */\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xbf0202ad717e0f726f64fca4a78081f678ad58da34b4b7e19a51b6359822861b\",\"license\":\"MIT\"},\"contracts/vaults/dstake/DStakeRouterDLend.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts-5/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts-5/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts-5/access/AccessControl.sol\\\";\\nimport {IDStakeRouter} from \\\"./interfaces/IDStakeRouter.sol\\\";\\nimport {IDStableConversionAdapter} from \\\"./interfaces/IDStableConversionAdapter.sol\\\";\\nimport {IDStakeCollateralVault} from \\\"./DStakeCollateralVault.sol\\\";\\nimport {IERC4626} from \\\"@openzeppelin/contracts-5/interfaces/IERC4626.sol\\\";\\n\\n/**\\n * @title DStakeRouterDLend\\n * @notice Orchestrates deposits, withdrawals, and asset exchanges for a DStakeToken vault.\\n * @dev Interacts with the DStakeToken, DStakeCollateralVault, and various IDStableConversionAdapters.\\n *      This contract is non-upgradeable but replaceable via DStakeToken governance.\\n *      Relies on the associated DStakeToken for role management.\\n */\\ncontract DStakeRouterDLend is IDStakeRouter, AccessControl {\\n    using SafeERC20 for IERC20;\\n\\n    // --- Errors ---\\n    error ZeroAddress();\\n    error AdapterNotFound(address vaultAsset);\\n    error ZeroPreviewWithdrawAmount(address vaultAsset);\\n    error InsufficientDStableFromAdapter(\\n        address vaultAsset,\\n        uint256 expected,\\n        uint256 actual\\n    );\\n    error VaultAssetManagedByDifferentAdapter(\\n        address vaultAsset,\\n        address existingAdapter\\n    );\\n    error ZeroInputDStableValue(address fromAsset, uint256 fromAmount);\\n    error AdapterAssetMismatch(\\n        address adapter,\\n        address expectedAsset,\\n        address actualAsset\\n    );\\n    error SlippageCheckFailed(\\n        address toAsset,\\n        uint256 calculatedAmount,\\n        uint256 minAmount\\n    );\\n    error InconsistentState(string message);\\n\\n    // --- Roles ---\\n    bytes32 public constant DSTAKE_TOKEN_ROLE = keccak256(\\\"DSTAKE_TOKEN_ROLE\\\");\\n    bytes32 public constant COLLATERAL_EXCHANGER_ROLE =\\n        keccak256(\\\"COLLATERAL_EXCHANGER_ROLE\\\");\\n\\n    // --- State ---\\n    address public immutable dStakeToken; // The DStakeToken this router serves\\n    IDStakeCollateralVault public immutable collateralVault; // The DStakeCollateralVault this router serves\\n    address public immutable dStable; // The underlying dSTABLE asset address\\n\\n    // Governance-configurable risk parameters\\n    uint256 public dustTolerance = 1; // 1 wei default tolerance\\n\\n    mapping(address => address) public vaultAssetToAdapter; // vaultAsset => adapterAddress\\n    address public defaultDepositVaultAsset; // Default strategy for deposits\\n\\n    // Struct used to pack local variables in functions prone to \\\"stack too deep\\\" compiler errors\\n    struct ExchangeLocals {\\n        address fromAdapterAddress;\\n        address toAdapterAddress;\\n        IDStableConversionAdapter fromAdapter;\\n        IDStableConversionAdapter toAdapter;\\n        uint256 dStableValueIn;\\n        uint256 calculatedToVaultAssetAmount;\\n    }\\n\\n    // --- Constructor ---\\n    constructor(address _dStakeToken, address _collateralVault) {\\n        if (_dStakeToken == address(0) || _collateralVault == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        dStakeToken = _dStakeToken;\\n        collateralVault = IDStakeCollateralVault(_collateralVault);\\n        dStable = collateralVault.dStable(); // Fetch dStable address from vault\\n        if (dStable == address(0)) {\\n            revert ZeroAddress();\\n        }\\n\\n        // Setup roles\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(DSTAKE_TOKEN_ROLE, _dStakeToken);\\n    }\\n\\n    // --- External Functions (IDStakeRouter Interface) ---\\n\\n    /**\\n     * @inheritdoc IDStakeRouter\\n     */\\n    function deposit(\\n        uint256 dStableAmount\\n    ) external override onlyRole(DSTAKE_TOKEN_ROLE) {\\n        address adapterAddress = vaultAssetToAdapter[defaultDepositVaultAsset];\\n        if (adapterAddress == address(0)) {\\n            revert AdapterNotFound(defaultDepositVaultAsset);\\n        }\\n\\n        (\\n            address vaultAssetExpected,\\n            uint256 expectedShares\\n        ) = IDStableConversionAdapter(adapterAddress)\\n                .previewConvertToVaultAsset(dStableAmount);\\n\\n        uint256 mintedShares = _executeDeposit(\\n            adapterAddress,\\n            vaultAssetExpected,\\n            dStableAmount\\n        );\\n\\n        if (mintedShares < expectedShares) {\\n            revert SlippageCheckFailed(\\n                vaultAssetExpected,\\n                mintedShares,\\n                expectedShares\\n            );\\n        }\\n\\n        emit RouterDeposit(\\n            adapterAddress,\\n            vaultAssetExpected,\\n            msg.sender,\\n            mintedShares,\\n            dStableAmount\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs the actual pull-approve-convert sequence and returns the number of shares\\n     *      minted to the collateral vault.\\n     * @param adapterAddress The adapter to use for conversion.\\n     * @param vaultAssetExpected The vault asset that the adapter should mint.\\n     * @param dStableAmount The amount of dStable being deposited.\\n     * @return mintedShares The number of vault asset shares minted.\\n     */\\n    function _executeDeposit(\\n        address adapterAddress,\\n        address vaultAssetExpected,\\n        uint256 dStableAmount\\n    ) private returns (uint256 mintedShares) {\\n        uint256 beforeBal = IERC20(vaultAssetExpected).balanceOf(\\n            address(collateralVault)\\n        );\\n\\n        // Pull dStable from caller (DStakeToken)\\n        IERC20(dStable).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            dStableAmount\\n        );\\n\\n        // Approve adapter to spend dStable\\n        // Use standard approve for trusted protocol token (dStable)\\n        IERC20(dStable).approve(adapterAddress, dStableAmount);\\n\\n        // Convert dStable to vault asset (minted directly to collateral vault)\\n        (\\n            address vaultAssetActual,\\n            uint256 reportedShares\\n        ) = IDStableConversionAdapter(adapterAddress).convertToVaultAsset(\\n                dStableAmount\\n            );\\n\\n        if (vaultAssetActual != vaultAssetExpected) {\\n            revert AdapterAssetMismatch(\\n                adapterAddress,\\n                vaultAssetExpected,\\n                vaultAssetActual\\n            );\\n        }\\n\\n        mintedShares =\\n            IERC20(vaultAssetExpected).balanceOf(address(collateralVault)) -\\n            beforeBal;\\n\\n        if (mintedShares != reportedShares) {\\n            revert InconsistentState(\\\"Adapter mis-reported shares\\\");\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IDStakeRouter\\n     */\\n    function withdraw(\\n        uint256 dStableAmount,\\n        address receiver,\\n        address owner\\n    ) external override onlyRole(DSTAKE_TOKEN_ROLE) {\\n        address adapterAddress = vaultAssetToAdapter[defaultDepositVaultAsset];\\n        if (adapterAddress == address(0)) {\\n            revert AdapterNotFound(defaultDepositVaultAsset);\\n        }\\n        IDStableConversionAdapter adapter = IDStableConversionAdapter(\\n            adapterAddress\\n        );\\n\\n        // 1. Determine vault asset and required amount\\n        address vaultAsset = adapter.vaultAsset();\\n        // Use previewConvertFromVaultAsset to get the required vaultAssetAmount for the target dStableAmount\\n        uint256 vaultAssetAmount = IERC4626(vaultAsset).previewWithdraw(\\n            dStableAmount\\n        );\\n        if (vaultAssetAmount == 0) revert ZeroPreviewWithdrawAmount(vaultAsset);\\n\\n        // 2. Pull vaultAsset from collateral vault\\n        collateralVault.sendAsset(vaultAsset, vaultAssetAmount, address(this));\\n\\n        // 3. Approve adapter (use forceApprove for external vault assets)\\n        IERC20(vaultAsset).forceApprove(adapterAddress, vaultAssetAmount);\\n\\n        // 4. Call adapter to convert and send dStable to receiver\\n        // Temporarily transfer to this contract, then forward to receiver if needed\\n        uint256 receivedDStable = adapter.convertFromVaultAsset(\\n            vaultAssetAmount\\n        );\\n\\n        // Sanity check: Ensure adapter returned at least the requested amount\\n        if (receivedDStable < dStableAmount) {\\n            revert InsufficientDStableFromAdapter(\\n                vaultAsset,\\n                dStableAmount,\\n                receivedDStable\\n            );\\n        }\\n\\n        // 5. Transfer ONLY the requested amount to the user\\n        IERC20(dStable).safeTransfer(receiver, dStableAmount);\\n\\n        // 6. If adapter over-delivered, immediately convert the surplus dStable\\n        //    back into vault-asset shares so the value is reflected in\\n        //    totalAssets() for all shareholders.\\n        uint256 surplus = receivedDStable - dStableAmount;\\n        if (surplus > 0) {\\n            // Give the adapter allowance to pull the surplus (standard approve for trusted dStable)\\n            IERC20(dStable).approve(adapterAddress, surplus);\\n\\n            // Attempt to recycle surplus; on failure hold it in the router\\n            try adapter.convertToVaultAsset(surplus) returns (\\n                address mintedAsset,\\n                uint256 /* mintedAmount */\\n            ) {\\n                // Sanity: adapter must mint the same asset we just redeemed from\\n                if (mintedAsset != vaultAsset) {\\n                    revert AdapterAssetMismatch(\\n                        adapterAddress,\\n                        vaultAsset,\\n                        mintedAsset\\n                    );\\n                }\\n            } catch {\\n                // Clear approval in case of revert and keep surplus inside router\\n                IERC20(dStable).approve(adapterAddress, 0);\\n                emit SurplusHeld(surplus);\\n            }\\n            // If success: shares minted directly to collateralVault; surplus value captured\\n        }\\n\\n        emit Withdrawn(\\n            vaultAsset,\\n            vaultAssetAmount,\\n            dStableAmount,\\n            owner,\\n            receiver\\n        );\\n    }\\n\\n    // --- External Functions (Exchange/Rebalance) ---\\n\\n    /**\\n     * @notice Exchanges `fromVaultAssetAmount` of one vault asset for another via their adapters.\\n     * @dev Uses dSTABLE as the intermediary asset. Requires COLLATERAL_EXCHANGER_ROLE.\\n     * @param fromVaultAsset The address of the asset to sell.\\n     * @param toVaultAsset The address of the asset to buy.\\n     * @param fromVaultAssetAmount The amount of the `fromVaultAsset` to exchange.\\n     * @param minToVaultAssetAmount The minimum amount of `toVaultAsset` the solver is willing to accept.\\n     */\\n    function exchangeAssetsUsingAdapters(\\n        address fromVaultAsset,\\n        address toVaultAsset,\\n        uint256 fromVaultAssetAmount,\\n        uint256 minToVaultAssetAmount\\n    ) external onlyRole(COLLATERAL_EXCHANGER_ROLE) {\\n        address fromAdapterAddress = vaultAssetToAdapter[fromVaultAsset];\\n        address toAdapterAddress = vaultAssetToAdapter[toVaultAsset];\\n        if (fromAdapterAddress == address(0))\\n            revert AdapterNotFound(fromVaultAsset);\\n        if (toAdapterAddress == address(0))\\n            revert AdapterNotFound(toVaultAsset);\\n\\n        IDStableConversionAdapter fromAdapter = IDStableConversionAdapter(\\n            fromAdapterAddress\\n        );\\n        IDStableConversionAdapter toAdapter = IDStableConversionAdapter(\\n            toAdapterAddress\\n        );\\n\\n        // 1. Get assets and calculate equivalent dStable amount\\n        uint256 dStableAmountEquivalent = fromAdapter\\n            .previewConvertFromVaultAsset(fromVaultAssetAmount);\\n\\n        // 2. Pull fromVaultAsset from collateral vault\\n        collateralVault.sendAsset(\\n            fromVaultAsset,\\n            fromVaultAssetAmount,\\n            address(this)\\n        );\\n\\n        // 3. Approve fromAdapter (use forceApprove for external vault assets) & Convert fromVaultAsset -> dStable (sent to this router)\\n        IERC20(fromVaultAsset).forceApprove(\\n            fromAdapterAddress,\\n            fromVaultAssetAmount\\n        );\\n        uint256 receivedDStable = fromAdapter.convertFromVaultAsset(\\n            fromVaultAssetAmount\\n        );\\n\\n        // 4. Approve toAdapter (standard approve for trusted dStable) & Convert dStable -> toVaultAsset (sent to collateralVault)\\n        IERC20(dStable).approve(toAdapterAddress, receivedDStable);\\n        (\\n            address actualToVaultAsset,\\n            uint256 resultingToVaultAssetAmount\\n        ) = toAdapter.convertToVaultAsset(receivedDStable);\\n        if (actualToVaultAsset != toVaultAsset) {\\n            revert AdapterAssetMismatch(\\n                toAdapterAddress,\\n                toVaultAsset,\\n                actualToVaultAsset\\n            );\\n        }\\n        // Slippage control: ensure output meets minimum requirement\\n        if (resultingToVaultAssetAmount < minToVaultAssetAmount) {\\n            revert SlippageCheckFailed(\\n                toVaultAsset,\\n                resultingToVaultAssetAmount,\\n                minToVaultAssetAmount\\n            );\\n        }\\n\\n        // --- Underlying value parity check ---\\n        uint256 resultingDStableEquivalent = toAdapter\\n            .previewConvertFromVaultAsset(resultingToVaultAssetAmount);\\n\\n        // Rely on Solidity 0.8 checked arithmetic: if `dustTolerance` is greater than\\n        // `dStableAmountEquivalent`, the subtraction will underflow and the transaction\\n        // will revert automatically. This saves gas compared to a ternary guard.\\n        uint256 minRequiredDStable = dStableAmountEquivalent - dustTolerance;\\n\\n        if (resultingDStableEquivalent < minRequiredDStable) {\\n            revert SlippageCheckFailed(\\n                dStable,\\n                resultingDStableEquivalent,\\n                minRequiredDStable\\n            );\\n        }\\n\\n        emit Exchanged(\\n            fromVaultAsset,\\n            toVaultAsset,\\n            fromVaultAssetAmount,\\n            resultingToVaultAssetAmount,\\n            dStableAmountEquivalent,\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * @notice Exchanges assets between the collateral vault and an external solver.\\n     * @dev Pulls `fromVaultAsset` from the solver (`msg.sender`) and sends `toVaultAsset` from the vault to the solver.\\n     *      Requires COLLATERAL_EXCHANGER_ROLE.\\n     * @param fromVaultAsset The address of the asset the solver is providing.\\n     * @param toVaultAsset The address of the asset the solver will receive from the vault.\\n     * @param fromVaultAssetAmount The amount of `fromVaultAsset` provided by the solver.\\n     * @param minToVaultAssetAmount The minimum amount of `toVaultAsset` the solver is willing to accept.\\n     */\\n    function exchangeAssets(\\n        address fromVaultAsset,\\n        address toVaultAsset,\\n        uint256 fromVaultAssetAmount,\\n        uint256 minToVaultAssetAmount\\n    ) external onlyRole(COLLATERAL_EXCHANGER_ROLE) {\\n        if (fromVaultAssetAmount == 0) {\\n            revert InconsistentState(\\\"Input amount cannot be zero\\\");\\n        }\\n        if (fromVaultAsset == address(0) || toVaultAsset == address(0)) {\\n            revert ZeroAddress();\\n        }\\n\\n        ExchangeLocals memory locals;\\n\\n        // Resolve adapters\\n        locals.fromAdapterAddress = vaultAssetToAdapter[fromVaultAsset];\\n        locals.toAdapterAddress = vaultAssetToAdapter[toVaultAsset];\\n\\n        if (locals.fromAdapterAddress == address(0))\\n            revert AdapterNotFound(fromVaultAsset);\\n        if (locals.toAdapterAddress == address(0))\\n            revert AdapterNotFound(toVaultAsset);\\n\\n        locals.fromAdapter = IDStableConversionAdapter(\\n            locals.fromAdapterAddress\\n        );\\n        locals.toAdapter = IDStableConversionAdapter(locals.toAdapterAddress);\\n\\n        // Calculate dStable received for the input asset\\n        locals.dStableValueIn = locals.fromAdapter.previewConvertFromVaultAsset(\\n            fromVaultAssetAmount\\n        );\\n        if (locals.dStableValueIn == 0) {\\n            revert ZeroInputDStableValue(fromVaultAsset, fromVaultAssetAmount);\\n        }\\n\\n        // Calculate expected output vault asset amount\\n        (address expectedToAsset, uint256 tmpToAmount) = locals\\n            .toAdapter\\n            .previewConvertToVaultAsset(locals.dStableValueIn);\\n\\n        if (expectedToAsset != toVaultAsset) {\\n            revert AdapterAssetMismatch(\\n                locals.toAdapterAddress,\\n                toVaultAsset,\\n                expectedToAsset\\n            );\\n        }\\n\\n        locals.calculatedToVaultAssetAmount = tmpToAmount;\\n\\n        // Slippage check\\n        if (locals.calculatedToVaultAssetAmount < minToVaultAssetAmount) {\\n            revert SlippageCheckFailed(\\n                toVaultAsset,\\n                locals.calculatedToVaultAssetAmount,\\n                minToVaultAssetAmount\\n            );\\n        }\\n\\n        // --- Asset movements ---\\n\\n        // 1. Pull `fromVaultAsset` from solver to this contract\\n        IERC20(fromVaultAsset).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            fromVaultAssetAmount\\n        );\\n\\n        // 2. Transfer the asset into the collateral vault\\n        IERC20(fromVaultAsset).safeTransfer(\\n            address(collateralVault),\\n            fromVaultAssetAmount\\n        );\\n\\n        // 3. Send the calculated amount of `toVaultAsset` to the solver\\n        collateralVault.sendAsset(\\n            toVaultAsset,\\n            locals.calculatedToVaultAssetAmount,\\n            msg.sender\\n        );\\n\\n        emit Exchanged(\\n            fromVaultAsset,\\n            toVaultAsset,\\n            fromVaultAssetAmount,\\n            locals.calculatedToVaultAssetAmount,\\n            locals.dStableValueIn,\\n            msg.sender\\n        );\\n    }\\n\\n    // --- External Functions (Governance - Managed by Admin) ---\\n\\n    /**\\n     * @notice Adds or updates a conversion adapter for a given vault asset.\\n     * @dev Only callable by an address with DEFAULT_ADMIN_ROLE.\\n     * @param vaultAsset The address of the vault asset.\\n     * @param adapterAddress The address of the new adapter contract.\\n     */\\n    function addAdapter(\\n        address vaultAsset,\\n        address adapterAddress\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (adapterAddress == address(0) || vaultAsset == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        address adapterVaultAsset = IDStableConversionAdapter(adapterAddress)\\n            .vaultAsset();\\n        if (adapterVaultAsset != vaultAsset)\\n            revert AdapterAssetMismatch(\\n                adapterAddress,\\n                vaultAsset,\\n                adapterVaultAsset\\n            );\\n        if (\\n            vaultAssetToAdapter[vaultAsset] != address(0) &&\\n            vaultAssetToAdapter[vaultAsset] != adapterAddress\\n        ) {\\n            revert VaultAssetManagedByDifferentAdapter(\\n                vaultAsset,\\n                vaultAssetToAdapter[vaultAsset]\\n            );\\n        }\\n        vaultAssetToAdapter[vaultAsset] = adapterAddress;\\n\\n        // Inform the collateral vault of the new supported asset list (no-op if already added)\\n        try collateralVault.addSupportedAsset(vaultAsset) {} catch {}\\n\\n        emit AdapterSet(vaultAsset, adapterAddress);\\n    }\\n\\n    /**\\n     * @notice Removes a conversion adapter for a given vault asset.\\n     * @dev Only callable by an address with DEFAULT_ADMIN_ROLE.\\n     * @dev Does not automatically migrate funds. Ensure assets managed by this adapter are zero\\n     *      in the collateral vault or migrated via exchangeAssets before calling.\\n     * @param vaultAsset The address of the vault asset to remove.\\n     */\\n    function removeAdapter(\\n        address vaultAsset\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        address adapterAddress = vaultAssetToAdapter[vaultAsset];\\n        if (adapterAddress == address(0)) {\\n            revert AdapterNotFound(vaultAsset);\\n        }\\n        delete vaultAssetToAdapter[vaultAsset];\\n\\n        // Inform the collateral vault to remove supported asset.\\n        collateralVault.removeSupportedAsset(vaultAsset);\\n\\n        emit AdapterRemoved(vaultAsset, adapterAddress);\\n    }\\n\\n    /**\\n     * @notice Sets the default vault asset to use for new deposits.\\n     * @dev Only callable by an address with DEFAULT_ADMIN_ROLE.\\n     * @param vaultAsset The address of the vault asset to set as default.\\n     */\\n    function setDefaultDepositVaultAsset(\\n        address vaultAsset\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (vaultAssetToAdapter[vaultAsset] == address(0)) {\\n            revert AdapterNotFound(vaultAsset);\\n        }\\n        defaultDepositVaultAsset = vaultAsset;\\n        emit DefaultDepositVaultAssetSet(vaultAsset);\\n    }\\n\\n    // --- Events ---\\n    event RouterDeposit(\\n        address indexed adapter,\\n        address indexed vaultAsset,\\n        address indexed dStakeToken,\\n        uint256 vaultAssetAmount,\\n        uint256 dStableAmount\\n    );\\n    event Withdrawn(\\n        address indexed vaultAsset,\\n        uint256 vaultAssetAmount,\\n        uint256 dStableAmount,\\n        address owner,\\n        address receiver\\n    );\\n    event Exchanged(\\n        address indexed fromAsset,\\n        address indexed toAsset,\\n        uint256 fromAssetAmount,\\n        uint256 toAssetAmount,\\n        uint256 dStableAmountEquivalent,\\n        address indexed exchanger\\n    );\\n    event AdapterSet(address indexed vaultAsset, address adapterAddress);\\n    event AdapterRemoved(address indexed vaultAsset, address adapterAddress);\\n    event DefaultDepositVaultAssetSet(address indexed vaultAsset);\\n    event DustToleranceSet(uint256 newDustTolerance);\\n    event SurplusHeld(uint256 amount);\\n    event SurplusSwept(uint256 amount, address vaultAsset);\\n\\n    // --- Governance setters ---\\n\\n    /**\\n     * @notice Updates the `dustTolerance` used for value-parity checks.\\n     * @dev Only callable by DEFAULT_ADMIN_ROLE.\\n     * @param _dustTolerance The new tolerance value in wei of dStable.\\n     */\\n    function setDustTolerance(\\n        uint256 _dustTolerance\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        dustTolerance = _dustTolerance;\\n        emit DustToleranceSet(_dustTolerance);\\n    }\\n\\n    /**\\n     * @notice Sweeps any dSTABLE surplus held by the router back into the default vault asset.\\n     * @param maxAmount Maximum amount of dSTABLE to sweep (use 0 to sweep full balance).\\n     */\\n    function sweepSurplus(\\n        uint256 maxAmount\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        uint256 balance = IERC20(dStable).balanceOf(address(this));\\n        if (balance == 0) revert ZeroInputDStableValue(dStable, 0);\\n\\n        uint256 amountToSweep = (maxAmount == 0 || maxAmount > balance)\\n            ? balance\\n            : maxAmount;\\n\\n        address adapterAddress = vaultAssetToAdapter[defaultDepositVaultAsset];\\n        if (adapterAddress == address(0))\\n            revert AdapterNotFound(defaultDepositVaultAsset);\\n\\n        IDStableConversionAdapter adapter = IDStableConversionAdapter(\\n            adapterAddress\\n        );\\n        address vaultAsset = adapter.vaultAsset();\\n\\n        IERC20(dStable).approve(adapterAddress, amountToSweep);\\n        (address mintedAsset, ) = adapter.convertToVaultAsset(amountToSweep);\\n\\n        if (mintedAsset != vaultAsset) {\\n            revert AdapterAssetMismatch(\\n                adapterAddress,\\n                vaultAsset,\\n                mintedAsset\\n            );\\n        }\\n\\n        emit SurplusSwept(amountToSweep, mintedAsset);\\n    }\\n}\\n\",\"keccak256\":\"0x9b9dc6797985994c1584c331428f31ff3357d5203510e91a7c1aa1e0b0b86a38\",\"license\":\"MIT\"},\"contracts/vaults/dstake/interfaces/IDStableConversionAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IDStableConversionAdapter Interface\\n * @notice Interface for contracts that handle the conversion between the core dStable asset\\n *         and a specific yield-bearing or convertible ERC20 token (`vault asset`), as well as\\n *         valuing that `vault asset` in terms of the dStable asset.\\n * @dev Implementations interact with specific protocols (lending pools, DEX LPs, wrappers, etc.).\\n */\\ninterface IDStableConversionAdapter {\\n    /**\\n     * @notice Converts a specified amount of the dStable asset into the specific `vaultAsset`\\n     *         managed by this adapter.\\n     * @dev The adapter MUST pull `dStableAmount` of the dStable asset from the caller (expected to be the Router).\\n     * @dev The resulting `vaultAsset` MUST be sent/deposited/minted directly to the `collateralVault` address provided during adapter setup or retrieved.\\n     * @param dStableAmount The amount of dStable asset to convert.\\n     * @return vaultAsset The address of the specific `vault asset` token managed by this adapter.\\n     * @return vaultAssetAmount The amount of `vaultAsset` generated from the conversion.\\n     */\\n    function convertToVaultAsset(\\n        uint256 dStableAmount\\n    ) external returns (address vaultAsset, uint256 vaultAssetAmount);\\n\\n    /**\\n     * @notice Converts a specific amount of `vaultAsset` back into the dStable asset.\\n     * @dev The adapter MUST pull the required amount of `vaultAsset` from the caller (expected to be the Router).\\n     * @dev The resulting dStable asset MUST be sent to the caller.\\n     * @param vaultAssetAmount The amount of `vaultAsset` to convert.\\n     * @return dStableAmount The amount of dStable asset sent to the caller.\\n     */\\n    function convertFromVaultAsset(\\n        uint256 vaultAssetAmount\\n    ) external returns (uint256 dStableAmount);\\n\\n    /**\\n     * @notice Preview the result of converting a given dStable amount to vaultAsset (without state change).\\n     * @param dStableAmount The amount of dStable asset to preview conversion for.\\n     * @return vaultAsset The address of the specific `vault asset` token managed by this adapter.\\n     * @return vaultAssetAmount The amount of `vaultAsset` that would be received.\\n     */\\n    function previewConvertToVaultAsset(\\n        uint256 dStableAmount\\n    ) external view returns (address vaultAsset, uint256 vaultAssetAmount);\\n\\n    /**\\n     * @notice Preview the result of converting a given vaultAsset amount to dStable (without state change).\\n     * @param vaultAssetAmount The amount of `vaultAsset` to preview conversion for.\\n     * @return dStableAmount The amount of dStable asset that would be received.\\n     */\\n    function previewConvertFromVaultAsset(\\n        uint256 vaultAssetAmount\\n    ) external view returns (uint256 dStableAmount);\\n\\n    /**\\n     * @notice Calculates the value of a given amount of the specific `vaultAsset` managed by this adapter\\n     *         in terms of the dStable asset.\\n     * @param vaultAsset The address of the vault asset token (should match getVaultAsset()). Included for explicitness.\\n     * @param vaultAssetAmount The amount of the `vaultAsset` to value.\\n     * @return dStableValue The equivalent value in the dStable asset.\\n     */\\n    function assetValueInDStable(\\n        address vaultAsset,\\n        uint256 vaultAssetAmount\\n    ) external view returns (uint256 dStableValue);\\n\\n    /**\\n     * @notice Returns the address of the specific `vault asset` token managed by this adapter.\\n     * @return The address of the `vault asset`.\\n     */\\n    function vaultAsset() external view returns (address);\\n}\\n\",\"keccak256\":\"0xce7f578388bde1fa102f6d9abbc3af329458b24fae712c3e86440aa0d0bb1ff8\",\"license\":\"MIT\"},\"contracts/vaults/dstake/interfaces/IDStakeCollateralVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IDStakeCollateralVault Interface\\n * @notice Defines the external functions of the DStakeCollateralVault required by other\\n *         contracts in the dSTAKE system, primarily the DStakeToken.\\n */\\ninterface IDStakeCollateralVault {\\n    /**\\n     * @notice Calculates the total value of all managed `vault assets` held by the vault,\\n     *         denominated in the underlying dStable asset.\\n     * @dev This is typically called by the DStakeToken's `totalAssets()` function.\\n     * @return dStableValue The total value of managed assets in terms of the dStable asset.\\n     */\\n    function totalValueInDStable() external view returns (uint256 dStableValue);\\n\\n    /**\\n     * @notice Returns the address of the underlying dStable asset the vault operates with.\\n     * @return The address of the dStable asset.\\n     */\\n    function dStable() external view returns (address);\\n\\n    /**\\n     * @notice The DStakeToken contract address this vault serves.\\n     */\\n    function dStakeToken() external view returns (address);\\n\\n    /**\\n     * @notice The DStakeRouter contract address allowed to interact.\\n     */\\n    function router() external view returns (address);\\n\\n    /**\\n     * @notice Returns the vault asset at `index` from the internal supported list.\\n     */\\n    function supportedAssets(uint256 index) external view returns (address);\\n\\n    /**\\n     * @notice Returns the entire list of supported vault assets. Convenient for UIs & off-chain analytics.\\n     */\\n    function getSupportedAssets() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Transfers `amount` of `vaultAsset` from this vault to the `recipient`.\\n     * @dev Only callable by the registered router.\\n     * @param vaultAsset The address of the vault asset to send.\\n     * @param amount The amount to send.\\n     * @param recipient The address to receive the asset.\\n     */\\n    function sendAsset(\\n        address vaultAsset,\\n        uint256 amount,\\n        address recipient\\n    ) external;\\n\\n    /**\\n     * @notice Sets the address of the DStakeRouter contract.\\n     * @dev Only callable by an address with the DEFAULT_ADMIN_ROLE.\\n     * @param _newRouter The address of the new router contract.\\n     */\\n    function setRouter(address _newRouter) external;\\n\\n    /**\\n     * @notice Adds a vault asset to the supported list. Callable only by the router.\\n     */\\n    function addSupportedAsset(address vaultAsset) external;\\n\\n    /**\\n     * @notice Removes a vault asset from the supported list. Callable only by the router.\\n     */\\n    function removeSupportedAsset(address vaultAsset) external;\\n\\n    /**\\n     * @notice Emitted when the router address is set.\\n     * @param router The address of the new router.\\n     */\\n    event RouterSet(address indexed router);\\n\\n    /**\\n     * @notice Emitted when a new vault asset is added to the supported list.\\n     */\\n    event SupportedAssetAdded(address indexed vaultAsset);\\n\\n    /**\\n     * @notice Emitted when a vault asset is removed from the supported list.\\n     */\\n    event SupportedAssetRemoved(address indexed vaultAsset);\\n}\\n\",\"keccak256\":\"0xe003cc1c2a3e323c1b9c710f5b69b4e5ac1d30d273aea1ad9fa5e12dc63169c3\",\"license\":\"MIT\"},\"contracts/vaults/dstake/interfaces/IDStakeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IDStakeRouter Interface\\n * @notice Defines the external functions of the DStakeRouter required by the DStakeToken\\n *         for handling deposits and withdrawals.\\n */\\ninterface IDStakeRouter {\\n    /**\\n     * @notice Handles the conversion of deposited dStable asset into a chosen `vaultAsset`\\n     *         and informs the collateral vault.\\n     * @dev Called by `DStakeToken._deposit()` after the token has received the dStable asset.\\n     * @dev The router MUST pull `dStableAmount` from the caller (`DStakeToken`).\\n     * @param dStableAmount The amount of dStable asset deposited by the user into the DStakeToken.\\n     */\\n    function deposit(uint256 dStableAmount) external;\\n\\n    /**\\n     * @notice Handles the conversion of a `vaultAsset` back into the dStable asset for withdrawal.\\n     * @dev Called by `DStakeToken._withdraw()`.\\n     * @dev The router coordinates pulling the required `vaultAsset` from the collateral vault\\n     *      and ensuring the converted dStable asset is sent to the `receiver`.\\n     * @param dStableAmount The amount of dStable asset to be withdrawn to the `receiver` (after vault fees).\\n     * @param receiver The address that will receive the withdrawn dStable asset.\\n     * @param owner The original owner initiating the withdrawal (typically the user burning shares).\\n     */\\n    function withdraw(\\n        uint256 dStableAmount,\\n        address receiver,\\n        address owner\\n    ) external;\\n}\\n\",\"keccak256\":\"0x38af14256145092463574eebbf584e9790aca0ba02f85007d61cb33c3fa96f07\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040908082523462000175578181620024f78038038091620000248285620001aa565b83398101031262000175576200004860206200004083620001e4565b9201620001e4565b600180556001600160a01b03908282161580156200019f575b6200018e5760208260049285608052168060a0528551928380926306617c6960e11b82525afa90811562000183576000916200013c575b508060c05216156200012b57620000bb90620000b433620001f9565b5062000279565b50516121bb90816200031c8239608051816113c9015260a05181818161031a0152818161076f01528181610b1c015281816112a80152818161145c015281816117d80152611aed015260c0518181816103e5015281816107c901528181610bce01528181610f950152611aa80152f35b815163d92e233d60e01b8152600490fd5b90506020813d6020116200017a575b816200015a60209383620001aa565b8101031262000175576200016e90620001e4565b3862000098565b600080fd5b3d91506200014b565b84513d6000823e3d90fd5b835163d92e233d60e01b8152600490fd5b508181161562000061565b601f909101601f19168101906001600160401b03821190821017620001ce57604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200017557565b6001600160a01b031660008181527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205490919060ff166200027557818052816020526040822081835260205260408220600160ff198254161790553391600080516020620024d78339815191528180a4600190565b5090565b6001600160a01b031660008181527fee6598bb9d8813ec5dcf0988fbc9935f3bd23c22de3e37b2654f2216372e6c0860205260408120549091907f7fee0d6ae731e4c26a7bffbf1bb702cb3aaa110506f5b2a78cc9372669d439ae9060ff166200031657808352826020526040832082845260205260408320600160ff19825416179055600080516020620024d7833981519152339380a4600190565b50509056fe608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a714611b1c575080630bece79c14611ad75780630cc2f8d214611a925780631e99981414611a745780632379e45214611639578063248a9ca31461160d5780632f2ff15d146115d057806336568abe146115885780633a5d64c51461150d578063585cd34b146113f85780635c47df42146113b35780636dacd3d7146111f157806391d14854146111a65780639bb9461f14610f59578063a217fddf14610f3d578063b460af9414610a61578063b6b55f25146106f3578063b9c7e7a514610295578063bc6d5a101461025a578063c8232bd71461021e578063d547741f146101dd578063dc369c651461018f578063e1e6548d146101665763ee1f70441461012957600080fd5b3461016357806003193601126101635760206040517f3a4b3a1f03347d0616bb4d34491485029b5c8f56cd6dc1f9e9b1524cad0936f78152f35b80fd5b50346101635780600319360112610163576003546040516001600160a01b039091168152602090f35b5034610163576020366003190112610163577fbd575a5650fa5dbcfe03ab798aec3c80a935c6d293729c1ede529f46efbfbd4760206004356101cf611d08565b80600155604051908152a180f35b50346101635760403660031901126101635761021a6004356101fd611b71565b90808452836020526102156001604086200154611d9e565b611ede565b5080f35b5034610163576020366003190112610163576020906001600160a01b039060409082610248611b87565b16815260028452205416604051908152f35b503461016357806003193601126101635760206040517f7fee0d6ae731e4c26a7bffbf1bb702cb3aaa110506f5b2a78cc9372669d439ae8152f35b5034610163576102a436611b9d565b90926102ae611c8e565b60018060a01b0380821692838752602090600282528260408920541683871696878a528460408b2054169282156106da5783156106c157908a9392916040519763e0e5c1ab60e01b93848a528c60048b0152878a602481845afa998a1561067f57879a61068e575b50887f000000000000000000000000000000000000000000000000000000000000000016803b1561068a57604051631c7fc97360e11b81526001600160a01b03939093166004840152602483018e905230604484015287908390606490829084905af1801561067f5788928891610662575b50506103958d828d611f53565b60248d604051988993849263508fef7760e11b845260048401525af1948515610657578c95610628575b5060405163095ea7b360e01b81526001600160a01b0385166004820152602481018690527f0000000000000000000000000000000000000000000000000000000000000000958d918881604481868e8d165af1801561061d576105f0575b50604051906254772560e21b82526004820152604081602481858a5af19889156105e5578c91839a6105ae575b5082160361057b575080871061054c575050839060246040518094819382528860048301525afa92831561054157899361050c575b505061048d60015485611c6b565b8083106104d95750506040805196875260208701929092525084015233927f34eb53881682710349fbce503317e7cba1eb6dcdeeb2c86b8dd00f0fe510ba539080606081015b0390a480f35b604051636f85e6ff60e11b81526001600160a01b0392909216600483015260248201929092526044810191909152606490fd5b9080929350813d831161053a575b6105248183611c00565b81010312610535575190388061047f565b600080fd5b503d61051a565b6040513d8b823e3d90fd5b604051636f85e6ff60e11b81526001600160a01b03929092166004830152602482018790526044820152606490fd5b60405163e8eebd3760e01b81526001600160a01b0386811660048301528481166024830152919091166044820152606490fd5b9099506105d491925060403d6040116105de575b6105cc8183611c00565b810190611c36565b919091983861044a565b503d6105c2565b6040513d84823e3d90fd5b61060f90893d8b11610616575b6106078183611c00565b810190611c53565b503861041d565b503d6105fd565b6040513d85823e3d90fd5b9094508581813d8311610650575b6106408183611c00565b81010312610535575193386103bf565b503d610636565b6040513d8e823e3d90fd5b61066e91929350611bd6565b61067b5786908638610388565b8580fd5b6040513d89823e3d90fd5b8780fd5b8880929b508198503d83116106ba575b6106a88183611c00565b81010312610535578c95519838610316565b503d61069e565b60405163dfc24d3d60e01b8152600481018a9052602490fd5b60405163dfc24d3d60e01b815260048101899052602490fd5b503461016357602080600319360112610a5d5760043590610712611d42565b6003546001600160a01b03908116808552600283526040852054919391841691908215610a45575060405192633bcb4e8360e21b8452816004850152604084602481865afa938415610a3a5786908795610a16575b5085811694867f0000000000000000000000000000000000000000000000000000000000000000166040516370a0823160e01b9182825280600483015285826024818c5afa908b8215610a0a5788818b8e8b94966109d2575b610829959697507f000000000000000000000000000000000000000000000000000000000000000016916107f684303386611dc4565b60405163095ea7b360e01b81526001600160a01b0390921660048301526024820193909352938492839182906044820190565b03925af18015610657576109b5575b50604080516254772560e21b81526004810189905290816024818f8d5af19a8b15610657578c918d9c610990575b508a9082160361095d5750604051928352600483015284826024818b5afa8015610952578a90610923575b61089b9250611c6b565b9687036108dd5780871061054c5750506040519485528401527f705661fa3a970960d8791236e32945efdda156e72c9d7b76505b6ccbdc48501b60403394a480f35b604051633b0e6a4960e11b815260048101849052601b60248201527f41646170746572206d69732d7265706f727465642073686172657300000000006044820152606490fd5b508482813d831161094b575b6109398183611c00565b810103126105355761089b9151610891565b503d61092f565b6040513d8c823e3d90fd5b60405163e8eebd3760e01b81526001600160a01b038a811660048301528781166024830152919091166044820152606490fd5b6109ad919c508b925060403d6040116105de576105cc8183611c00565b9b9091610866565b6109cb90873d8911610616576106078183611c00565b5038610838565b5050505090915082813d8311610a03575b6109ed8183611c00565b81010312610535579051899186888d8b866107c0565b503d6109e3565b604051903d90823e3d90fd5b9050610a3291945060403d6040116105de576105cc8183611c00565b939038610767565b6040513d88823e3d90fd5b6024906040519063dfc24d3d60e01b82526004820152fd5b5080fd5b503461016357606036600319011261016357600435610a7e611b71565b6001600160a01b036044358181169391929084900361053557610a9f611d42565b8260035416938486526020926002845284604088205416958615610a455750604051634ab9e16b60e01b81529380856004818a5afa948515610f32578895610efb575b508585169660405195630a28a47760e01b875283600488015282876024818c5afa968715610952578a97610ecc575b508615610eb35789887f000000000000000000000000000000000000000000000000000000000000000016803b15610a5d57604051631c7fc97360e11b81526001600160a01b0384166004820152602481018a90523060448201529082908290606490829084905af180156105e557610e9b575b505081610b95886024948c611f53565b838b6040519485809263508fef7760e11b82528c6004830152855af1928315610e90578b93610e61575b50848310610e2e57610bff858a7f00000000000000000000000000000000000000000000000000000000000000001694610bfa828b88611e1f565b611c6b565b918b83610c49575b8b7fb82a50d120fe10f11179f7792c046bf005589c3eea490a9e3e347ed31353165960808c8e8d8d8d8d6040519586528501526040840152166060820152a280f35b60405163095ea7b360e01b8082526001600160a01b038516600483015260248201869052959b949a9994989497949694959291859082908e908290816044810103925af18015610e2157610e04575b506040516254772560e21b81528a60048201528d60408260248184895af1909181610de2575b50610d6a57505090604483928d6040519c8d948593845260048401528160248401525af197881561095257816080987fc2b45953ce7f14f6d1f9273fb9620e4e5eea889991ca73f256b7ef8e1988e84c927fb82a50d120fe10f11179f7792c046bf005589c3eea490a9e3e347ed3135316599b610d4d575b50604051908152a15b91939681939596388b610c07565b610d6390833d8511610616576106078183611c00565b5038610d36565b889a508093949698919597999b508c92501603610db257505050917fb82a50d120fe10f11179f7792c046bf005589c3eea490a9e3e347ed31353165995939160809593610d3f565b60405163e8eebd3760e01b81526001600160a01b0392831660048201529282166024840152166044820152606490fd5b610dfc91925060403d6040116105de576105cc8183611c00565b509038610cbe565b610e1a90853d8711610616576106078183611c00565b5038610c98565b8e604051903d90823e3d90fd5b506040516322ce378760e11b81526001600160a01b03919091166004820152602481018490526044810191909152606490fd5b9092508381813d8311610e89575b610e798183611c00565b8101031261053557519138610bbf565b503d610e6f565b6040513d8d823e3d90fd5b610ea490611bd6565b610eaf578938610b85565b8980fd5b6040516352e4307960e11b8152600481018a9052602490fd5b9096508281813d8311610ef4575b610ee48183611c00565b8101031261053557519538610b11565b503d610eda565b9080955081813d8311610f2b575b610f138183611c00565b8101031261068a57610f2490611c22565b9338610ae2565b503d610f09565b6040513d8a823e3d90fd5b5034610163578060031936011261016357602090604051908152f35b503461016357602080600319360112610a5d5760043590610f78611d08565b6040516370a0823160e01b81523060048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693909291908282602481885afa918215610a3a578692611177575b5081156111595780158015611150575b156111485750925b82600354168086526002835283604087205416908115610a455750604051634ab9e16b60e01b8152918383600481855afa92831561067f57879361110d575b5060405163095ea7b360e01b81526001600160a01b038316600482015260248101879052908490829060449082908b905af1801561067f576110f0575b506040516254772560e21b81528560048201526040816024818a865af190811561067f5787916110d0575b508481169483168503610db257867fde5535ecf375c1fc5a04be89bec3dee7e25472f1a743e5da0ee098dd9d700bad60408888888351928352820152a180f35b6110e9915060403d6040116105de576105cc8183611c00565b5038611090565b61110690843d8611610616576106078183611c00565b5038611065565b9092508381813d8311611141575b6111258183611c00565b8101031261113d5761113690611c22565b9138611028565b8680fd5b503d61111b565b905092610fe9565b50818111610fe1565b60448587604051916354f076c560e11b835260048301526024820152fd5b9091508281813d831161119f575b61118f8183611c00565b8101031261053557519038610fd1565b503d611185565b50346101635760403660031901126101635760406111c2611b71565b91600435815280602052209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b50346101635760403660031901126101635761120b611b87565b611213611b71565b61121b611d08565b6001600160a01b038181169190821580156113a9575b61139757604051634ab9e16b60e01b8152936020928386600481885afa95861561067f578796611360575b50828216958684821603610db257505050838552600282528060408620541680151580611356575b6113385750838552600282526040852080546001600160a01b0319168417905584907f000000000000000000000000000000000000000000000000000000000000000016803b15610a5d5781809160246040518094819363fac09e8760e01b83528a60048401525af1611320575b50507fe5e39617beb2a298b9fa1c3928582d9a96ba7ef7c920acd1117d1d415568670a91604051908152a280f35b61132990611bd6565b6113345783386112f2565b8380fd5b846044916040519163fa9938bf60e01b835260048301526024820152fd5b5083811415611284565b9095508381813d8311611390575b6113788183611c00565b8101031261113d5761138990611c22565b943861125c565b503d61136e565b60405163d92e233d60e01b8152600490fd5b5080841615611231565b50346101635780600319360112610163576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461016357602036600319011261016357611412611b87565b61141a611d08565b6001600160a01b039081168083526002602052604083205490919081169081156114f45782845260026020526040842080546001600160a01b031916905583907f000000000000000000000000000000000000000000000000000000000000000016803b15610a5d57818091602460405180948193631c46bc6f60e01b83528960048401525af180156105e5576114dc575b505060207f80d565a25be79c22ac744d2eb2cf727b98545a88dd1396b53ce6a045aacd558291604051908152a280f35b6114e590611bd6565b6114f05782386114ac565b8280fd5b60405163dfc24d3d60e01b815260048101849052602490fd5b503461016357602036600319011261016357611527611b87565b61152f611d08565b6001600160a01b039081168083526002602052604083205490911615610a4557600380546001600160a01b031916821790557f24924ec42babd548ca3fd6321ab17d9c16c025f8996cbfac050500587609b1748280a280f35b5034610163576040366003190112610163576115a2611b71565b336001600160a01b038216036115be5761021a90600435611ede565b60405163334bd91960e11b8152600490fd5b50346101635760403660031901126101635761021a6004356115f0611b71565b90808452836020526116086001604086200154611d9e565b611e60565b503461016357602036600319011261016357600160406020926004358152808452200154604051908152f35b50346101635761164836611b9d565b611653939293611c8e565b8115611a2e576001600160a01b038316158015611a1d575b611397576040519060c0820182811067ffffffffffffffff821117611a095760409081528683526020808401888152848301899052606085018990526080850189905260a085018990526001600160a01b038781168a526002808452848b2054821687528982168b52909252918820548116909152825116156119e85760208201516001600160a01b0316156119c75781516001600160a01b03908116604080850182905260208581015190931660608601525163e0e5c1ab60e01b8152600481018690529190829060249082905afa90811561067f578791611995575b508060808401521561196d5760018060a01b0360608301511690604060808401516024825180958193633bcb4e8360e21b835260048301525afa91821561067f5787908893611949575b506001600160a01b038781169082160361191357508160a08401528082106118e557506117cd90508230336001600160a01b038716611dc4565b846001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169061180990859083908816611e1f565b60a0830151813b156114f057604051631c7fc97360e11b81526001600160a01b0388166004820152602481019190915233604482015291908290606490829084905af18015610a3a576118b2575b5060a08101516080909101516040805193845260208401929092529082015233926001600160a01b039081169216907f34eb53881682710349fbce503317e7cba1eb6dcdeeb2c86b8dd00f0fe510ba539080606081016104d3565b946118de7f34eb53881682710349fbce503317e7cba1eb6dcdeeb2c86b8dd00f0fe510ba539296611bd6565b9490611857565b604051636f85e6ff60e11b81526001600160a01b038716600482015260248101929092526044820152606490fd5b602084015160405163e8eebd3760e01b81526001600160a01b039182166004820152888216602482015291166044820152606490fd5b905061196591925060403d6040116105de576105cc8183611c00565b919038611793565b6040516354f076c560e11b81526001600160a01b038516600482015260248101849052604490fd5b90506020813d6020116119bf575b816119b060209383611c00565b8101031261113d575138611749565b3d91506119a3565b60405163dfc24d3d60e01b81526001600160a01b0386166004820152602490fd5b60405163dfc24d3d60e01b81526001600160a01b0385166004820152602490fd5b634e487b7160e01b87526041600452602487fd5b506001600160a01b0384161561166b565b604051633b0e6a4960e11b815260206004820152601b60248201527f496e70757420616d6f756e742063616e6e6f74206265207a65726f00000000006044820152606490fd5b50346101635780600319360112610163576020600154604051908152f35b50346101635780600319360112610163576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346101635780600319360112610163576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b905034610a5d576020366003190112610a5d5760043563ffffffff60e01b81168091036114f05760209250637965db0b60e01b8114908115611b60575b5015158152f35b6301ffc9a760e01b14905038611b59565b602435906001600160a01b038216820361053557565b600435906001600160a01b038216820361053557565b6080906003190112610535576001600160a01b039060043582811681036105355791602435908116810361053557906044359060643590565b67ffffffffffffffff8111611bea57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117611bea57604052565b51906001600160a01b038216820361053557565b9190826040910312610535576020611c4d83611c22565b92015190565b90816020910312610535575180151581036105355790565b91908203918211611c7857565b634e487b7160e01b600052601160045260246000fd5b3360009081527f442b21db4ee30744d8435a797a25e6c1c72e1e7b189fd6a63533411360d93da660205260409020547f3a4b3a1f03347d0616bb4d34491485029b5c8f56cd6dc1f9e9b1524cad0936f79060ff1615611cea5750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205460ff1615611cea5750565b3360009081527fee6598bb9d8813ec5dcf0988fbc9935f3bd23c22de3e37b2654f2216372e6c0860205260409020547f7fee0d6ae731e4c26a7bffbf1bb702cb3aaa110506f5b2a78cc9372669d439ae9060ff1615611cea5750565b80600052600060205260406000203360005260205260ff6040600020541615611cea5750565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a081019181831067ffffffffffffffff841117611bea57611e1d92604052612070565b565b60405163a9059cbb60e01b60208201526001600160a01b03929092166024830152604480830193909352918152611e1d91611e5b606483611c00565b612070565b9060009180835282602052604083209160018060a01b03169182845260205260ff60408420541615600014611ed957808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b9060009180835282602052604083209160018060a01b03169182845260205260ff604084205416600014611ed95780835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b60405163095ea7b360e01b602082018181526001600160a01b038516602484015260448084019690965294825294939092611f8f606485611c00565b83516000926001600160a01b039291858416918591829182855af190611fb36120e2565b8261203e575b5081612033575b5015611fd0575b50505050509050565b60405196602088015216602486015280604486015260448552608085019085821067ffffffffffffffff83111761201f57506120149394611e5b9160405282612070565b803880808080611fc7565b634e487b7160e01b81526041600452602490fd5b90503b151538611fc0565b80519192508115918215612056575b50509038611fb9565b6120699250602080918301019101611c53565b388061204d565b6000806120999260018060a01b03169360208151910182865af16120926120e2565b9083612122565b80519081151591826120c7575b50506120af5750565b60249060405190635274afe760e01b82526004820152fd5b6120da9250602080918301019101611c53565b1538806120a6565b3d1561211d573d9067ffffffffffffffff8211611bea5760405191612111601f8201601f191660200184611c00565b82523d6000602084013e565b606090565b90612149575080511561213757805190602001fd5b604051630a12f52160e11b8152600490fd5b8151158061217c575b61215a575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561215256fea2646970667358221220a140ad69f6c3120dea8c86000906555c5f20cb7e43b5f1018b31f7ebd3fae26864736f6c634300081800332f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b600090813560e01c90816301ffc9a714611b1c575080630bece79c14611ad75780630cc2f8d214611a925780631e99981414611a745780632379e45214611639578063248a9ca31461160d5780632f2ff15d146115d057806336568abe146115885780633a5d64c51461150d578063585cd34b146113f85780635c47df42146113b35780636dacd3d7146111f157806391d14854146111a65780639bb9461f14610f59578063a217fddf14610f3d578063b460af9414610a61578063b6b55f25146106f3578063b9c7e7a514610295578063bc6d5a101461025a578063c8232bd71461021e578063d547741f146101dd578063dc369c651461018f578063e1e6548d146101665763ee1f70441461012957600080fd5b3461016357806003193601126101635760206040517f3a4b3a1f03347d0616bb4d34491485029b5c8f56cd6dc1f9e9b1524cad0936f78152f35b80fd5b50346101635780600319360112610163576003546040516001600160a01b039091168152602090f35b5034610163576020366003190112610163577fbd575a5650fa5dbcfe03ab798aec3c80a935c6d293729c1ede529f46efbfbd4760206004356101cf611d08565b80600155604051908152a180f35b50346101635760403660031901126101635761021a6004356101fd611b71565b90808452836020526102156001604086200154611d9e565b611ede565b5080f35b5034610163576020366003190112610163576020906001600160a01b039060409082610248611b87565b16815260028452205416604051908152f35b503461016357806003193601126101635760206040517f7fee0d6ae731e4c26a7bffbf1bb702cb3aaa110506f5b2a78cc9372669d439ae8152f35b5034610163576102a436611b9d565b90926102ae611c8e565b60018060a01b0380821692838752602090600282528260408920541683871696878a528460408b2054169282156106da5783156106c157908a9392916040519763e0e5c1ab60e01b93848a528c60048b0152878a602481845afa998a1561067f57879a61068e575b50887f000000000000000000000000000000000000000000000000000000000000000016803b1561068a57604051631c7fc97360e11b81526001600160a01b03939093166004840152602483018e905230604484015287908390606490829084905af1801561067f5788928891610662575b50506103958d828d611f53565b60248d604051988993849263508fef7760e11b845260048401525af1948515610657578c95610628575b5060405163095ea7b360e01b81526001600160a01b0385166004820152602481018690527f0000000000000000000000000000000000000000000000000000000000000000958d918881604481868e8d165af1801561061d576105f0575b50604051906254772560e21b82526004820152604081602481858a5af19889156105e5578c91839a6105ae575b5082160361057b575080871061054c575050839060246040518094819382528860048301525afa92831561054157899361050c575b505061048d60015485611c6b565b8083106104d95750506040805196875260208701929092525084015233927f34eb53881682710349fbce503317e7cba1eb6dcdeeb2c86b8dd00f0fe510ba539080606081015b0390a480f35b604051636f85e6ff60e11b81526001600160a01b0392909216600483015260248201929092526044810191909152606490fd5b9080929350813d831161053a575b6105248183611c00565b81010312610535575190388061047f565b600080fd5b503d61051a565b6040513d8b823e3d90fd5b604051636f85e6ff60e11b81526001600160a01b03929092166004830152602482018790526044820152606490fd5b60405163e8eebd3760e01b81526001600160a01b0386811660048301528481166024830152919091166044820152606490fd5b9099506105d491925060403d6040116105de575b6105cc8183611c00565b810190611c36565b919091983861044a565b503d6105c2565b6040513d84823e3d90fd5b61060f90893d8b11610616575b6106078183611c00565b810190611c53565b503861041d565b503d6105fd565b6040513d85823e3d90fd5b9094508581813d8311610650575b6106408183611c00565b81010312610535575193386103bf565b503d610636565b6040513d8e823e3d90fd5b61066e91929350611bd6565b61067b5786908638610388565b8580fd5b6040513d89823e3d90fd5b8780fd5b8880929b508198503d83116106ba575b6106a88183611c00565b81010312610535578c95519838610316565b503d61069e565b60405163dfc24d3d60e01b8152600481018a9052602490fd5b60405163dfc24d3d60e01b815260048101899052602490fd5b503461016357602080600319360112610a5d5760043590610712611d42565b6003546001600160a01b03908116808552600283526040852054919391841691908215610a45575060405192633bcb4e8360e21b8452816004850152604084602481865afa938415610a3a5786908795610a16575b5085811694867f0000000000000000000000000000000000000000000000000000000000000000166040516370a0823160e01b9182825280600483015285826024818c5afa908b8215610a0a5788818b8e8b94966109d2575b610829959697507f000000000000000000000000000000000000000000000000000000000000000016916107f684303386611dc4565b60405163095ea7b360e01b81526001600160a01b0390921660048301526024820193909352938492839182906044820190565b03925af18015610657576109b5575b50604080516254772560e21b81526004810189905290816024818f8d5af19a8b15610657578c918d9c610990575b508a9082160361095d5750604051928352600483015284826024818b5afa8015610952578a90610923575b61089b9250611c6b565b9687036108dd5780871061054c5750506040519485528401527f705661fa3a970960d8791236e32945efdda156e72c9d7b76505b6ccbdc48501b60403394a480f35b604051633b0e6a4960e11b815260048101849052601b60248201527f41646170746572206d69732d7265706f727465642073686172657300000000006044820152606490fd5b508482813d831161094b575b6109398183611c00565b810103126105355761089b9151610891565b503d61092f565b6040513d8c823e3d90fd5b60405163e8eebd3760e01b81526001600160a01b038a811660048301528781166024830152919091166044820152606490fd5b6109ad919c508b925060403d6040116105de576105cc8183611c00565b9b9091610866565b6109cb90873d8911610616576106078183611c00565b5038610838565b5050505090915082813d8311610a03575b6109ed8183611c00565b81010312610535579051899186888d8b866107c0565b503d6109e3565b604051903d90823e3d90fd5b9050610a3291945060403d6040116105de576105cc8183611c00565b939038610767565b6040513d88823e3d90fd5b6024906040519063dfc24d3d60e01b82526004820152fd5b5080fd5b503461016357606036600319011261016357600435610a7e611b71565b6001600160a01b036044358181169391929084900361053557610a9f611d42565b8260035416938486526020926002845284604088205416958615610a455750604051634ab9e16b60e01b81529380856004818a5afa948515610f32578895610efb575b508585169660405195630a28a47760e01b875283600488015282876024818c5afa968715610952578a97610ecc575b508615610eb35789887f000000000000000000000000000000000000000000000000000000000000000016803b15610a5d57604051631c7fc97360e11b81526001600160a01b0384166004820152602481018a90523060448201529082908290606490829084905af180156105e557610e9b575b505081610b95886024948c611f53565b838b6040519485809263508fef7760e11b82528c6004830152855af1928315610e90578b93610e61575b50848310610e2e57610bff858a7f00000000000000000000000000000000000000000000000000000000000000001694610bfa828b88611e1f565b611c6b565b918b83610c49575b8b7fb82a50d120fe10f11179f7792c046bf005589c3eea490a9e3e347ed31353165960808c8e8d8d8d8d6040519586528501526040840152166060820152a280f35b60405163095ea7b360e01b8082526001600160a01b038516600483015260248201869052959b949a9994989497949694959291859082908e908290816044810103925af18015610e2157610e04575b506040516254772560e21b81528a60048201528d60408260248184895af1909181610de2575b50610d6a57505090604483928d6040519c8d948593845260048401528160248401525af197881561095257816080987fc2b45953ce7f14f6d1f9273fb9620e4e5eea889991ca73f256b7ef8e1988e84c927fb82a50d120fe10f11179f7792c046bf005589c3eea490a9e3e347ed3135316599b610d4d575b50604051908152a15b91939681939596388b610c07565b610d6390833d8511610616576106078183611c00565b5038610d36565b889a508093949698919597999b508c92501603610db257505050917fb82a50d120fe10f11179f7792c046bf005589c3eea490a9e3e347ed31353165995939160809593610d3f565b60405163e8eebd3760e01b81526001600160a01b0392831660048201529282166024840152166044820152606490fd5b610dfc91925060403d6040116105de576105cc8183611c00565b509038610cbe565b610e1a90853d8711610616576106078183611c00565b5038610c98565b8e604051903d90823e3d90fd5b506040516322ce378760e11b81526001600160a01b03919091166004820152602481018490526044810191909152606490fd5b9092508381813d8311610e89575b610e798183611c00565b8101031261053557519138610bbf565b503d610e6f565b6040513d8d823e3d90fd5b610ea490611bd6565b610eaf578938610b85565b8980fd5b6040516352e4307960e11b8152600481018a9052602490fd5b9096508281813d8311610ef4575b610ee48183611c00565b8101031261053557519538610b11565b503d610eda565b9080955081813d8311610f2b575b610f138183611c00565b8101031261068a57610f2490611c22565b9338610ae2565b503d610f09565b6040513d8a823e3d90fd5b5034610163578060031936011261016357602090604051908152f35b503461016357602080600319360112610a5d5760043590610f78611d08565b6040516370a0823160e01b81523060048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693909291908282602481885afa918215610a3a578692611177575b5081156111595780158015611150575b156111485750925b82600354168086526002835283604087205416908115610a455750604051634ab9e16b60e01b8152918383600481855afa92831561067f57879361110d575b5060405163095ea7b360e01b81526001600160a01b038316600482015260248101879052908490829060449082908b905af1801561067f576110f0575b506040516254772560e21b81528560048201526040816024818a865af190811561067f5787916110d0575b508481169483168503610db257867fde5535ecf375c1fc5a04be89bec3dee7e25472f1a743e5da0ee098dd9d700bad60408888888351928352820152a180f35b6110e9915060403d6040116105de576105cc8183611c00565b5038611090565b61110690843d8611610616576106078183611c00565b5038611065565b9092508381813d8311611141575b6111258183611c00565b8101031261113d5761113690611c22565b9138611028565b8680fd5b503d61111b565b905092610fe9565b50818111610fe1565b60448587604051916354f076c560e11b835260048301526024820152fd5b9091508281813d831161119f575b61118f8183611c00565b8101031261053557519038610fd1565b503d611185565b50346101635760403660031901126101635760406111c2611b71565b91600435815280602052209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b50346101635760403660031901126101635761120b611b87565b611213611b71565b61121b611d08565b6001600160a01b038181169190821580156113a9575b61139757604051634ab9e16b60e01b8152936020928386600481885afa95861561067f578796611360575b50828216958684821603610db257505050838552600282528060408620541680151580611356575b6113385750838552600282526040852080546001600160a01b0319168417905584907f000000000000000000000000000000000000000000000000000000000000000016803b15610a5d5781809160246040518094819363fac09e8760e01b83528a60048401525af1611320575b50507fe5e39617beb2a298b9fa1c3928582d9a96ba7ef7c920acd1117d1d415568670a91604051908152a280f35b61132990611bd6565b6113345783386112f2565b8380fd5b846044916040519163fa9938bf60e01b835260048301526024820152fd5b5083811415611284565b9095508381813d8311611390575b6113788183611c00565b8101031261113d5761138990611c22565b943861125c565b503d61136e565b60405163d92e233d60e01b8152600490fd5b5080841615611231565b50346101635780600319360112610163576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461016357602036600319011261016357611412611b87565b61141a611d08565b6001600160a01b039081168083526002602052604083205490919081169081156114f45782845260026020526040842080546001600160a01b031916905583907f000000000000000000000000000000000000000000000000000000000000000016803b15610a5d57818091602460405180948193631c46bc6f60e01b83528960048401525af180156105e5576114dc575b505060207f80d565a25be79c22ac744d2eb2cf727b98545a88dd1396b53ce6a045aacd558291604051908152a280f35b6114e590611bd6565b6114f05782386114ac565b8280fd5b60405163dfc24d3d60e01b815260048101849052602490fd5b503461016357602036600319011261016357611527611b87565b61152f611d08565b6001600160a01b039081168083526002602052604083205490911615610a4557600380546001600160a01b031916821790557f24924ec42babd548ca3fd6321ab17d9c16c025f8996cbfac050500587609b1748280a280f35b5034610163576040366003190112610163576115a2611b71565b336001600160a01b038216036115be5761021a90600435611ede565b60405163334bd91960e11b8152600490fd5b50346101635760403660031901126101635761021a6004356115f0611b71565b90808452836020526116086001604086200154611d9e565b611e60565b503461016357602036600319011261016357600160406020926004358152808452200154604051908152f35b50346101635761164836611b9d565b611653939293611c8e565b8115611a2e576001600160a01b038316158015611a1d575b611397576040519060c0820182811067ffffffffffffffff821117611a095760409081528683526020808401888152848301899052606085018990526080850189905260a085018990526001600160a01b038781168a526002808452848b2054821687528982168b52909252918820548116909152825116156119e85760208201516001600160a01b0316156119c75781516001600160a01b03908116604080850182905260208581015190931660608601525163e0e5c1ab60e01b8152600481018690529190829060249082905afa90811561067f578791611995575b508060808401521561196d5760018060a01b0360608301511690604060808401516024825180958193633bcb4e8360e21b835260048301525afa91821561067f5787908893611949575b506001600160a01b038781169082160361191357508160a08401528082106118e557506117cd90508230336001600160a01b038716611dc4565b846001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169061180990859083908816611e1f565b60a0830151813b156114f057604051631c7fc97360e11b81526001600160a01b0388166004820152602481019190915233604482015291908290606490829084905af18015610a3a576118b2575b5060a08101516080909101516040805193845260208401929092529082015233926001600160a01b039081169216907f34eb53881682710349fbce503317e7cba1eb6dcdeeb2c86b8dd00f0fe510ba539080606081016104d3565b946118de7f34eb53881682710349fbce503317e7cba1eb6dcdeeb2c86b8dd00f0fe510ba539296611bd6565b9490611857565b604051636f85e6ff60e11b81526001600160a01b038716600482015260248101929092526044820152606490fd5b602084015160405163e8eebd3760e01b81526001600160a01b039182166004820152888216602482015291166044820152606490fd5b905061196591925060403d6040116105de576105cc8183611c00565b919038611793565b6040516354f076c560e11b81526001600160a01b038516600482015260248101849052604490fd5b90506020813d6020116119bf575b816119b060209383611c00565b8101031261113d575138611749565b3d91506119a3565b60405163dfc24d3d60e01b81526001600160a01b0386166004820152602490fd5b60405163dfc24d3d60e01b81526001600160a01b0385166004820152602490fd5b634e487b7160e01b87526041600452602487fd5b506001600160a01b0384161561166b565b604051633b0e6a4960e11b815260206004820152601b60248201527f496e70757420616d6f756e742063616e6e6f74206265207a65726f00000000006044820152606490fd5b50346101635780600319360112610163576020600154604051908152f35b50346101635780600319360112610163576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50346101635780600319360112610163576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b905034610a5d576020366003190112610a5d5760043563ffffffff60e01b81168091036114f05760209250637965db0b60e01b8114908115611b60575b5015158152f35b6301ffc9a760e01b14905038611b59565b602435906001600160a01b038216820361053557565b600435906001600160a01b038216820361053557565b6080906003190112610535576001600160a01b039060043582811681036105355791602435908116810361053557906044359060643590565b67ffffffffffffffff8111611bea57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117611bea57604052565b51906001600160a01b038216820361053557565b9190826040910312610535576020611c4d83611c22565b92015190565b90816020910312610535575180151581036105355790565b91908203918211611c7857565b634e487b7160e01b600052601160045260246000fd5b3360009081527f442b21db4ee30744d8435a797a25e6c1c72e1e7b189fd6a63533411360d93da660205260409020547f3a4b3a1f03347d0616bb4d34491485029b5c8f56cd6dc1f9e9b1524cad0936f79060ff1615611cea5750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205460ff1615611cea5750565b3360009081527fee6598bb9d8813ec5dcf0988fbc9935f3bd23c22de3e37b2654f2216372e6c0860205260409020547f7fee0d6ae731e4c26a7bffbf1bb702cb3aaa110506f5b2a78cc9372669d439ae9060ff1615611cea5750565b80600052600060205260406000203360005260205260ff6040600020541615611cea5750565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a081019181831067ffffffffffffffff841117611bea57611e1d92604052612070565b565b60405163a9059cbb60e01b60208201526001600160a01b03929092166024830152604480830193909352918152611e1d91611e5b606483611c00565b612070565b9060009180835282602052604083209160018060a01b03169182845260205260ff60408420541615600014611ed957808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b9060009180835282602052604083209160018060a01b03169182845260205260ff604084205416600014611ed95780835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b60405163095ea7b360e01b602082018181526001600160a01b038516602484015260448084019690965294825294939092611f8f606485611c00565b83516000926001600160a01b039291858416918591829182855af190611fb36120e2565b8261203e575b5081612033575b5015611fd0575b50505050509050565b60405196602088015216602486015280604486015260448552608085019085821067ffffffffffffffff83111761201f57506120149394611e5b9160405282612070565b803880808080611fc7565b634e487b7160e01b81526041600452602490fd5b90503b151538611fc0565b80519192508115918215612056575b50509038611fb9565b6120699250602080918301019101611c53565b388061204d565b6000806120999260018060a01b03169360208151910182865af16120926120e2565b9083612122565b80519081151591826120c7575b50506120af5750565b60249060405190635274afe760e01b82526004820152fd5b6120da9250602080918301019101611c53565b1538806120a6565b3d1561211d573d9067ffffffffffffffff8211611bea5760405191612111601f8201601f191660200184611c00565b82523d6000602084013e565b606090565b90612149575080511561213757805190602001fd5b604051630a12f52160e11b8152600490fd5b8151158061217c575b61215a575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561215256fea2646970667358221220a140ad69f6c3120dea8c86000906555c5f20cb7e43b5f1018b31f7ebd3fae26864736f6c63430008180033",
  "devdoc": {
    "details": "Interacts with the DStakeToken, DStakeCollateralVault, and various IDStableConversionAdapters.      This contract is non-upgradeable but replaceable via DStakeToken governance.      Relies on the associated DStakeToken for role management.",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "addAdapter(address,address)": {
        "details": "Only callable by an address with DEFAULT_ADMIN_ROLE.",
        "params": {
          "adapterAddress": "The address of the new adapter contract.",
          "vaultAsset": "The address of the vault asset."
        }
      },
      "deposit(uint256)": {
        "details": "Called by `DStakeToken._deposit()` after the token has received the dStable asset.The router MUST pull `dStableAmount` from the caller (`DStakeToken`).",
        "params": {
          "dStableAmount": "The amount of dStable asset deposited by the user into the DStakeToken."
        }
      },
      "exchangeAssets(address,address,uint256,uint256)": {
        "details": "Pulls `fromVaultAsset` from the solver (`msg.sender`) and sends `toVaultAsset` from the vault to the solver.      Requires COLLATERAL_EXCHANGER_ROLE.",
        "params": {
          "fromVaultAsset": "The address of the asset the solver is providing.",
          "fromVaultAssetAmount": "The amount of `fromVaultAsset` provided by the solver.",
          "minToVaultAssetAmount": "The minimum amount of `toVaultAsset` the solver is willing to accept.",
          "toVaultAsset": "The address of the asset the solver will receive from the vault."
        }
      },
      "exchangeAssetsUsingAdapters(address,address,uint256,uint256)": {
        "details": "Uses dSTABLE as the intermediary asset. Requires COLLATERAL_EXCHANGER_ROLE.",
        "params": {
          "fromVaultAsset": "The address of the asset to sell.",
          "fromVaultAssetAmount": "The amount of the `fromVaultAsset` to exchange.",
          "minToVaultAssetAmount": "The minimum amount of `toVaultAsset` the solver is willing to accept.",
          "toVaultAsset": "The address of the asset to buy."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "removeAdapter(address)": {
        "details": "Only callable by an address with DEFAULT_ADMIN_ROLE.Does not automatically migrate funds. Ensure assets managed by this adapter are zero      in the collateral vault or migrated via exchangeAssets before calling.",
        "params": {
          "vaultAsset": "The address of the vault asset to remove."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setDefaultDepositVaultAsset(address)": {
        "details": "Only callable by an address with DEFAULT_ADMIN_ROLE.",
        "params": {
          "vaultAsset": "The address of the vault asset to set as default."
        }
      },
      "setDustTolerance(uint256)": {
        "details": "Only callable by DEFAULT_ADMIN_ROLE.",
        "params": {
          "_dustTolerance": "The new tolerance value in wei of dStable."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "sweepSurplus(uint256)": {
        "params": {
          "maxAmount": "Maximum amount of dSTABLE to sweep (use 0 to sweep full balance)."
        }
      },
      "withdraw(uint256,address,address)": {
        "details": "Called by `DStakeToken._withdraw()`.The router coordinates pulling the required `vaultAsset` from the collateral vault      and ensuring the converted dStable asset is sent to the `receiver`.",
        "params": {
          "dStableAmount": "The amount of dStable asset to be withdrawn to the `receiver` (after vault fees).",
          "owner": "The original owner initiating the withdrawal (typically the user burning shares).",
          "receiver": "The address that will receive the withdrawn dStable asset."
        }
      }
    },
    "title": "DStakeRouterDLend",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addAdapter(address,address)": {
        "notice": "Adds or updates a conversion adapter for a given vault asset."
      },
      "deposit(uint256)": {
        "notice": "Handles the conversion of deposited dStable asset into a chosen `vaultAsset`         and informs the collateral vault."
      },
      "exchangeAssets(address,address,uint256,uint256)": {
        "notice": "Exchanges assets between the collateral vault and an external solver."
      },
      "exchangeAssetsUsingAdapters(address,address,uint256,uint256)": {
        "notice": "Exchanges `fromVaultAssetAmount` of one vault asset for another via their adapters."
      },
      "removeAdapter(address)": {
        "notice": "Removes a conversion adapter for a given vault asset."
      },
      "setDefaultDepositVaultAsset(address)": {
        "notice": "Sets the default vault asset to use for new deposits."
      },
      "setDustTolerance(uint256)": {
        "notice": "Updates the `dustTolerance` used for value-parity checks."
      },
      "sweepSurplus(uint256)": {
        "notice": "Sweeps any dSTABLE surplus held by the router back into the default vault asset."
      },
      "withdraw(uint256,address,address)": {
        "notice": "Handles the conversion of a `vaultAsset` back into the dStable asset for withdrawal."
      }
    },
    "notice": "Orchestrates deposits, withdrawals, and asset exchanges for a DStakeToken vault.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 193,
        "contract": "contracts/vaults/dstake/DStakeRouterDLend.sol:DStakeRouterDLend",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)188_storage)"
      },
      {
        "astId": 93601,
        "contract": "contracts/vaults/dstake/DStakeRouterDLend.sol:DStakeRouterDLend",
        "label": "dustTolerance",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 93605,
        "contract": "contracts/vaults/dstake/DStakeRouterDLend.sol:DStakeRouterDLend",
        "label": "vaultAssetToAdapter",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 93607,
        "contract": "contracts/vaults/dstake/DStakeRouterDLend.sol:DStakeRouterDLend",
        "label": "defaultDepositVaultAsset",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)188_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)188_storage"
      },
      "t_struct(RoleData)188_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 185,
            "contract": "contracts/vaults/dstake/DStakeRouterDLend.sol:DStakeRouterDLend",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 187,
            "contract": "contracts/vaults/dstake/DStakeRouterDLend.sol:DStakeRouterDLend",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}