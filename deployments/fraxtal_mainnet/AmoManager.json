{
  "address": "0x49a0c8030Ca199f6F246517aE689E3cC0775271a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dusd",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralHolderVault",
          "type": "address"
        },
        {
          "internalType": "contract IPriceOracleGetter",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startingSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endingSupply",
          "type": "uint256"
        }
      ],
      "name": "AmoSupplyInvariantViolation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "amoVault",
          "type": "address"
        }
      ],
      "name": "AmoVaultAlreadyEnabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotTransferDUSD",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "amoVault",
          "type": "address"
        }
      ],
      "name": "InactiveAmoVault",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseCurrencyUnit",
          "type": "uint256"
        }
      ],
      "name": "IncorrectBaseCurrencyUnit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "takeProfitValueInUsd",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "availableProfitInUsd",
          "type": "int256"
        }
      ],
      "name": "InsufficientProfits",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "amoVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dusdAmount",
          "type": "uint256"
        }
      ],
      "name": "AmoAllocated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "amoVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dusdAmount",
          "type": "uint256"
        }
      ],
      "name": "AmoDeallocated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "amoVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "AmoVaultSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "OracleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "amoVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProfitsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AMO_ALLOCATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_COLLECTOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USD_UNIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "amoVault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dusdAmount",
          "type": "uint256"
        }
      ],
      "name": "allocateAmo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "amoVault",
          "type": "address"
        }
      ],
      "name": "amoVaultAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amoVaults",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableProfitInUsd",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultAddress",
          "type": "address"
        }
      ],
      "name": "availableVaultProfitsInUsd",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseCurrencyUnit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralHolderVault",
      "outputs": [
        {
          "internalType": "contract CollateralVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "amoVault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dusdAmount",
          "type": "uint256"
        }
      ],
      "name": "deallocateAmo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dusdAmount",
          "type": "uint256"
        }
      ],
      "name": "decreaseAmoSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "amoVault",
          "type": "address"
        }
      ],
      "name": "disableAmoVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dusd",
      "outputs": [
        {
          "internalType": "contract IERC20Stablecoin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "dusdAmount",
          "type": "uint256"
        }
      ],
      "name": "dusdAmountToUsdValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "amoVault",
          "type": "address"
        }
      ],
      "name": "enableAmoVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "amoVault",
          "type": "address"
        }
      ],
      "name": "isAmoActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracleGetter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newBaseCurrencyUnit",
          "type": "uint256"
        }
      ],
      "name": "setBaseCurrencyUnit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralVault",
          "type": "address"
        }
      ],
      "name": "setCollateralVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPriceOracleGetter",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAmoSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCollateralValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "amoVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFromAmoVaultToHoldingVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "amoVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFromHoldingVaultToAmoVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "usdValue",
          "type": "uint256"
        }
      ],
      "name": "usdValueToDusdAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract AmoVault",
          "name": "amoVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "takeProfitToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "takeProfitAmount",
          "type": "uint256"
        }
      ],
      "name": "withdrawProfits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "takeProfitValueInUsd",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1ba3a1ddfc28016e4c2b62a525ca9599ab118cf2cf5920aca0348fc1c1c3b1ae",
  "receipt": {
    "to": null,
    "from": "0x0f5e3D9AEe7Ab5fDa909Af1ef147D98a7f4B3022",
    "contractAddress": "0x49a0c8030Ca199f6F246517aE689E3cC0775271a",
    "transactionIndex": 1,
    "gasUsed": "1713233",
    "logsBloom": "0x
    "blockHash": "0x29e5e94ceb40de7f9f246210545f7eda9146265147e8af909fc92bfbced4de67",
    "transactionHash": "0x1ba3a1ddfc28016e4c2b62a525ca9599ab118cf2cf5920aca0348fc1c1c3b1ae",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 13880331,
        "transactionHash": "0x1ba3a1ddfc28016e4c2b62a525ca9599ab118cf2cf5920aca0348fc1c1c3b1ae",
        "address": "0x49a0c8030Ca199f6F246517aE689E3cC0775271a",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000f5e3d9aee7ab5fda909af1ef147d98a7f4b3022",
          "0x0000000000000000000000000f5e3d9aee7ab5fda909af1ef147d98a7f4b3022"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x29e5e94ceb40de7f9f246210545f7eda9146265147e8af909fc92bfbced4de67"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 13880331,
        "transactionHash": "0x1ba3a1ddfc28016e4c2b62a525ca9599ab118cf2cf5920aca0348fc1c1c3b1ae",
        "address": "0x49a0c8030Ca199f6F246517aE689E3cC0775271a",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xc304524b36c64136ce5783ff1658be193c8352a90708830b9863880958c1fddd",
          "0x0000000000000000000000000f5e3d9aee7ab5fda909af1ef147d98a7f4b3022",
          "0x0000000000000000000000000f5e3d9aee7ab5fda909af1ef147d98a7f4b3022"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x29e5e94ceb40de7f9f246210545f7eda9146265147e8af909fc92bfbced4de67"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 13880331,
        "transactionHash": "0x1ba3a1ddfc28016e4c2b62a525ca9599ab118cf2cf5920aca0348fc1c1c3b1ae",
        "address": "0x49a0c8030Ca199f6F246517aE689E3cC0775271a",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x2dca0f5ce7e75a4b43fe2b0d6f5d0b7a2bf92ecf89f8f0aa17b8308b67038821",
          "0x0000000000000000000000000f5e3d9aee7ab5fda909af1ef147d98a7f4b3022",
          "0x0000000000000000000000000f5e3d9aee7ab5fda909af1ef147d98a7f4b3022"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x29e5e94ceb40de7f9f246210545f7eda9146265147e8af909fc92bfbced4de67"
      }
    ],
    "blockNumber": 13880331,
    "cumulativeGasUsed": "1791523",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x788D96f655735f52c676A133f4dFC53cEC614d4A",
    "0x624E12dE7a97B8cFc1AD1F050a1c9263b1f4FeBC",
    "0xFA7560956807d95DCeF22990DdD92e38DbAf5cDd"
  ],
  "numDeployments": 1,
  "solcInputHash": "8c1b71c0cb2d431669c790fca2357f85",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dusd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralHolderVault\",\"type\":\"address\"},{\"internalType\":\"contract IPriceOracleGetter\",\"name\":\"_oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startingSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endingSupply\",\"type\":\"uint256\"}],\"name\":\"AmoSupplyInvariantViolation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amoVault\",\"type\":\"address\"}],\"name\":\"AmoVaultAlreadyEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotTransferDUSD\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amoVault\",\"type\":\"address\"}],\"name\":\"InactiveAmoVault\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseCurrencyUnit\",\"type\":\"uint256\"}],\"name\":\"IncorrectBaseCurrencyUnit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"takeProfitValueInUsd\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"availableProfitInUsd\",\"type\":\"int256\"}],\"name\":\"InsufficientProfits\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amoVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"}],\"name\":\"AmoAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amoVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"}],\"name\":\"AmoDeallocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amoVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"AmoVaultSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"amoVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProfitsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AMO_ALLOCATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_COLLECTOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USD_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amoVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"}],\"name\":\"allocateAmo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amoVault\",\"type\":\"address\"}],\"name\":\"amoVaultAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amoVaults\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableProfitInUsd\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"name\":\"availableVaultProfitsInUsd\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseCurrencyUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralHolderVault\",\"outputs\":[{\"internalType\":\"contract CollateralVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amoVault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"}],\"name\":\"deallocateAmo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"}],\"name\":\"decreaseAmoSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amoVault\",\"type\":\"address\"}],\"name\":\"disableAmoVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dusd\",\"outputs\":[{\"internalType\":\"contract IERC20Stablecoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dusdAmount\",\"type\":\"uint256\"}],\"name\":\"dusdAmountToUsdValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amoVault\",\"type\":\"address\"}],\"name\":\"enableAmoVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amoVault\",\"type\":\"address\"}],\"name\":\"isAmoActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracleGetter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBaseCurrencyUnit\",\"type\":\"uint256\"}],\"name\":\"setBaseCurrencyUnit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralVault\",\"type\":\"address\"}],\"name\":\"setCollateralVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceOracleGetter\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmoSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amoVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFromAmoVaultToHoldingVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"amoVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFromHoldingVaultToAmoVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdValue\",\"type\":\"uint256\"}],\"name\":\"usdValueToDusdAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AmoVault\",\"name\":\"amoVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"takeProfitToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"takeProfitAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawProfits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"takeProfitValueInUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Manages AMOs for dUSD Handles allocation, deallocation, collateral management, and profit management for AMO vaults.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"allocateAmo(address,uint256)\":{\"params\":{\"amoVault\":\"The address of the AMO vault.\",\"dusdAmount\":\"The amount of dUSD to allocate.\"}},\"amoVaultAllocation(address)\":{\"params\":{\"amoVault\":\"The address of the AMO vault.\"},\"returns\":{\"_0\":\"The current allocation for the vault.\"}},\"amoVaults()\":{\"returns\":{\"_0\":\"The list of AMO vault addresses.\"}},\"availableProfitInUsd()\":{\"returns\":{\"_0\":\"The total available profit in USD.\"}},\"availableVaultProfitsInUsd(address)\":{\"params\":{\"vaultAddress\":\"The address of the AMO vault to check.\"},\"returns\":{\"_0\":\"The available profit in USD (can be negative).\"}},\"constructor\":{\"params\":{\"_collateralHolderVault\":\"The address of the collateral holder vault.\",\"_dusd\":\"The address of the dUSD stablecoin.\",\"_oracle\":\"The oracle for price feeds.\"}},\"deallocateAmo(address,uint256)\":{\"params\":{\"amoVault\":\"The address of the AMO vault.\",\"dusdAmount\":\"The amount of dUSD to deallocate.\"}},\"decreaseAmoSupply(uint256)\":{\"params\":{\"dusdAmount\":\"The amount of dUSD to burn.\"}},\"disableAmoVault(address)\":{\"params\":{\"amoVault\":\"The address of the AMO vault.\"}},\"dusdAmountToUsdValue(uint256)\":{\"params\":{\"dusdAmount\":\"The amount of dUSD tokens to convert.\"},\"returns\":{\"_0\":\"The equivalent amount of USD value.\"}},\"enableAmoVault(address)\":{\"params\":{\"amoVault\":\"The address of the AMO vault.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isAmoActive(address)\":{\"params\":{\"amoVault\":\"The address of the AMO vault to check.\"},\"returns\":{\"_0\":\"True if the AMO vault is active, false otherwise.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setBaseCurrencyUnit(uint256)\":{\"details\":\"Only used if the oracle's base currency unit changes\",\"params\":{\"_newBaseCurrencyUnit\":\"The new base currency unit to set\"}},\"setCollateralVault(address)\":{\"params\":{\"_collateralVault\":\"The address of the new collateral vault\"}},\"setOracle(address)\":{\"params\":{\"newOracle\":\"The new oracle to use\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalAmoSupply()\":{\"returns\":{\"_0\":\"The total AMO supply.\"}},\"totalCollateralValue()\":{\"returns\":{\"_0\":\"The total collateral value in USD.\"}},\"transferFromAmoVaultToHoldingVault(address,address,uint256)\":{\"params\":{\"amoVault\":\"The address of the AMO vault.\",\"amount\":\"The amount of collateral to transfer.\",\"token\":\"The address of the collateral token to transfer.\"}},\"transferFromHoldingVaultToAmoVault(address,address,uint256)\":{\"params\":{\"amoVault\":\"The address of the AMO vault.\",\"amount\":\"The amount of collateral to transfer.\",\"token\":\"The address of the collateral token to transfer.\"}},\"usdValueToDusdAmount(uint256)\":{\"params\":{\"usdValue\":\"The amount of USD value to convert.\"},\"returns\":{\"_0\":\"The equivalent amount of dUSD tokens.\"}},\"withdrawProfits(address,address,address,uint256)\":{\"params\":{\"amoVault\":\"The AMO vault from which to withdraw profits.\",\"recipient\":\"The address to receive the profits.\",\"takeProfitAmount\":\"The amount of collateral to withdraw.\",\"takeProfitToken\":\"The collateral token to withdraw.\"},\"returns\":{\"takeProfitValueInUsd\":\"The value of the withdrawn profits in USD.\"}}},\"title\":\"AmoManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allocateAmo(address,uint256)\":{\"notice\":\"Allocates AMO tokens to an AMO vault.\"},\"amoVaultAllocation(address)\":{\"notice\":\"Returns the allocation for a specific AMO vault.\"},\"amoVaults()\":{\"notice\":\"Returns the list of all AMO vaults.\"},\"availableProfitInUsd()\":{\"notice\":\"Returns the total available profit across all AMO vaults in USD.\"},\"availableVaultProfitsInUsd(address)\":{\"notice\":\"Returns the available profit for a specific vault in USD.\"},\"constructor\":{\"notice\":\"Initializes the AmoManager contract.\"},\"deallocateAmo(address,uint256)\":{\"notice\":\"Deallocates AMO tokens from an AMO vault.\"},\"decreaseAmoSupply(uint256)\":{\"notice\":\"Decreases the AMO supply by burning dUSD.\"},\"disableAmoVault(address)\":{\"notice\":\"Disables an AMO vault.\"},\"dusdAmountToUsdValue(uint256)\":{\"notice\":\"Converts an amount of dUSD tokens to an equivalent USD value.\"},\"enableAmoVault(address)\":{\"notice\":\"Enables an AMO vault.\"},\"isAmoActive(address)\":{\"notice\":\"Checks if an AMO vault is active.\"},\"setBaseCurrencyUnit(uint256)\":{\"notice\":\"Updates the base currency unit used for price calculations\"},\"setCollateralVault(address)\":{\"notice\":\"Sets the collateral vault address\"},\"setOracle(address)\":{\"notice\":\"Sets the oracle to use for collateral valuation\"},\"totalAmoSupply()\":{\"notice\":\"Returns the total AMO supply.\"},\"totalCollateralValue()\":{\"notice\":\"Returns the total collateral value of all active AMO vaults.\"},\"transferFromAmoVaultToHoldingVault(address,address,uint256)\":{\"notice\":\"Transfers collateral from an AMO vault to the holding vault.\"},\"transferFromHoldingVaultToAmoVault(address,address,uint256)\":{\"notice\":\"Transfers collateral from the holding vault to an AMO vault.\"},\"usdValueToDusdAmount(uint256)\":{\"notice\":\"Converts a USD value to an equivalent amount of dUSD tokens.\"},\"withdrawProfits(address,address,address,uint256)\":{\"notice\":\"Withdraws profits from an AMO vault to a recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dusd/AmoManager.sol\":\"AmoManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-5/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/structs/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableMap.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableMap.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {EnumerableSet} from \\\"./EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * The following map types are supported:\\n *\\n * - `uint256 -> address` (`UintToAddressMap`) since v3.0.0\\n * - `address -> uint256` (`AddressToUintMap`) since v4.6.0\\n * - `bytes32 -> bytes32` (`Bytes32ToBytes32Map`) since v4.6.0\\n * - `uint256 -> uint256` (`UintToUintMap`) since v4.7.0\\n * - `bytes32 -> uint256` (`Bytes32ToUintMap`) since v4.7.0\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableMap, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableMap.\\n * ====\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code repetition as possible, we write it in\\n    // terms of a generic Map type with bytes32 keys and values. The Map implementation uses private functions,\\n    // and user-facing implementations such as `UintToAddressMap` are just wrappers around the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit in bytes32.\\n\\n    /**\\n     * @dev Query for a nonexistent map key.\\n     */\\n    error EnumerableMapNonexistentKey(bytes32 key);\\n\\n    struct Bytes32ToBytes32Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 key => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToBytes32Map storage map, bytes32 key, bytes32 value) internal returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToBytes32Map storage map, bytes32 key) internal returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function length(Bytes32ToBytes32Map storage map) internal view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToBytes32Map storage map, uint256 index) internal view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToBytes32Map storage map, bytes32 key) internal view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == 0 && !contains(map, key)) {\\n            revert EnumerableMapNonexistentKey(key);\\n        }\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToBytes32Map storage map) internal view returns (bytes32[] memory) {\\n        return map._keys.values();\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToUintMap storage map, uint256 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(key)));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToUintMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(UintToAddressMap storage map) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressToUintMap\\n\\n    struct AddressToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(AddressToUintMap storage map, address key, uint256 value) internal returns (bool) {\\n        return set(map._inner, bytes32(uint256(uint160(key))), bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(AddressToUintMap storage map, address key) internal returns (bool) {\\n        return remove(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(AddressToUintMap storage map, address key) internal view returns (bool) {\\n        return contains(map._inner, bytes32(uint256(uint160(key))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(AddressToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressToUintMap storage map, uint256 index) internal view returns (address, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (address(uint160(uint256(key))), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(AddressToUintMap storage map, address key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, bytes32(uint256(uint160(key))));\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(AddressToUintMap storage map, address key) internal view returns (uint256) {\\n        return uint256(get(map._inner, bytes32(uint256(uint160(key)))));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(AddressToUintMap storage map) internal view returns (address[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // Bytes32ToUintMap\\n\\n    struct Bytes32ToUintMap {\\n        Bytes32ToBytes32Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(Bytes32ToUintMap storage map, bytes32 key, uint256 value) internal returns (bool) {\\n        return set(map._inner, key, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToUintMap storage map, bytes32 key) internal returns (bool) {\\n        return remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool) {\\n        return contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToUintMap storage map) internal view returns (uint256) {\\n        return length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the map. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToUintMap storage map, uint256 index) internal view returns (bytes32, uint256) {\\n        (bytes32 key, bytes32 value) = at(map._inner, index);\\n        return (key, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`. O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function tryGet(Bytes32ToUintMap storage map, bytes32 key) internal view returns (bool, uint256) {\\n        (bool success, bytes32 value) = tryGet(map._inner, key);\\n        return (success, uint256(value));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`. O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToUintMap storage map, bytes32 key) internal view returns (uint256) {\\n        return uint256(get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Return the an array containing all the keys\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the map grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function keys(Bytes32ToUintMap storage map) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = keys(map._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa3edd94148e931d8a37353624ea57afa1c679b6fe06b7059ccdc8da78a90c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/dusd/AmoManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-5/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/utils/structs/EnumerableMap.sol\\\";\\nimport \\\"contracts/shared/Constants.sol\\\";\\nimport \\\"contracts/token/IERC20Stablecoin.sol\\\";\\nimport \\\"contracts/dusd/AmoVault.sol\\\";\\n\\n/**\\n * @title AmoManager\\n * @dev Manages AMOs for dUSD\\n * Handles allocation, deallocation, collateral management, and profit management for AMO vaults.\\n */\\ncontract AmoManager is AccessControl, OracleAware {\\n    using EnumerableMap for EnumerableMap.AddressToUintMap;\\n\\n    /* Core state */\\n\\n    EnumerableMap.AddressToUintMap private _amoVaults;\\n    uint256 public totalAllocated;\\n    IERC20Stablecoin public dusd;\\n    CollateralVault public collateralHolderVault;\\n\\n    uint256 public immutable USD_UNIT;\\n\\n    /* Events */\\n\\n    event AmoVaultSet(address indexed amoVault, bool isActive);\\n    event AmoAllocated(address indexed amoVault, uint256 dusdAmount);\\n    event AmoDeallocated(address indexed amoVault, uint256 dusdAmount);\\n    event ProfitsWithdrawn(address indexed amoVault, uint256 amount);\\n\\n    /* Roles */\\n\\n    bytes32 public constant AMO_ALLOCATOR_ROLE =\\n        keccak256(\\\"AMO_ALLOCATOR_ROLE\\\");\\n    bytes32 public constant FEE_COLLECTOR_ROLE =\\n        keccak256(\\\"FEE_COLLECTOR_ROLE\\\");\\n\\n    /* Errors */\\n\\n    error InactiveAmoVault(address amoVault);\\n    error AmoSupplyInvariantViolation(\\n        uint256 startingSupply,\\n        uint256 endingSupply\\n    );\\n    error AmoVaultAlreadyEnabled(address amoVault);\\n    error CannotTransferDUSD();\\n    error InsufficientProfits(\\n        uint256 takeProfitValueInUsd,\\n        int256 availableProfitInUsd\\n    );\\n\\n    /**\\n     * @notice Initializes the AmoManager contract.\\n     * @param _dusd The address of the dUSD stablecoin.\\n     * @param _collateralHolderVault The address of the collateral holder vault.\\n     * @param _oracle The oracle for price feeds.\\n     */\\n    constructor(\\n        address _dusd,\\n        address _collateralHolderVault,\\n        IPriceOracleGetter _oracle\\n    ) OracleAware(_oracle, Constants.ORACLE_BASE_CURRENCY_UNIT) {\\n        dusd = IERC20Stablecoin(_dusd);\\n        collateralHolderVault = CollateralVault(_collateralHolderVault);\\n\\n        USD_UNIT = oracle.BASE_CURRENCY_UNIT();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        grantRole(AMO_ALLOCATOR_ROLE, msg.sender);\\n        grantRole(FEE_COLLECTOR_ROLE, msg.sender);\\n    }\\n\\n    /* AMO */\\n\\n    /**\\n     * @notice Allocates AMO tokens to an AMO vault.\\n     * @param amoVault The address of the AMO vault.\\n     * @param dusdAmount The amount of dUSD to allocate.\\n     */\\n    function allocateAmo(\\n        address amoVault,\\n        uint256 dusdAmount\\n    ) public onlyRole(AMO_ALLOCATOR_ROLE) {\\n        uint256 startingAmoSupply = totalAmoSupply();\\n\\n        // Make sure the vault is active\\n        if (!isAmoActive(amoVault)) {\\n            revert InactiveAmoVault(amoVault);\\n        }\\n\\n        // Update the allocation for this vault\\n        (, uint256 currentAllocation) = _amoVaults.tryGet(amoVault);\\n        _amoVaults.set(amoVault, currentAllocation + dusdAmount);\\n\\n        // Make the deposit\\n        totalAllocated += dusdAmount;\\n        dusd.transfer(amoVault, dusdAmount);\\n\\n        // Check invariants\\n        uint256 endingAmoSupply = totalAmoSupply();\\n        if (endingAmoSupply != startingAmoSupply) {\\n            revert AmoSupplyInvariantViolation(\\n                startingAmoSupply,\\n                endingAmoSupply\\n            );\\n        }\\n\\n        emit AmoAllocated(amoVault, dusdAmount);\\n    }\\n\\n    /**\\n     * @notice Deallocates AMO tokens from an AMO vault.\\n     * @param amoVault The address of the AMO vault.\\n     * @param dusdAmount The amount of dUSD to deallocate.\\n     */\\n    function deallocateAmo(\\n        address amoVault,\\n        uint256 dusdAmount\\n    ) public onlyRole(AMO_ALLOCATOR_ROLE) {\\n        uint256 startingAmoSupply = totalAmoSupply();\\n\\n        // We don't require that the vault is active or has allocation, since we want to allow withdrawing from inactive vaults\\n\\n        // If the vault is still active, make sure it has enough allocation and decrease it\\n        (, uint256 currentAllocation) = _amoVaults.tryGet(amoVault);\\n        if (currentAllocation > 0) {\\n            // Update the allocation for this vault\\n            _amoVaults.set(amoVault, currentAllocation - dusdAmount);\\n        }\\n\\n        // Make the withdrawal\\n        totalAllocated -= dusdAmount;\\n        dusd.transferFrom(amoVault, address(this), dusdAmount);\\n\\n        // Check invariants\\n        uint256 endingAmoSupply = totalAmoSupply();\\n        if (endingAmoSupply != startingAmoSupply) {\\n            revert AmoSupplyInvariantViolation(\\n                startingAmoSupply,\\n                endingAmoSupply\\n            );\\n        }\\n\\n        emit AmoDeallocated(amoVault, dusdAmount);\\n    }\\n\\n    /**\\n     * @notice Returns the total AMO supply.\\n     * @return The total AMO supply.\\n     */\\n    function totalAmoSupply() public view returns (uint256) {\\n        uint256 freeBalance = dusd.balanceOf(address(this));\\n        return freeBalance + totalAllocated;\\n    }\\n\\n    /**\\n     * @notice Decreases the AMO supply by burning dUSD.\\n     * @param dusdAmount The amount of dUSD to burn.\\n     */\\n    function decreaseAmoSupply(\\n        uint256 dusdAmount\\n    ) public onlyRole(AMO_ALLOCATOR_ROLE) {\\n        dusd.burn(dusdAmount);\\n    }\\n\\n    /**\\n     * @notice Checks if an AMO vault is active.\\n     * @param amoVault The address of the AMO vault to check.\\n     * @return True if the AMO vault is active, false otherwise.\\n     */\\n    function isAmoActive(address amoVault) public view returns (bool) {\\n        return _amoVaults.contains(amoVault);\\n    }\\n\\n    /**\\n     * @notice Returns the allocation for a specific AMO vault.\\n     * @param amoVault The address of the AMO vault.\\n     * @return The current allocation for the vault.\\n     */\\n    function amoVaultAllocation(\\n        address amoVault\\n    ) public view returns (uint256) {\\n        (bool exists, uint256 allocation) = _amoVaults.tryGet(amoVault);\\n        return exists ? allocation : 0;\\n    }\\n\\n    /**\\n     * @notice Returns the list of all AMO vaults.\\n     * @return The list of AMO vault addresses.\\n     */\\n    function amoVaults() public view returns (address[] memory) {\\n        return _amoVaults.keys();\\n    }\\n\\n    /**\\n     * @notice Enables an AMO vault.\\n     * @param amoVault The address of the AMO vault.\\n     */\\n    function enableAmoVault(\\n        address amoVault\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_amoVaults.contains(amoVault)) {\\n            revert AmoVaultAlreadyEnabled(amoVault);\\n        }\\n        _amoVaults.set(amoVault, 0);\\n        emit AmoVaultSet(amoVault, true);\\n    }\\n\\n    /**\\n     * @notice Disables an AMO vault.\\n     * @param amoVault The address of the AMO vault.\\n     */\\n    function disableAmoVault(\\n        address amoVault\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!_amoVaults.contains(amoVault)) {\\n            revert InactiveAmoVault(amoVault);\\n        }\\n        _amoVaults.remove(amoVault);\\n        emit AmoVaultSet(amoVault, false);\\n    }\\n\\n    /* Collateral Management */\\n\\n    /**\\n     * @notice Returns the total collateral value of all active AMO vaults.\\n     * @return The total collateral value in USD.\\n     */\\n    function totalCollateralValue() public view returns (uint256) {\\n        uint256 totalUsdValue = 0;\\n        for (uint256 i = 0; i < _amoVaults.length(); i++) {\\n            (address vaultAddress, ) = _amoVaults.at(i);\\n            if (isAmoActive(vaultAddress)) {\\n                totalUsdValue += AmoVault(vaultAddress).totalCollateralValue();\\n            }\\n        }\\n        return totalUsdValue;\\n    }\\n\\n    /**\\n     * @notice Transfers collateral from an AMO vault to the holding vault.\\n     * @param amoVault The address of the AMO vault.\\n     * @param token The address of the collateral token to transfer.\\n     * @param amount The amount of collateral to transfer.\\n     */\\n    function transferFromAmoVaultToHoldingVault(\\n        address amoVault,\\n        address token,\\n        uint256 amount\\n    ) public onlyRole(AMO_ALLOCATOR_ROLE) {\\n        if (token == address(dusd)) {\\n            revert CannotTransferDUSD();\\n        }\\n\\n        // Update allocation\\n        // A note on why we modify AMO allocation when we withdraw collateral:\\n        // 1. When dUSD AMO enters the AMO vault, the dUSD is initially unbacked\\n        // 2. Over time the AMO vault accrues collateral in exchange for distributing dUSD\\n        // 3. We may be able to make better use of that collateral in a different collateral vault\\n        // 4. So we transfer the collateral out of the AMO vault, but at that point the dUSD that\\n        //    converted to that collateral is now free-floating and fully backed\\n        // 5. Thus we decrement the AMO allocation to reflect the fact that the dUSD is no longer\\n        //    unbacked, but is actually fully backed and circulating\\n        uint256 collateralUsdValue = collateralHolderVault.assetValueFromAmount(\\n            amount,\\n            token\\n        );\\n        uint256 collateralInDusd = usdValueToDusdAmount(collateralUsdValue);\\n        (, uint256 currentAllocation) = _amoVaults.tryGet(amoVault);\\n        _amoVaults.set(amoVault, currentAllocation - collateralInDusd);\\n        totalAllocated -= collateralInDusd;\\n\\n        // Transfer the collateral\\n        AmoVault(amoVault).withdrawTo(\\n            address(collateralHolderVault),\\n            amount,\\n            token\\n        );\\n    }\\n\\n    /**\\n     * @notice Transfers collateral from the holding vault to an AMO vault.\\n     * @param amoVault The address of the AMO vault.\\n     * @param token The address of the collateral token to transfer.\\n     * @param amount The amount of collateral to transfer.\\n     */\\n    function transferFromHoldingVaultToAmoVault(\\n        address amoVault,\\n        address token,\\n        uint256 amount\\n    ) public onlyRole(AMO_ALLOCATOR_ROLE) {\\n        if (token == address(dusd)) {\\n            revert CannotTransferDUSD();\\n        }\\n        if (!_amoVaults.contains(amoVault)) {\\n            revert InactiveAmoVault(amoVault);\\n        }\\n\\n        // Update allocation\\n        // A note on why we modify AMO allocation when we deposit collateral:\\n        // 1. When we deposit collateral, it can be used to buy back dUSD\\n        // 2. When we buy back dUSD, the dUSD is now unbacked (a redemption)\\n        // 3. Thus any collateral deposited to an AMO vault can create unbacked dUSD,\\n        //    which means the AMO allocation for that vault must be increased to reflect this\\n        uint256 collateralUsdValue = collateralHolderVault.assetValueFromAmount(\\n            amount,\\n            token\\n        );\\n        uint256 collateralInDusd = usdValueToDusdAmount(collateralUsdValue);\\n        (, uint256 currentAllocation) = _amoVaults.tryGet(amoVault);\\n        _amoVaults.set(amoVault, currentAllocation + collateralInDusd);\\n        totalAllocated += collateralInDusd;\\n\\n        // Transfer the collateral\\n        collateralHolderVault.withdrawTo(amoVault, amount, token);\\n    }\\n\\n    /* Profit Management */\\n\\n    /**\\n     * @notice Returns the available profit for a specific vault in USD.\\n     * @param vaultAddress The address of the AMO vault to check.\\n     * @return The available profit in USD (can be negative).\\n     */\\n    function availableVaultProfitsInUsd(\\n        address vaultAddress\\n    ) public view returns (int256) {\\n        uint256 totalVaultValueInUsd = AmoVault(vaultAddress).totalValue();\\n        uint256 allocatedDusd = amoVaultAllocation(vaultAddress);\\n        uint256 allocatedValueInUsd = dusdAmountToUsdValue(allocatedDusd);\\n\\n        return int256(totalVaultValueInUsd) - int256(allocatedValueInUsd);\\n    }\\n\\n    /**\\n     * @notice Withdraws profits from an AMO vault to a recipient.\\n     * @param amoVault The AMO vault from which to withdraw profits.\\n     * @param recipient The address to receive the profits.\\n     * @param takeProfitToken The collateral token to withdraw.\\n     * @param takeProfitAmount The amount of collateral to withdraw.\\n     * @return takeProfitValueInUsd The value of the withdrawn profits in USD.\\n     */\\n    function withdrawProfits(\\n        AmoVault amoVault,\\n        address recipient,\\n        address takeProfitToken,\\n        uint256 takeProfitAmount\\n    )\\n        public\\n        onlyRole(FEE_COLLECTOR_ROLE)\\n        returns (uint256 takeProfitValueInUsd)\\n    {\\n        // Leave open the possibility of withdrawing profits from inactive vaults\\n\\n        takeProfitValueInUsd = amoVault.assetValueFromAmount(\\n            takeProfitAmount,\\n            takeProfitToken\\n        );\\n\\n        int256 _availableProfitInUsd = availableVaultProfitsInUsd(\\n            address(amoVault)\\n        );\\n\\n        // Make sure we are withdrawing less than the available profit\\n        if (\\n            _availableProfitInUsd <= 0 ||\\n            int256(takeProfitValueInUsd) > _availableProfitInUsd\\n        ) {\\n            revert InsufficientProfits(\\n                takeProfitValueInUsd,\\n                _availableProfitInUsd\\n            );\\n        }\\n\\n        // Withdraw profits from the vault\\n        amoVault.withdrawTo(recipient, takeProfitAmount, takeProfitToken);\\n\\n        emit ProfitsWithdrawn(address(amoVault), takeProfitValueInUsd);\\n\\n        return takeProfitValueInUsd;\\n    }\\n\\n    /**\\n     * @notice Returns the total available profit across all AMO vaults in USD.\\n     * @return The total available profit in USD.\\n     */\\n    function availableProfitInUsd() public view returns (int256) {\\n        int256 totalProfit = 0;\\n\\n        // Iterate through all AMO vaults\\n        for (uint256 i = 0; i < _amoVaults.length(); i++) {\\n            (address vaultAddress, ) = _amoVaults.at(i);\\n\\n            if (isAmoActive(vaultAddress)) {\\n                totalProfit += availableVaultProfitsInUsd(vaultAddress);\\n            }\\n        }\\n\\n        return totalProfit;\\n    }\\n\\n    /* Utility */\\n\\n    /**\\n     * @notice Converts a USD value to an equivalent amount of dUSD tokens.\\n     * @param usdValue The amount of USD value to convert.\\n     * @return The equivalent amount of dUSD tokens.\\n     */\\n    function usdValueToDusdAmount(\\n        uint256 usdValue\\n    ) public view returns (uint256) {\\n        uint8 dusdDecimals = dusd.decimals();\\n        return (usdValue * (10 ** dusdDecimals)) / USD_UNIT;\\n    }\\n\\n    /**\\n     * @notice Converts an amount of dUSD tokens to an equivalent USD value.\\n     * @param dusdAmount The amount of dUSD tokens to convert.\\n     * @return The equivalent amount of USD value.\\n     */\\n    function dusdAmountToUsdValue(\\n        uint256 dusdAmount\\n    ) public view returns (uint256) {\\n        uint8 dusdDecimals = dusd.decimals();\\n        return\\n            (dusdAmount * oracle.getAssetPrice(address(dusd))) /\\n            (10 ** dusdDecimals);\\n    }\\n\\n    /* Admin */\\n\\n    /**\\n     * @notice Sets the collateral vault address\\n     * @param _collateralVault The address of the new collateral vault\\n     */\\n    function setCollateralVault(\\n        address _collateralVault\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        collateralHolderVault = CollateralVault(_collateralVault);\\n    }\\n}\\n\\n/**\\n * @title ICollateralSum\\n * @dev Interface for contracts that can provide total collateral value.\\n */\\ninterface ICollateralSum {\\n    /**\\n     * @notice Returns the total collateral value of the implementing contract.\\n     * @return The total collateral value in base value (e.g., USD).\\n     */\\n    function totalCollateralValue() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbe2ab4f631026d4e2c421c2a9f53a07490d235e7b31d61311f7ab7ad6de369bc\",\"license\":\"MIT\"},\"contracts/dusd/AmoVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-5/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/token/ERC20/IERC20.sol\\\";\\nimport \\\"contracts/token/IERC20Stablecoin.sol\\\";\\nimport \\\"contracts/dusd/AmoManager.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/utils/ReentrancyGuard.sol\\\";\\nimport \\\"contracts/dusd/CollateralVault.sol\\\";\\n\\ninterface IRecoverable {\\n    function recoverERC20(address token, address to, uint256 amount) external;\\n\\n    function recoverETH(address to, uint256 amount) external;\\n}\\n\\n/**\\n * @title AmoVault\\n * @notice Base contract for AMO (Algorithmic Market Operations) vaults that manage dUSD and collateral assets\\n */\\nabstract contract AmoVault is CollateralVault, IRecoverable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /* Core state */\\n\\n    IERC20Stablecoin public immutable dusd;\\n    uint8 public immutable dusdDecimals;\\n    AmoManager public amoManager;\\n\\n    /* Roles */\\n\\n    bytes32 public constant RECOVERER_ROLE = keccak256(\\\"RECOVERER_ROLE\\\");\\n\\n    /* Errors */\\n\\n    error CannotRecoverVaultToken(address token);\\n    error InvalidAmoManager();\\n\\n    constructor(\\n        address _dusd,\\n        address _amoManager,\\n        address _admin,\\n        address _collateralWithdrawer,\\n        address _recoverer,\\n        IPriceOracleGetter _oracle\\n    ) CollateralVault(_oracle) {\\n        dusd = IERC20Stablecoin(_dusd);\\n        dusdDecimals = IERC20Metadata(_dusd).decimals();\\n        amoManager = AmoManager(_amoManager);\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        grantRole(COLLATERAL_WITHDRAWER_ROLE, _collateralWithdrawer);\\n        grantRole(RECOVERER_ROLE, _recoverer);\\n        approveAmoManager();\\n    }\\n\\n    /**\\n     * @notice Approves the AmoManager to spend dUSD on behalf of this contract\\n     * @dev Only callable by the contract owner or an account with the DEFAULT_ADMIN_ROLE\\n     */\\n    function approveAmoManager() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        dusd.approve(address(amoManager), type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice Sets a new AmoManager address\\n     * @param _newAmoManager The address of the new AmoManager\\n     * @dev Only callable by an account with the DEFAULT_ADMIN_ROLE\\n     */\\n    function setAmoManager(\\n        address _newAmoManager\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_newAmoManager == address(0)) revert InvalidAmoManager();\\n\\n        // Reset allowance for old AMO manager\\n        dusd.approve(address(amoManager), 0);\\n\\n        // Set new AMO manager\\n        amoManager = AmoManager(_newAmoManager);\\n\\n        // Approve new AMO manager\\n        approveAmoManager();\\n    }\\n\\n    /* Recovery */\\n\\n    /**\\n     * @notice Recovers ERC20 tokens accidentally sent to the contract\\n     * @param token The address of the token to recover\\n     * @param to The address to send the tokens to\\n     * @param amount The amount of tokens to recover\\n     */\\n    function recoverERC20(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external onlyRole(RECOVERER_ROLE) nonReentrant {\\n        if (token == address(dusd) || isCollateralSupported(token)) {\\n            revert CannotRecoverVaultToken(token);\\n        }\\n        IERC20(token).safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @notice Recovers ETH accidentally sent to the contract\\n     * @param to The address to send the ETH to\\n     * @param amount The amount of ETH to recover\\n     */\\n    function recoverETH(\\n        address to,\\n        uint256 amount\\n    ) external onlyRole(RECOVERER_ROLE) {\\n        payable(to).sendValue(amount);\\n    }\\n\\n    /* Virtual functions */\\n\\n    /**\\n     * @notice Calculates the total value of non-dUSD collateral assets in the vault\\n     * @return The total value of collateral assets denominated in the base currency (e.g., USD)\\n     * @dev Must be implemented by derived contracts\\n     */\\n    function totalCollateralValue() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Calculates the total value of dUSD holdings in the vault\\n     * @return The total value of dUSD holdings denominated in the base currency (e.g., USD)\\n     * @dev Must be implemented by derived contracts\\n     */\\n    function totalDusdValue() public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x4278f476895ac426a8c1db61c1e52cb8f1426c0b4936da45285ca3981f29815a\",\"license\":\"MIT\"},\"contracts/dusd/CollateralVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-5/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"contracts/shared/Constants.sol\\\";\\nimport \\\"contracts/lending/core/interfaces/IPriceOracleGetter.sol\\\";\\nimport \\\"contracts/dusd/OracleAware.sol\\\";\\n\\n/**\\n * @title CollateralVault\\n * @notice Abstract contract for any contract that manages collateral assets\\n\\\\ */\\nabstract contract CollateralVault is AccessControl, OracleAware {\\n    using SafeERC20 for IERC20Metadata;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /* Core state */\\n\\n    EnumerableSet.AddressSet internal _supportedCollaterals;\\n\\n    /* Events */\\n\\n    event CollateralAllowed(address indexed collateralAsset);\\n    event CollateralDisallowed(address indexed collateralAsset);\\n\\n    /* Roles */\\n\\n    bytes32 public constant COLLATERAL_MANAGER_ROLE =\\n        keccak256(\\\"COLLATERAL_MANAGER_ROLE\\\");\\n    bytes32 public constant COLLATERAL_STRATEGY_ROLE =\\n        keccak256(\\\"COLLATERAL_STRATEGY_ROLE\\\");\\n    bytes32 public constant COLLATERAL_WITHDRAWER_ROLE =\\n        keccak256(\\\"COLLATERAL_WITHDRAWER_ROLE\\\");\\n\\n    /* Errors */\\n    error UnsupportedCollateral(address collateralAsset);\\n    error CollateralAlreadyAllowed(address collateralAsset);\\n    error NoOracleSupport(address collateralAsset);\\n    error FailedToAddCollateral(address collateralAsset);\\n    error CollateralNotSupported(address collateralAsset);\\n    error MustSupportAtLeastOneCollateral();\\n    error FailedToRemoveCollateral(address collateralAsset);\\n\\n    /**\\n     * @notice Initializes the vault with an oracle and sets up initial roles\\n     * @dev Grants all roles to the contract deployer initially\\n     * @param oracle The price oracle to use for collateral valuation\\n     */\\n    constructor(\\n        IPriceOracleGetter oracle\\n    ) OracleAware(oracle, Constants.ORACLE_BASE_CURRENCY_UNIT) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender); // This is the super admin\\n        grantRole(COLLATERAL_MANAGER_ROLE, msg.sender);\\n        grantRole(COLLATERAL_WITHDRAWER_ROLE, msg.sender);\\n        grantRole(COLLATERAL_STRATEGY_ROLE, msg.sender);\\n    }\\n\\n    /* Deposit */\\n\\n    /**\\n     * @notice Deposit collateral into the vault\\n     * @param collateralAmount The amount of collateral to deposit\\n     * @param collateralAsset The address of the collateral asset\\n     */\\n    function deposit(uint256 collateralAmount, address collateralAsset) public {\\n        if (!_supportedCollaterals.contains(collateralAsset)) {\\n            revert UnsupportedCollateral(collateralAsset);\\n        }\\n\\n        IERC20Metadata(collateralAsset).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            collateralAmount\\n        );\\n    }\\n\\n    /* Withdrawal */\\n\\n    /**\\n     * @notice Withdraws collateral from the vault\\n     * @param collateralAmount The amount of collateral to withdraw\\n     * @param collateralAsset The address of the collateral asset\\n     */\\n    function withdraw(\\n        uint256 collateralAmount,\\n        address collateralAsset\\n    ) public onlyRole(COLLATERAL_WITHDRAWER_ROLE) {\\n        return _withdraw(msg.sender, collateralAmount, collateralAsset);\\n    }\\n\\n    /**\\n     * @notice Withdraws collateral from the vault to a specific address\\n     * @param recipient The address receiving the collateral\\n     * @param collateralAmount The amount of collateral to withdraw\\n     * @param collateralAsset The address of the collateral asset\\n     */\\n    function withdrawTo(\\n        address recipient,\\n        uint256 collateralAmount,\\n        address collateralAsset\\n    ) public onlyRole(COLLATERAL_WITHDRAWER_ROLE) {\\n        return _withdraw(recipient, collateralAmount, collateralAsset);\\n    }\\n\\n    /**\\n     * @notice Internal function to withdraw collateral from the vault\\n     * @param withdrawer The address withdrawing the collateral\\n     * @param collateralAmount The amount of collateral to withdraw\\n     * @param collateralAsset The address of the collateral asset\\n     */\\n    function _withdraw(\\n        address withdrawer,\\n        uint256 collateralAmount,\\n        address collateralAsset\\n    ) internal {\\n        IERC20Metadata(collateralAsset).safeTransfer(\\n            withdrawer,\\n            collateralAmount\\n        );\\n    }\\n\\n    /* Collateral Info */\\n\\n    /**\\n     * @notice Calculates the total value of all assets in the vault\\n     * @return usdValue The total value of all assets in USD\\n     */\\n    function totalValue() public view virtual returns (uint256 usdValue);\\n\\n    /**\\n     * @notice Calculates the USD value of a given amount of an asset\\n     * @param assetAmount The amount of the asset\\n     * @param asset The address of the asset\\n     * @return usdValue The USD value of the asset\\n     */\\n    function assetValueFromAmount(\\n        uint256 assetAmount,\\n        address asset\\n    ) public view returns (uint256 usdValue) {\\n        uint256 assetPrice = oracle.getAssetPrice(asset);\\n        uint8 assetDecimals = IERC20Metadata(asset).decimals();\\n        return (assetPrice * assetAmount) / (10 ** assetDecimals);\\n    }\\n\\n    /**\\n     * @notice Calculates the amount of an asset that corresponds to a given USD value\\n     * @param usdValue The USD value\\n     * @param asset The address of the asset\\n     * @return assetAmount The amount of the asset\\n     */\\n    function assetAmountFromValue(\\n        uint256 usdValue,\\n        address asset\\n    ) public view returns (uint256 assetAmount) {\\n        uint256 assetPrice = oracle.getAssetPrice(asset);\\n        uint8 assetDecimals = IERC20Metadata(asset).decimals();\\n        return (usdValue * (10 ** assetDecimals)) / assetPrice;\\n    }\\n\\n    /* Collateral management */\\n\\n    /**\\n     * @notice Allows a new collateral asset\\n     * @param collateralAsset The address of the collateral asset\\n     */\\n    function allowCollateral(\\n        address collateralAsset\\n    ) public onlyRole(COLLATERAL_MANAGER_ROLE) {\\n        if (_supportedCollaterals.contains(collateralAsset)) {\\n            revert CollateralAlreadyAllowed(collateralAsset);\\n        }\\n        if (oracle.getAssetPrice(collateralAsset) == 0) {\\n            revert NoOracleSupport(collateralAsset);\\n        }\\n        if (!_supportedCollaterals.add(collateralAsset)) {\\n            revert FailedToAddCollateral(collateralAsset);\\n        }\\n        emit CollateralAllowed(collateralAsset);\\n    }\\n\\n    /**\\n     * @notice Disallows a previously supported collateral asset\\n     * @dev Requires at least one collateral asset to remain supported\\n     * @param collateralAsset The address of the collateral asset to disallow\\n     */\\n    function disallowCollateral(\\n        address collateralAsset\\n    ) public onlyRole(COLLATERAL_MANAGER_ROLE) {\\n        if (!_supportedCollaterals.contains(collateralAsset)) {\\n            revert CollateralNotSupported(collateralAsset);\\n        }\\n        if (_supportedCollaterals.length() <= 1) {\\n            revert MustSupportAtLeastOneCollateral();\\n        }\\n        if (!_supportedCollaterals.remove(collateralAsset)) {\\n            revert FailedToRemoveCollateral(collateralAsset);\\n        }\\n\\n        emit CollateralDisallowed(collateralAsset);\\n    }\\n\\n    /**\\n     * @notice Checks if a given asset is supported as collateral\\n     * @param collateralAsset The address of the collateral asset to check\\n     * @return bool True if the asset is supported, false otherwise\\n     */\\n    function isCollateralSupported(\\n        address collateralAsset\\n    ) public view returns (bool) {\\n        return _supportedCollaterals.contains(collateralAsset);\\n    }\\n\\n    /**\\n     * @notice Returns a list of all supported collateral assets\\n     * @return address[] Array of collateral asset addresses\\n     */\\n    function listCollateral() public view returns (address[] memory) {\\n        return _supportedCollaterals.values();\\n    }\\n\\n    /**\\n     * @notice Calculates the total USD value of all supported collateral assets in the vault\\n     * @dev Iterates through all supported collaterals and sums their USD values\\n     * @return uint256 The total value in USD\\n     */\\n    function _totalValueOfSupportedCollaterals()\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalUsdValue = 0;\\n        for (uint256 i = 0; i < _supportedCollaterals.length(); i++) {\\n            address collateral = _supportedCollaterals.at(i);\\n            uint256 collateralPrice = oracle.getAssetPrice(collateral);\\n            uint8 collateralDecimals = IERC20Metadata(collateral).decimals();\\n            uint256 collateralValue = (collateralPrice *\\n                IERC20Metadata(collateral).balanceOf(address(this))) /\\n                (10 ** collateralDecimals);\\n            totalUsdValue += collateralValue;\\n        }\\n        return totalUsdValue;\\n    }\\n}\\n\",\"keccak256\":\"0xb352535bb3d0eefd2a211a8ff033fa7c00f41d1c2490daabd4036da49ccd9388\",\"license\":\"MIT\"},\"contracts/dusd/OracleAware.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-5/access/AccessControl.sol\\\";\\nimport \\\"contracts/lending/core/interfaces/IPriceOracleGetter.sol\\\";\\n\\n/**\\n * @title OracleAware\\n * @notice Abstract contract that provides oracle functionality to other contracts\\n */\\nabstract contract OracleAware is AccessControl {\\n    /* Core state */\\n\\n    IPriceOracleGetter public oracle;\\n    uint256 public baseCurrencyUnit;\\n\\n    /* Events */\\n\\n    event OracleSet(address indexed newOracle);\\n\\n    /* Errors */\\n\\n    error IncorrectBaseCurrencyUnit(uint256 baseCurrencyUnit);\\n\\n    /**\\n     * @notice Initializes the contract with an oracle and base currency unit\\n     * @param initialOracle The initial oracle to use for price feeds\\n     * @param _baseCurrencyUnit The base currency unit for price calculations\\n     * @dev Sets up the initial oracle and base currency unit values\\n     */\\n    constructor(IPriceOracleGetter initialOracle, uint256 _baseCurrencyUnit) {\\n        oracle = initialOracle;\\n        baseCurrencyUnit = _baseCurrencyUnit;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Sets the oracle to use for collateral valuation\\n     * @param newOracle The new oracle to use\\n     */\\n    function setOracle(\\n        IPriceOracleGetter newOracle\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (newOracle.BASE_CURRENCY_UNIT() != baseCurrencyUnit) {\\n            revert IncorrectBaseCurrencyUnit(baseCurrencyUnit);\\n        }\\n\\n        oracle = newOracle;\\n\\n        emit OracleSet(address(newOracle));\\n    }\\n\\n    /**\\n     * @notice Updates the base currency unit used for price calculations\\n     * @param _newBaseCurrencyUnit The new base currency unit to set\\n     * @dev Only used if the oracle's base currency unit changes\\n     */\\n    function setBaseCurrencyUnit(\\n        uint256 _newBaseCurrencyUnit\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        baseCurrencyUnit = _newBaseCurrencyUnit;\\n    }\\n}\\n\",\"keccak256\":\"0x48844373ef6492851eeea63e4b243e929d8ae1de80e086b37e4f9d66ccb4442d\",\"license\":\"MIT\"},\"contracts/lending/core/interfaces/IPriceOracleGetter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPriceOracleGetter\\n * @author Aave\\n * @notice Interface for the Aave price oracle.\\n */\\ninterface IPriceOracleGetter {\\n    /**\\n     * @notice Returns the base currency address\\n     * @dev Address 0x0 is reserved for USD as base currency.\\n     * @return Returns the base currency address.\\n     */\\n    function BASE_CURRENCY() external view returns (address);\\n\\n    /**\\n     * @notice Returns the base currency unit\\n     * @dev 1 ether for ETH, 1e8 for USD.\\n     * @return Returns the base currency unit.\\n     */\\n    function BASE_CURRENCY_UNIT() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the asset price in the base currency\\n     * @param asset The address of the asset\\n     * @return The price of the asset\\n     */\\n    function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x31366baa77e6298e46695465ba7f5ba8641fe8537e54901ae119282be0ee6d67\",\"license\":\"AGPL-3.0\"},\"contracts/shared/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Constants {\\n    // Shared definitions of how we represent percentages and basis points\\n    uint16 public constant ONE_BPS = 100; // 1 basis point with 2 decimals\\n    uint32 public constant ONE_PERCENT_BPS = ONE_BPS * 100;\\n    uint32 public constant ONE_HUNDRED_PERCENT_BPS = ONE_PERCENT_BPS * 100;\\n\\n    uint32 public constant ORACLE_BASE_CURRENCY_UNIT = 1e8;\\n}\\n\",\"keccak256\":\"0xcc25566eb9a2e10e6861ef828987039329e61385929384237cd3cf4429c8d819\",\"license\":\"MIT\"},\"contracts/token/IERC20Stablecoin.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-5/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Stablecoin is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xa13d8ca7e9f008eef376fca0314bac40a8ad910bb2d208cfcf7212e7cd2a841d\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60a060409080825234620001ef5760608162001ef0803803809162000025828562000207565b833981010312620001ef576200003b8162000241565b602091836200004c84830162000241565b9101516001600160a01b039081811690819003620001ef578185938160049660018060a01b0319948560015416176001556305f5e100600255620000903362000256565b50168360075416176007551690600854161760085560015416845192838092638c89b64f60e01b82525afa908115620001fc57600091620001c4575b50608052620000db3362000256565b5060008051602062001eb0833981519152600052600081526001826000200154806000528260002033600052825260ff83600020541615620001a757506200012333620002d6565b5060008051602062001ed083398151915260005260008152600182600020015490816000528260002090336000525260ff826000205416156200018b57506200016c3362000367565b5051611a9c9081620003f48239608051818181610fe101526114f70152f35b604491519063e2517d3f60e01b82523360048301526024820152fd5b60449083519063e2517d3f60e01b82523360048301526024820152fd5b90508181813d8311620001f4575b620001de818362000207565b81010312620001ef575138620000cc565b600080fd5b503d620001d2565b83513d6000823e3d90fd5b601f909101601f19168101906001600160401b038211908210176200022b57604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620001ef57565b6001600160a01b031660008181527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205490919060ff16620002d257818052816020526040822081835260205260408220600160ff19825416179055339160008051602062001e908339815191528180a4600190565b5090565b6001600160a01b031660008181527f3e202b319ce29fc3d407c763c9df930d4929e19b1d8f64d08ac659c98dd25ce3602052604081205490919060008051602062001eb08339815191529060ff166200036257808352826020526040832082845260205260408320600160ff1982541617905560008051602062001e90833981519152339380a4600190565b505090565b6001600160a01b031660008181527f92227d48d66cabccdfe59bda1e8cb95f286820615128bd3f8666d1f5ec8b70aa602052604081205490919060008051602062001ed08339815191529060ff166200036257808352826020526040832082845260205260408320600160ff1982541617905560008051602062001e90833981519152339380a460019056fe6040608081526004908136101561001557600080fd5b600091823560e01c8063012f257a146110f557806301ffc9a7146110a057806316611909146110045780631baf72bf14610fc95780631c364f7f14610fa9578063248a9ca314610f805780632a6739a214610ead5780632f2ff15d14610e8457806336568abe14610e3d578063375f52e414610e1d5780633a2e845a14610d615780633c2df49914610d2657806345f7f24914610d075780634a0bbabb14610ce55780634fc6c75314610ae85780635dd26add14610a4f57806362a2a47c14610a1457806368a806c4146109cf57806371f3588d146109a9578063764c42301461088f57806377003194146107f4578063773df151146107d75780637adbf973146106e75780637dc0d1d0146106be57806385b30e181461067857806391d1485414610634578063a217fddf14610619578063d547741f146105db578063de1409ce146105b2578063e67736bf14610589578063ed1f3e4c14610428578063f3bddde114610409578063fab9300e14610255578063fb5b3db7146102245763fdc9a038146101a257600080fd5b829134610220576020366003190112610220576101bd611682565b6007546001600160a01b031691823b1561021b5783926024849284519586938492630852cd8d60e31b84528035908401525af190811561021257506101ff5750f35b610208906112d5565b61020f5780f35b80fd5b513d84823e3d90fd5b505050fd5b5050fd5b5050346102515760203660031901126102515760209061024a610245611274565b611661565b9051908152f35b5080fd5b5082903461025157610266366112a0565b610274959295939193611682565b6007546001600160a01b0396908716858816146103f957868116966102a6886000526004602052604060002054151590565b156103e2578697816008541660208751809263e00cb4a560e01b825281806102e68d8b8d84019092916020906040830194835260018060a01b0316910152565b03915afa9081156103d857899161039a575b509061032f610309610338936114a8565b9161031e836103178361187e565b905061149b565b818c526005602052898c20556118fb565b5060065461149b565b6006556008541690813b1561039657845163627160f360e11b81526001600160a01b039182169481019485526020850193909352909416604083015292849184919082908490829060600103925af190811561021257506101ff5750f35b8680fd5b919850506020813d6020116103d0575b816103b7602093836112ff565b810103126103cb575188979061032f6102f8565b600080fd5b3d91506103aa565b87513d8b823e3d90fd5b8451631c5620f360e31b8152808501899052602490fd5b8351633e1b3a6d60e01b81528390fd5b5050346102515781600319360112610251576020906002549051908152f35b5034610585578160031936011261058557610441611274565b916024359161044e611682565b6104566115e5565b6001600160a01b039485166000818152600460205260409020549095901561056e5760208791610489876103178a61187e565b888452600583528684205561049d886118fb565b506104aa8760065461149b565b60065560075416604486518094819363a9059cbb60e01b83528b898401528a60248401525af1801561056457610535575b506104e46115e5565b9080820361051c575050507f9b8105582b12481c6193ec3b651067ba5c410f1474d24704b0a67f89086da6149160209151908152a280f35b6044935192637614d04360e11b84528301526024820152fd5b6105569060203d60201161055d575b61054e81836112ff565b8101906115cd565b50386104db565b503d610544565b84513d89823e3d90fd5b8351631c5620f360e31b8152808401879052602490fd5b8280fd5b50503461025157816003193601126102515760085490516001600160a01b039091168152602090f35b50503461025157816003193601126102515760075490516001600160a01b039091168152602090f35b509034610585578060031936011261058557610615913561061060016105ff61128a565b938387528660205286200154611736565b611809565b5080f35b50503461025157816003193601126102515751908152602090f35b50346105855781600319360112610585578160209361065161128a565b92358152808552209060018060a01b0316600052825260ff81600020541690519015158152f35b505034610251576020366003190112610251576020906106b56001600160a01b036106a1611274565b166000526004602052604060002054151590565b90519015158152f35b50503461025157816003193601126102515760015490516001600160a01b039091168152602090f35b50346105855760203660031901126105855780356001600160a01b03811692908390036107d3576107166116fc565b8051638c89b64f60e01b8152906020828481875afa9182156107c9578592610795575b50600254809203610780575050600180546001600160a01b03191683179055507f3f32684a32a11dabdbb8c0177de80aa3ae36a004d75210335b49e544e48cd0aa8280a280f35b51639b6812b960e01b81529182015260249150fd5b9091506020813d6020116107c1575b816107b1602093836112ff565b810103126103cb57519038610739565b3d91506107a4565b81513d87823e3d90fd5b8380fd5b50503461025157816003193601126102515760209061024a6115e5565b5090346105855760203660031901126105855761080f611274565b6108176116fc565b6001600160a01b031660008181526004602052604090205490929061087a575060207f2017a03d63122e396be484633b7d9ed729e8fabe2e0587ccd5e42d8bfde8670091838552600582528481812055610870846118fb565b505160018152a280f35b82602492519163ad2a3c3160e01b8352820152fd5b50346105855781600319360112610585576108a8611274565b91602435916108b5611682565b6108bd6115e5565b6001600160a01b039485169486906020906108d78861187e565b90508781610984575b6108ed9150600654611321565b6006556007541660648651809481936323b872dd60e01b83528b898401523060248401528a60448401525af1801561056457610965575b5061092d6115e5565b9080820361051c575050507fc57e1ebcdc3ba533a9852552e139d8119d9599c48177705d00b4100a32c046d89160209151908152a280f35b61097d9060203d60201161055d5761054e81836112ff565b5038610924565b61098d91611321565b88845260058352868420556109a1886118fb565b5038876108e0565b5050346102515760203660031901126102515760209061024a6109ca611274565b61153b565b833461020f57602036600319011261020f576109e9611274565b6109f16116fc565b60018060a01b03166bffffffffffffffffffffffff60a01b600854161760085580f35b505034610251578160031936011261025157602090517f2dca0f5ce7e75a4b43fe2b0d6f5d0b7a2bf92ecf89f8f0aa17b8308b670388218152f35b5091903461025157816003193601126102515760035482805b828110610a79576020858551908152f35b610a828161175c565b506001600160a01b038116600090815260046020526040902054610aaa575b50600101610a68565b610ab69095919561153b565b90828282019283129112908015821691151617610ad557936001610aa1565b634e487b7160e01b825260118652602482fd5b50919034610251576080366003190112610251576001600160a01b03918335838116919082900361020f57610b1b61128a565b60443594851685036103cb57606435907f2dca0f5ce7e75a4b43fe2b0d6f5d0b7a2bf92ecf89f8f0aa17b8308b670388219687600052602097600089528660002033600052895260ff87600020541615610cc85750855163e00cb4a560e01b81528181018481526001600160a01b03891660208201529097908990899081906040010381895afa978815610cbe578598610c8f575b50610bba8661153b565b858113801590610c86575b610c6a5750853b15610c6657865163627160f360e11b81526001600160a01b0393841692810192835260208301949094529091166040820152829082908190606001038183875af18015610c5c57610c48575b50507f124fd12bda4dcb813885ca782fb4ea9350d4f752b1a881cadf8742d8f128bb8e848351858152a251908152f35b610c5282916112d5565b61020f5780610c18565b84513d84823e3d90fd5b8480fd5b826044918a8a5192631d7ed6ef60e11b84528301526024820152fd5b50808913610bc5565b9097508881813d8311610cb7575b610ca781836112ff565b810103126103cb57519638610bb0565b503d610c9d565b87513d87823e3d90fd5b6044925086519163e2517d3f60e01b835233908301526024820152fd5b83823461025157602036600319011261025157610d006116fc565b3560025580f35b5050346102515781600319360112610251576020906006549051908152f35b505034610251578160031936011261025157602090517fc304524b36c64136ce5783ff1658be193c8352a90708830b9863880958c1fddd8152f35b82843461020f578060031936011261020f579080519182906003549182855260208095018093600384527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90845b818110610e095750505081610dc59103826112ff565b83519485948186019282875251809352850193925b828110610de957505050500390f35b83516001600160a01b031685528695509381019392810192600101610dda565b825484529288019260019283019201610daf565b50913461020f57602036600319011261020f575061024a602092356114a8565b50919034610251578060031936011261025157610e5861128a565b90336001600160a01b03831603610e755750610615919235611809565b5163334bd91960e11b81528390fd5b5090346105855780600319360112610585576106159135610ea860016105ff61128a565b61178b565b50919034610251578160031936011261025157818093600354945b858110610ed9576020858551908152f35b610ee28161175c565b506001600160a01b0316600081815260046020526040902054610f09575b50600101610ec8565b849591955180916315339cd160e11b8252818560209485935afa918215610f76578592610f46575b5050610f3f9060019261149b565b9490610f00565b90809250813d8311610f6f575b610f5d81836112ff565b810103126103cb575181610f3f610f31565b503d610f53565b86513d87823e3d90fd5b503461058557602036600319011261058557816020936001923581528085522001549051908152f35b50913461020f57602036600319011261020f575061024a602092356113a1565b505034610251578160031936011261025157602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5090346105855760203660031901126105855761101f611274565b6110276116fc565b6001600160a01b03166000818152600460205260409020549092901561108b575060207f2017a03d63122e396be484633b7d9ed729e8fabe2e0587ccd5e42d8bfde8670091838552600582526000818620556110828461197d565b5051848152a280f35b826024925191631c5620f360e31b8352820152fd5b503461058557602036600319011261058557359063ffffffff60e01b82168092036105855760209250637965db0b60e01b82149182156110e4575b50519015158152f35b6301ffc9a760e01b149150386110db565b50903461058557611105366112a0565b919093611110611682565b6007546001600160a01b039081168682161461126557600854855163e00cb4a560e01b81528084018681526001600160a01b0389166020828101919091528a9796959493909183918516908290819060400103915afa90811561125b5782908792611221575b506111836111b8926114a8565b94169361119a816111938761187e565b9050611321565b8588526005602052888820556111af856118fb565b50600654611321565b6006556008541690823b15610c6657855163627160f360e11b81526001600160a01b03928316918101918252602082019490945295166040860152909384919082908490829060600103925af19081156102125750611215575080f35b61121e906112d5565b80f35b9150506020813d602011611253575b8161123d602093836112ff565b8101031261124f575181611183611176565b8580fd5b3d9150611230565b87513d88823e3d90fd5b508351633e1b3a6d60e01b8152fd5b600435906001600160a01b03821682036103cb57565b602435906001600160a01b03821682036103cb57565b60609060031901126103cb576001600160a01b039060043582811681036103cb579160243590811681036103cb579060443590565b67ffffffffffffffff81116112e957604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176112e957604052565b9190820391821161132e57565b634e487b7160e01b600052601160045260246000fd5b908160209103126103cb575160ff811681036103cb5790565b8181029291811591840414171561132e57565b60ff16604d811161132e57600a0a90565b811561138b570490565b634e487b7160e01b600052601260045260246000fd5b60075460405163313ce56760e01b81526020926001600160a01b03929091908316908481600481855afa93841561146057859160009561146c575b50600154169160246040518094819363b3596f0760e01b835260048301525afa9384156114605760009461142c575b505061141d611429936114239261135d565b91611370565b90611381565b90565b90809450813d8311611459575b61144381836112ff565b810103126103cb5791519161141d61142361140b565b503d611439565b6040513d6000823e3d90fd5b61148d919550823d8411611494575b61148581836112ff565b810190611344565b93386113dc565b503d61147b565b9190820180921161132e57565b60075460405163313ce56760e01b81529190602090839060049082906001600160a01b03165afa908115611460576114ef6114f5926114299460009161151c575b50611370565b9061135d565b7f000000000000000000000000000000000000000000000000000000000000000090611381565b611535915060203d6020116114945761148581836112ff565b386114e9565b6040516306a61f7560e51b8152906020826004816001600160a01b0385165afa91821561146057600092611597575b5061157761157c91611661565b6113a1565b906000828203921281831281169183139015161761132e5790565b90916020823d6020116115c5575b816115b2602093836112ff565b8101031261020f5750519061157761156a565b3d91506115a5565b908160209103126103cb575180151581036103cb5790565b6007546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa80156114605760009061162d575b61142991506006549061149b565b506020813d602011611659575b81611647602093836112ff565b810103126103cb57611429905161161f565b3d915061163a565b611673906001600160a01b031661187e565b901561167c5790565b50600090565b3360009081527f3e202b319ce29fc3d407c763c9df930d4929e19b1d8f64d08ac659c98dd25ce360205260409020547fc304524b36c64136ce5783ff1658be193c8352a90708830b9863880958c1fddd9060ff16156116de5750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205460ff16156116de5750565b80600052600060205260406000203360005260205260ff60406000205416156116de5750565b611765906118ae565b905460039190911b1c6000818152600560205260409020546001600160a01b0390911691565b9060009180835282602052604083209160018060a01b03169182845260205260ff6040842054161560001461180457808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b9060009180835282602052604083209160018060a01b03169182845260205260ff6040842054166000146118045780835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b600052600560205260406000205480156000146118a957506004602052604060002054151590600090565b600191565b6003548110156118e55760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b634e487b7160e01b600052603260045260246000fd5b6000818152600460205260408120546119785760035468010000000000000000811015611964579082611950611939846001604096016003556118ae565b819391549060031b91821b91600019901b19161790565b905560035492815260046020522055600190565b634e487b7160e01b82526041600452602482fd5b905090565b600090808252600490816020526040832054801515600014611a605760001990808201818111611a4d5760035490838201918211611a3a57818103611a07575b50505060035480156119f4578101906119d5826118ae565b909182549160031b1b1916905560035582526020526040812055600190565b634e487b7160e01b855260318452602485fd5b611a25611a16611939936118ae565b90549060031b1c9283926118ae565b905585528360205260408520553880806119bd565b634e487b7160e01b875260118652602487fd5b634e487b7160e01b865260118552602486fd5b5050509056fea26469706673582212208a62ca5db7613b5fc92a4e9bf1a9fb25762c7107fa6e92322607f44b8e2bcbed64736f6c634300081800332f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0dc304524b36c64136ce5783ff1658be193c8352a90708830b9863880958c1fddd2dca0f5ce7e75a4b43fe2b0d6f5d0b7a2bf92ecf89f8f0aa17b8308b67038821",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600091823560e01c8063012f257a146110f557806301ffc9a7146110a057806316611909146110045780631baf72bf14610fc95780631c364f7f14610fa9578063248a9ca314610f805780632a6739a214610ead5780632f2ff15d14610e8457806336568abe14610e3d578063375f52e414610e1d5780633a2e845a14610d615780633c2df49914610d2657806345f7f24914610d075780634a0bbabb14610ce55780634fc6c75314610ae85780635dd26add14610a4f57806362a2a47c14610a1457806368a806c4146109cf57806371f3588d146109a9578063764c42301461088f57806377003194146107f4578063773df151146107d75780637adbf973146106e75780637dc0d1d0146106be57806385b30e181461067857806391d1485414610634578063a217fddf14610619578063d547741f146105db578063de1409ce146105b2578063e67736bf14610589578063ed1f3e4c14610428578063f3bddde114610409578063fab9300e14610255578063fb5b3db7146102245763fdc9a038146101a257600080fd5b829134610220576020366003190112610220576101bd611682565b6007546001600160a01b031691823b1561021b5783926024849284519586938492630852cd8d60e31b84528035908401525af190811561021257506101ff5750f35b610208906112d5565b61020f5780f35b80fd5b513d84823e3d90fd5b505050fd5b5050fd5b5050346102515760203660031901126102515760209061024a610245611274565b611661565b9051908152f35b5080fd5b5082903461025157610266366112a0565b610274959295939193611682565b6007546001600160a01b0396908716858816146103f957868116966102a6886000526004602052604060002054151590565b156103e2578697816008541660208751809263e00cb4a560e01b825281806102e68d8b8d84019092916020906040830194835260018060a01b0316910152565b03915afa9081156103d857899161039a575b509061032f610309610338936114a8565b9161031e836103178361187e565b905061149b565b818c526005602052898c20556118fb565b5060065461149b565b6006556008541690813b1561039657845163627160f360e11b81526001600160a01b039182169481019485526020850193909352909416604083015292849184919082908490829060600103925af190811561021257506101ff5750f35b8680fd5b919850506020813d6020116103d0575b816103b7602093836112ff565b810103126103cb575188979061032f6102f8565b600080fd5b3d91506103aa565b87513d8b823e3d90fd5b8451631c5620f360e31b8152808501899052602490fd5b8351633e1b3a6d60e01b81528390fd5b5050346102515781600319360112610251576020906002549051908152f35b5034610585578160031936011261058557610441611274565b916024359161044e611682565b6104566115e5565b6001600160a01b039485166000818152600460205260409020549095901561056e5760208791610489876103178a61187e565b888452600583528684205561049d886118fb565b506104aa8760065461149b565b60065560075416604486518094819363a9059cbb60e01b83528b898401528a60248401525af1801561056457610535575b506104e46115e5565b9080820361051c575050507f9b8105582b12481c6193ec3b651067ba5c410f1474d24704b0a67f89086da6149160209151908152a280f35b6044935192637614d04360e11b84528301526024820152fd5b6105569060203d60201161055d575b61054e81836112ff565b8101906115cd565b50386104db565b503d610544565b84513d89823e3d90fd5b8351631c5620f360e31b8152808401879052602490fd5b8280fd5b50503461025157816003193601126102515760085490516001600160a01b039091168152602090f35b50503461025157816003193601126102515760075490516001600160a01b039091168152602090f35b509034610585578060031936011261058557610615913561061060016105ff61128a565b938387528660205286200154611736565b611809565b5080f35b50503461025157816003193601126102515751908152602090f35b50346105855781600319360112610585578160209361065161128a565b92358152808552209060018060a01b0316600052825260ff81600020541690519015158152f35b505034610251576020366003190112610251576020906106b56001600160a01b036106a1611274565b166000526004602052604060002054151590565b90519015158152f35b50503461025157816003193601126102515760015490516001600160a01b039091168152602090f35b50346105855760203660031901126105855780356001600160a01b03811692908390036107d3576107166116fc565b8051638c89b64f60e01b8152906020828481875afa9182156107c9578592610795575b50600254809203610780575050600180546001600160a01b03191683179055507f3f32684a32a11dabdbb8c0177de80aa3ae36a004d75210335b49e544e48cd0aa8280a280f35b51639b6812b960e01b81529182015260249150fd5b9091506020813d6020116107c1575b816107b1602093836112ff565b810103126103cb57519038610739565b3d91506107a4565b81513d87823e3d90fd5b8380fd5b50503461025157816003193601126102515760209061024a6115e5565b5090346105855760203660031901126105855761080f611274565b6108176116fc565b6001600160a01b031660008181526004602052604090205490929061087a575060207f2017a03d63122e396be484633b7d9ed729e8fabe2e0587ccd5e42d8bfde8670091838552600582528481812055610870846118fb565b505160018152a280f35b82602492519163ad2a3c3160e01b8352820152fd5b50346105855781600319360112610585576108a8611274565b91602435916108b5611682565b6108bd6115e5565b6001600160a01b039485169486906020906108d78861187e565b90508781610984575b6108ed9150600654611321565b6006556007541660648651809481936323b872dd60e01b83528b898401523060248401528a60448401525af1801561056457610965575b5061092d6115e5565b9080820361051c575050507fc57e1ebcdc3ba533a9852552e139d8119d9599c48177705d00b4100a32c046d89160209151908152a280f35b61097d9060203d60201161055d5761054e81836112ff565b5038610924565b61098d91611321565b88845260058352868420556109a1886118fb565b5038876108e0565b5050346102515760203660031901126102515760209061024a6109ca611274565b61153b565b833461020f57602036600319011261020f576109e9611274565b6109f16116fc565b60018060a01b03166bffffffffffffffffffffffff60a01b600854161760085580f35b505034610251578160031936011261025157602090517f2dca0f5ce7e75a4b43fe2b0d6f5d0b7a2bf92ecf89f8f0aa17b8308b670388218152f35b5091903461025157816003193601126102515760035482805b828110610a79576020858551908152f35b610a828161175c565b506001600160a01b038116600090815260046020526040902054610aaa575b50600101610a68565b610ab69095919561153b565b90828282019283129112908015821691151617610ad557936001610aa1565b634e487b7160e01b825260118652602482fd5b50919034610251576080366003190112610251576001600160a01b03918335838116919082900361020f57610b1b61128a565b60443594851685036103cb57606435907f2dca0f5ce7e75a4b43fe2b0d6f5d0b7a2bf92ecf89f8f0aa17b8308b670388219687600052602097600089528660002033600052895260ff87600020541615610cc85750855163e00cb4a560e01b81528181018481526001600160a01b03891660208201529097908990899081906040010381895afa978815610cbe578598610c8f575b50610bba8661153b565b858113801590610c86575b610c6a5750853b15610c6657865163627160f360e11b81526001600160a01b0393841692810192835260208301949094529091166040820152829082908190606001038183875af18015610c5c57610c48575b50507f124fd12bda4dcb813885ca782fb4ea9350d4f752b1a881cadf8742d8f128bb8e848351858152a251908152f35b610c5282916112d5565b61020f5780610c18565b84513d84823e3d90fd5b8480fd5b826044918a8a5192631d7ed6ef60e11b84528301526024820152fd5b50808913610bc5565b9097508881813d8311610cb7575b610ca781836112ff565b810103126103cb57519638610bb0565b503d610c9d565b87513d87823e3d90fd5b6044925086519163e2517d3f60e01b835233908301526024820152fd5b83823461025157602036600319011261025157610d006116fc565b3560025580f35b5050346102515781600319360112610251576020906006549051908152f35b505034610251578160031936011261025157602090517fc304524b36c64136ce5783ff1658be193c8352a90708830b9863880958c1fddd8152f35b82843461020f578060031936011261020f579080519182906003549182855260208095018093600384527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90845b818110610e095750505081610dc59103826112ff565b83519485948186019282875251809352850193925b828110610de957505050500390f35b83516001600160a01b031685528695509381019392810192600101610dda565b825484529288019260019283019201610daf565b50913461020f57602036600319011261020f575061024a602092356114a8565b50919034610251578060031936011261025157610e5861128a565b90336001600160a01b03831603610e755750610615919235611809565b5163334bd91960e11b81528390fd5b5090346105855780600319360112610585576106159135610ea860016105ff61128a565b61178b565b50919034610251578160031936011261025157818093600354945b858110610ed9576020858551908152f35b610ee28161175c565b506001600160a01b0316600081815260046020526040902054610f09575b50600101610ec8565b849591955180916315339cd160e11b8252818560209485935afa918215610f76578592610f46575b5050610f3f9060019261149b565b9490610f00565b90809250813d8311610f6f575b610f5d81836112ff565b810103126103cb575181610f3f610f31565b503d610f53565b86513d87823e3d90fd5b503461058557602036600319011261058557816020936001923581528085522001549051908152f35b50913461020f57602036600319011261020f575061024a602092356113a1565b505034610251578160031936011261025157602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5090346105855760203660031901126105855761101f611274565b6110276116fc565b6001600160a01b03166000818152600460205260409020549092901561108b575060207f2017a03d63122e396be484633b7d9ed729e8fabe2e0587ccd5e42d8bfde8670091838552600582526000818620556110828461197d565b5051848152a280f35b826024925191631c5620f360e31b8352820152fd5b503461058557602036600319011261058557359063ffffffff60e01b82168092036105855760209250637965db0b60e01b82149182156110e4575b50519015158152f35b6301ffc9a760e01b149150386110db565b50903461058557611105366112a0565b919093611110611682565b6007546001600160a01b039081168682161461126557600854855163e00cb4a560e01b81528084018681526001600160a01b0389166020828101919091528a9796959493909183918516908290819060400103915afa90811561125b5782908792611221575b506111836111b8926114a8565b94169361119a816111938761187e565b9050611321565b8588526005602052888820556111af856118fb565b50600654611321565b6006556008541690823b15610c6657855163627160f360e11b81526001600160a01b03928316918101918252602082019490945295166040860152909384919082908490829060600103925af19081156102125750611215575080f35b61121e906112d5565b80f35b9150506020813d602011611253575b8161123d602093836112ff565b8101031261124f575181611183611176565b8580fd5b3d9150611230565b87513d88823e3d90fd5b508351633e1b3a6d60e01b8152fd5b600435906001600160a01b03821682036103cb57565b602435906001600160a01b03821682036103cb57565b60609060031901126103cb576001600160a01b039060043582811681036103cb579160243590811681036103cb579060443590565b67ffffffffffffffff81116112e957604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176112e957604052565b9190820391821161132e57565b634e487b7160e01b600052601160045260246000fd5b908160209103126103cb575160ff811681036103cb5790565b8181029291811591840414171561132e57565b60ff16604d811161132e57600a0a90565b811561138b570490565b634e487b7160e01b600052601260045260246000fd5b60075460405163313ce56760e01b81526020926001600160a01b03929091908316908481600481855afa93841561146057859160009561146c575b50600154169160246040518094819363b3596f0760e01b835260048301525afa9384156114605760009461142c575b505061141d611429936114239261135d565b91611370565b90611381565b90565b90809450813d8311611459575b61144381836112ff565b810103126103cb5791519161141d61142361140b565b503d611439565b6040513d6000823e3d90fd5b61148d919550823d8411611494575b61148581836112ff565b810190611344565b93386113dc565b503d61147b565b9190820180921161132e57565b60075460405163313ce56760e01b81529190602090839060049082906001600160a01b03165afa908115611460576114ef6114f5926114299460009161151c575b50611370565b9061135d565b7f000000000000000000000000000000000000000000000000000000000000000090611381565b611535915060203d6020116114945761148581836112ff565b386114e9565b6040516306a61f7560e51b8152906020826004816001600160a01b0385165afa91821561146057600092611597575b5061157761157c91611661565b6113a1565b906000828203921281831281169183139015161761132e5790565b90916020823d6020116115c5575b816115b2602093836112ff565b8101031261020f5750519061157761156a565b3d91506115a5565b908160209103126103cb575180151581036103cb5790565b6007546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa80156114605760009061162d575b61142991506006549061149b565b506020813d602011611659575b81611647602093836112ff565b810103126103cb57611429905161161f565b3d915061163a565b611673906001600160a01b031661187e565b901561167c5790565b50600090565b3360009081527f3e202b319ce29fc3d407c763c9df930d4929e19b1d8f64d08ac659c98dd25ce360205260409020547fc304524b36c64136ce5783ff1658be193c8352a90708830b9863880958c1fddd9060ff16156116de5750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205460ff16156116de5750565b80600052600060205260406000203360005260205260ff60406000205416156116de5750565b611765906118ae565b905460039190911b1c6000818152600560205260409020546001600160a01b0390911691565b9060009180835282602052604083209160018060a01b03169182845260205260ff6040842054161560001461180457808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b9060009180835282602052604083209160018060a01b03169182845260205260ff6040842054166000146118045780835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b600052600560205260406000205480156000146118a957506004602052604060002054151590600090565b600191565b6003548110156118e55760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b634e487b7160e01b600052603260045260246000fd5b6000818152600460205260408120546119785760035468010000000000000000811015611964579082611950611939846001604096016003556118ae565b819391549060031b91821b91600019901b19161790565b905560035492815260046020522055600190565b634e487b7160e01b82526041600452602482fd5b905090565b600090808252600490816020526040832054801515600014611a605760001990808201818111611a4d5760035490838201918211611a3a57818103611a07575b50505060035480156119f4578101906119d5826118ae565b909182549160031b1b1916905560035582526020526040812055600190565b634e487b7160e01b855260318452602485fd5b611a25611a16611939936118ae565b90549060031b1c9283926118ae565b905585528360205260408520553880806119bd565b634e487b7160e01b875260118652602487fd5b634e487b7160e01b865260118552602486fd5b5050509056fea26469706673582212208a62ca5db7613b5fc92a4e9bf1a9fb25762c7107fa6e92322607f44b8e2bcbed64736f6c63430008180033",
  "devdoc": {
    "details": "Manages AMOs for dUSD Handles allocation, deallocation, collateral management, and profit management for AMO vaults.",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "allocateAmo(address,uint256)": {
        "params": {
          "amoVault": "The address of the AMO vault.",
          "dusdAmount": "The amount of dUSD to allocate."
        }
      },
      "amoVaultAllocation(address)": {
        "params": {
          "amoVault": "The address of the AMO vault."
        },
        "returns": {
          "_0": "The current allocation for the vault."
        }
      },
      "amoVaults()": {
        "returns": {
          "_0": "The list of AMO vault addresses."
        }
      },
      "availableProfitInUsd()": {
        "returns": {
          "_0": "The total available profit in USD."
        }
      },
      "availableVaultProfitsInUsd(address)": {
        "params": {
          "vaultAddress": "The address of the AMO vault to check."
        },
        "returns": {
          "_0": "The available profit in USD (can be negative)."
        }
      },
      "constructor": {
        "params": {
          "_collateralHolderVault": "The address of the collateral holder vault.",
          "_dusd": "The address of the dUSD stablecoin.",
          "_oracle": "The oracle for price feeds."
        }
      },
      "deallocateAmo(address,uint256)": {
        "params": {
          "amoVault": "The address of the AMO vault.",
          "dusdAmount": "The amount of dUSD to deallocate."
        }
      },
      "decreaseAmoSupply(uint256)": {
        "params": {
          "dusdAmount": "The amount of dUSD to burn."
        }
      },
      "disableAmoVault(address)": {
        "params": {
          "amoVault": "The address of the AMO vault."
        }
      },
      "dusdAmountToUsdValue(uint256)": {
        "params": {
          "dusdAmount": "The amount of dUSD tokens to convert."
        },
        "returns": {
          "_0": "The equivalent amount of USD value."
        }
      },
      "enableAmoVault(address)": {
        "params": {
          "amoVault": "The address of the AMO vault."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isAmoActive(address)": {
        "params": {
          "amoVault": "The address of the AMO vault to check."
        },
        "returns": {
          "_0": "True if the AMO vault is active, false otherwise."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setBaseCurrencyUnit(uint256)": {
        "details": "Only used if the oracle's base currency unit changes",
        "params": {
          "_newBaseCurrencyUnit": "The new base currency unit to set"
        }
      },
      "setCollateralVault(address)": {
        "params": {
          "_collateralVault": "The address of the new collateral vault"
        }
      },
      "setOracle(address)": {
        "params": {
          "newOracle": "The new oracle to use"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalAmoSupply()": {
        "returns": {
          "_0": "The total AMO supply."
        }
      },
      "totalCollateralValue()": {
        "returns": {
          "_0": "The total collateral value in USD."
        }
      },
      "transferFromAmoVaultToHoldingVault(address,address,uint256)": {
        "params": {
          "amoVault": "The address of the AMO vault.",
          "amount": "The amount of collateral to transfer.",
          "token": "The address of the collateral token to transfer."
        }
      },
      "transferFromHoldingVaultToAmoVault(address,address,uint256)": {
        "params": {
          "amoVault": "The address of the AMO vault.",
          "amount": "The amount of collateral to transfer.",
          "token": "The address of the collateral token to transfer."
        }
      },
      "usdValueToDusdAmount(uint256)": {
        "params": {
          "usdValue": "The amount of USD value to convert."
        },
        "returns": {
          "_0": "The equivalent amount of dUSD tokens."
        }
      },
      "withdrawProfits(address,address,address,uint256)": {
        "params": {
          "amoVault": "The AMO vault from which to withdraw profits.",
          "recipient": "The address to receive the profits.",
          "takeProfitAmount": "The amount of collateral to withdraw.",
          "takeProfitToken": "The collateral token to withdraw."
        },
        "returns": {
          "takeProfitValueInUsd": "The value of the withdrawn profits in USD."
        }
      }
    },
    "title": "AmoManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allocateAmo(address,uint256)": {
        "notice": "Allocates AMO tokens to an AMO vault."
      },
      "amoVaultAllocation(address)": {
        "notice": "Returns the allocation for a specific AMO vault."
      },
      "amoVaults()": {
        "notice": "Returns the list of all AMO vaults."
      },
      "availableProfitInUsd()": {
        "notice": "Returns the total available profit across all AMO vaults in USD."
      },
      "availableVaultProfitsInUsd(address)": {
        "notice": "Returns the available profit for a specific vault in USD."
      },
      "constructor": {
        "notice": "Initializes the AmoManager contract."
      },
      "deallocateAmo(address,uint256)": {
        "notice": "Deallocates AMO tokens from an AMO vault."
      },
      "decreaseAmoSupply(uint256)": {
        "notice": "Decreases the AMO supply by burning dUSD."
      },
      "disableAmoVault(address)": {
        "notice": "Disables an AMO vault."
      },
      "dusdAmountToUsdValue(uint256)": {
        "notice": "Converts an amount of dUSD tokens to an equivalent USD value."
      },
      "enableAmoVault(address)": {
        "notice": "Enables an AMO vault."
      },
      "isAmoActive(address)": {
        "notice": "Checks if an AMO vault is active."
      },
      "setBaseCurrencyUnit(uint256)": {
        "notice": "Updates the base currency unit used for price calculations"
      },
      "setCollateralVault(address)": {
        "notice": "Sets the collateral vault address"
      },
      "setOracle(address)": {
        "notice": "Sets the oracle to use for collateral valuation"
      },
      "totalAmoSupply()": {
        "notice": "Returns the total AMO supply."
      },
      "totalCollateralValue()": {
        "notice": "Returns the total collateral value of all active AMO vaults."
      },
      "transferFromAmoVaultToHoldingVault(address,address,uint256)": {
        "notice": "Transfers collateral from an AMO vault to the holding vault."
      },
      "transferFromHoldingVaultToAmoVault(address,address,uint256)": {
        "notice": "Transfers collateral from the holding vault to an AMO vault."
      },
      "usdValueToDusdAmount(uint256)": {
        "notice": "Converts a USD value to an equivalent amount of dUSD tokens."
      },
      "withdrawProfits(address,address,address,uint256)": {
        "notice": "Withdraws profits from an AMO vault to a recipient."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/dusd/AmoManager.sol:AmoManager",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 7017,
        "contract": "contracts/dusd/AmoManager.sol:AmoManager",
        "label": "oracle",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPriceOracleGetter)10043"
      },
      {
        "astId": 7019,
        "contract": "contracts/dusd/AmoManager.sol:AmoManager",
        "label": "baseCurrencyUnit",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4088,
        "contract": "contracts/dusd/AmoManager.sol:AmoManager",
        "label": "_amoVaults",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressToUintMap)1876_storage"
      },
      {
        "astId": 4090,
        "contract": "contracts/dusd/AmoManager.sol:AmoManager",
        "label": "totalAllocated",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4093,
        "contract": "contracts/dusd/AmoManager.sol:AmoManager",
        "label": "dusd",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20Stablecoin)10092"
      },
      {
        "astId": 4096,
        "contract": "contracts/dusd/AmoManager.sol:AmoManager",
        "label": "collateralHolderVault",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(CollateralVault)5660"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(CollateralVault)5660": {
        "encoding": "inplace",
        "label": "contract CollateralVault",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Stablecoin)10092": {
        "encoding": "inplace",
        "label": "contract IERC20Stablecoin",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracleGetter)10043": {
        "encoding": "inplace",
        "label": "contract IPriceOracleGetter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressToUintMap)1876_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.AddressToUintMap",
        "members": [
          {
            "astId": 1875,
            "contract": "contracts/dusd/AmoManager.sol:AmoManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32ToBytes32Map)1218_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Bytes32Set)2516_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 2515,
            "contract": "contracts/dusd/AmoManager.sol:AmoManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2322_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToBytes32Map)1218_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToBytes32Map",
        "members": [
          {
            "astId": 1213,
            "contract": "contracts/dusd/AmoManager.sol:AmoManager",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)2516_storage"
          },
          {
            "astId": 1217,
            "contract": "contracts/dusd/AmoManager.sol:AmoManager",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/dusd/AmoManager.sol:AmoManager",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/dusd/AmoManager.sol:AmoManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2322_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2317,
            "contract": "contracts/dusd/AmoManager.sol:AmoManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2321,
            "contract": "contracts/dusd/AmoManager.sol:AmoManager",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}