{
  "address": "0x624E12dE7a97B8cFc1AD1F050a1c9263b1f4FeBC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IPriceOracleGetter",
          "name": "oracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAmount",
          "type": "uint256"
        }
      ],
      "name": "CannotWithdrawMoreValueThanDeposited",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "CollateralAlreadyAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "CollateralNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "FailedToAddCollateral",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "FailedToRemoveCollateral",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "baseCurrencyUnit",
          "type": "uint256"
        }
      ],
      "name": "IncorrectBaseCurrencyUnit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MustSupportAtLeastOneCollateral",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "NoOracleSupport",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "toCollateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toMinCollateral",
          "type": "uint256"
        }
      ],
      "name": "ToCollateralAmountBelowMin",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "UnsupportedCollateral",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "CollateralAllowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "CollateralDisallowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "OracleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COLLATERAL_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COLLATERAL_STRATEGY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COLLATERAL_WITHDRAWER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "allowCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "usdValue",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "assetAmountFromValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "assetValueFromAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "usdValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseCurrencyUnit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "disallowCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fromCollateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "fromCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "toCollateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "toCollateral",
          "type": "address"
        }
      ],
      "name": "exchangeCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fromCollateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "fromCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toCollateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "toMinCollateral",
          "type": "uint256"
        }
      ],
      "name": "exchangeMaxCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "isCollateralSupported",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listCollateral",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fromCollateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "fromCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toCollateral",
          "type": "address"
        }
      ],
      "name": "maxExchangeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "toCollateralAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracleGetter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newBaseCurrencyUnit",
          "type": "uint256"
        }
      ],
      "name": "setBaseCurrencyUnit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPriceOracleGetter",
          "name": "newOracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "usdValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6111bb192df7b78f8a780725ce8d6c2870f03a4d2746fb21f16e18ed77e4f2cd",
  "receipt": {
    "to": null,
    "from": "0x0f5e3D9AEe7Ab5fDa909Af1ef147D98a7f4B3022",
    "contractAddress": "0x624E12dE7a97B8cFc1AD1F050a1c9263b1f4FeBC",
    "transactionIndex": 1,
    "gasUsed": "1514102",
    "logsBloom": "0x00000004004000000000000000000000000000000000000020000000200000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000010000000000000000000020000000000000000000810000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000002000000000000000010000000000000000001000000000000000000000000000000000000000000000000000000000000100000000080020000001000000000800000000000000000000001000000400000000000000000000",
    "blockHash": "0xaa004efb852f04e9c703588e3f958486ed5c18437274a76cac1e2df8a906fe80",
    "transactionHash": "0x6111bb192df7b78f8a780725ce8d6c2870f03a4d2746fb21f16e18ed77e4f2cd",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 13880328,
        "transactionHash": "0x6111bb192df7b78f8a780725ce8d6c2870f03a4d2746fb21f16e18ed77e4f2cd",
        "address": "0x624E12dE7a97B8cFc1AD1F050a1c9263b1f4FeBC",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000f5e3d9aee7ab5fda909af1ef147d98a7f4b3022",
          "0x0000000000000000000000000f5e3d9aee7ab5fda909af1ef147d98a7f4b3022"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xaa004efb852f04e9c703588e3f958486ed5c18437274a76cac1e2df8a906fe80"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 13880328,
        "transactionHash": "0x6111bb192df7b78f8a780725ce8d6c2870f03a4d2746fb21f16e18ed77e4f2cd",
        "address": "0x624E12dE7a97B8cFc1AD1F050a1c9263b1f4FeBC",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x85e8f2d6819d6b24108062d87ea08f54651bcb8960d98062d3faf96e7873b8b9",
          "0x0000000000000000000000000f5e3d9aee7ab5fda909af1ef147d98a7f4b3022",
          "0x0000000000000000000000000f5e3d9aee7ab5fda909af1ef147d98a7f4b3022"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xaa004efb852f04e9c703588e3f958486ed5c18437274a76cac1e2df8a906fe80"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 13880328,
        "transactionHash": "0x6111bb192df7b78f8a780725ce8d6c2870f03a4d2746fb21f16e18ed77e4f2cd",
        "address": "0x624E12dE7a97B8cFc1AD1F050a1c9263b1f4FeBC",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x1f29e81ed8f7ae439f042f6b6767d105e87c4eef908508d5d9e550aef35af644",
          "0x0000000000000000000000000f5e3d9aee7ab5fda909af1ef147d98a7f4b3022",
          "0x0000000000000000000000000f5e3d9aee7ab5fda909af1ef147d98a7f4b3022"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xaa004efb852f04e9c703588e3f958486ed5c18437274a76cac1e2df8a906fe80"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 13880328,
        "transactionHash": "0x6111bb192df7b78f8a780725ce8d6c2870f03a4d2746fb21f16e18ed77e4f2cd",
        "address": "0x624E12dE7a97B8cFc1AD1F050a1c9263b1f4FeBC",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x1a52e20da533a06a1f80a73dba6e5d09cb788f108eae685b8ce6644834e67abe",
          "0x0000000000000000000000000f5e3d9aee7ab5fda909af1ef147d98a7f4b3022",
          "0x0000000000000000000000000f5e3d9aee7ab5fda909af1ef147d98a7f4b3022"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xaa004efb852f04e9c703588e3f958486ed5c18437274a76cac1e2df8a906fe80"
      }
    ],
    "blockNumber": 13880328,
    "cumulativeGasUsed": "1560183",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFA7560956807d95DCeF22990DdD92e38DbAf5cDd"
  ],
  "numDeployments": 1,
  "solcInputHash": "837d09b24520c4514a08da515a665726",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IPriceOracleGetter\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"CannotWithdrawMoreValueThanDeposited\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"CollateralAlreadyAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"CollateralNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"FailedToAddCollateral\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"FailedToRemoveCollateral\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"baseCurrencyUnit\",\"type\":\"uint256\"}],\"name\":\"IncorrectBaseCurrencyUnit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustSupportAtLeastOneCollateral\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"NoOracleSupport\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"toCollateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toMinCollateral\",\"type\":\"uint256\"}],\"name\":\"ToCollateralAmountBelowMin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"UnsupportedCollateral\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"CollateralAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"CollateralDisallowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"OracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COLLATERAL_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COLLATERAL_STRATEGY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COLLATERAL_WITHDRAWER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"allowCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdValue\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"assetAmountFromValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"assetValueFromAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseCurrencyUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"disallowCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromCollateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toCollateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toCollateral\",\"type\":\"address\"}],\"name\":\"exchangeCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromCollateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toCollateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toMinCollateral\",\"type\":\"uint256\"}],\"name\":\"exchangeMaxCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"isCollateralSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listCollateral\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fromCollateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toCollateral\",\"type\":\"address\"}],\"name\":\"maxExchangeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toCollateralAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracleGetter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBaseCurrencyUnit\",\"type\":\"uint256\"}],\"name\":\"setBaseCurrencyUnit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPriceOracleGetter\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"allowCollateral(address)\":{\"params\":{\"collateralAsset\":\"The address of the collateral asset\"}},\"assetAmountFromValue(uint256,address)\":{\"params\":{\"asset\":\"The address of the asset\",\"usdValue\":\"The USD value\"},\"returns\":{\"assetAmount\":\"The amount of the asset\"}},\"assetValueFromAmount(uint256,address)\":{\"params\":{\"asset\":\"The address of the asset\",\"assetAmount\":\"The amount of the asset\"},\"returns\":{\"usdValue\":\"The USD value of the asset\"}},\"deposit(uint256,address)\":{\"params\":{\"collateralAmount\":\"The amount of collateral to deposit\",\"collateralAsset\":\"The address of the collateral asset\"}},\"disallowCollateral(address)\":{\"details\":\"Requires at least one collateral asset to remain supported\",\"params\":{\"collateralAsset\":\"The address of the collateral asset to disallow\"}},\"exchangeCollateral(uint256,address,uint256,address)\":{\"details\":\"Ensures the exchange maintains equivalent value using oracle prices\",\"params\":{\"fromCollateral\":\"Address of the source collateral token\",\"fromCollateralAmount\":\"Amount of collateral to exchange from\",\"toCollateral\":\"Address of the destination collateral token\",\"toCollateralAmount\":\"Amount of collateral to receive\"}},\"exchangeMaxCollateral(uint256,address,address,uint256)\":{\"details\":\"Calculates and executes the maximum possible exchange while respecting minimum amount\",\"params\":{\"fromCollateral\":\"Address of the source collateral token\",\"fromCollateralAmount\":\"Amount of collateral to exchange from\",\"toCollateral\":\"Address of the destination collateral token\",\"toMinCollateral\":\"Minimum amount of destination collateral to receive\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isCollateralSupported(address)\":{\"params\":{\"collateralAsset\":\"The address of the collateral asset to check\"},\"returns\":{\"_0\":\"bool True if the asset is supported, false otherwise\"}},\"listCollateral()\":{\"returns\":{\"_0\":\"address[] Array of collateral asset addresses\"}},\"maxExchangeAmount(uint256,address,address)\":{\"details\":\"Uses oracle prices and token decimals to maintain equivalent value\",\"params\":{\"fromCollateral\":\"Address of the source collateral token\",\"fromCollateralAmount\":\"Amount of source collateral\",\"toCollateral\":\"Address of the destination collateral token\"},\"returns\":{\"toCollateralAmount\":\"The maximum amount of destination collateral that can be received\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setBaseCurrencyUnit(uint256)\":{\"details\":\"Only used if the oracle's base currency unit changes\",\"params\":{\"_newBaseCurrencyUnit\":\"The new base currency unit to set\"}},\"setOracle(address)\":{\"params\":{\"newOracle\":\"The new oracle to use\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalValue()\":{\"returns\":{\"usdValue\":\"The total value of all collateral in USD\"}},\"withdraw(uint256,address)\":{\"params\":{\"collateralAmount\":\"The amount of collateral to withdraw\",\"collateralAsset\":\"The address of the collateral asset\"}},\"withdrawTo(address,uint256,address)\":{\"params\":{\"collateralAmount\":\"The amount of collateral to withdraw\",\"collateralAsset\":\"The address of the collateral asset\",\"recipient\":\"The address receiving the collateral\"}}},\"title\":\"CollateralHolderVault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowCollateral(address)\":{\"notice\":\"Allows a new collateral asset\"},\"assetAmountFromValue(uint256,address)\":{\"notice\":\"Calculates the amount of an asset that corresponds to a given USD value\"},\"assetValueFromAmount(uint256,address)\":{\"notice\":\"Calculates the USD value of a given amount of an asset\"},\"deposit(uint256,address)\":{\"notice\":\"Deposit collateral into the vault\"},\"disallowCollateral(address)\":{\"notice\":\"Disallows a previously supported collateral asset\"},\"exchangeCollateral(uint256,address,uint256,address)\":{\"notice\":\"Exchanges one type of collateral for another\"},\"exchangeMaxCollateral(uint256,address,address,uint256)\":{\"notice\":\"Exchanges collateral for the maximum possible amount of another collateral\"},\"isCollateralSupported(address)\":{\"notice\":\"Checks if a given asset is supported as collateral\"},\"listCollateral()\":{\"notice\":\"Returns a list of all supported collateral assets\"},\"maxExchangeAmount(uint256,address,address)\":{\"notice\":\"Calculates the maximum amount of destination collateral that can be received\"},\"setBaseCurrencyUnit(uint256)\":{\"notice\":\"Updates the base currency unit used for price calculations\"},\"setOracle(address)\":{\"notice\":\"Sets the oracle to use for collateral valuation\"},\"totalValue()\":{\"notice\":\"Calculates the total value of all collateral in the vault\"},\"withdraw(uint256,address)\":{\"notice\":\"Withdraws collateral from the vault\"},\"withdrawTo(address,uint256,address)\":{\"notice\":\"Withdraws collateral from the vault to a specific address\"}},\"notice\":\"Implementation of CollateralVault for only holding tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dusd/CollateralHolderVault.sol\":\"CollateralHolderVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-5/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-5/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/dusd/CollateralHolderVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"./CollateralVault.sol\\\";\\n\\n/**\\n * @title CollateralHolderVault\\n * @notice Implementation of CollateralVault for only holding tokens\\n */\\ncontract CollateralHolderVault is CollateralVault {\\n    using SafeERC20 for IERC20Metadata;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /* Errors */\\n    error CannotWithdrawMoreValueThanDeposited(\\n        uint256 requestedAmount,\\n        uint256 maxAmount\\n    );\\n    error ToCollateralAmountBelowMin(\\n        uint256 toCollateralAmount,\\n        uint256 toMinCollateral\\n    );\\n\\n    constructor(IPriceOracleGetter oracle) CollateralVault(oracle) {}\\n\\n    /**\\n     * @notice Exchanges one type of collateral for another\\n     * @param fromCollateralAmount Amount of collateral to exchange from\\n     * @param fromCollateral Address of the source collateral token\\n     * @param toCollateralAmount Amount of collateral to receive\\n     * @param toCollateral Address of the destination collateral token\\n     * @dev Ensures the exchange maintains equivalent value using oracle prices\\n     */\\n    function exchangeCollateral(\\n        uint256 fromCollateralAmount,\\n        address fromCollateral,\\n        uint256 toCollateralAmount,\\n        address toCollateral\\n    ) public onlyRole(COLLATERAL_STRATEGY_ROLE) {\\n        // We must take in a collateral that is supported\\n        require(\\n            _supportedCollaterals.contains(toCollateral),\\n            \\\"Unsupported collateral\\\"\\n        );\\n        uint256 maxAmount = maxExchangeAmount(\\n            fromCollateralAmount,\\n            fromCollateral,\\n            toCollateral\\n        );\\n        if (toCollateralAmount > maxAmount) {\\n            revert CannotWithdrawMoreValueThanDeposited(\\n                toCollateralAmount,\\n                maxAmount\\n            );\\n        }\\n\\n        IERC20Metadata(fromCollateral).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            fromCollateralAmount\\n        );\\n        IERC20Metadata(toCollateral).safeTransfer(\\n            msg.sender,\\n            toCollateralAmount\\n        );\\n    }\\n\\n    /**\\n     * @notice Exchanges collateral for the maximum possible amount of another collateral\\n     * @param fromCollateralAmount Amount of collateral to exchange from\\n     * @param fromCollateral Address of the source collateral token\\n     * @param toCollateral Address of the destination collateral token\\n     * @param toMinCollateral Minimum amount of destination collateral to receive\\n     * @dev Calculates and executes the maximum possible exchange while respecting minimum amount\\n     */\\n    function exchangeMaxCollateral(\\n        uint256 fromCollateralAmount,\\n        address fromCollateral,\\n        address toCollateral,\\n        uint256 toMinCollateral\\n    ) public onlyRole(COLLATERAL_STRATEGY_ROLE) {\\n        uint256 toCollateralAmount = maxExchangeAmount(\\n            fromCollateralAmount,\\n            fromCollateral,\\n            toCollateral\\n        );\\n        if (toCollateralAmount < toMinCollateral) {\\n            revert ToCollateralAmountBelowMin(\\n                toCollateralAmount,\\n                toMinCollateral\\n            );\\n        }\\n        exchangeCollateral(\\n            fromCollateralAmount,\\n            fromCollateral,\\n            toCollateralAmount,\\n            toCollateral\\n        );\\n    }\\n\\n    /**\\n     * @notice Calculates the maximum amount of destination collateral that can be received\\n     * @param fromCollateralAmount Amount of source collateral\\n     * @param fromCollateral Address of the source collateral token\\n     * @param toCollateral Address of the destination collateral token\\n     * @return toCollateralAmount The maximum amount of destination collateral that can be received\\n     * @dev Uses oracle prices and token decimals to maintain equivalent value\\n     */\\n    function maxExchangeAmount(\\n        uint256 fromCollateralAmount,\\n        address fromCollateral,\\n        address toCollateral\\n    ) public view returns (uint256 toCollateralAmount) {\\n        uint256 fromCollateralPrice = oracle.getAssetPrice(fromCollateral);\\n        uint256 toCollateralPrice = oracle.getAssetPrice(toCollateral);\\n\\n        uint8 fromCollateralDecimals = IERC20Metadata(fromCollateral)\\n            .decimals();\\n        uint8 toCollateralDecimals = IERC20Metadata(toCollateral).decimals();\\n\\n        uint256 fromCollateralUsdValue = (fromCollateralPrice *\\n            fromCollateralAmount) / (10 ** fromCollateralDecimals);\\n\\n        toCollateralAmount =\\n            (fromCollateralUsdValue * (10 ** toCollateralDecimals)) /\\n            toCollateralPrice;\\n\\n        return toCollateralAmount;\\n    }\\n\\n    /**\\n     * @notice Calculates the total value of all collateral in the vault\\n     * @return usdValue The total value of all collateral in USD\\n     */\\n    function totalValue() public view override returns (uint256 usdValue) {\\n        return _totalValueOfSupportedCollaterals();\\n    }\\n}\\n\",\"keccak256\":\"0xb55208c76f1279afb255536e557d71f0aa50c2a095b9774417f5ef38c5f36161\",\"license\":\"MIT\"},\"contracts/dusd/CollateralVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-5/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-5/utils/structs/EnumerableSet.sol\\\";\\n\\nimport \\\"contracts/shared/Constants.sol\\\";\\nimport \\\"contracts/lending/core/interfaces/IPriceOracleGetter.sol\\\";\\nimport \\\"contracts/dusd/OracleAware.sol\\\";\\n\\n/**\\n * @title CollateralVault\\n * @notice Abstract contract for any contract that manages collateral assets\\n\\\\ */\\nabstract contract CollateralVault is AccessControl, OracleAware {\\n    using SafeERC20 for IERC20Metadata;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /* Core state */\\n\\n    EnumerableSet.AddressSet internal _supportedCollaterals;\\n\\n    /* Events */\\n\\n    event CollateralAllowed(address indexed collateralAsset);\\n    event CollateralDisallowed(address indexed collateralAsset);\\n\\n    /* Roles */\\n\\n    bytes32 public constant COLLATERAL_MANAGER_ROLE =\\n        keccak256(\\\"COLLATERAL_MANAGER_ROLE\\\");\\n    bytes32 public constant COLLATERAL_STRATEGY_ROLE =\\n        keccak256(\\\"COLLATERAL_STRATEGY_ROLE\\\");\\n    bytes32 public constant COLLATERAL_WITHDRAWER_ROLE =\\n        keccak256(\\\"COLLATERAL_WITHDRAWER_ROLE\\\");\\n\\n    /* Errors */\\n    error UnsupportedCollateral(address collateralAsset);\\n    error CollateralAlreadyAllowed(address collateralAsset);\\n    error NoOracleSupport(address collateralAsset);\\n    error FailedToAddCollateral(address collateralAsset);\\n    error CollateralNotSupported(address collateralAsset);\\n    error MustSupportAtLeastOneCollateral();\\n    error FailedToRemoveCollateral(address collateralAsset);\\n\\n    /**\\n     * @notice Initializes the vault with an oracle and sets up initial roles\\n     * @dev Grants all roles to the contract deployer initially\\n     * @param oracle The price oracle to use for collateral valuation\\n     */\\n    constructor(\\n        IPriceOracleGetter oracle\\n    ) OracleAware(oracle, Constants.ORACLE_BASE_CURRENCY_UNIT) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender); // This is the super admin\\n        grantRole(COLLATERAL_MANAGER_ROLE, msg.sender);\\n        grantRole(COLLATERAL_WITHDRAWER_ROLE, msg.sender);\\n        grantRole(COLLATERAL_STRATEGY_ROLE, msg.sender);\\n    }\\n\\n    /* Deposit */\\n\\n    /**\\n     * @notice Deposit collateral into the vault\\n     * @param collateralAmount The amount of collateral to deposit\\n     * @param collateralAsset The address of the collateral asset\\n     */\\n    function deposit(uint256 collateralAmount, address collateralAsset) public {\\n        if (!_supportedCollaterals.contains(collateralAsset)) {\\n            revert UnsupportedCollateral(collateralAsset);\\n        }\\n\\n        IERC20Metadata(collateralAsset).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            collateralAmount\\n        );\\n    }\\n\\n    /* Withdrawal */\\n\\n    /**\\n     * @notice Withdraws collateral from the vault\\n     * @param collateralAmount The amount of collateral to withdraw\\n     * @param collateralAsset The address of the collateral asset\\n     */\\n    function withdraw(\\n        uint256 collateralAmount,\\n        address collateralAsset\\n    ) public onlyRole(COLLATERAL_WITHDRAWER_ROLE) {\\n        return _withdraw(msg.sender, collateralAmount, collateralAsset);\\n    }\\n\\n    /**\\n     * @notice Withdraws collateral from the vault to a specific address\\n     * @param recipient The address receiving the collateral\\n     * @param collateralAmount The amount of collateral to withdraw\\n     * @param collateralAsset The address of the collateral asset\\n     */\\n    function withdrawTo(\\n        address recipient,\\n        uint256 collateralAmount,\\n        address collateralAsset\\n    ) public onlyRole(COLLATERAL_WITHDRAWER_ROLE) {\\n        return _withdraw(recipient, collateralAmount, collateralAsset);\\n    }\\n\\n    /**\\n     * @notice Internal function to withdraw collateral from the vault\\n     * @param withdrawer The address withdrawing the collateral\\n     * @param collateralAmount The amount of collateral to withdraw\\n     * @param collateralAsset The address of the collateral asset\\n     */\\n    function _withdraw(\\n        address withdrawer,\\n        uint256 collateralAmount,\\n        address collateralAsset\\n    ) internal {\\n        IERC20Metadata(collateralAsset).safeTransfer(\\n            withdrawer,\\n            collateralAmount\\n        );\\n    }\\n\\n    /* Collateral Info */\\n\\n    /**\\n     * @notice Calculates the total value of all assets in the vault\\n     * @return usdValue The total value of all assets in USD\\n     */\\n    function totalValue() public view virtual returns (uint256 usdValue);\\n\\n    /**\\n     * @notice Calculates the USD value of a given amount of an asset\\n     * @param assetAmount The amount of the asset\\n     * @param asset The address of the asset\\n     * @return usdValue The USD value of the asset\\n     */\\n    function assetValueFromAmount(\\n        uint256 assetAmount,\\n        address asset\\n    ) public view returns (uint256 usdValue) {\\n        uint256 assetPrice = oracle.getAssetPrice(asset);\\n        uint8 assetDecimals = IERC20Metadata(asset).decimals();\\n        return (assetPrice * assetAmount) / (10 ** assetDecimals);\\n    }\\n\\n    /**\\n     * @notice Calculates the amount of an asset that corresponds to a given USD value\\n     * @param usdValue The USD value\\n     * @param asset The address of the asset\\n     * @return assetAmount The amount of the asset\\n     */\\n    function assetAmountFromValue(\\n        uint256 usdValue,\\n        address asset\\n    ) public view returns (uint256 assetAmount) {\\n        uint256 assetPrice = oracle.getAssetPrice(asset);\\n        uint8 assetDecimals = IERC20Metadata(asset).decimals();\\n        return (usdValue * (10 ** assetDecimals)) / assetPrice;\\n    }\\n\\n    /* Collateral management */\\n\\n    /**\\n     * @notice Allows a new collateral asset\\n     * @param collateralAsset The address of the collateral asset\\n     */\\n    function allowCollateral(\\n        address collateralAsset\\n    ) public onlyRole(COLLATERAL_MANAGER_ROLE) {\\n        if (_supportedCollaterals.contains(collateralAsset)) {\\n            revert CollateralAlreadyAllowed(collateralAsset);\\n        }\\n        if (oracle.getAssetPrice(collateralAsset) == 0) {\\n            revert NoOracleSupport(collateralAsset);\\n        }\\n        if (!_supportedCollaterals.add(collateralAsset)) {\\n            revert FailedToAddCollateral(collateralAsset);\\n        }\\n        emit CollateralAllowed(collateralAsset);\\n    }\\n\\n    /**\\n     * @notice Disallows a previously supported collateral asset\\n     * @dev Requires at least one collateral asset to remain supported\\n     * @param collateralAsset The address of the collateral asset to disallow\\n     */\\n    function disallowCollateral(\\n        address collateralAsset\\n    ) public onlyRole(COLLATERAL_MANAGER_ROLE) {\\n        if (!_supportedCollaterals.contains(collateralAsset)) {\\n            revert CollateralNotSupported(collateralAsset);\\n        }\\n        if (_supportedCollaterals.length() <= 1) {\\n            revert MustSupportAtLeastOneCollateral();\\n        }\\n        if (!_supportedCollaterals.remove(collateralAsset)) {\\n            revert FailedToRemoveCollateral(collateralAsset);\\n        }\\n\\n        emit CollateralDisallowed(collateralAsset);\\n    }\\n\\n    /**\\n     * @notice Checks if a given asset is supported as collateral\\n     * @param collateralAsset The address of the collateral asset to check\\n     * @return bool True if the asset is supported, false otherwise\\n     */\\n    function isCollateralSupported(\\n        address collateralAsset\\n    ) public view returns (bool) {\\n        return _supportedCollaterals.contains(collateralAsset);\\n    }\\n\\n    /**\\n     * @notice Returns a list of all supported collateral assets\\n     * @return address[] Array of collateral asset addresses\\n     */\\n    function listCollateral() public view returns (address[] memory) {\\n        return _supportedCollaterals.values();\\n    }\\n\\n    /**\\n     * @notice Calculates the total USD value of all supported collateral assets in the vault\\n     * @dev Iterates through all supported collaterals and sums their USD values\\n     * @return uint256 The total value in USD\\n     */\\n    function _totalValueOfSupportedCollaterals()\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalUsdValue = 0;\\n        for (uint256 i = 0; i < _supportedCollaterals.length(); i++) {\\n            address collateral = _supportedCollaterals.at(i);\\n            uint256 collateralPrice = oracle.getAssetPrice(collateral);\\n            uint8 collateralDecimals = IERC20Metadata(collateral).decimals();\\n            uint256 collateralValue = (collateralPrice *\\n                IERC20Metadata(collateral).balanceOf(address(this))) /\\n                (10 ** collateralDecimals);\\n            totalUsdValue += collateralValue;\\n        }\\n        return totalUsdValue;\\n    }\\n}\\n\",\"keccak256\":\"0xb352535bb3d0eefd2a211a8ff033fa7c00f41d1c2490daabd4036da49ccd9388\",\"license\":\"MIT\"},\"contracts/dusd/OracleAware.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-5/access/AccessControl.sol\\\";\\nimport \\\"contracts/lending/core/interfaces/IPriceOracleGetter.sol\\\";\\n\\n/**\\n * @title OracleAware\\n * @notice Abstract contract that provides oracle functionality to other contracts\\n */\\nabstract contract OracleAware is AccessControl {\\n    /* Core state */\\n\\n    IPriceOracleGetter public oracle;\\n    uint256 public baseCurrencyUnit;\\n\\n    /* Events */\\n\\n    event OracleSet(address indexed newOracle);\\n\\n    /* Errors */\\n\\n    error IncorrectBaseCurrencyUnit(uint256 baseCurrencyUnit);\\n\\n    /**\\n     * @notice Initializes the contract with an oracle and base currency unit\\n     * @param initialOracle The initial oracle to use for price feeds\\n     * @param _baseCurrencyUnit The base currency unit for price calculations\\n     * @dev Sets up the initial oracle and base currency unit values\\n     */\\n    constructor(IPriceOracleGetter initialOracle, uint256 _baseCurrencyUnit) {\\n        oracle = initialOracle;\\n        baseCurrencyUnit = _baseCurrencyUnit;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Sets the oracle to use for collateral valuation\\n     * @param newOracle The new oracle to use\\n     */\\n    function setOracle(\\n        IPriceOracleGetter newOracle\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (newOracle.BASE_CURRENCY_UNIT() != baseCurrencyUnit) {\\n            revert IncorrectBaseCurrencyUnit(baseCurrencyUnit);\\n        }\\n\\n        oracle = newOracle;\\n\\n        emit OracleSet(address(newOracle));\\n    }\\n\\n    /**\\n     * @notice Updates the base currency unit used for price calculations\\n     * @param _newBaseCurrencyUnit The new base currency unit to set\\n     * @dev Only used if the oracle's base currency unit changes\\n     */\\n    function setBaseCurrencyUnit(\\n        uint256 _newBaseCurrencyUnit\\n    ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        baseCurrencyUnit = _newBaseCurrencyUnit;\\n    }\\n}\\n\",\"keccak256\":\"0x48844373ef6492851eeea63e4b243e929d8ae1de80e086b37e4f9d66ccb4442d\",\"license\":\"MIT\"},\"contracts/lending/core/interfaces/IPriceOracleGetter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPriceOracleGetter\\n * @author Aave\\n * @notice Interface for the Aave price oracle.\\n */\\ninterface IPriceOracleGetter {\\n    /**\\n     * @notice Returns the base currency address\\n     * @dev Address 0x0 is reserved for USD as base currency.\\n     * @return Returns the base currency address.\\n     */\\n    function BASE_CURRENCY() external view returns (address);\\n\\n    /**\\n     * @notice Returns the base currency unit\\n     * @dev 1 ether for ETH, 1e8 for USD.\\n     * @return Returns the base currency unit.\\n     */\\n    function BASE_CURRENCY_UNIT() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the asset price in the base currency\\n     * @param asset The address of the asset\\n     * @return The price of the asset\\n     */\\n    function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x31366baa77e6298e46695465ba7f5ba8641fe8537e54901ae119282be0ee6d67\",\"license\":\"AGPL-3.0\"},\"contracts/shared/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/* \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *    _____     ______   ______     __     __   __     __     ______   __  __       *\\n *   /\\\\  __-.  /\\\\__  _\\\\ /\\\\  == \\\\   /\\\\ \\\\   /\\\\ \\\"-.\\\\ \\\\   /\\\\ \\\\   /\\\\__  _\\\\ /\\\\ \\\\_\\\\ \\\\      *\\n *   \\\\ \\\\ \\\\/\\\\ \\\\ \\\\/_/\\\\ \\\\/ \\\\ \\\\  __<   \\\\ \\\\ \\\\  \\\\ \\\\ \\\\-.  \\\\  \\\\ \\\\ \\\\  \\\\/_/\\\\ \\\\/ \\\\ \\\\____ \\\\     *\\n *    \\\\ \\\\____-    \\\\ \\\\_\\\\  \\\\ \\\\_\\\\ \\\\_\\\\  \\\\ \\\\_\\\\  \\\\ \\\\_\\\\\\\\\\\"\\\\_\\\\  \\\\ \\\\_\\\\    \\\\ \\\\_\\\\  \\\\/\\\\_____\\\\    *\\n *     \\\\/____/     \\\\/_/   \\\\/_/ /_/   \\\\/_/   \\\\/_/ \\\\/_/   \\\\/_/     \\\\/_/   \\\\/_____/    *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 dtrinity.org \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n *                                                                                  *\\n *                                         \\u25b2                                        *\\n *                                        \\u25b2 \\u25b2                                       *\\n *                                                                                  *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 *\\n * dTRINITY Protocol: https://github.com/dtrinity                                   *\\n * \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 */\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Constants {\\n    // Shared definitions of how we represent percentages and basis points\\n    uint16 public constant ONE_BPS = 100; // 1 basis point with 2 decimals\\n    uint32 public constant ONE_PERCENT_BPS = ONE_BPS * 100;\\n    uint32 public constant ONE_HUNDRED_PERCENT_BPS = ONE_PERCENT_BPS * 100;\\n\\n    uint32 public constant ORACLE_BASE_CURRENCY_UNIT = 1e8;\\n}\\n\",\"keccak256\":\"0xcc25566eb9a2e10e6861ef828987039329e61385929384237cd3cf4429c8d819\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600091823560e01c908162f714ce14610e1e57816301ffc9a714610dc8578163132c29b214610d8d5781631ee903b614610cd1578163248a9ca314610ca75781632e718ab714610c6c5781632f2ff15d14610c42578163339b551514610be357816336568abe14610b9d57816345daa27b14610b625781634a0bbabb14610b405781635c23ef6e14610a405781636e553f65146109da5781637adbf973146108e95781637dc0d1d0146108c057816383f10777146107a1578163847b39d71461077057816391d148541461072a578163a217fddf1461070f578163a4e2a31e146105df578163c4e2c1e61461059c578163cf07456f146104dd578163d4c3eea014610318578163d547741f146102d9578163e00cb4a5146101b157508063f3bddde1146101935763fa6bd2ee1461014b57600080fd5b3461018f57602036600319011261018f576020906101866001600160a01b03610172610e72565b166000526004602052604060002054151590565b90519015158152f35b5080fd5b503461018f578160031936011261018f576020906002549051908152f35b919050346102d557806003193601126102d5576101cc610e57565b600154825163b3596f0760e01b81526001600160a01b039283168186018190526020959391929091869184916024918391165afa9182156102955783918691889461029f575b50855163313ce56760e01b815294859182905afa928315610295576102559495969361025c575b5061024f91610249913590610f16565b91610eef565b90610f29565b9051908152f35b6102499193509161028561024f93883d8a1161028e575b61027d8183610e9e565b810190610ed6565b93915091610239565b503d610273565b84513d88823e3d90fd5b9250925081813d83116102ce575b6102b78183610e9e565b810103126102ca57848391519238610212565b8580fd5b503d6102ad565b8280fd5b919050346102d557806003193601126102d557610314913561030f60016102fe610e57565b938387528660205286200154611278565b6113c7565b5080f35b919050346102d557826003193601126102d557600380546001805490959485936001600160a01b03928316928592915b858710610359576020898951908152f35b9091929394959781855282897fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01541688519063b3596f0760e01b825280868301526020602492818185818d5afa9081156104d35789916104a6575b508b5163313ce56760e01b81529282848a81845afa93841561047957908d86928c96610483575b50516370a0823160e01b8152308b82015291849183919082905afa928315610479578a93610441575b5050610249610418939261024f92610f16565b82018092116104305750978901959493929190610348565b634e487b7160e01b86526011855285fd5b9080929350813d8311610472575b6104598183610e9e565b8101031261046e57519061024961024f610405565b8880fd5b503d61044f565b8d513d8c823e3d90fd5b859291965061049e90833d851161028e5761027d8183610e9e565b9590916103dc565b90508181813d83116104cc575b6104bd8183610e9e565b8101031261046e5751386103b5565b503d6104b3565b8c513d8b823e3d90fd5b8284346105995780600319360112610599579080519182906003549182855260208095018093600384527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90845b8181106105855750505081610541910382610e9e565b83519485948186019282875251809352850193925b82811061056557505050500390f35b83516001600160a01b031685528695509381019392810192600101610556565b82548452928801926001928301920161052b565b80fd5b8334610599576060366003190112610599576105dc6105b9610e72565b6105c1610e88565b906105ca61110c565b602435916001600160a01b0316611377565b80f35b9050346102d55760203660031901126102d5576105fa610e72565b91610603611186565b6001600160a01b039283166000818152600460205260409020549093906106f95760206024916001541683519283809263b3596f0760e01b825288888301525afa9081156106ef5785916106b9575b50156106a4576106618361165d565b1561068f5750507f500f8acd525a3d9f96ab641587f59e34ef9d02f9397fdd46bb7786273bad16078280a280f35b91602492519163cdb5999560e01b8352820152fd5b916024925191631066c96360e31b8352820152fd5b90506020813d6020116106e7575b816106d460209383610e9e565b810103126106e3575138610652565b8480fd5b3d91506106c7565b82513d87823e3d90fd5b5091602492519163098f893f60e21b8352820152fd5b50503461018f578160031936011261018f5751908152602090f35b9050346102d557816003193601126102d5578160209360ff9261074b610e57565b903582528186528282206001600160a01b039091168252855220549151911615158152f35b8284346105995760603660031901126105995750610255602092610792610e57565b61079a610e88565b9135610f49565b8391503461018f57608036600319011261018f578035926107c0610e57565b906107c9610e88565b91606435936107d66111e2565b6107e1848389610f49565b948086106108a357506107f26111e2565b60018060a01b039283851694610815866000526004602052604060002054151590565b156108675761082590848a610f49565b9081871161084b5750505094610844916105dc9596309133911661131c565b3390611377565b516394d08ba760e01b8152918201869052602482015260449150fd5b815162461bcd60e51b81526020818501526016602482015275155b9cdd5c1c1bdc9d19590818dbdb1b185d195c985b60521b6044820152606490fd5b83516330ff745960e11b8152918201869052602482015260449150fd5b50503461018f578160031936011261018f5760015490516001600160a01b039091168152602090f35b9050346102d55760203660031901126102d55780356001600160a01b03811692908390036109d65761091961123e565b8051638c89b64f60e01b8152906020828481875afa9182156109cc578592610998575b50600254809203610983575050600180546001600160a01b03191683179055507f3f32684a32a11dabdbb8c0177de80aa3ae36a004d75210335b49e544e48cd0aa8280a280f35b51639b6812b960e01b81529182015260249150fd5b9091506020813d6020116109c4575b816109b460209383610e9e565b810103126106e35751903861093c565b3d91506109a7565b81513d87823e3d90fd5b8380fd5b83833461018f578060031936011261018f576001600160a01b036109fc610e57565b1690610a15826000526004602052604060002054151590565b15610a2b57506105dc919235903090339061131c565b51632762993f60e11b81529283015250602490fd5b9050346102d557816003193601126102d557610a5a610e57565b9060018060a01b03938460015416845195869463b3596f0760e01b86521690818486015284602460209889935afa938415610b36579086918395610b05575b50855163313ce56760e01b815291908290859082905afa918215610afa57610ad892610255959492610ad19291610add575b50610eef565b9035610f16565b610f29565b610af49150883d8a1161028e5761027d8183610e9e565b38610acb565b8551903d90823e3d90fd5b8281939296503d8311610b2f575b610b1d8183610e9e565b8101031261018f575192859083610a99565b503d610b13565b85513d84823e3d90fd5b83903461018f57602036600319011261018f57610b5b61123e565b3560025580f35b50503461018f578160031936011261018f57602090517f1f29e81ed8f7ae439f042f6b6767d105e87c4eef908508d5d9e550aef35af6448152f35b83833461018f578060031936011261018f57610bb7610e57565b90336001600160a01b03831603610bd457506103149192356113c7565b5163334bd91960e11b81528390fd5b83833461018f57608036600319011261018f57823592610c01610e57565b604435926001600160a01b036064358181169491939290858103610c3e57610c276111e2565b610815866000526004602052604060002054151590565b8780fd5b919050346102d557806003193601126102d5576103149135610c6760016102fe610e57565b61129e565b50503461018f578160031936011261018f57602090517f85e8f2d6819d6b24108062d87ea08f54651bcb8960d98062d3faf96e7873b8b98152f35b9050346102d55760203660031901126102d557816020936001923581528085522001549051908152f35b9050346102d55760203660031901126102d557610cec610e72565b610cf4611186565b6001600160a01b031660008181526004602052604090205490929015610d785760016003541115610d6b57610d2883611489565b15610d565750507fcebbf63022189259f517d89d98c7c527b44c211d25e443dad13aab2479c7e7b38280a280f35b91602492519163644e3dd760e11b8352820152fd5b516305bc742560e11b8152fd5b916024925191632108722b60e01b8352820152fd5b50503461018f578160031936011261018f57602090517f1a52e20da533a06a1f80a73dba6e5d09cb788f108eae685b8ce6644834e67abe8152f35b9050346102d55760203660031901126102d557359063ffffffff60e01b82168092036102d55760209250637965db0b60e01b8214918215610e0d575b50519015158152f35b6301ffc9a760e01b14915038610e04565b919050346102d55736600319011261018f576105dc90610e3c610e57565b90610e4561110c565b359033906001600160a01b0316611377565b602435906001600160a01b0382168203610e6d57565b600080fd5b600435906001600160a01b0382168203610e6d57565b604435906001600160a01b0382168203610e6d57565b90601f8019910116810190811067ffffffffffffffff821117610ec057604052565b634e487b7160e01b600052604160045260246000fd5b90816020910312610e6d575160ff81168103610e6d5790565b60ff16604d8111610f0057600a0a90565b634e487b7160e01b600052601160045260246000fd5b81810292918115918404141715610f0057565b8115610f33570490565b634e487b7160e01b600052601260045260246000fd5b6001546040805163b3596f0760e01b8082526001600160a01b03958616600483018190529596929594939192918716916020918285602481875afa948515611101576000956110cf575b50906024839289519a8b938492835216958660048301525afa9687156110c457600097611095575b50855194818660048163313ce56760e01b948582525afa95861561108a57600096611069575b508190600488518095819382525afa95861561105f57509161102996959391610ad8959360009561102c575b50509161024f6102496102499361102395610f16565b90610f16565b90565b611023949295506102499361105461024f938361024994903d1061028e5761027d8183610e9e565b96939550935061100d565b513d6000823e3d90fd5b8291965061108390823d841161028e5761027d8183610e9e565b9590610fe1565b87513d6000823e3d90fd5b9080975081813d83116110bd575b6110ad8183610e9e565b81010312610e6d57519538610fbb565b503d6110a3565b86513d6000823e3d90fd5b919094508282813d83116110fa575b6110e88183610e9e565b81010312610e6d579051936024610f93565b503d6110de565b88513d6000823e3d90fd5b3360009081527fc191fc48a308d795605d8380942284aa535eb60ab59dded9d8c4eff77cf3c87260205260409020547f1f29e81ed8f7ae439f042f6b6767d105e87c4eef908508d5d9e550aef35af6449060ff16156111685750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b3360009081527fb56095460044281636dd3a77e227972b73971c7d766b38feb76e4e7f12e8c60260205260409020547f85e8f2d6819d6b24108062d87ea08f54651bcb8960d98062d3faf96e7873b8b99060ff16156111685750565b3360009081527f94449471841a7f40a7871d590913647b573afdadc8e3b552848558acac45c28a60205260409020547f1a52e20da533a06a1f80a73dba6e5d09cb788f108eae685b8ce6644834e67abe9060ff16156111685750565b3360009081527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205460ff16156111685750565b80600052600060205260406000203360005260205260ff60406000205416156111685750565b9060009180835282602052604083209160018060a01b03169182845260205260ff6040842054161560001461131757808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a081019181831067ffffffffffffffff841117610ec05761137592604052611589565b565b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830193909352918152608081019167ffffffffffffffff831182841017610ec05761137592604052611589565b9060009180835282602052604083209160018060a01b03169182845260205260ff6040842054166000146113175780835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b6003548110156114735760036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b634e487b7160e01b600052603260045260246000fd5b6000908082526004908160205260408320548015156000146115835760001990808201818111611570576003549083820191821161155d57818103611513575b5050506003548015611500578101906114e18261143c565b909182549160031b1b1916905560035582526020526040812055600190565b634e487b7160e01b855260318452602485fd5b6115486115226115319361143c565b90549060031b1c92839261143c565b819391549060031b91821b91600019901b19161790565b905585528360205260408520553880806114c9565b634e487b7160e01b875260118652602487fd5b634e487b7160e01b865260118552602486fd5b50505090565b60018060a01b031690600080826020829451910182865af13d15611651573d9067ffffffffffffffff821161163d57906115e591604051916115d56020601f19601f8401160184610e9e565b82523d84602084013e5b846116c8565b908151918215159283611615575b5050506115fd5750565b60249060405190635274afe760e01b82526004820152fd5b81929350906020918101031261018f57602001519081159182150361059957503880806115f3565b634e487b7160e01b83526041600452602483fd5b6115e5906060906115df565b6000818152600460205260408120546116c357600354680100000000000000008110156116af57908261169b6115318460016040960160035561143c565b905560035492815260046020522055600190565b634e487b7160e01b82526041600452602482fd5b905090565b906116ef57508051156116dd57805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580611722575b611700575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b156116f856fea264697066735822122078b5b2a606e69e7a541d57954e0f14c0d72ae3a9be5496d8c7ddbefa29b660a364736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "events": {
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      }
    },
    "kind": "dev",
    "methods": {
      "allowCollateral(address)": {
        "params": {
          "collateralAsset": "The address of the collateral asset"
        }
      },
      "assetAmountFromValue(uint256,address)": {
        "params": {
          "asset": "The address of the asset",
          "usdValue": "The USD value"
        },
        "returns": {
          "assetAmount": "The amount of the asset"
        }
      },
      "assetValueFromAmount(uint256,address)": {
        "params": {
          "asset": "The address of the asset",
          "assetAmount": "The amount of the asset"
        },
        "returns": {
          "usdValue": "The USD value of the asset"
        }
      },
      "deposit(uint256,address)": {
        "params": {
          "collateralAmount": "The amount of collateral to deposit",
          "collateralAsset": "The address of the collateral asset"
        }
      },
      "disallowCollateral(address)": {
        "details": "Requires at least one collateral asset to remain supported",
        "params": {
          "collateralAsset": "The address of the collateral asset to disallow"
        }
      },
      "exchangeCollateral(uint256,address,uint256,address)": {
        "details": "Ensures the exchange maintains equivalent value using oracle prices",
        "params": {
          "fromCollateral": "Address of the source collateral token",
          "fromCollateralAmount": "Amount of collateral to exchange from",
          "toCollateral": "Address of the destination collateral token",
          "toCollateralAmount": "Amount of collateral to receive"
        }
      },
      "exchangeMaxCollateral(uint256,address,address,uint256)": {
        "details": "Calculates and executes the maximum possible exchange while respecting minimum amount",
        "params": {
          "fromCollateral": "Address of the source collateral token",
          "fromCollateralAmount": "Amount of collateral to exchange from",
          "toCollateral": "Address of the destination collateral token",
          "toMinCollateral": "Minimum amount of destination collateral to receive"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isCollateralSupported(address)": {
        "params": {
          "collateralAsset": "The address of the collateral asset to check"
        },
        "returns": {
          "_0": "bool True if the asset is supported, false otherwise"
        }
      },
      "listCollateral()": {
        "returns": {
          "_0": "address[] Array of collateral asset addresses"
        }
      },
      "maxExchangeAmount(uint256,address,address)": {
        "details": "Uses oracle prices and token decimals to maintain equivalent value",
        "params": {
          "fromCollateral": "Address of the source collateral token",
          "fromCollateralAmount": "Amount of source collateral",
          "toCollateral": "Address of the destination collateral token"
        },
        "returns": {
          "toCollateralAmount": "The maximum amount of destination collateral that can be received"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setBaseCurrencyUnit(uint256)": {
        "details": "Only used if the oracle's base currency unit changes",
        "params": {
          "_newBaseCurrencyUnit": "The new base currency unit to set"
        }
      },
      "setOracle(address)": {
        "params": {
          "newOracle": "The new oracle to use"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalValue()": {
        "returns": {
          "usdValue": "The total value of all collateral in USD"
        }
      },
      "withdraw(uint256,address)": {
        "params": {
          "collateralAmount": "The amount of collateral to withdraw",
          "collateralAsset": "The address of the collateral asset"
        }
      },
      "withdrawTo(address,uint256,address)": {
        "params": {
          "collateralAmount": "The amount of collateral to withdraw",
          "collateralAsset": "The address of the collateral asset",
          "recipient": "The address receiving the collateral"
        }
      }
    },
    "title": "CollateralHolderVault",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowCollateral(address)": {
        "notice": "Allows a new collateral asset"
      },
      "assetAmountFromValue(uint256,address)": {
        "notice": "Calculates the amount of an asset that corresponds to a given USD value"
      },
      "assetValueFromAmount(uint256,address)": {
        "notice": "Calculates the USD value of a given amount of an asset"
      },
      "deposit(uint256,address)": {
        "notice": "Deposit collateral into the vault"
      },
      "disallowCollateral(address)": {
        "notice": "Disallows a previously supported collateral asset"
      },
      "exchangeCollateral(uint256,address,uint256,address)": {
        "notice": "Exchanges one type of collateral for another"
      },
      "exchangeMaxCollateral(uint256,address,address,uint256)": {
        "notice": "Exchanges collateral for the maximum possible amount of another collateral"
      },
      "isCollateralSupported(address)": {
        "notice": "Checks if a given asset is supported as collateral"
      },
      "listCollateral()": {
        "notice": "Returns a list of all supported collateral assets"
      },
      "maxExchangeAmount(uint256,address,address)": {
        "notice": "Calculates the maximum amount of destination collateral that can be received"
      },
      "setBaseCurrencyUnit(uint256)": {
        "notice": "Updates the base currency unit used for price calculations"
      },
      "setOracle(address)": {
        "notice": "Sets the oracle to use for collateral valuation"
      },
      "totalValue()": {
        "notice": "Calculates the total value of all collateral in the vault"
      },
      "withdraw(uint256,address)": {
        "notice": "Withdraws collateral from the vault"
      },
      "withdrawTo(address,uint256,address)": {
        "notice": "Withdraws collateral from the vault to a specific address"
      }
    },
    "notice": "Implementation of CollateralVault for only holding tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/dusd/CollateralHolderVault.sol:CollateralHolderVault",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 7223,
        "contract": "contracts/dusd/CollateralHolderVault.sol:CollateralHolderVault",
        "label": "oracle",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IPriceOracleGetter)10257"
      },
      {
        "astId": 7225,
        "contract": "contracts/dusd/CollateralHolderVault.sol:CollateralHolderVault",
        "label": "baseCurrencyUnit",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5418,
        "contract": "contracts/dusd/CollateralHolderVault.sol:CollateralHolderVault",
        "label": "_supportedCollaterals",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(AddressSet)2637_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPriceOracleGetter)10257": {
        "encoding": "inplace",
        "label": "contract IPriceOracleGetter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)2637_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 2636,
            "contract": "contracts/dusd/CollateralHolderVault.sol:CollateralHolderVault",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2322_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "contracts/dusd/CollateralHolderVault.sol:CollateralHolderVault",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "contracts/dusd/CollateralHolderVault.sol:CollateralHolderVault",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2322_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2317,
            "contract": "contracts/dusd/CollateralHolderVault.sol:CollateralHolderVault",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2321,
            "contract": "contracts/dusd/CollateralHolderVault.sol:CollateralHolderVault",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}